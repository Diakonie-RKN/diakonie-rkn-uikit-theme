!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define("uikit",e):(t=t||self).UIkit=e()}(this,function(){"use strict";var t=Object.prototype,i=t.hasOwnProperty;function u(t,e){return i.call(t,e)}var e={},n=/([a-z\d])([A-Z])/g;function d(t){return t in e||(e[t]=t.replace(n,"$1-$2").toLowerCase()),e[t]}var r=/-(\w)/g;function f(t){return t.replace(r,o)}function o(t,e){return e?e.toUpperCase():""}function g(t){return t.length?o(0,t.charAt(0))+t.slice(1):""}var s=String.prototype,a=s.startsWith||function(t){return 0===this.lastIndexOf(t,0)};function m(t,e){return a.call(t,e)}var h=s.endsWith||function(t){return this.substr(-t.length)===t};function c(t,e){return h.call(t,e)}function l(t,e){return!!~this.indexOf(t,e)}var p=Array.prototype,v=s.includes||l,w=p.includes||l;function x(t,e){return t&&(A(t)?v:w).call(t,e)}var y=p.findIndex||function(t){for(var e=arguments,i=0;i<this.length;i++)if(t.call(e[1],this[i],i,this))return i;return-1};function k(t,e){return y.call(t,e)}var C=Array.isArray;function b(t){return"function"==typeof t}function L(t){return null!==t&&"object"==typeof t}var $=t.toString;function M(t){return"[object Object]"===$.call(t)}function B(t){return L(t)&&t===t.window}function I(t){return L(t)&&9===t.nodeType}function S(t){return L(t)&&!!t.jquery}function E(t){return L(t)&&1<=t.nodeType}function T(t){return L(t)&&1===t.nodeType}function z(t){return $.call(t).match(/^\[object (NodeList|HTMLCollection)\]$/)}function _(t){return"boolean"==typeof t}function A(t){return"string"==typeof t}function N(t){return"number"==typeof t}function H(t){return N(t)||A(t)&&!isNaN(t-parseFloat(t))}function D(t){return!(C(t)?t.length:L(t)&&Object.keys(t).length)}function P(t){return void 0===t}function O(t){return _(t)?t:"true"===t||"1"===t||""===t||"false"!==t&&"0"!==t&&t}function j(t){var e=Number(t);return!isNaN(e)&&e}function Z(t){return parseFloat(t)||0}function F(t){return E(t)?t:z(t)||S(t)?t[0]:C(t)?F(t[0]):null}function V(t){return E(t)?[t]:z(t)?p.slice.call(t):C(t)?t.map(F).filter(Boolean):S(t)?t.toArray():[]}function W(t){return B(t)?t:(t=F(t))?(I(t)?t:t.ownerDocument).defaultView:window}function R(t){return C(t)?t:A(t)?t.split(/,(?![^(]*\))/).map(function(t){return H(t)?j(t):O(t.trim())}):[t]}function q(t){return t?c(t,"ms")?Z(t):1e3*Z(t):0}function U(t,i){return t===i||L(t)&&L(i)&&Object.keys(t).length===Object.keys(i).length&&J(t,function(t,e){return t===i[e]})}function Y(t,e,i){return t.replace(new RegExp(e+"|"+i,"g"),function(t){return t===e?i:e})}var X=Object.assign||function(t){for(var e=[],i=arguments.length-1;0<i--;)e[i]=arguments[i+1];t=Object(t);for(var n=0;n<e.length;n++){var r=e[n];if(null!==r)for(var o in r)u(r,o)&&(t[o]=r[o])}return t};function G(t){return t[t.length-1]}function J(t,e){for(var i in t)if(!1===e(t[i],i))return!1;return!0}function K(t,r){return t.sort(function(t,e){var i=t[r];void 0===i&&(i=0);var n=e[r];return void 0===n&&(n=0),n<i?1:i<n?-1:0})}function Q(t,i){var n=new Set;return t.filter(function(t){var e=t[i];return!n.has(e)&&(n.add(e)||!0)})}function tt(t,e,i){return void 0===e&&(e=0),void 0===i&&(i=1),Math.min(Math.max(j(t)||0,e),i)}function et(){}function it(t,e){return t.left<e.right&&t.right>e.left&&t.top<e.bottom&&t.bottom>e.top}function nt(t,e){return t.x<=e.right&&t.x>=e.left&&t.y<=e.bottom&&t.y>=e.top}var rt={ratio:function(t,e,i){var n,r="width"===e?"height":"width";return(n={})[r]=t[e]?Math.round(i*t[r]/t[e]):t[r],n[e]=i,n},contain:function(i,n){var r=this;return J(i=X({},i),function(t,e){return i=i[e]>n[e]?r.ratio(i,e,n[e]):i}),i},cover:function(i,n){var r=this;return J(i=this.contain(i,n),function(t,e){return i=i[e]<n[e]?r.ratio(i,e,n[e]):i}),i}};function ot(t,e,i){if(L(e))for(var n in e)ot(t,n,e[n]);else{if(P(i))return(t=F(t))&&t.getAttribute(e);V(t).forEach(function(t){b(i)&&(i=i.call(t,ot(t,e))),null===i?at(t,e):t.setAttribute(e,i)})}}function st(t,e){return V(t).some(function(t){return t.hasAttribute(e)})}function at(t,e){t=V(t),e.split(" ").forEach(function(e){return t.forEach(function(t){return t.hasAttribute(e)&&t.removeAttribute(e)})})}function ht(t,e){for(var i=0,n=[e,"data-"+e];i<n.length;i++)if(st(t,n[i]))return ot(t,n[i])}var ct="undefined"!=typeof window,lt=ct&&/msie|trident/i.test(window.navigator.userAgent),ut=ct&&"rtl"===ot(document.documentElement,"dir"),dt=ct&&"ontouchstart"in window,ft=ct&&window.PointerEvent,gt=ct&&(dt||window.DocumentTouch&&document instanceof DocumentTouch||navigator.maxTouchPoints),pt=ft?"pointerdown":dt?"touchstart":"mousedown",vt=ft?"pointermove":dt?"touchmove":"mousemove",wt=ft?"pointerup":dt?"touchend":"mouseup",mt=ft?"pointerenter":dt?"":"mouseenter",xt=ft?"pointerleave":dt?"":"mouseleave",yt=ft?"pointercancel":"touchcancel";function kt(t,e){return F(t)||Lt(t,bt(t,e))}function Ct(t,e){var i=V(t);return i.length&&i||$t(t,bt(t,e))}function bt(t,e){return void 0===e&&(e=document),St(t)||I(e)?e:e.ownerDocument}function Lt(t,e){return F(Mt(t,e,"querySelector"))}function $t(t,e){return V(Mt(t,e,"querySelectorAll"))}function Mt(t,s,e){if(void 0===s&&(s=document),!t||!A(t))return null;var a;St(t=t.replace(It,"$1 *"))&&(a=[],t=t.match(Et).map(function(t){return t.replace(/,$/,"").trim()}).map(function(t,e){var i=s;if("!"===t[0]){var n=t.substr(1).trim().split(" ");i=Nt(Ht(s),n[0]),t=n.slice(1).join(" ").trim()}if("-"===t[0]){var r=t.substr(1).trim().split(" "),o=(i||s).previousElementSibling;i=_t(o,t.substr(1))?o:null,t=r.slice(1).join(" ")}return i?(i.id||(i.id="uk-"+Date.now()+e,a.push(function(){return at(i,"id")})),"#"+Pt(i.id)+" "+t):null}).filter(Boolean).join(","),s=document);try{return s[e](t)}catch(t){return null}finally{a&&a.forEach(function(t){return t()})}}var Bt=/(^|[^\\],)\s*[!>+~-]/,It=/([!>+~-])(?=\s+[!>+~-]|\s*$)/g;function St(t){return A(t)&&t.match(Bt)}var Et=/.*?[^\\](?:,|$)/g;var Tt=ct?Element.prototype:{},zt=Tt.matches||Tt.webkitMatchesSelector||Tt.msMatchesSelector||et;function _t(t,e){return V(t).some(function(t){return zt.call(t,e)})}var At=Tt.closest||function(t){var e=this;do{if(_t(e,t))return e}while(e=Ht(e))};function Nt(t,e){return m(e,">")&&(e=e.slice(1)),T(t)?At.call(t,e):V(t).map(function(t){return Nt(t,e)}).filter(Boolean)}function Ht(t){return(t=F(t))&&T(t.parentNode)&&t.parentNode}var Dt=ct&&window.CSS&&CSS.escape||function(t){return t.replace(/([^\x7f-\uFFFF\w-])/g,function(t){return"\\"+t})};function Pt(t){return A(t)?Dt.call(null,t):""}var Ot={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,menuitem:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};function jt(t){return V(t).some(function(t){return Ot[t.tagName.toLowerCase()]})}function Zt(t){return V(t).some(function(t){return t.offsetWidth||t.offsetHeight||t.getClientRects().length})}var Ft="input,select,textarea,button";function Vt(t){return V(t).some(function(t){return _t(t,Ft)})}function Wt(t,e){return V(t).filter(function(t){return _t(t,e)})}function Rt(t,e){return A(e)?_t(t,e)||Nt(t,e):t===e||(I(e)?e.documentElement:F(e)).contains(F(t))}function qt(t,e){for(var i=[];t=Ht(t);)e&&!_t(t,e)||i.push(t);return i}function Ut(t,e){var i=(t=F(t))?V(t.children):[];return e?Wt(i,e):i}function Yt(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var i,n,r=Qt(t),o=r[0],s=r[1],a=r[2],h=r[3],c=r[4];return o=ne(o),1<h.length&&(i=h,h=function(t){return C(t.detail)?i.apply(void 0,[t].concat(t.detail)):i(t)}),c&&c.self&&(n=h,h=function(t){if(t.target===t.currentTarget||t.target===t.current)return n.call(null,t)}),a&&(h=function(t,n,r){var o=this;return function(i){t.forEach(function(t){var e=">"===n[0]?$t(n,t).reverse().filter(function(t){return Rt(i.target,t)})[0]:Nt(i.target,n);e&&(i.delegate=t,i.current=e,r.call(o,i))})}}(o,a,h)),c=te(c),s.split(" ").forEach(function(e){return o.forEach(function(t){return t.addEventListener(e,h,c)})}),function(){return Xt(o,s,h,c)}}function Xt(t,e,i,n){void 0===n&&(n=!1),n=te(n),t=ne(t),e.split(" ").forEach(function(e){return t.forEach(function(t){return t.removeEventListener(e,i,n)})})}function Gt(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var i=Qt(t),n=i[0],r=i[1],o=i[2],s=i[3],a=i[4],h=i[5],c=Yt(n,r,o,function(t){var e=!h||h(t);e&&(c(),s(t,e))},a);return c}function Jt(t,i,n){return ne(t).reduce(function(t,e){return t&&e.dispatchEvent(Kt(i,!0,!0,n))},!0)}function Kt(t,e,i,n){if(void 0===e&&(e=!0),void 0===i&&(i=!1),A(t)){var r=document.createEvent("CustomEvent");r.initCustomEvent(t,e,i,n),t=r}return t}function Qt(t){return b(t[2])&&t.splice(2,0,!1),t}function te(t){return t&&lt&&!_(t)?!!t.capture:t}function ee(t){return t&&"addEventListener"in t}function ie(t){return ee(t)?t:F(t)}function ne(t){return C(t)?t.map(ie).filter(Boolean):A(t)?$t(t):ee(t)?[t]:V(t)}function re(t){return"touch"===t.pointerType||!!t.touches}function oe(t){var e=t.touches,i=t.changedTouches,n=e&&e[0]||i&&i[0]||t;return{x:n.clientX,y:n.clientY}}function se(){var i=this;this.promise=new ae(function(t,e){i.reject=e,i.resolve=t})}var ae=ct&&window.Promise||le,he=2,ce=ct&&window.setImmediate||setTimeout;function le(t){this.state=he,this.value=void 0,this.deferred=[];var e=this;try{t(function(t){e.resolve(t)},function(t){e.reject(t)})}catch(t){e.reject(t)}}le.reject=function(i){return new le(function(t,e){e(i)})},le.resolve=function(i){return new le(function(t,e){t(i)})},le.all=function(s){return new le(function(i,t){var n=[],r=0;function e(e){return function(t){n[e]=t,(r+=1)===s.length&&i(n)}}0===s.length&&i(n);for(var o=0;o<s.length;o+=1)le.resolve(s[o]).then(e(o),t)})},le.race=function(n){return new le(function(t,e){for(var i=0;i<n.length;i+=1)le.resolve(n[i]).then(t,e)})};var ue=le.prototype;function de(s,a){return new ae(function(t,e){var i=X({data:null,method:"GET",headers:{},xhr:new XMLHttpRequest,beforeSend:et,responseType:""},a);i.beforeSend(i);var n=i.xhr;for(var r in i)if(r in n)try{n[r]=i[r]}catch(t){}for(var o in n.open(i.method.toUpperCase(),s),i.headers)n.setRequestHeader(o,i.headers[o]);Yt(n,"load",function(){0===n.status||200<=n.status&&n.status<300||304===n.status?t(n):e(X(Error(n.statusText),{xhr:n,status:n.status}))}),Yt(n,"error",function(){return e(X(Error("Network Error"),{xhr:n}))}),Yt(n,"timeout",function(){return e(X(Error("Network Timeout"),{xhr:n}))}),n.send(i.data)})}function fe(n,r,o){return new ae(function(t,e){var i=new Image;i.onerror=e,i.onload=function(){return t(i)},o&&(i.sizes=o),r&&(i.srcset=r),i.src=n})}function ge(t){if("loading"===document.readyState)var e=Yt(document,"DOMContentLoaded",function(){e(),t()});else t()}function pe(t,e){return e?V(t).indexOf(F(e)):Ut(Ht(t)).indexOf(t)}function ve(t,e,i,n){void 0===i&&(i=0),void 0===n&&(n=!1);var r=(e=V(e)).length;return t=H(t)?j(t):"next"===t?i+1:"previous"===t?i-1:pe(e,t),n?tt(t,0,r-1):(t%=r)<0?t+r:t}function we(t){return(t=Te(t)).innerHTML="",t}function me(t,e){return t=Te(t),P(e)?t.innerHTML:xe(t.hasChildNodes()?we(t):t,e)}function xe(e,t){return e=Te(e),Ce(t,function(t){return e.appendChild(t)})}function ye(e,t){return e=Te(e),Ce(t,function(t){return e.parentNode.insertBefore(t,e)})}function ke(e,t){return e=Te(e),Ce(t,function(t){return e.nextSibling?ye(e.nextSibling,t):xe(e.parentNode,t)})}function Ce(t,e){return(t=A(t)?Se(t):t)?"length"in t?V(t).map(e):e(t):null}function be(t){V(t).map(function(t){return t.parentNode&&t.parentNode.removeChild(t)})}function Le(t,e){for(e=F(ye(t,e));e.firstChild;)e=e.firstChild;return xe(e,t),e}function $e(t,e){return V(V(t).map(function(t){return t.hasChildNodes?Le(V(t.childNodes),e):xe(t,e)}))}function Me(t){V(t).map(Ht).filter(function(t,e,i){return i.indexOf(t)===e}).forEach(function(t){ye(t,t.childNodes),be(t)})}ue.resolve=function(t){var e=this;if(e.state===he){if(t===e)throw new TypeError("Promise settled with itself.");var i=!1;try{var n=t&&t.then;if(null!==t&&L(t)&&b(n))return void n.call(t,function(t){i||e.resolve(t),i=!0},function(t){i||e.reject(t),i=!0})}catch(t){return void(i||e.reject(t))}e.state=0,e.value=t,e.notify()}},ue.reject=function(t){var e=this;if(e.state===he){if(t===e)throw new TypeError("Promise settled with itself.");e.state=1,e.value=t,e.notify()}},ue.notify=function(){var o=this;ce(function(){if(o.state!==he)for(;o.deferred.length;){var t=o.deferred.shift(),e=t[0],i=t[1],n=t[2],r=t[3];try{0===o.state?b(e)?n(e.call(void 0,o.value)):n(o.value):1===o.state&&(b(i)?n(i.call(void 0,o.value)):r(o.value))}catch(t){r(t)}}})},ue.then=function(i,n){var r=this;return new le(function(t,e){r.deferred.push([i,n,t,e]),r.notify()})},ue.catch=function(t){return this.then(void 0,t)};var Be=/^\s*<(\w+|!)[^>]*>/,Ie=/^<(\w+)\s*\/?>(?:<\/\1>)?$/;function Se(t){var e=Ie.exec(t);if(e)return document.createElement(e[1]);var i=document.createElement("div");return Be.test(t)?i.insertAdjacentHTML("beforeend",t.trim()):i.textContent=t,1<i.childNodes.length?V(i.childNodes):i.firstChild}function Ee(t,e){if(T(t))for(e(t),t=t.firstElementChild;t;){var i=t.nextElementSibling;Ee(t,e),t=i}}function Te(t,e){return A(t)?_e(t)?F(Se(t)):Lt(t,e):F(t)}function ze(t,e){return A(t)?_e(t)?V(Se(t)):$t(t,e):V(t)}function _e(t){return"<"===t[0]||t.match(/^\s*</)}function Ae(t){for(var e=[],i=arguments.length-1;0<i--;)e[i]=arguments[i+1];je(t,e,"add")}function Ne(t){for(var e=[],i=arguments.length-1;0<i--;)e[i]=arguments[i+1];je(t,e,"remove")}function He(t,e){ot(t,"class",function(t){return(t||"").replace(new RegExp("\\b"+e+"\\b","g"),"")})}function De(t){for(var e=[],i=arguments.length-1;0<i--;)e[i]=arguments[i+1];e[0]&&Ne(t,e[0]),e[1]&&Ae(t,e[1])}function Pe(t,e){return e&&V(t).some(function(t){return t.classList.contains(e.split(" ")[0])})}function Oe(t){for(var n=[],e=arguments.length-1;0<e--;)n[e]=arguments[e+1];if(n.length){var r=A(G(n=Ze(n)))?[]:n.pop();n=n.filter(Boolean),V(t).forEach(function(t){for(var e=t.classList,i=0;i<n.length;i++)Fe.Force?e.toggle.apply(e,[n[i]].concat(r)):e[(P(r)?!e.contains(n[i]):r)?"add":"remove"](n[i])})}}function je(t,i,n){(i=Ze(i).filter(Boolean)).length&&V(t).forEach(function(t){var e=t.classList;Fe.Multiple?e[n].apply(e,i):i.forEach(function(t){return e[n](t)})})}function Ze(t){return t.reduce(function(t,e){return t.concat.call(t,A(e)&&x(e," ")?e.trim().split(" "):e)},[])}var Fe={get Multiple(){return this.get("_multiple")},get Force(){return this.get("_force")},get:function(t){if(!u(this,t)){var e=document.createElement("_").classList;e.add("a","b"),e.toggle("c",!1),this._multiple=e.contains("b"),this._force=!e.contains("c")}return this[t]}},Ve={"animation-iteration-count":!0,"column-count":!0,"fill-opacity":!0,"flex-grow":!0,"flex-shrink":!0,"font-weight":!0,"line-height":!0,opacity:!0,order:!0,orphans:!0,"stroke-dasharray":!0,"stroke-dashoffset":!0,widows:!0,"z-index":!0,zoom:!0};function We(t,e,r){return V(t).map(function(i){if(A(e)){if(e=Ge(e),P(r))return qe(i,e);r||N(r)?i.style[e]=H(r)&&!Ve[e]?r+"px":r:i.style.removeProperty(e)}else{if(C(e)){var n=Re(i);return e.reduce(function(t,e){return t[e]=n[Ge(e)],t},{})}L(e)&&J(e,function(t,e){return We(i,e,t)})}return i})[0]}function Re(t,e){return(t=F(t)).ownerDocument.defaultView.getComputedStyle(t,e)}function qe(t,e,i){return Re(t,i)[e]}var Ue={};function Ye(t){var e=document.documentElement;if(!lt)return Re(e).getPropertyValue("--uk-"+t);if(!(t in Ue)){var i=xe(e,document.createElement("div"));Ae(i,"uk-"+t),Ue[t]=qe(i,"content",":before").replace(/^["'](.*)["']$/,"$1"),be(i)}return Ue[t]}var Xe={};function Ge(t){var e=Xe[t];return e=e||(Xe[t]=function(t){t=d(t);var e=document.documentElement.style;if(t in e)return t;var i,n=Je.length;for(;n--;)if((i="-"+Je[n]+"-"+t)in e)return i}(t)||t)}var Je=["webkit","moz","ms"];function Ke(t,s,a,h){return void 0===a&&(a=400),void 0===h&&(h="linear"),ae.all(V(t).map(function(o){return new ae(function(i,n){for(var t in s){var e=We(o,t);""===e&&We(o,t,e)}var r=setTimeout(function(){return Jt(o,"transitionend")},a);Gt(o,"transitionend transitioncanceled",function(t){var e=t.type;clearTimeout(r),Ne(o,"uk-transition"),We(o,{transitionProperty:"",transitionDuration:"",transitionTimingFunction:""}),("transitioncanceled"===e?n:i)()},{self:!0}),Ae(o,"uk-transition"),We(o,X({transitionProperty:Object.keys(s).map(Ge).join(","),transitionDuration:a+"ms",transitionTimingFunction:h},s))})}))}var Qe={start:Ke,stop:function(t){return Jt(t,"transitionend"),ae.resolve()},cancel:function(t){Jt(t,"transitioncanceled")},inProgress:function(t){return Pe(t,"uk-transition")}},ti="uk-animation-";function ei(t,r,o,s,a){return void 0===o&&(o=200),ae.all(V(t).map(function(t){return new ae(function(e,i){function n(){We(t,"animationDuration",""),He(t,ti+"\\S*")}n(),Gt(t,"animationend animationcancel",function(t){("animationcancel"===t.type?i:e)(),n()},{self:!0}),We(t,"animationDuration",o+"ms"),Ae(t,r,ti+(a?"leave":"enter")),m(r,ti)&&Ae(t,s&&"uk-transform-origin-"+s,a&&ti+"reverse")})}))}var ii=new RegExp(ti+"(enter|leave)"),ni={in:function(t,e,i,n){return ei(t,e,i,n,!1)},out:function(t,e,i,n){return ei(t,e,i,n,!0)},inProgress:function(t){return ii.test(ot(t,"class"))},cancel:function(t){Jt(t,"animationcancel")}},ri={width:["x","left","right"],height:["y","top","bottom"]};function oi(t,e,l,u,d,i,n,r){l=pi(l),u=pi(u);var f={element:l,target:u};if(!t||!e)return f;var g=ai(t),p=ai(e),v=p;if(gi(v,l,g,-1),gi(v,u,p,1),d=vi(d,g.width,g.height),i=vi(i,p.width,p.height),d.x+=i.x,d.y+=i.y,v.left+=d.x,v.top+=d.y,n){var o=[ai(W(t))];r&&o.unshift(ai(r)),J(ri,function(t,s){var a=t[0],h=t[1],c=t[2];!0!==n&&!x(n,a)||o.some(function(n){var t=l[a]===h?-g[s]:l[a]===c?g[s]:0,e=u[a]===h?p[s]:u[a]===c?-p[s]:0;if(v[h]<n[h]||v[h]+g[s]>n[c]){var i=g[s]/2,r="center"===u[a]?-p[s]/2:0;return"center"===l[a]&&(o(i,r)||o(-i,-r))||o(t,e)}function o(e,t){var i=v[h]+e+t-2*d[a];if(i>=n[h]&&i+g[s]<=n[c])return v[h]=i,["element","target"].forEach(function(t){f[t][a]=e?f[t][a]===ri[s][1]?ri[s][2]:ri[s][1]:f[t][a]}),!0}})})}return si(t,v),f}function si(i,n){if(!n)return ai(i);var r=si(i),o=We(i,"position");["left","top"].forEach(function(t){if(t in n){var e=We(i,t);We(i,t,n[t]-r[t]+Z("absolute"===o&&"auto"===e?hi(i)[t]:e))}})}function ai(t){if(!t)return{};var e,i,n=W(t),r=n.pageYOffset,o=n.pageXOffset;if(B(t)){var s=t.innerHeight,a=t.innerWidth;return{top:r,left:o,height:s,width:a,bottom:r+s,right:o+a}}Zt(t)||"none"!==We(t,"display")||(e=ot(t,"style"),i=ot(t,"hidden"),ot(t,{style:(e||"")+";display:block !important;",hidden:null}));var h=(t=F(t)).getBoundingClientRect();return P(e)||ot(t,{style:e,hidden:i}),{height:h.height,width:h.width,top:h.top+r,left:h.left+o,bottom:h.bottom+r,right:h.right+o}}function hi(t,e){e=e||F(t).offsetParent||W(t).document.documentElement;var i=si(t),n=si(e);return{top:i.top-n.top-Z(We(e,"borderTopWidth")),left:i.left-n.left-Z(We(e,"borderLeftWidth"))}}function ci(t){var e=[0,0];t=F(t);do{if(e[0]+=t.offsetTop,e[1]+=t.offsetLeft,"fixed"===We(t,"position")){var i=W(t);return e[0]+=i.pageYOffset,e[1]+=i.pageXOffset,e}}while(t=t.offsetParent);return e}var li=di("height"),ui=di("width");function di(n){var r=g(n);return function(t,e){if(P(e)){if(B(t))return t["inner"+r];if(I(t)){var i=t.documentElement;return Math.max(i["offset"+r],i["scroll"+r])}return(e="auto"===(e=We(t=F(t),n))?t["offset"+r]:Z(e)||0)-fi(t,n)}We(t,n,e||0===e?+e+fi(t,n)+"px":"")}}function fi(i,t,e){return void 0===e&&(e="border-box"),We(i,"boxSizing")===e?ri[t].slice(1).map(g).reduce(function(t,e){return t+Z(We(i,"padding"+e))+Z(We(i,"border"+e+"Width"))},0):0}function gi(o,s,a,h){J(ri,function(t,e){var i=t[0],n=t[1],r=t[2];s[i]===r?o[n]+=a[e]*h:"center"===s[i]&&(o[n]+=a[e]*h/2)})}function pi(t){var e=/left|center|right/,i=/top|center|bottom/;return 1===(t=(t||"").split(" ")).length&&(t=e.test(t[0])?t.concat("center"):i.test(t[0])?["center"].concat(t):["center","center"]),{x:e.test(t[0])?t[0]:"center",y:i.test(t[1])?t[1]:"center"}}function vi(t,e,i){var n=(t||"").split(" "),r=n[0],o=n[1];return{x:r?Z(r)*(c(r,"%")?e/100:1):0,y:o?Z(o)*(c(o,"%")?i/100:1):0}}function wi(t){switch(t){case"left":return"right";case"right":return"left";case"top":return"bottom";case"bottom":return"top";default:return t}}function mi(t,e,i){return void 0===e&&(e="width"),void 0===i&&(i=window),H(t)?+t:c(t,"vh")?xi(li(W(i)),t):c(t,"vw")?xi(ui(W(i)),t):c(t,"%")?xi(ai(i)[e],t):Z(t)}function xi(t,e){return t*Z(e)/100}var yi={reads:[],writes:[],read:function(t){return this.reads.push(t),bi(),t},write:function(t){return this.writes.push(t),bi(),t},clear:function(t){return $i(this.reads,t)||$i(this.writes,t)},flush:ki};function ki(t){void 0===t&&(t=1),Li(yi.reads),Li(yi.writes.splice(0,yi.writes.length)),yi.scheduled=!1,(yi.reads.length||yi.writes.length)&&bi(t+1)}var Ci=5;function bi(t){if(!yi.scheduled){if(yi.scheduled=!0,Ci<t)throw new Error("Maximum recursion limit reached.");t?ae.resolve().then(function(){return ki(t)}):requestAnimationFrame(function(){return ki()})}}function Li(t){for(var e;e=t.shift();)e()}function $i(t,e){var i=t.indexOf(e);return!!~i&&!!t.splice(i,1)}function Mi(){}Mi.prototype={positions:[],init:function(){var e,t=this;this.positions=[],this.unbind=Yt(document,"mousemove",function(t){return e=oe(t)}),this.interval=setInterval(function(){e&&(t.positions.push(e),5<t.positions.length&&t.positions.shift())},50)},cancel:function(){this.unbind&&this.unbind(),this.interval&&clearInterval(this.interval)},movesTo:function(t){if(this.positions.length<2)return!1;var i=t.getBoundingClientRect(),e=i.left,n=i.right,r=i.top,o=i.bottom,s=this.positions[0],a=G(this.positions),h=[s,a];return!nt(a,i)&&[[{x:e,y:r},{x:n,y:o}],[{x:e,y:o},{x:n,y:r}]].some(function(t){var e=function(t,e){var i=t[0],n=i.x,r=i.y,o=t[1],s=o.x,a=o.y,h=e[0],c=h.x,l=h.y,u=e[1],d=u.x,f=u.y,g=(f-l)*(s-n)-(d-c)*(a-r);if(0==g)return!1;var p=((d-c)*(r-l)-(f-l)*(n-c))/g;if(p<0)return!1;return{x:n+p*(s-n),y:r+p*(a-r)}}(h,t);return e&&nt(e,i)})}};var Bi={};function Ii(t,e,i){return Bi.computed(b(t)?t.call(i,i):t,b(e)?e.call(i,i):e)}function Si(t,e){return t=t&&!C(t)?[t]:t,e?t?t.concat(e):C(e)?e:[e]:t}function Ei(e,i,n){var r={};if(b(i)&&(i=i.options),i.extends&&(e=Ei(e,i.extends,n)),i.mixins)for(var t=0,o=i.mixins.length;t<o;t++)e=Ei(e,i.mixins[t],n);for(var s in e)h(s);for(var a in i)u(e,a)||h(a);function h(t){r[t]=(Bi[t]||function(t,e){return P(e)?t:e})(e[t],i[t],n)}return r}function Ti(t,e){var i;void 0===e&&(e=[]);try{return t?m(t,"{")?JSON.parse(t):e.length&&!x(t,":")?((i={})[e[0]]=t,i):t.split(";").reduce(function(t,e){var i=e.split(/:(.*)/),n=i[0],r=i[1];return n&&!P(r)&&(t[n.trim()]=r.trim()),t},{}):{}}catch(t){return{}}}Bi.events=Bi.created=Bi.beforeConnect=Bi.connected=Bi.beforeDisconnect=Bi.disconnected=Bi.destroy=Si,Bi.args=function(t,e){return!1!==e&&Si(e||t)},Bi.update=function(t,e){return K(Si(t,b(e)?{read:e}:e),"order")},Bi.props=function(t,e){return C(e)&&(e=e.reduce(function(t,e){return t[e]=String,t},{})),Bi.methods(t,e)},Bi.computed=Bi.methods=function(t,e){return e?t?X({},t,e):e:t},Bi.data=function(e,i,t){return t?Ii(e,i,t):i?e?function(t){return Ii(e,i,t)}:i:e};function zi(t){this.id=++_i,this.el=F(t)}var _i=0;function Ai(t,e){try{t.contentWindow.postMessage(JSON.stringify(X({event:"command"},e)),"*")}catch(t){}}function Ni(h,c,l){if(void 0===c&&(c=0),void 0===l&&(l=0),!Zt(h))return!1;var u=Zi(h);return u.every(function(t,e){var i=si(u[e+1]||h),n=si(ji(t)),r=n.top,o=n.left,s=n.bottom,a=n.right;return it(i,{top:r-c,left:o-l,bottom:s+c,right:a+l})})}function Hi(t,e){(t=(B(t)||I(t)?Fi:F)(t)).scrollTop=e}function Di(t,e){void 0===e&&(e={});var l=e.offset;if(void 0===l&&(l=0),Zt(t)){for(var u=Zi(t).concat(t),i=ae.resolve(),n=function(c){i=i.then(function(){return new ae(function(i){var t,n=u[c],e=u[c+1],r=n.scrollTop,o=Math.ceil(hi(e,ji(n)).top-l),s=(t=Math.abs(o),40*Math.pow(t,.375)),a=Date.now(),h=function(){var t,e=(t=tt((Date.now()-a)/s),.5*(1-Math.cos(Math.PI*t)));Hi(n,r+o*e),1!=e?requestAnimationFrame(h):i()};h()})})},r=0;r<u.length-1;r++)n(r);return i}}function Pi(t,e){if(void 0===e&&(e=0),!Zt(t))return 0;var i=G(Oi(t)),n=i.scrollHeight,r=i.scrollTop,o=si(ji(i)).height,s=ci(t)[0]-r-ci(i)[0],a=Math.min(o,s+r);return tt(-1*(s-a)/Math.min(si(t).height+e+a,n-(s+r),n-o))}function Oi(t,e){void 0===e&&(e=/auto|scroll/);var i=Fi(t),n=qt(t).filter(function(t){return t===i||e.test(We(t,"overflow"))&&t.scrollHeight>Math.round(si(t).height)}).reverse();return n.length?n:[i]}function ji(t){return t===Fi(t)?window:t}function Zi(t){return Oi(t,/auto|scroll|hidden/)}function Fi(t){var e=W(t).document;return e.scrollingElement||e.documentElement}zi.prototype.isVideo=function(){return this.isYoutube()||this.isVimeo()||this.isHTML5()},zi.prototype.isHTML5=function(){return"VIDEO"===this.el.tagName},zi.prototype.isIFrame=function(){return"IFRAME"===this.el.tagName},zi.prototype.isYoutube=function(){return this.isIFrame()&&!!this.el.src.match(/\/\/.*?youtube(-nocookie)?\.[a-z]+\/(watch\?v=[^&\s]+|embed)|youtu\.be\/.*/)},zi.prototype.isVimeo=function(){return this.isIFrame()&&!!this.el.src.match(/vimeo\.com\/video\/.*/)},zi.prototype.enableApi=function(){var e=this;if(this.ready)return this.ready;var i,r=this.isYoutube(),o=this.isVimeo();return r||o?this.ready=new ae(function(t){var n;Gt(e.el,"load",function(){if(r){var t=function(){return Ai(e.el,{event:"listening",id:e.id})};i=setInterval(t,100),t()}}),n=function(t){return r&&t.id===e.id&&"onReady"===t.event||o&&Number(t.player_id)===e.id},new ae(function(i){return Gt(window,"message",function(t,e){return i(e)},!1,function(t){var e=t.data;if(e&&A(e)){try{e=JSON.parse(e)}catch(t){return}return e&&n(e)}})}).then(function(){t(),i&&clearInterval(i)}),ot(e.el,"src",e.el.src+(x(e.el.src,"?")?"&":"?")+(r?"enablejsapi=1":"api=1&player_id="+e.id))}):ae.resolve()},zi.prototype.play=function(){var t=this;if(this.isVideo())if(this.isIFrame())this.enableApi().then(function(){return Ai(t.el,{func:"playVideo",method:"play"})});else if(this.isHTML5())try{var e=this.el.play();e&&e.catch(et)}catch(t){}},zi.prototype.pause=function(){var t=this;this.isVideo()&&(this.isIFrame()?this.enableApi().then(function(){return Ai(t.el,{func:"pauseVideo",method:"pause"})}):this.isHTML5()&&this.el.pause())},zi.prototype.mute=function(){var t=this;this.isVideo()&&(this.isIFrame()?this.enableApi().then(function(){return Ai(t.el,{func:"mute",method:"setVolume",value:0})}):this.isHTML5()&&(this.el.muted=!0,ot(this.el,"muted","")))};var Vi=ct&&window.IntersectionObserver||function(){function t(e,t){var i=this;void 0===t&&(t={});var n=t.rootMargin;void 0===n&&(n="0 0"),this.targets=[];var r,o=(n||"0 0").split(" ").map(Z),s=o[0],a=o[1];this.offsetTop=s,this.offsetLeft=a,this.apply=function(){r=r||requestAnimationFrame(function(){return setTimeout(function(){var t=i.takeRecords();t.length&&e(t,i),r=!1})})},this.off=Yt(window,"scroll resize load",this.apply,{passive:!0,capture:!0})}return t.prototype.takeRecords=function(){var i=this;return this.targets.filter(function(t){var e=Ni(t.target,i.offsetTop,i.offsetLeft);if(null===t.isIntersecting||e^t.isIntersecting)return t.isIntersecting=e,!0})},t.prototype.observe=function(t){this.targets.push({target:t,isIntersecting:null}),this.apply()},t.prototype.disconnect=function(){this.targets=[],this.off()},t}();function Wi(t){return!(!m(t,"uk-")&&!m(t,"data-uk-"))&&f(t.replace("data-uk-","").replace("uk-",""))}function Ri(t){this._init(t)}var qi,Ui,Yi,Xi,Gi,Ji,Ki,Qi,tn;function en(t,e){if(t)for(var i in t)t[i]._connected&&t[i]._callUpdate(e)}function nn(t,e){var i={},n=t.args;void 0===n&&(n=[]);var r=t.props;void 0===r&&(r={});var o=t.el;if(!r)return i;for(var s in r){var a=d(s),h=ht(o,a);P(h)||(h=r[s]===Boolean&&""===h||an(r[s],h),("target"!==a||h&&!m(h,"_"))&&(i[s]=h))}var c=Ti(ht(o,e),n);for(var l in c){var u=f(l);void 0!==r[u]&&(i[u]=an(r[u],c[l]))}return i}function rn(n,r,o){Object.defineProperty(n,r,{enumerable:!0,get:function(){var t=n._computeds,e=n.$props,i=n.$el;return u(t,r)||(t[r]=(o.get||o).call(n,e,i)),t[r]},set:function(t){var e=n._computeds;e[r]=o.set?o.set.call(n,t):t,P(e[r])&&delete e[r]}})}function on(e,i,n){M(i)||(i={name:n,handler:i});var t=i.name,r=i.el,o=i.handler,s=i.capture,a=i.passive,h=i.delegate,c=i.filter,l=i.self;r=b(r)?r.call(e):r||e.$el,C(r)?r.forEach(function(t){return on(e,X({},i,{el:t}),n)}):!r||c&&!c.call(e)||e._events.push(Yt(r,t,h?A(h)?h:h.call(e):null,A(o)?e[o]:o.bind(e),{passive:a,capture:s,self:l}))}function sn(t,e){return t.every(function(t){return!t||!u(t,e)})}function an(t,e){return t===Boolean?O(e):t===Number?j(e):"list"===t?R(e):t?t(e):e}Ri.util=Object.freeze({__proto__:null,ajax:de,getImage:fe,transition:Ke,Transition:Qe,animate:ei,Animation:ni,attr:ot,hasAttr:st,removeAttr:at,data:ht,addClass:Ae,removeClass:Ne,removeClasses:He,replaceClass:De,hasClass:Pe,toggleClass:Oe,positionAt:oi,offset:si,position:hi,offsetPosition:ci,height:li,width:ui,boxModelAdjust:fi,flipPosition:wi,toPx:mi,ready:ge,index:pe,getIndex:ve,empty:we,html:me,prepend:function(e,t){return(e=Te(e)).hasChildNodes()?Ce(t,function(t){return e.insertBefore(t,e.firstChild)}):xe(e,t)},append:xe,before:ye,after:ke,remove:be,wrapAll:Le,wrapInner:$e,unwrap:Me,fragment:Se,apply:Ee,$:Te,$$:ze,inBrowser:ct,isIE:lt,isRtl:ut,hasTouch:gt,pointerDown:pt,pointerMove:vt,pointerUp:wt,pointerEnter:mt,pointerLeave:xt,pointerCancel:yt,on:Yt,off:Xt,once:Gt,trigger:Jt,createEvent:Kt,toEventTargets:ne,isTouch:re,getEventPos:oe,fastdom:yi,isVoidElement:jt,isVisible:Zt,selInput:Ft,isInput:Vt,filter:Wt,within:Rt,parents:qt,children:Ut,hasOwn:u,hyphenate:d,camelize:f,ucfirst:g,startsWith:m,endsWith:c,includes:x,findIndex:k,isArray:C,isFunction:b,isObject:L,isPlainObject:M,isWindow:B,isDocument:I,isJQuery:S,isNode:E,isElement:T,isNodeCollection:z,isBoolean:_,isString:A,isNumber:N,isNumeric:H,isEmpty:D,isUndefined:P,toBoolean:O,toNumber:j,toFloat:Z,toNode:F,toNodes:V,toWindow:W,toList:R,toMs:q,isEqual:U,swap:Y,assign:X,last:G,each:J,sortBy:K,uniqueBy:Q,clamp:tt,noop:et,intersectRect:it,pointInRect:nt,Dimensions:rt,MouseTracker:Mi,mergeOptions:Ei,parseOptions:Ti,Player:zi,Promise:ae,Deferred:se,IntersectionObserver:Vi,query:kt,queryAll:Ct,find:Lt,findAll:$t,matches:_t,closest:Nt,parent:Ht,escape:Pt,css:We,getStyles:Re,getStyle:qe,getCssVar:Ye,propName:Ge,isInView:Ni,scrollTop:Hi,scrollIntoView:Di,scrolledOver:Pi,scrollParents:Oi,getViewport:ji}),Ri.data="__uikit__",Ri.prefix="uk-",Ri.options={},Ri.version="3.4.6",Yi=(qi=Ri).data,qi.use=function(t){if(!t.installed)return t.call(null,this),t.installed=!0,this},qi.mixin=function(t,e){(e=(A(e)?qi.component(e):e)||this).options=Ei(e.options,t)},qi.extend=function(t){t=t||{};function e(t){this._init(t)}return((e.prototype=Object.create(this.prototype)).constructor=e).options=Ei(this.options,t),e.super=this,e.extend=this.extend,e},qi.update=function(t,e){qt(t=t?F(t):document.body).reverse().forEach(function(t){return en(t[Yi],e)}),Ee(t,function(t){return en(t[Yi],e)})},Object.defineProperty(qi,"container",{get:function(){return Ui||document.body},set:function(t){Ui=Te(t)}}),(Xi=Ri).prototype._callHook=function(t){var e=this,i=this.$options[t];i&&i.forEach(function(t){return t.call(e)})},Xi.prototype._callConnected=function(){this._connected||(this._data={},this._computeds={},this._frames={reads:{},writes:{}},this._initProps(),this._callHook("beforeConnect"),this._connected=!0,this._initEvents(),this._initObserver(),this._callHook("connected"),this._callUpdate())},Xi.prototype._callDisconnected=function(){this._connected&&(this._callHook("beforeDisconnect"),this._observer&&(this._observer.disconnect(),this._observer=null),this._unbindEvents(),this._callHook("disconnected"),this._connected=!1)},Xi.prototype._callUpdate=function(t){var o=this;void 0===t&&(t="update");var s=t.type||t;x(["update","resize"],s)&&this._callWatches();var e=this.$options.update,i=this._frames,a=i.reads,h=i.writes;e&&e.forEach(function(t,e){var i=t.read,n=t.write,r=t.events;"update"!==s&&!x(r,s)||(i&&!x(yi.reads,a[e])&&(a[e]=yi.read(function(){var t=o._connected&&i.call(o,o._data,s);!1===t&&n?yi.clear(h[e]):M(t)&&X(o._data,t)})),n&&!x(yi.writes,h[e])&&(h[e]=yi.write(function(){return o._connected&&n.call(o,o._data,s)})))})},Xi.prototype._callWatches=function(){var h=this,c=this._frames;if(!c._watch){var l=!u(c,"_watch");c._watch=yi.read(function(){if(h._connected){var t=h.$options.computed,e=h._computeds;for(var i in t){var n=u(e,i),r=e[i];delete e[i];var o=t[i],s=o.watch,a=o.immediate;s&&(l&&a||n&&!U(r,h[i]))&&s.call(h,h[i],r)}c._watch=null}})}},Ji=0,(Gi=Ri).prototype._init=function(t){(t=t||{}).data=function(t,e){var i=t.data,n=(t.el,e.args),r=e.props;void 0===r&&(r={});if(i=C(i)?D(n)?void 0:i.slice(0,n.length).reduce(function(t,e,i){return M(e)?X(t,e):t[n[i]]=e,t},{}):i)for(var o in i)P(i[o])?delete i[o]:i[o]=r[o]?an(r[o],i[o]):i[o];return i}(t,this.constructor.options),this.$options=Ei(this.constructor.options,t,this),this.$el=null,this.$props={},this._uid=Ji++,this._initData(),this._initMethods(),this._initComputeds(),this._callHook("created"),t.el&&this.$mount(t.el)},Gi.prototype._initData=function(){var t=this.$options.data;for(var e in void 0===t&&(t={}),t)this.$props[e]=this[e]=t[e]},Gi.prototype._initMethods=function(){var t=this.$options.methods;if(t)for(var e in t)this[e]=t[e].bind(this)},Gi.prototype._initComputeds=function(){var t=this.$options.computed;if(this._computeds={},t)for(var e in t)rn(this,e,t[e])},Gi.prototype._initProps=function(t){var e;for(e in t=t||nn(this.$options,this.$name))P(t[e])||(this.$props[e]=t[e]);var i=[this.$options.computed,this.$options.methods];for(e in this.$props)e in t&&sn(i,e)&&(this[e]=this.$props[e])},Gi.prototype._initEvents=function(){var i=this;this._events=[];var t=this.$options.events;t&&t.forEach(function(t){if(u(t,"handler"))on(i,t);else for(var e in t)on(i,t[e],e)})},Gi.prototype._unbindEvents=function(){this._events.forEach(function(t){return t()}),delete this._events},Gi.prototype._initObserver=function(){var n=this,t=this.$options,r=t.attrs,e=t.props,i=t.el;if(!this._observer&&e&&!1!==r){r=C(r)?r:Object.keys(e),this._observer=new MutationObserver(function(t){var i=nn(n.$options,n.$name);t.some(function(t){var e=t.attributeName.replace("data-","");return(e===n.$name?r:[f(e)]).some(function(t){return!P(i[t])&&i[t]!==n.$props[t]})})&&n.$reset()});var o=r.map(function(t){return d(t)}).concat(this.$name);this._observer.observe(i,{attributes:!0,attributeFilter:o.concat(o.map(function(t){return"data-"+t}))})}},Qi=(Ki=Ri).data,tn={},Ki.component=function(s,t){var e=d(s);if(s=f(e),!t)return M(tn[s])&&(tn[s]=Ki.extend(tn[s])),tn[s];Ki[s]=function(t,i){for(var e=arguments.length,n=Array(e);e--;)n[e]=arguments[e];var r=Ki.component(s);return r.options.functional?new r({data:M(t)?t:[].concat(n)}):t?ze(t).map(o)[0]:o(t);function o(t){var e=Ki.getComponent(t,s);if(e){if(!i)return e;e.$destroy()}return new r({el:t,data:i})}};var i=M(t)?X({},t):t.options;return i.name=s,i.install&&i.install(Ki,i,s),Ki._initialized&&!i.functional&&yi.read(function(){return Ki[s]("[uk-"+e+"],[data-uk-"+e+"]")}),tn[s]=M(t)?i:t},Ki.getComponents=function(t){return t&&t[Qi]||{}},Ki.getComponent=function(t,e){return Ki.getComponents(t)[e]},Ki.connect=function(t){if(t[Qi])for(var e in t[Qi])t[Qi][e]._callConnected();for(var i=0;i<t.attributes.length;i++){var n=Wi(t.attributes[i].name);n&&n in tn&&Ki[n](t)}},Ki.disconnect=function(t){for(var e in t[Qi])t[Qi][e]._callDisconnected()},function(n){var r=n.data;n.prototype.$create=function(t,e,i){return n[t](e,i)},n.prototype.$mount=function(t){var e=this.$options.name;t[r]||(t[r]={}),t[r][e]||((t[r][e]=this).$el=this.$options.el=this.$options.el||t,Rt(t,document)&&this._callConnected())},n.prototype.$reset=function(){this._callDisconnected(),this._callConnected()},n.prototype.$destroy=function(t){void 0===t&&(t=!1);var e=this.$options,i=e.el,n=e.name;i&&this._callDisconnected(),this._callHook("destroy"),i&&i[r]&&(delete i[r][n],D(i[r])||delete i[r],t&&be(this.$el))},n.prototype.$emit=function(t){this._callUpdate(t)},n.prototype.$update=function(t,e){void 0===t&&(t=this.$el),n.update(t,e)},n.prototype.$getComponent=n.getComponent;var e={};Object.defineProperties(n.prototype,{$container:Object.getOwnPropertyDescriptor(n,"container"),$name:{get:function(){var t=this.$options.name;return e[t]||(e[t]=n.prefix+d(t)),e[t]}}})}(Ri);var hn={connected:function(){Pe(this.$el,this.$name)||Ae(this.$el,this.$name)}},cn={props:{cls:Boolean,animation:"list",duration:Number,origin:String,transition:String},data:{cls:!1,animation:[!1],duration:200,origin:!1,transition:"linear",initProps:{overflow:"",height:"",paddingTop:"",paddingBottom:"",marginTop:"",marginBottom:""},hideProps:{overflow:"hidden",height:0,paddingTop:0,paddingBottom:0,marginTop:0,marginBottom:0}},computed:{hasAnimation:function(t){return!!t.animation[0]},hasTransition:function(t){var e=t.animation;return this.hasAnimation&&!0===e[0]}},methods:{toggleElement:function(t,i,n){var r=this;return ae.all(V(t).map(function(e){return new ae(function(t){return r._toggleElement(e,i,n).then(t,et)})}))},isToggled:function(t){var e=V(t||this.$el);return this.cls?Pe(e,this.cls.split(" ")[0]):!st(e,"hidden")},updateAria:function(t){!1===this.cls&&ot(t,"aria-hidden",!this.isToggled(t))},_toggleElement:function(t,e,i){var n=this;if(e=_(e)?e:ni.inProgress(t)?Pe(t,"uk-animation-leave"):Qe.inProgress(t)?"0px"===t.style.height:!this.isToggled(t),!Jt(t,"before"+(e?"show":"hide"),[this]))return ae.reject();var o,r=(b(i)?i:!1!==i&&this.hasAnimation?this.hasTransition?ln(this):(o=this,function(t,e){ni.cancel(t);var i=o.animation,n=o.duration,r=o._toggle;return e?(r(t,!0),ni.in(t,i[0],n,o.origin)):ni.out(t,i[1]||i[0],n,o.origin).then(function(){return r(t,!1)})}):this._toggle)(t,e);Jt(t,e?"show":"hide",[this]);function s(){Jt(t,e?"shown":"hidden",[n]),n.$update(t)}return r?r.then(s):ae.resolve(s())},_toggle:function(t,e){var i;t&&(e=Boolean(e),this.cls?(i=x(this.cls," ")||e!==Pe(t,this.cls))&&Oe(t,this.cls,x(this.cls," ")?void 0:e):(i=e===st(t,"hidden"))&&ot(t,"hidden",e?null:""),ze("[autofocus]",t).some(function(t){return Zt(t)?t.focus()||!0:t.blur()}),this.updateAria(t),i&&(Jt(t,"toggled",[this]),this.$update(t)))}}};function ln(t){var s=t.isToggled,a=t.duration,h=t.initProps,c=t.hideProps,l=t.transition,u=t._toggle;return function(t,e){var i=Qe.inProgress(t),n=t.hasChildNodes?Z(We(t.firstElementChild,"marginTop"))+Z(We(t.lastElementChild,"marginBottom")):0,r=Zt(t)?li(t)+(i?0:n):0;Qe.cancel(t),s(t)||u(t,!0),li(t,""),yi.flush();var o=li(t)+(i?0:n);return li(t,r),(e?Qe.start(t,X({},h,{overflow:"hidden",height:o}),Math.round(a*(1-r/o)),l):Qe.start(t,c,Math.round(a*(r/o)),l).then(function(){return u(t,!1)})).then(function(){return We(t,h)})}}var un={mixins:[hn,cn],props:{targets:String,active:null,collapsible:Boolean,multiple:Boolean,toggle:String,content:String,transition:String,offset:Number},data:{targets:"> *",active:!1,animation:[!0],collapsible:!0,multiple:!1,clsOpen:"uk-open",toggle:"> .uk-accordion-title",content:"> .uk-accordion-content",transition:"ease",offset:0},computed:{items:{get:function(t,e){return ze(t.targets,e)},watch:function(t,e){var i=this;if(t.forEach(function(t){return dn(Te(i.content,t),!Pe(t,i.clsOpen))}),!e&&!Pe(t,this.clsOpen)){var n=!1!==this.active&&t[Number(this.active)]||!this.collapsible&&t[0];n&&this.toggle(n,!1)}},immediate:!0}},events:[{name:"click",delegate:function(){return this.targets+" "+this.$props.toggle},handler:function(t){t.preventDefault(),this.toggle(pe(ze(this.targets+" "+this.$props.toggle,this.$el),t.current))}}],methods:{toggle:function(t,r){var o=this,e=[this.items[ve(t,this.items)]],i=Wt(this.items,"."+this.clsOpen);this.multiple||x(i,e[0])||(e=e.concat(i)),(this.collapsible||Wt(e,":not(."+this.clsOpen+")").length)&&e.forEach(function(t){return o.toggleElement(t,!Pe(t,o.clsOpen),function(e,i){Oe(e,o.clsOpen,i);var n=Te((e._wrapper?"> * ":"")+o.content,e);if(!1!==r&&o.hasTransition)return e._wrapper||(e._wrapper=Le(n,"<div"+(i?" hidden":"")+">")),dn(n,!1),ln(o)(e._wrapper,i).then(function(){if(dn(n,!i),delete e._wrapper,Me(n),i){var t=Te(o.$props.toggle,e);Ni(t)||Di(t,{offset:o.offset})}});dn(n,!i)})})}}};function dn(t,e){ot(t,"hidden",e?"":null)}var fn={mixins:[hn,cn],args:"animation",props:{close:String},data:{animation:[!0],selClose:".uk-alert-close",duration:150,hideProps:X({opacity:0},cn.data.hideProps)},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.close()}}],methods:{close:function(){var t=this;this.toggleElement(this.$el).then(function(){return t.$destroy(!0)})}}},gn={args:"autoplay",props:{automute:Boolean,autoplay:Boolean},data:{automute:!1,autoplay:!0},computed:{inView:function(t){return"inview"===t.autoplay}},connected:function(){this.inView&&!st(this.$el,"preload")&&(this.$el.preload="none"),this.player=new zi(this.$el),this.automute&&this.player.mute()},update:{read:function(){return!!this.player&&{visible:Zt(this.$el)&&"hidden"!==We(this.$el,"visibility"),inView:this.inView&&Ni(this.$el)}},write:function(t){var e=t.visible,i=t.inView;!e||this.inView&&!i?this.player.pause():(!0===this.autoplay||this.inView&&i)&&this.player.play()},events:["resize","scroll"]}},pn={mixins:[hn,gn],props:{width:Number,height:Number},data:{automute:!0},update:{read:function(){var t=this.$el,e=function(t){for(;t=Ht(t);)if("static"!==We(t,"position"))return t}(t)||t.parentNode,i=e.offsetHeight,n=e.offsetWidth,r=rt.cover({width:this.width||t.naturalWidth||t.videoWidth||t.clientWidth,height:this.height||t.naturalHeight||t.videoHeight||t.clientHeight},{width:n+(n%2?1:0),height:i+(i%2?1:0)});return!(!r.width||!r.height)&&r},write:function(t){var e=t.height,i=t.width;We(this.$el,{height:e,width:i})},events:["resize"]}};var vn,wn={props:{pos:String,offset:null,flip:Boolean,clsPos:String},data:{pos:"bottom-"+(ut?"right":"left"),flip:!0,offset:!1,clsPos:""},computed:{pos:function(t){var e=t.pos;return(e+(x(e,"-")?"":"-center")).split("-")},dir:function(){return this.pos[0]},align:function(){return this.pos[1]}},methods:{positionAt:function(t,e,i){var n;He(t,this.clsPos+"-(top|bottom|left|right)(-[a-z]+)?"),We(t,{top:"",left:""});var r=this.offset,o=this.getAxis();H(r)||(r=(n=Te(r))?si(n)["x"===o?"left":"top"]-si(e)["x"===o?"right":"bottom"]:0);var s=oi(t,e,"x"===o?wi(this.dir)+" "+this.align:this.align+" "+wi(this.dir),"x"===o?this.dir+" "+this.align:this.align+" "+this.dir,"x"===o?""+("left"===this.dir?-r:r):" "+("top"===this.dir?-r:r),null,this.flip,i).target,a=s.x,h=s.y;this.dir="x"===o?a:h,this.align="x"===o?h:a,Oe(t,this.clsPos+"-"+this.dir+"-"+this.align,!1===this.offset)},getAxis:function(){return"top"===this.dir||"bottom"===this.dir?"y":"x"}}},mn={mixins:[wn,cn],args:"pos",props:{mode:"list",toggle:Boolean,boundary:Boolean,boundaryAlign:Boolean,delayShow:Number,delayHide:Number,clsDrop:String},data:{mode:["click","hover"],toggle:"- *",boundary:ct&&window,boundaryAlign:!1,delayShow:0,delayHide:800,clsDrop:!1,animation:["uk-animation-fade"],cls:"uk-open"},computed:{boundary:function(t,e){return kt(t.boundary,e)},clsDrop:function(t){return t.clsDrop||"uk-"+this.$options.name},clsPos:function(){return this.clsDrop}},created:function(){this.tracker=new Mi},connected:function(){Ae(this.$el,this.clsDrop);var t=this.$props.toggle;this.toggle=t&&this.$create("toggle",kt(t,this.$el),{target:this.$el,mode:this.mode}),this.toggle||Jt(this.$el,"updatearia")},disconnected:function(){this.isActive()&&(vn=null)},events:[{name:"click",delegate:function(){return"."+this.clsDrop+"-close"},handler:function(t){t.preventDefault(),this.hide(!1)}},{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){var e=t.defaultPrevented,i=t.current.hash;e||!i||Rt(i,this.$el)||this.hide(!1)}},{name:"beforescroll",handler:function(){this.hide(!1)}},{name:"toggle",self:!0,handler:function(t,e){t.preventDefault(),this.isToggled()?this.hide(!1):this.show(e,!1)}},{name:"toggleshow",self:!0,handler:function(t,e){t.preventDefault(),this.show(e)}},{name:"togglehide",self:!0,handler:function(t){t.preventDefault(),this.hide()}},{name:mt,filter:function(){return x(this.mode,"hover")},handler:function(t){re(t)||this.clearTimers()}},{name:xt,filter:function(){return x(this.mode,"hover")},handler:function(t){re(t)||this.hide()}},{name:"toggled",self:!0,handler:function(){this.isToggled()&&(this.clearTimers(),ni.cancel(this.$el),this.position())}},{name:"show",self:!0,handler:function(){var o=this;(vn=this).tracker.init(),Jt(this.$el,"updatearia"),Gt(this.$el,"hide",Yt(document,pt,function(t){var r=t.target;return!Rt(r,o.$el)&&Gt(document,wt+" "+yt+" scroll",function(t){var e=t.defaultPrevented,i=t.type,n=t.target;e||i!==wt||r!==n||o.toggle&&Rt(r,o.toggle.$el)||o.hide(!1)},!0)}),{self:!0}),Gt(this.$el,"hide",Yt(document,"keydown",function(t){27===t.keyCode&&(t.preventDefault(),o.hide(!1))}),{self:!0})}},{name:"beforehide",self:!0,handler:function(){this.clearTimers()}},{name:"hide",handler:function(t){var e=t.target;this.$el===e?(vn=this.isActive()?null:vn,Jt(this.$el,"updatearia"),this.tracker.cancel()):vn=null===vn&&Rt(e,this.$el)&&this.isToggled()?this:vn}},{name:"updatearia",self:!0,handler:function(t,e){t.preventDefault(),this.updateAria(this.$el),(e||this.toggle)&&(ot((e||this.toggle).$el,"aria-expanded",this.isToggled()),Oe(this.toggle.$el,this.cls,this.isToggled()))}}],update:{write:function(){this.isToggled()&&!ni.inProgress(this.$el)&&this.position()},events:["resize"]},methods:{show:function(t,e){var i=this;if(void 0===t&&(t=this.toggle),void 0===e&&(e=!0),this.isToggled()&&t&&this.toggle&&t.$el!==this.toggle.$el&&this.hide(!1),this.toggle=t,this.clearTimers(),!this.isActive()){if(vn){if(e&&vn.isDelaying)return void(this.showTimer=setTimeout(this.show,10));for(;vn&&!Rt(this.$el,vn.$el);)vn.hide(!1)}this.showTimer=setTimeout(function(){return!i.isToggled()&&i.toggleElement(i.$el,!0)},e&&this.delayShow||0)}},hide:function(t){var e=this;void 0===t&&(t=!0);function i(){return e.toggleElement(e.$el,!1,!1)}var n,r;this.clearTimers(),this.isDelaying=(n=this.$el,r=[],Ee(n,function(t){return"static"!==We(t,"position")&&r.push(t)}),r.some(function(t){return e.tracker.movesTo(t)})),t&&this.isDelaying?this.hideTimer=setTimeout(this.hide,50):t&&this.delayHide?this.hideTimer=setTimeout(i,this.delayHide):i()},clearTimers:function(){clearTimeout(this.showTimer),clearTimeout(this.hideTimer),this.showTimer=null,this.hideTimer=null,this.isDelaying=!1},isActive:function(){return vn===this},position:function(){He(this.$el,this.clsDrop+"-(stack|boundary)"),Oe(this.$el,this.clsDrop+"-boundary",this.boundaryAlign);var t=si(this.boundary),e=this.boundaryAlign?t:si(this.toggle.$el);if("justify"===this.align){var i="y"===this.getAxis()?"width":"height";We(this.$el,i,e[i])}else this.$el.offsetWidth>Math.max(t.right-e.left,e.right-t.left)&&Ae(this.$el,this.clsDrop+"-stack");this.positionAt(this.$el,this.boundaryAlign?this.boundary:this.toggle.$el,this.boundary)}}};var xn={mixins:[hn],args:"target",props:{target:Boolean},data:{target:!1},computed:{input:function(t,e){return Te(Ft,e)},state:function(){return this.input.nextElementSibling},target:function(t,e){var i=t.target;return i&&(!0===i&&this.input.parentNode===e&&this.input.nextElementSibling||kt(i,e))}},update:function(){var t=this.target,e=this.input;if(t){var i,n=Vt(t)?"value":"textContent",r=t[n],o=e.files&&e.files[0]?e.files[0].name:_t(e,"select")&&(i=ze("option",e).filter(function(t){return t.selected})[0])?i.textContent:e.value;r!==o&&(t[n]=o)}},events:[{name:"change",handler:function(){this.$update()}},{name:"reset",el:function(){return Nt(this.$el,"form")},handler:function(){this.$update()}}]},yn={update:{read:function(t){var e=Ni(this.$el);if(!e||t.isInView===e)return!1;t.isInView=e},write:function(){this.$el.src=this.$el.src},events:["scroll","resize"]}},kn={props:{margin:String,firstColumn:Boolean},data:{margin:"uk-margin-small-top",firstColumn:"uk-first-column"},update:{read:function(){return{columns:(t=this.$el.children,e=bn(t,"left","right"),ut?e.reverse():e),rows:Cn(this.$el.children)};var t,e},write:function(t){var i=this,n=t.columns;t.rows.forEach(function(t,e){return t.forEach(function(t){Oe(t,i.margin,0!==e),Oe(t,i.firstColumn,x(n[0],t))})})},events:["resize"]}};function Cn(t){return bn(t,"top","bottom")}function bn(t,e,i){for(var n=[[]],r=0;r<t.length;r++){var o=t[r];if(Zt(o))for(var s=Ln(o),a=n.length-1;0<=a;a--){var h=n[a];if(!h[0]){h.push(o);break}var c=void 0;if(c=h[0].offsetParent===o.offsetParent?Ln(h[0]):(s=Ln(o,!0),Ln(h[0],!0)),s[e]>=c[i]-1&&s[e]!==c[e]){n.push([o]);break}if(s[i]-1>c[e]||s[e]===c[e]){h.push(o);break}if(0===a){n.unshift([o]);break}}}return n}function Ln(t,e){var i;void 0===e&&(e=!1);var n=t.offsetTop,r=t.offsetLeft,o=t.offsetHeight,s=t.offsetWidth;return e&&(n=(i=ci(t))[0],r=i[1]),{top:n,left:r,bottom:n+o,right:r+s}}var $n={extends:kn,mixins:[hn],name:"grid",props:{masonry:Boolean,parallax:Number},data:{margin:"uk-grid-margin",clsStack:"uk-grid-stack",masonry:!1,parallax:0},connected:function(){this.masonry&&Ae(this.$el,"uk-flex-top uk-flex-wrap-top")},update:[{write:function(t){var e=t.columns;Oe(this.$el,this.clsStack,e.length<2)},events:["resize"]},{read:function(t){var e=t.columns,i=t.rows,n=Ut(this.$el);if(!n.length||!this.masonry&&!this.parallax)return!1;var r,o,s,a,h,c=n.some(Qe.inProgress),l=!1,u="",d=Math.abs(this.parallax);if(this.masonry){e=e.map(function(t){return K(t,"offsetTop")});var f=e.map(function(t){return t.reduce(function(t,e){return t+e.offsetHeight},0)}),g=(s=n,a=this.margin,Z((h=s.filter(function(t){return Pe(t,a)})[0])?We(h,"marginTop"):We(s[0],"paddingLeft"))*(i.length-1));r=e,o=i.map(function(t){return Math.max.apply(Math,t.map(function(t){return t.offsetHeight}))}),l=r.map(function(i){var n=0;return i.map(function(t,e){return n+=e?o[e-1]-i[e-1].offsetHeight:0})}),u=Math.max.apply(Math,f)+g,d=d&&f.reduce(function(t,e,i){return Math.max(t,e+g+(i%2?d:d/8)-u)},0)}return{padding:d,columns:e,translates:l,height:!c&&u}},write:function(t){var e=t.height,i=t.padding;We(this.$el,"paddingBottom",i||""),!1!==e&&We(this.$el,"height",e)},events:["resize"]},{read:function(t){var e=t.height;return{scrolled:!!this.parallax&&Pi(this.$el,e?e-li(this.$el):0)*Math.abs(this.parallax)}},write:function(t){var e=t.columns,n=t.scrolled,r=t.translates;!1===n&&!r||e.forEach(function(t,i){return t.forEach(function(t,e){return We(t,"transform",n||r?"translateY("+((r&&-r[i][e])+(n?i%2?n:n/8:0))+"px)":"")})})},events:["scroll","resize"]}]};var Mn=lt?{props:{selMinHeight:String},data:{selMinHeight:!1,forceHeight:!1},computed:{elements:function(t,e){var i=t.selMinHeight;return i?ze(i,e):[e]}},update:[{read:function(){We(this.elements,"height","")},order:-5,events:["resize"]},{write:function(){var i=this;this.elements.forEach(function(t){var e=Z(We(t,"minHeight"));e&&(i.forceHeight||Math.round(e+fi(t,"height","content-box"))>=t.offsetHeight)&&We(t,"height",e)})},order:5,events:["resize"]}]}:{},Bn={mixins:[Mn],args:"target",props:{target:String,row:Boolean},data:{target:"> *",row:!0,forceHeight:!0},computed:{elements:function(t,e){return ze(t.target,e)}},update:{read:function(){return{rows:(this.row?Cn(this.elements):[this.elements]).map(In)}},write:function(t){t.rows.forEach(function(t){var i=t.heights;return t.elements.forEach(function(t,e){return We(t,"minHeight",i[e])})})},events:["resize"]}};function In(t){var e;if(t.length<2)return{heights:[""],elements:t};var i=Sn(t),n=i.heights,r=i.max,o=t.some(function(t){return t.style.minHeight}),s=t.some(function(t,e){return!t.style.minHeight&&n[e]<r});return o&&s&&(We(t,"minHeight",""),e=Sn(t),n=e.heights,r=e.max),{heights:n=t.map(function(t,e){return n[e]===r&&Z(t.style.minHeight).toFixed(2)!==r.toFixed(2)?"":r}),elements:t}}function Sn(t){var e=t.map(function(t){return si(t).height-fi(t,"height","content-box")});return{heights:e,max:Math.max.apply(null,e)}}var En={mixins:[Mn],props:{expand:Boolean,offsetTop:Boolean,offsetBottom:Boolean,minHeight:Number},data:{expand:!1,offsetTop:!1,offsetBottom:!1,minHeight:0},update:{read:function(t){var e=t.minHeight;if(!Zt(this.$el))return!1;var i="",n=fi(this.$el,"height","content-box");if(this.expand){if(this.$el.dataset.heightExpand="",Te("[data-height-expand]")!==this.$el)return!1;i=li(window)-(Tn(document.documentElement)-Tn(this.$el))-n||""}else{if(i="calc(100vh",this.offsetTop){var r=si(this.$el).top;i+=0<r&&r<li(window)/2?" - "+r+"px":""}!0===this.offsetBottom?i+=" - "+Tn(this.$el.nextElementSibling)+"px":H(this.offsetBottom)?i+=" - "+this.offsetBottom+"vh":this.offsetBottom&&c(this.offsetBottom,"px")?i+=" - "+Z(this.offsetBottom)+"px":A(this.offsetBottom)&&(i+=" - "+Tn(kt(this.offsetBottom,this.$el))+"px"),i+=(n?" - "+n+"px":"")+")"}return{minHeight:i,prev:e}},write:function(t){var e=t.minHeight,i=t.prev;We(this.$el,{minHeight:e}),e!==i&&this.$update(this.$el,"resize"),this.minHeight&&Z(We(this.$el,"minHeight"))<this.minHeight&&We(this.$el,"minHeight",this.minHeight)},events:["resize"]}};function Tn(t){return t&&si(t).height||0}var zn={args:"src",props:{id:Boolean,icon:String,src:String,style:String,width:Number,height:Number,ratio:Number,class:String,strokeAnimation:Boolean,focusable:Boolean,attributes:"list"},data:{ratio:1,include:["style","class","focusable"],class:"",strokeAnimation:!1},beforeConnect:function(){this.class+=" uk-svg"},connected:function(){var t,e=this;!this.icon&&x(this.src,"#")&&(t=this.src.split("#"),this.src=t[0],this.icon=t[1]),this.svg=this.getSvg().then(function(t){return e.applyAttributes(t),e.svgEl=function(t,e){if(jt(e)||"CANVAS"===e.tagName){ot(e,"hidden",!0);var i=e.nextElementSibling;return Dn(t,i)?i:ke(e,t)}var n=e.lastElementChild;return Dn(t,n)?n:xe(e,t)}(t,e.$el)},et)},disconnected:function(){var e=this;jt(this.$el)&&ot(this.$el,"hidden",null),this.svg&&this.svg.then(function(t){return(!e._connected||t!==e.svgEl)&&be(t)},et),this.svg=this.svgEl=null},update:{read:function(){return!!(this.strokeAnimation&&this.svgEl&&Zt(this.svgEl))},write:function(){var t,e;t=this.svgEl,(e=Hn(t))&&t.style.setProperty("--uk-animation-stroke",e)},type:["resize"]},methods:{getSvg:function(){var e=this;return function(i){if(_n[i])return _n[i];return _n[i]=new ae(function(e,t){i?m(i,"data:")?e(decodeURIComponent(i.split(",")[1])):de(i).then(function(t){return e(t.response)},function(){return t("SVG not found.")}):t()})}(this.src).then(function(t){return function(t,e){e&&x(t,"<symbol")&&(t=function(t,e){if(!Nn[t]){var i;for(Nn[t]={},An.lastIndex=0;i=An.exec(t);)Nn[t][i[3]]='<svg xmlns="http://www.w3.org/2000/svg"'+i[1]+"svg>"}return Nn[t][e]}(t,e)||t);return(t=Te(t.substr(t.indexOf("<svg"))))&&t.hasChildNodes()&&t}(t,e.icon)||ae.reject("SVG not found.")})},applyAttributes:function(i){var n=this;for(var t in this.$options.props)this[t]&&x(this.include,t)&&ot(i,t,this[t]);for(var e in this.attributes){var r=this.attributes[e].split(":",2),o=r[0],s=r[1];ot(i,o,s)}this.id||at(i,"id");var a=["width","height"],h=[this.width,this.height];h.some(function(t){return t})||(h=a.map(function(t){return ot(i,t)}));var c=ot(i,"viewBox");c&&!h.some(function(t){return t})&&(h=c.split(" ").slice(2)),h.forEach(function(t,e){(t=(0|t)*n.ratio)&&ot(i,a[e],t),t&&!h[1^e]&&at(i,a[1^e])}),ot(i,"data-svg",this.icon||this.src)}}},_n={};var An=/<symbol([^]*?id=(['"])(.+?)\2[^]*?<\/)symbol>/g,Nn={};function Hn(t){return Math.ceil(Math.max.apply(Math,[0].concat(ze("[stroke]",t).map(function(t){try{return t.getTotalLength()}catch(t){return 0}}))))}function Dn(t,e){return ot(t,"data-svg")===ot(e,"data-svg")}var Pn={spinner:'<svg width="30" height="30" viewBox="0 0 30 30" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" cx="15" cy="15" r="14"/></svg>',totop:'<svg width="18" height="10" viewBox="0 0 18 10" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 9 9 1 17 9 "/></svg>',marker:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="9" y="4" width="1" height="11"/><rect x="4" y="9" width="11" height="1"/></svg>',"close-icon":'<svg width="14" height="14" viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.1" x1="1" y1="1" x2="13" y2="13"/><line fill="none" stroke="#000" stroke-width="1.1" x1="13" y1="1" x2="1" y2="13"/></svg>',"close-large":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.4" x1="1" y1="1" x2="19" y2="19"/><line fill="none" stroke="#000" stroke-width="1.4" x1="19" y1="1" x2="1" y2="19"/></svg>',"navbar-toggle-icon":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect y="9" width="20" height="2"/><rect y="3" width="20" height="2"/><rect y="15" width="20" height="2"/></svg>',"overlay-icon":'<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><rect x="19" y="0" width="1" height="40"/><rect x="0" y="19" width="40" height="1"/></svg>',"pagination-next":'<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 1 6 6 1 11"/></svg>',"pagination-previous":'<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="6 1 1 6 6 11"/></svg>',"search-icon":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9" cy="9" r="7"/><path fill="none" stroke="#000" stroke-width="1.1" d="M14,14 L18,18 L14,14 Z"/></svg>',"search-large":'<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.8" cx="17.5" cy="17.5" r="16.5"/><line fill="none" stroke="#000" stroke-width="1.8" x1="38" y1="39" x2="29" y2="30"/></svg>',"search-navbar":'<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10.5" cy="10.5" r="9.5"/><line fill="none" stroke="#000" stroke-width="1.1" x1="23" y1="23" x2="17" y2="17"/></svg>',"slidenav-next":'<svg width="14px" height="24px" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="1.225,23 12.775,12 1.225,1 "/></svg>',"slidenav-next-large":'<svg width="25px" height="40px" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="4.002,38.547 22.527,20.024 4,1.5 "/></svg>',"slidenav-previous":'<svg width="14px" height="24px" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="12.775,1 1.225,12 12.775,23 "/></svg>',"slidenav-previous-large":'<svg width="25px" height="40px" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="20.527,1.5 2,20.024 20.525,38.547 "/></svg>'},On={install:function(r){r.icon.add=function(t,e){var i,n=A(t)?((i={})[t]=e,i):t;J(n,function(t,e){Pn[e]=t,delete Rn[e]}),r._initialized&&Ee(document.body,function(t){return J(r.getComponents(t),function(t){t.$options.isIcon&&t.icon in n&&t.$reset()})})}},extends:zn,args:"icon",props:["icon"],data:{include:["focusable"]},isIcon:!0,beforeConnect:function(){Ae(this.$el,"uk-icon")},methods:{getSvg:function(){var t=function(t){if(!Pn[t])return null;Rn[t]||(Rn[t]=Te((Pn[function(t){return ut?Y(Y(t,"left","right"),"previous","next"):t}(t)]||Pn[t]).trim()));return Rn[t].cloneNode(!0)}(this.icon);return t?ae.resolve(t):ae.reject("Icon not found.")}}},jn={args:!1,extends:On,data:function(t){return{icon:d(t.constructor.options.name)}},beforeConnect:function(){Ae(this.$el,this.$name)}},Zn={extends:jn,beforeConnect:function(){Ae(this.$el,"uk-slidenav")},computed:{icon:function(t,e){var i=t.icon;return Pe(e,"uk-slidenav-large")?i+"-large":i}}},Fn={extends:jn,computed:{icon:function(t,e){var i=t.icon;return Pe(e,"uk-search-icon")&&qt(e,".uk-search-large").length?"search-large":qt(e,".uk-search-navbar").length?"search-navbar":i}}},Vn={extends:jn,computed:{icon:function(){return"close-"+(Pe(this.$el,"uk-close-large")?"large":"icon")}}},Wn={extends:jn,connected:function(){var e=this;this.svg.then(function(t){return 1!==e.ratio&&We(Te("circle",t),"strokeWidth",1/e.ratio)},et)}},Rn={};var qn={args:"dataSrc",props:{dataSrc:String,dataSrcset:Boolean,sizes:String,width:Number,height:Number,offsetTop:String,offsetLeft:String,target:String},data:{dataSrc:"",dataSrcset:!1,sizes:!1,width:!1,height:!1,offsetTop:"50vh",offsetLeft:0,target:!1},computed:{cacheKey:function(t){var e=t.dataSrc;return this.$name+"."+e},width:function(t){var e=t.width,i=t.dataWidth;return e||i},height:function(t){var e=t.height,i=t.dataHeight;return e||i},sizes:function(t){var e=t.sizes,i=t.dataSizes;return e||i},isImg:function(t,e){return Qn(e)},target:{get:function(t){var e=t.target;return[this.$el].concat(Ct(e,this.$el))},watch:function(){this.observe()}},offsetTop:function(t){return mi(t.offsetTop,"height")},offsetLeft:function(t){return mi(t.offsetLeft,"width")}},connected:function(){er[this.cacheKey]?Un(this.$el,er[this.cacheKey]||this.dataSrc,this.dataSrcset,this.sizes):this.isImg&&this.width&&this.height&&Un(this.$el,function(t,e,i){var n;i&&(n=rt.ratio({width:t,height:e},"width",mi(Xn(i))),t=n.width,e=n.height);return'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="'+t+'" height="'+e+'"></svg>'}(this.width,this.height,this.sizes)),this.observer=new Vi(this.load,{rootMargin:this.offsetTop+"px "+this.offsetLeft+"px"}),requestAnimationFrame(this.observe)},disconnected:function(){this.observer.disconnect()},update:{read:function(t){var e=this,i=t.image;if(i||"complete"!==document.readyState||this.load(this.observer.takeRecords()),this.isImg)return!1;i&&i.then(function(t){return t&&""!==t.currentSrc&&Un(e.$el,tr(t))})},write:function(t){if(this.dataSrcset&&1!==window.devicePixelRatio){var e=We(this.$el,"backgroundSize");!e.match(/^(auto\s?)+$/)&&Z(e)!==t.bgSize||(t.bgSize=(i=this.dataSrcset,n=this.sizes,r=mi(Xn(n)),(o=(i.match(Kn)||[]).map(Z).sort(function(t,e){return t-e})).filter(function(t){return r<=t})[0]||o.pop()||""),We(this.$el,"backgroundSize",t.bgSize+"px"))}var i,n,r,o},events:["resize"]},methods:{load:function(t){var e=this;t.some(function(t){return P(t.isIntersecting)||t.isIntersecting})&&(this._data.image=fe(this.dataSrc,this.dataSrcset,this.sizes).then(function(t){return Un(e.$el,tr(t),t.srcset,t.sizes),er[e.cacheKey]=tr(t),t},et),this.observer.disconnect())},observe:function(){var e=this;this._connected&&!this._data.image&&this.target.forEach(function(t){return e.observer.observe(t)})}}};function Un(t,e,i,n){if(Qn(t))n&&(t.sizes=n),i&&(t.srcset=i),e&&(t.src=e);else if(e){!x(t.style.backgroundImage,e)&&(We(t,"backgroundImage","url("+Pt(e)+")"),Jt(t,Kt("load",!1)))}}var Yn=/\s*(.*?)\s*(\w+|calc\(.*?\))\s*(?:,|$)/g;function Xn(t){var e,i;for(Yn.lastIndex=0;e=Yn.exec(t);)if(!e[1]||window.matchMedia(e[1]).matches){e=m(i=e[2],"calc")?i.substring(5,i.length-1).replace(Gn,function(t){return mi(t)}).replace(/ /g,"").match(Jn).reduce(function(t,e){return t+ +e},0):i;break}return e||"100vw"}var Gn=/\d+(?:\w+|%)/g,Jn=/[+-]?(\d+)/g;var Kn=/\s+\d+w\s*(?:,|$)/g;function Qn(t){return"IMG"===t.tagName}function tr(t){return t.currentSrc||t.src}var er,ir="__test__";try{(er=window.sessionStorage||{})[ir]=1,delete er[ir]}catch(t){er={}}var nr={props:{media:Boolean},data:{media:!1},computed:{matchMedia:function(){var t=function(t){if(A(t)){if("@"===t[0])t=Z(Ye("breakpoint-"+t.substr(1)));else if(isNaN(t))return t}return!(!t||isNaN(t))&&"(min-width: "+t+"px)"}(this.media);return!t||window.matchMedia(t).matches}}};var rr={mixins:[hn,nr],props:{fill:String},data:{fill:"",clsWrapper:"uk-leader-fill",clsHide:"uk-leader-hide",attrFill:"data-fill"},computed:{fill:function(t){return t.fill||Ye("leader-fill-content")}},connected:function(){var t;t=$e(this.$el,'<span class="'+this.clsWrapper+'">'),this.wrapper=t[0]},disconnected:function(){Me(this.wrapper.childNodes)},update:{read:function(t){var e=t.changed,i=t.width,n=i;return{width:i=Math.floor(this.$el.offsetWidth/2),fill:this.fill,changed:e||n!==i,hide:!this.matchMedia}},write:function(t){Oe(this.wrapper,this.clsHide,t.hide),t.changed&&(t.changed=!1,ot(this.wrapper,this.attrFill,new Array(t.width).join(t.fill)))},events:["resize"]}},or={props:{container:Boolean},data:{container:!0},computed:{container:function(t){var e=t.container;return!0===e&&this.$container||e&&Te(e)}}},sr=[],ar={mixins:[hn,or,cn],props:{selPanel:String,selClose:String,escClose:Boolean,bgClose:Boolean,stack:Boolean},data:{cls:"uk-open",escClose:!0,bgClose:!0,overlay:!0,stack:!1},computed:{panel:function(t,e){return Te(t.selPanel,e)},transitionElement:function(){return this.panel},bgClose:function(t){return t.bgClose&&this.panel}},beforeDisconnect:function(){this.isToggled()&&this.toggleElement(this.$el,!1,!1)},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.hide()}},{name:"toggle",self:!0,handler:function(t){t.defaultPrevented||(t.preventDefault(),this.isToggled()===x(sr,this)&&this.toggle())}},{name:"beforeshow",self:!0,handler:function(t){if(x(sr,this))return!1;!this.stack&&sr.length?(ae.all(sr.map(function(t){return t.hide()})).then(this.show),t.preventDefault()):sr.push(this)}},{name:"show",self:!0,handler:function(){var o=this;ui(window)-ui(document)&&this.overlay&&We(document.body,"overflowY","scroll"),this.stack&&We(this.$el,"zIndex",We(this.$el,"zIndex")+sr.length),Ae(document.documentElement,this.clsPage),this.bgClose&&Gt(this.$el,"hide",Yt(document,pt,function(t){var r=t.target;G(sr)!==o||o.overlay&&!Rt(r,o.$el)||Rt(r,o.panel)||Gt(document,wt+" "+yt+" scroll",function(t){var e=t.defaultPrevented,i=t.type,n=t.target;e||i!==wt||r!==n||o.hide()},!0)}),{self:!0}),this.escClose&&Gt(this.$el,"hide",Yt(document,"keydown",function(t){27===t.keyCode&&G(sr)===o&&(t.preventDefault(),o.hide())}),{self:!0})}},{name:"hidden",self:!0,handler:function(){var e=this;sr.splice(sr.indexOf(this),1),sr.length||We(document.body,"overflowY",""),We(this.$el,"zIndex",""),sr.some(function(t){return t.clsPage===e.clsPage})||Ne(document.documentElement,this.clsPage)}}],methods:{toggle:function(){return this.isToggled()?this.hide():this.show()},show:function(){var e=this;return this.container&&this.$el.parentNode!==this.container?(xe(this.container,this.$el),new ae(function(t){return requestAnimationFrame(function(){return e.show().then(t)})})):this.toggleElement(this.$el,!0,hr(this))},hide:function(){return this.toggleElement(this.$el,!1,hr(this))}}};function hr(t){var s=t.transitionElement,a=t._toggle;return function(r,o){return new ae(function(i,n){return Gt(r,"show hide",function(){r._reject&&r._reject(),r._reject=n,a(r,o);var t=Gt(s,"transitionstart",function(){Gt(s,"transitionend transitioncancel",i,{self:!0}),clearTimeout(e)},{self:!0}),e=setTimeout(function(){t(),i()},q(We(s,"transitionDuration")))})})}}var cr={install:function(t){var a=t.modal;function e(t,e,i,n){e=X({bgClose:!1,escClose:!0,labels:a.labels},e);var r=a.dialog(t(e),e),o=new se,s=!1;return Yt(r.$el,"submit","form",function(t){t.preventDefault(),o.resolve(n&&n(r)),s=!0,r.hide()}),Yt(r.$el,"hide",function(){return!s&&i(o)}),o.promise.dialog=r,o.promise}a.dialog=function(t,e){var i=a('<div class="uk-modal"> <div class="uk-modal-dialog">'+t+"</div> </div>",e);return i.show(),Yt(i.$el,"hidden",function(){return ae.resolve().then(function(){return i.$destroy(!0)})},{self:!0}),i},a.alert=function(i,t){return e(function(t){var e=t.labels;return'<div class="uk-modal-body">'+(A(i)?i:me(i))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-primary uk-modal-close" autofocus>'+e.ok+"</button> </div>"},t,function(t){return t.resolve()})},a.confirm=function(i,t){return e(function(t){var e=t.labels;return'<form> <div class="uk-modal-body">'+(A(i)?i:me(i))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close" type="button">'+e.cancel+'</button> <button class="uk-button uk-button-primary" autofocus>'+e.ok+"</button> </div> </form>"},t,function(t){return t.reject()})},a.prompt=function(i,n,t){return e(function(t){var e=t.labels;return'<form class="uk-form-stacked"> <div class="uk-modal-body"> <label>'+(A(i)?i:me(i))+'</label> <input class="uk-input" value="'+(n||"")+'" autofocus> </div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close" type="button">'+e.cancel+'</button> <button class="uk-button uk-button-primary">'+e.ok+"</button> </div> </form>"},t,function(t){return t.resolve(null)},function(t){return Te("input",t.$el).value})},a.labels={ok:"Ok",cancel:"Cancel"}},mixins:[ar],data:{clsPage:"uk-modal-page",selPanel:".uk-modal-dialog",selClose:".uk-modal-close, .uk-modal-close-default, .uk-modal-close-outside, .uk-modal-close-full"},events:[{name:"show",self:!0,handler:function(){Pe(this.panel,"uk-margin-auto-vertical")?Ae(this.$el,"uk-flex"):We(this.$el,"display","block"),li(this.$el)}},{name:"hidden",self:!0,handler:function(){We(this.$el,"display",""),Ne(this.$el,"uk-flex")}}]};var lr={extends:un,data:{targets:"> .uk-parent",toggle:"> a",content:"> ul"}},ur={mixins:[hn,Mn],props:{dropdown:String,mode:"list",align:String,offset:Number,boundary:Boolean,boundaryAlign:Boolean,clsDrop:String,delayShow:Number,delayHide:Number,dropbar:Boolean,dropbarMode:String,dropbarAnchor:Boolean,duration:Number},data:{dropdown:".uk-navbar-nav > li",align:ut?"right":"left",clsDrop:"uk-navbar-dropdown",mode:void 0,offset:void 0,delayShow:void 0,delayHide:void 0,boundaryAlign:void 0,flip:"x",boundary:!0,dropbar:!1,dropbarMode:"slide",dropbarAnchor:!1,duration:200,forceHeight:!0,selMinHeight:".uk-navbar-nav > li > a, .uk-navbar-item, .uk-navbar-toggle"},computed:{boundary:function(t,e){var i=t.boundary,n=t.boundaryAlign;return!0===i||n?e:i},dropbarAnchor:function(t,e){return kt(t.dropbarAnchor,e)},pos:function(t){return"bottom-"+t.align},dropbar:{get:function(t){var e=t.dropbar;return e?(e=this._dropbar||kt(e,this.$el)||Te("+ .uk-navbar-dropbar",this.$el))||(this._dropbar=Te("<div></div>")):null},watch:function(t){Ae(t,"uk-navbar-dropbar")},immediate:!0},dropdowns:{get:function(t,e){return ze(t.dropdown+" ."+t.clsDrop,e)},watch:function(t){var e=this;this.$create("drop",t.filter(function(t){return!e.getDropdown(t)}),X({},this.$props,{boundary:this.boundary,pos:this.pos,offset:this.dropbar||this.offset}))},immediate:!0}},disconnected:function(){this.dropbar&&be(this.dropbar),delete this._dropbar},events:[{name:"mouseover",delegate:function(){return this.dropdown},handler:function(t){var e=t.current,i=this.getActive();i&&i.toggle&&!Rt(i.toggle.$el,e)&&!i.tracker.movesTo(i.$el)&&i.hide(!1)}},{name:"mouseleave",el:function(){return this.dropbar},handler:function(){var t=this.getActive();t&&!this.dropdowns.some(function(t){return _t(t,":hover")})&&t.hide()}},{name:"beforeshow",capture:!0,filter:function(){return this.dropbar},handler:function(){this.dropbar.parentNode||ke(this.dropbarAnchor||this.$el,this.dropbar)}},{name:"show",capture:!0,filter:function(){return this.dropbar},handler:function(t,e){var i=e.$el,n=e.dir;Oe(this.dropbar,"uk-navbar-dropbar-slide","slide"===this.dropbarMode||qt(this.$el).some(function(t){return"static"!==We(t,"position")})),this.clsDrop&&Ae(i,this.clsDrop+"-dropbar"),"bottom"===n&&this.transitionTo(i.offsetHeight+Z(We(i,"marginTop"))+Z(We(i,"marginBottom")),i)}},{name:"beforehide",filter:function(){return this.dropbar},handler:function(t,e){var i=e.$el,n=this.getActive();_t(this.dropbar,":hover")&&n&&n.$el===i&&t.preventDefault()}},{name:"hide",filter:function(){return this.dropbar},handler:function(t,e){var i=e.$el,n=this.getActive();(!n||n&&n.$el===i)&&this.transitionTo(0)}}],methods:{getActive:function(){var t=this.dropdowns.map(this.getDropdown).filter(function(t){return t&&t.isActive()})[0];return t&&x(t.mode,"hover")&&Rt(t.toggle.$el,this.$el)&&t},transitionTo:function(t,e){var i=this,n=this.dropbar,r=Zt(n)?li(n):0;return We(e=r<t&&e,"clip","rect(0,"+e.offsetWidth+"px,"+r+"px,0)"),li(n,r),Qe.cancel([e,n]),ae.all([Qe.start(n,{height:t},this.duration),Qe.start(e,{clip:"rect(0,"+e.offsetWidth+"px,"+t+"px,0)"},this.duration)]).catch(et).then(function(){We(e,{clip:""}),i.$update(n)})},getDropdown:function(t){return this.$getComponent(t,"drop")||this.$getComponent(t,"dropdown")}}},dr={mixins:[ar],args:"mode",props:{mode:String,flip:Boolean,overlay:Boolean},data:{mode:"slide",flip:!1,overlay:!1,clsPage:"uk-offcanvas-page",clsContainer:"uk-offcanvas-container",selPanel:".uk-offcanvas-bar",clsFlip:"uk-offcanvas-flip",clsContainerAnimation:"uk-offcanvas-container-animation",clsSidebarAnimation:"uk-offcanvas-bar-animation",clsMode:"uk-offcanvas",clsOverlay:"uk-offcanvas-overlay",selClose:".uk-offcanvas-close",container:!1},computed:{clsFlip:function(t){var e=t.flip,i=t.clsFlip;return e?i:""},clsOverlay:function(t){var e=t.overlay,i=t.clsOverlay;return e?i:""},clsMode:function(t){var e=t.mode;return t.clsMode+"-"+e},clsSidebarAnimation:function(t){var e=t.mode,i=t.clsSidebarAnimation;return"none"===e||"reveal"===e?"":i},clsContainerAnimation:function(t){var e=t.mode,i=t.clsContainerAnimation;return"push"!==e&&"reveal"!==e?"":i},transitionElement:function(t){return"reveal"===t.mode?this.panel.parentNode:this.panel}},events:[{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){var e=t.current.hash;!t.defaultPrevented&&e&&Te(e,document.body)&&this.hide()}},{name:"touchstart",passive:!0,el:function(){return this.panel},handler:function(t){var e=t.targetTouches;1===e.length&&(this.clientY=e[0].clientY)}},{name:"touchmove",self:!0,passive:!1,filter:function(){return this.overlay},handler:function(t){t.cancelable&&t.preventDefault()}},{name:"touchmove",passive:!1,el:function(){return this.panel},handler:function(t){if(1===t.targetTouches.length){var e=event.targetTouches[0].clientY-this.clientY,i=this.panel,n=i.scrollTop,r=i.scrollHeight,o=i.clientHeight;(r<=o||0===n&&0<e||r-n<=o&&e<0)&&t.cancelable&&t.preventDefault()}}},{name:"show",self:!0,handler:function(){"reveal"!==this.mode||Pe(this.panel.parentNode,this.clsMode)||(Le(this.panel,"<div>"),Ae(this.panel.parentNode,this.clsMode)),We(document.documentElement,"overflowY",this.overlay?"hidden":""),Ae(document.body,this.clsContainer,this.clsFlip),We(document.body,"touch-action","pan-y pinch-zoom"),We(this.$el,"display","block"),Ae(this.$el,this.clsOverlay),Ae(this.panel,this.clsSidebarAnimation,"reveal"!==this.mode?this.clsMode:""),li(document.body),Ae(document.body,this.clsContainerAnimation),this.clsContainerAnimation&&(fr().content+=",user-scalable=0")}},{name:"hide",self:!0,handler:function(){Ne(document.body,this.clsContainerAnimation),We(document.body,"touch-action","")}},{name:"hidden",self:!0,handler:function(){var t;this.clsContainerAnimation&&((t=fr()).content=t.content.replace(/,user-scalable=0$/,"")),"reveal"===this.mode&&Me(this.panel),Ne(this.panel,this.clsSidebarAnimation,this.clsMode),Ne(this.$el,this.clsOverlay),We(this.$el,"display",""),Ne(document.body,this.clsContainer,this.clsFlip),We(document.documentElement,"overflowY","")}},{name:"swipeLeft swipeRight",handler:function(t){this.isToggled()&&c(t.type,"Left")^this.flip&&this.hide()}}]};function fr(){return Te('meta[name="viewport"]',document.head)||xe(document.head,'<meta name="viewport">')}var gr={mixins:[hn],props:{selContainer:String,selContent:String},data:{selContainer:".uk-modal",selContent:".uk-modal-dialog"},computed:{container:function(t,e){return Nt(e,t.selContainer)},content:function(t,e){return Nt(e,t.selContent)}},connected:function(){We(this.$el,"minHeight",150)},update:{read:function(){return!(!this.content||!this.container)&&{current:Z(We(this.$el,"maxHeight")),max:Math.max(150,li(this.container)-(si(this.content).height-li(this.$el)))}},write:function(t){var e=t.current,i=t.max;We(this.$el,"maxHeight",i),Math.round(e)!==Math.round(i)&&Jt(this.$el,"resize")},events:["resize"]}},pr={props:["width","height"],connected:function(){Ae(this.$el,"uk-responsive-width")},update:{read:function(){return!!(Zt(this.$el)&&this.width&&this.height)&&{width:ui(this.$el.parentNode),height:this.height}},write:function(t){li(this.$el,rt.contain({height:this.height,width:this.width},t).height)},events:["resize"]}},vr={props:{offset:Number},data:{offset:0},methods:{scrollTo:function(t){var e=this;t=t&&Te(t)||document.body,Jt(this.$el,"beforescroll",[this,t])&&Di(t,{offset:this.offset}).then(function(){return Jt(e.$el,"scrolled",[e,t])})}},events:{click:function(t){t.defaultPrevented||(t.preventDefault(),this.scrollTo(Pt(decodeURIComponent(this.$el.hash)).substr(1)))}}},wr={args:"cls",props:{cls:String,target:String,hidden:Boolean,offsetTop:Number,offsetLeft:Number,repeat:Boolean,delay:Number},data:function(){return{cls:!1,target:!1,hidden:!0,offsetTop:0,offsetLeft:0,repeat:!1,delay:0,inViewClass:"uk-scrollspy-inview"}},computed:{elements:{get:function(t,e){var i=t.target;return i?ze(i,e):[e]},watch:function(t){this.hidden&&We(Wt(t,":not(."+this.inViewClass+")"),"visibility","hidden")},immediate:!0}},update:[{read:function(t){var i=this;t.update&&this.elements.forEach(function(t){var e=t._ukScrollspyState;(e=e||{cls:ht(t,"uk-scrollspy-class")||i.cls}).show=Ni(t,i.offsetTop,i.offsetLeft),t._ukScrollspyState=e})},write:function(n){var r=this;if(!n.update)return this.$emit(),n.update=!0;this.elements.forEach(function(e){function t(t){We(e,"visibility",!t&&r.hidden?"hidden":""),Oe(e,r.inViewClass,t),Oe(e,i.cls),Jt(e,t?"inview":"outview"),i.inview=t,r.$update(e)}var i=e._ukScrollspyState;!i.show||i.inview||i.queued?!i.show&&i.inview&&!i.queued&&r.repeat&&t(!1):(i.queued=!0,n.promise=(n.promise||ae.resolve()).then(function(){return new ae(function(t){return setTimeout(t,r.delay)})}).then(function(){t(!0),setTimeout(function(){i.queued=!1,r.$emit()},300)}))})},events:["scroll","resize"]}]},mr={props:{cls:String,closest:String,scroll:Boolean,overflow:Boolean,offset:Number},data:{cls:"uk-active",closest:!1,scroll:!1,overflow:!0,offset:0},computed:{links:{get:function(t,e){return ze('a[href^="#"]',e).filter(function(t){return t.hash})},watch:function(t){this.scroll&&this.$create("scroll",t,{offset:this.offset||0})},immediate:!0},targets:function(){return ze(this.links.map(function(t){return Pt(t.hash).substr(1)}).join(","))},elements:function(t){var e=t.closest;return Nt(this.links,e||"*")}},update:[{read:function(){var i=this,t=this.targets.length;if(!t||!Zt(this.$el))return!1;var e=G(Oi(this.targets[0])),n=e.scrollTop,r=e.scrollHeight,o=ji(e),s=r-si(o).height,a=!1;return n===s?a=t-1:(this.targets.every(function(t,e){if(hi(t,o).top-i.offset<=0)return a=e,!0}),!1===a&&this.overflow&&(a=0)),{active:a}},write:function(t){var e=t.active;this.links.forEach(function(t){return t.blur()}),Ne(this.elements,this.cls),!1!==e&&Jt(this.$el,"active",[e,Ae(this.elements[e],this.cls)])},events:["scroll","resize"]}]},xr={mixins:[hn,nr],props:{top:null,bottom:Boolean,offset:String,animation:String,clsActive:String,clsInactive:String,clsFixed:String,clsBelow:String,selTarget:String,widthElement:Boolean,showOnUp:Boolean,targetOffset:Number},data:{top:0,bottom:!1,offset:0,animation:"",clsActive:"uk-active",clsInactive:"",clsFixed:"uk-sticky-fixed",clsBelow:"uk-sticky-below",selTarget:"",widthElement:!1,showOnUp:!1,targetOffset:!1},computed:{offset:function(t){return mi(t.offset)},selTarget:function(t,e){var i=t.selTarget;return i&&Te(i,e)||e},widthElement:function(t,e){return kt(t.widthElement,e)||this.placeholder},isActive:{get:function(){return Pe(this.selTarget,this.clsActive)},set:function(t){t&&!this.isActive?(De(this.selTarget,this.clsInactive,this.clsActive),Jt(this.$el,"active")):t||Pe(this.selTarget,this.clsInactive)||(De(this.selTarget,this.clsActive,this.clsInactive),Jt(this.$el,"inactive"))}}},connected:function(){this.placeholder=Te("+ .uk-sticky-placeholder",this.$el)||Te('<div class="uk-sticky-placeholder"></div>'),this.isFixed=!1,this.isActive=!1},disconnected:function(){this.isFixed&&(this.hide(),Ne(this.selTarget,this.clsInactive)),be(this.placeholder),this.placeholder=null,this.widthElement=null},events:[{name:"load hashchange popstate",el:ct&&window,handler:function(){var n=this;if(!1!==this.targetOffset&&location.hash&&0<window.pageYOffset){var r=Te(location.hash);r&&yi.read(function(){var t=si(r).top,e=si(n.$el).top,i=n.$el.offsetHeight;n.isFixed&&t<=e+i&&e<=t+r.offsetHeight&&Hi(window,t-i-(H(n.targetOffset)?n.targetOffset:0)-n.offset)})}}}],update:[{read:function(t,e){var i=t.height;this.isActive&&"update"!==e&&(this.hide(),i=this.$el.offsetHeight,this.show()),i=this.isActive?i:this.$el.offsetHeight,this.topOffset=si(this.isFixed?this.placeholder:this.$el).top,this.bottomOffset=this.topOffset+i;var n=yr("bottom",this);return this.top=Math.max(Z(yr("top",this)),this.topOffset)-this.offset,this.bottom=n&&n-this.$el.offsetHeight,this.inactive=!this.matchMedia,{lastScroll:!1,height:i,margins:We(this.$el,["marginTop","marginBottom","marginLeft","marginRight"])}},write:function(t){var e=t.height,i=t.margins,n=this.placeholder;We(n,X({height:e},i)),Rt(n,document)||(ke(this.$el,n),ot(n,"hidden","")),this.isActive=this.isActive},events:["resize"]},{read:function(t){var e=t.scroll;return void 0===e&&(e=0),this.width=si(Zt(this.widthElement)?this.widthElement:this.$el).width,this.scroll=window.pageYOffset,{dir:e<=this.scroll?"down":"up",scroll:this.scroll,visible:Zt(this.$el),top:ci(this.placeholder)[0]}},write:function(t,e){var i=this,n=t.initTimestamp;void 0===n&&(n=0);var r=t.dir,o=t.lastDir,s=t.lastScroll,a=t.scroll,h=t.top,c=t.visible,l=performance.now();if(!((t.lastScroll=a)<0||a===s||!c||this.disabled||this.showOnUp&&"scroll"!==e||((300<l-n||r!==o)&&(t.initScroll=a,t.initTimestamp=l),t.lastDir=r,this.showOnUp&&!this.isFixed&&Math.abs(t.initScroll-a)<=30&&Math.abs(s-a)<=10)))if(this.inactive||a<this.top||this.showOnUp&&(a<=this.top||"down"===r||"up"===r&&!this.isFixed&&a<=this.bottomOffset)){if(!this.isFixed)return void(ni.inProgress(this.$el)&&a<h&&(ni.cancel(this.$el),this.hide()));this.isFixed=!1,this.animation&&a>this.topOffset?(ni.cancel(this.$el),ni.out(this.$el,this.animation).then(function(){return i.hide()},et)):this.hide()}else this.isFixed?this.update():this.animation?(ni.cancel(this.$el),this.show(),ni.in(this.$el,this.animation).catch(et)):this.show()},events:["resize","scroll"]}],methods:{show:function(){this.isFixed=!0,this.update(),ot(this.placeholder,"hidden",null)},hide:function(){this.isActive=!1,Ne(this.$el,this.clsFixed,this.clsBelow),We(this.$el,{position:"",top:"",width:""}),ot(this.placeholder,"hidden","")},update:function(){var t=0!==this.top||this.scroll>this.top,e=Math.max(0,this.offset);H(this.bottom)&&this.scroll>this.bottom-this.offset&&(e=this.bottom-this.scroll),We(this.$el,{position:"fixed",top:e+"px",width:this.width}),this.isActive=t,Oe(this.$el,this.clsBelow,this.scroll>this.bottomOffset),Ae(this.$el,this.clsFixed)}}};function yr(t,e){var i=e.$props,n=e.$el,r=e[t+"Offset"],o=i[t];if(o)return A(o)&&o.match(/^-?\d/)?r+mi(o):si(!0===o?n.parentNode:kt(o,n)).bottom}var kr,Cr,br,Lr={mixins:[cn],args:"connect",props:{connect:String,toggle:String,active:Number,swiping:Boolean},data:{connect:"~.uk-switcher",toggle:"> * > :first-child",active:0,swiping:!0,cls:"uk-active",clsContainer:"uk-switcher",attrItem:"uk-switcher-item"},computed:{connects:{get:function(t,e){return Ct(t.connect,e)},watch:function(t){var e=this;t.forEach(function(t){return e.updateAria(t.children)}),this.swiping&&We(t,"touch-action","pan-y pinch-zoom")},immediate:!0},toggles:{get:function(t,e){return ze(t.toggle,e).filter(function(t){return!_t(t,".uk-disabled *, .uk-disabled, [disabled]")})},watch:function(t){var e=this.index();this.show(~e&&e||t[this.active]||t[0])},immediate:!0},children:function(){var t=this;return Ut(this.$el).filter(function(e){return t.toggles.some(function(t){return Rt(t,e)})})}},events:[{name:"click",delegate:function(){return this.toggle},handler:function(t){x(this.toggles,t.current)&&(t.preventDefault(),this.show(t.current))}},{name:"click",el:function(){return this.connects},delegate:function(){return"["+this.attrItem+"],[data-"+this.attrItem+"]"},handler:function(t){t.preventDefault(),this.show(ht(t.current,this.attrItem))}},{name:"swipeRight swipeLeft",filter:function(){return this.swiping},el:function(){return this.connects},handler:function(t){var e=t.type;this.show(c(e,"Left")?"next":"previous")}}],methods:{index:function(){var e=this;return k(this.children,function(t){return Pe(t,e.cls)})},show:function(t){var i=this,n=this.index(),r=ve(t,this.toggles,n);this.children.forEach(function(t,e){Oe(t,i.cls,r===e),ot(i.toggles[e],"aria-expanded",r===e)}),this.connects.forEach(function(t){var e=t.children;return i.toggleElement(V(e).filter(function(t,e){return e!==r&&i.isToggled(t)}),!1,0<=n).then(function(){return i.toggleElement(e[r],!0,0<=n)})})}}},$r={mixins:[hn],extends:Lr,props:{media:Boolean},data:{media:960,attrItem:"uk-tab-item"},connected:function(){var t=Pe(this.$el,"uk-tab-left")?"uk-tab-left":!!Pe(this.$el,"uk-tab-right")&&"uk-tab-right";t&&this.$create("toggle",this.$el,{cls:t,mode:"media",media:this.media})}},Mr={mixins:[nr,cn],args:"target",props:{href:String,target:null,mode:"list",queued:Boolean},data:{href:!1,target:!1,mode:"click",queued:!0},computed:{target:{get:function(t,e){var i=t.href,n=t.target;return(n=Ct(n||i,e)).length&&n||[e]},watch:function(){Jt(this.target,"updatearia",[this])},immediate:!0}},events:[{name:mt+" "+xt,filter:function(){return x(this.mode,"hover")},handler:function(t){re(t)||this.toggle("toggle"+(t.type===mt?"show":"hide"))}},{name:"click",filter:function(){return x(this.mode,"click")||gt&&x(this.mode,"hover")},handler:function(t){var e;(Nt(t.target,'a[href="#"], a[href=""]')||(e=Nt(t.target,"a[href]"))&&(this.cls&&!Pe(this.target,this.cls.split(" ")[0])||!Zt(this.target)||e.hash&&_t(this.target,e.hash)))&&t.preventDefault(),this.toggle()}}],update:{read:function(){return!(!x(this.mode,"media")||!this.media)&&{match:this.matchMedia}},write:function(t){var e=t.match,i=this.isToggled(this.target);(e?!i:i)&&this.toggle()},events:["resize"]},methods:{toggle:function(t){var e=this;if(Jt(this.target,t||"toggle",[this]))if(this.queued){var i=this.target.filter(this.isToggled);this.toggleElement(i,!1).then(function(){return e.toggleElement(e.target.filter(function(t){return!x(i,t)}),!0)})}else this.toggleElement(this.target)}}};J(Object.freeze({__proto__:null,Accordion:un,Alert:fn,Cover:pn,Drop:mn,Dropdown:mn,FormCustom:xn,Gif:yn,Grid:$n,HeightMatch:Bn,HeightViewport:En,Icon:On,Img:qn,Leader:rr,Margin:kn,Modal:cr,Nav:lr,Navbar:ur,Offcanvas:dr,OverflowAuto:gr,Responsive:pr,Scroll:vr,Scrollspy:wr,ScrollspyNav:mr,Sticky:xr,Svg:zn,Switcher:Lr,Tab:$r,Toggle:Mr,Video:gn,Close:Vn,Spinner:Wn,SlidenavNext:Zn,SlidenavPrevious:Zn,SearchIcon:Fn,Marker:jn,NavbarToggleIcon:jn,OverlayIcon:jn,PaginationNext:jn,PaginationPrevious:jn,Totop:jn}),function(t,e){return Ri.component(e,t)}),Ri.use(function(r){ct&&ge(function(){var e;r.update(),Yt(window,"load resize",function(){return r.update(null,"resize")}),Yt(document,"loadedmetadata load",function(t){var e=t.target;return r.update(e,"resize")},!0),Yt(window,"scroll",function(t){e||(e=!0,yi.write(function(){return e=!1}),r.update(null,t.type))},{passive:!0,capture:!0});var i,n=0;Yt(document,"animationstart",function(t){var e=t.target;(We(e,"animationName")||"").match(/^uk-.*(left|right)/)&&(n++,We(document.body,"overflowX","hidden"),setTimeout(function(){--n||We(document.body,"overflowX","")},q(We(e,"animationDuration"))+100))},!0),Yt(document,pt,function(t){if(i&&i(),re(t)){var s=oe(t),a="tagName"in t.target?t.target:t.target.parentNode;i=Gt(document,wt+" "+yt,function(t){var e=oe(t),r=e.x,o=e.y;(a&&r&&100<Math.abs(s.x-r)||o&&100<Math.abs(s.y-o))&&setTimeout(function(){var t,e,i,n;Jt(a,"swipe"),Jt(a,"swipe"+(t=s.x,e=s.y,i=r,n=o,Math.abs(t-i)>=Math.abs(e-n)?0<t-i?"Left":"Right":0<e-n?"Up":"Down"))})})}},{passive:!0})})}),Cr=(kr=Ri).connect,br=kr.disconnect,ct&&window.MutationObserver&&yi.read(function(){document.body&&Ee(document.body,Cr);new MutationObserver(function(t){var r=[];t.forEach(function(t){return i=r,n=(e=t).target,void(("attributes"!==e.type?function(t){for(var e=t.addedNodes,i=t.removedNodes,n=0;n<e.length;n++)Ee(e[n],Cr);for(var r=0;r<i.length;r++)Ee(i[r],br);return!0}:function(t){var e=t.target,i=t.attributeName;if("href"===i)return!0;var n=Wi(i);if(!(n&&n in kr))return;if(st(e,i))return kr[n](e),!0;var r=kr.getComponent(e,n);if(r)return r.$destroy(),!0})(e)&&!i.some(function(t){return t.contains(n)})&&i.push(n.contains?n:n.parentNode));var e,i,n}),r.forEach(function(t){return kr.update(t)})}).observe(document,{childList:!0,subtree:!0,characterData:!0,attributes:!0}),kr._initialized=!0});var Br={mixins:[hn],props:{date:String,clsWrapper:String},data:{date:"",clsWrapper:".uk-countdown-%unit%"},computed:{date:function(t){var e=t.date;return Date.parse(e)},days:function(t,e){return Te(t.clsWrapper.replace("%unit%","days"),e)},hours:function(t,e){return Te(t.clsWrapper.replace("%unit%","hours"),e)},minutes:function(t,e){return Te(t.clsWrapper.replace("%unit%","minutes"),e)},seconds:function(t,e){return Te(t.clsWrapper.replace("%unit%","seconds"),e)},units:function(){var e=this;return["days","hours","minutes","seconds"].filter(function(t){return e[t]})}},connected:function(){this.start()},disconnected:function(){var e=this;this.stop(),this.units.forEach(function(t){return we(e[t])})},events:[{name:"visibilitychange",el:ct&&document,handler:function(){document.hidden?this.stop():this.start()}}],update:{write:function(){var t,e,n=this,r=(t=this.date,{total:e=t-Date.now(),seconds:e/1e3%60,minutes:e/1e3/60%60,hours:e/1e3/60/60%24,days:e/1e3/60/60/24});r.total<=0&&(this.stop(),r.days=r.hours=r.minutes=r.seconds=0),this.units.forEach(function(t){var e=String(Math.floor(r[t]));e=e.length<2?"0"+e:e;var i=n[t];i.textContent!==e&&((e=e.split("")).length!==i.children.length&&me(i,e.map(function(){return"<span></span>"}).join("")),e.forEach(function(t,e){return i.children[e].textContent=t}))})}},methods:{start:function(){this.stop(),this.date&&this.units.length&&(this.$update(),this.timer=setInterval(this.$update,1e3))},stop:function(){this.timer&&(clearInterval(this.timer),this.timer=null)}}};var Ir,Sr="uk-animation-target",Er={props:{animation:Number},data:{animation:150},computed:{target:function(){return this.$el}},methods:{animate:function(t){var n=this;!function(){if(Ir)return;(Ir=xe(document.head,"<style>").sheet).insertRule("."+Sr+" > * {\n            margin-top: 0 !important;\n            transform: none !important;\n        }",0)}();var r=Ut(this.target),o=r.map(function(t){return Tr(t,!0)}),e=li(this.target),i=window.pageYOffset;t(),Qe.cancel(this.target),r.forEach(Qe.cancel),zr(this.target),this.$update(this.target,"resize"),yi.flush();var s=li(this.target),a=(r=r.concat(Ut(this.target).filter(function(t){return!x(r,t)}))).map(function(t,e){return!!(t.parentNode&&e in o)&&(o[e]?Zt(t)?_r(t):{opacity:0}:{opacity:Zt(t)?1:0})});return o=a.map(function(t,e){var i=r[e].parentNode===n.target&&(o[e]||Tr(r[e]));if(i)if(t){if(!("opacity"in t)){i.opacity%1?t.opacity=1:delete i.opacity}}else delete i.opacity;return i}),Ae(this.target,Sr),r.forEach(function(t,e){return o[e]&&We(t,o[e])}),We(this.target,{height:e,display:"block"}),Hi(window,i),ae.all(r.map(function(t,e){return["top","left","height","width"].some(function(t){return o[e][t]!==a[e][t]})&&Qe.start(t,a[e],n.animation,"ease")}).concat(e!==s&&Qe.start(this.target,{height:s},this.animation,"ease"))).then(function(){r.forEach(function(t,e){return We(t,{display:0===a[e].opacity?"none":"",zIndex:""})}),zr(n.target),n.$update(n.target,"resize"),yi.flush()},et)}}};function Tr(t,e){var i=We(t,"zIndex");return!!Zt(t)&&X({display:"",opacity:e?We(t,"opacity"):"0",pointerEvents:"none",position:"absolute",zIndex:"auto"===i?pe(t):i},_r(t))}function zr(t){We(t.children,{height:"",left:"",opacity:"",pointerEvents:"",position:"",top:"",width:""}),Ne(t,Sr),We(t,{height:"",display:""})}function _r(t){var e=si(t),i=e.height,n=e.width,r=hi(t);return{top:r.top,left:r.left,height:i,width:n}}var Ar={mixins:[Er],args:"target",props:{target:Boolean,selActive:Boolean},data:{target:null,selActive:!1,attrItem:"uk-filter-control",cls:"uk-active",animation:250},computed:{toggles:{get:function(t,e){t.attrItem;return ze("["+this.attrItem+"],[data-"+this.attrItem+"]",e)},watch:function(){var e=this;if(this.updateState(),!1!==this.selActive){var i=ze(this.selActive,this.$el);this.toggles.forEach(function(t){return Oe(t,e.cls,x(i,t))})}},immediate:!0},target:function(t,e){return Te(t.target,e)},children:{get:function(){return Ut(this.target)},watch:function(t,e){var i,n;n=e,(i=t).length===n.length&&i.every(function(t){return~n.indexOf(t)})||this.updateState()}}},events:[{name:"click",delegate:function(){return"["+this.attrItem+"],[data-"+this.attrItem+"]"},handler:function(t){t.preventDefault(),this.apply(t.current)}}],methods:{apply:function(t){this.setState(Hr(t,this.attrItem,this.getState()))},getState:function(){var i=this;return this.toggles.filter(function(t){return Pe(t,i.cls)}).reduce(function(t,e){return Hr(e,i.attrItem,t)},{filter:{"":""},sort:[]})},setState:function(c,t){var l=this;void 0===t&&(t=!0),c=X({filter:{"":""},sort:[]},c),Jt(this.$el,"beforeFilter",[this,c]);var u=this.children;this.toggles.forEach(function(t){return Oe(t,l.cls,!!function(t,e,i){var n=i.filter;void 0===n&&(n={"":""});var r=i.sort,o=r[0],s=r[1],a=Nr(t,e),h=a.filter;void 0===h&&(h="");var c=a.group;void 0===c&&(c="");var l=a.sort,u=a.order;void 0===u&&(u="asc");return P(l)?c in n&&h===n[c]||!h&&c&&!(c in n)&&!n[""]:o===l&&s===u}(t,l.attrItem,c))});function e(){var t,e,i=(t=c.filter,e="",J(t,function(t){return e+=t||""}),e);u.forEach(function(t){return We(t,"display",i&&!_t(t,i)?"none":"")});var n,r,o=c.sort,s=o[0],a=o[1];if(s){var h=(n=s,r=a,X([],u).sort(function(t,e){return ht(t,n).localeCompare(ht(e,n),void 0,{numeric:!0})*("asc"===r||-1)}));U(h,u)||h.forEach(function(t){return xe(l.target,t)})}}t?this.animate(e).then(function(){return Jt(l.$el,"afterFilter",[l])}):(e(),Jt(this.$el,"afterFilter",[this]))},updateState:function(){var t=this;yi.write(function(){return t.setState(t.getState(),!1)})}}};function Nr(t,e){return Ti(ht(t,e),["filter"])}function Hr(t,e,i){var n=Nr(t,e),r=n.filter,o=n.group,s=n.sort,a=n.order;return void 0===a&&(a="asc"),(r||P(s))&&(o?r?(delete i.filter[""],i.filter[o]=r):(delete i.filter[o],(D(i.filter)||""in i.filter)&&(i.filter={"":r||""})):i.filter={"":r||""}),P(s)||(i.sort=[s,a]),i}var Dr={slide:{show:function(t){return[{transform:Or(-100*t)},{transform:Or()}]},percent:function(t){return Pr(t)},translate:function(t,e){return[{transform:Or(-100*e*t)},{transform:Or(100*e*(1-t))}]}}};function Pr(t){return Math.abs(We(t,"transform").split(",")[4]/t.offsetWidth)||0}function Or(t,e){return void 0===t&&(t=0),void 0===e&&(e="%"),t+=t?e:"",lt?"translateX("+t+")":"translate3d("+t+", 0, 0)"}function jr(t){return"scale3d("+t+", "+t+", 1)"}var Zr=X({},Dr,{fade:{show:function(){return[{opacity:0},{opacity:1}]},percent:function(t){return 1-We(t,"opacity")},translate:function(t){return[{opacity:1-t},{opacity:t}]}},scale:{show:function(){return[{opacity:0,transform:jr(.8)},{opacity:1,transform:jr(1)}]},percent:function(t){return 1-We(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:jr(1-.2*t)},{opacity:t,transform:jr(.8+.2*t)}]}}});function Fr(t,e,i){Jt(t,Kt(e,!1,!1,i))}var Vr={mixins:[{props:{autoplay:Boolean,autoplayInterval:Number,pauseOnHover:Boolean},data:{autoplay:!1,autoplayInterval:7e3,pauseOnHover:!0},connected:function(){this.autoplay&&this.startAutoplay()},disconnected:function(){this.stopAutoplay()},update:function(){ot(this.slides,"tabindex","-1")},events:[{name:"visibilitychange",el:ct&&document,filter:function(){return this.autoplay},handler:function(){document.hidden?this.stopAutoplay():this.startAutoplay()}}],methods:{startAutoplay:function(){var t=this;this.stopAutoplay(),this.interval=setInterval(function(){return(!t.draggable||!Te(":focus",t.$el))&&(!t.pauseOnHover||!_t(t.$el,":hover"))&&!t.stack.length&&t.show("next")},this.autoplayInterval)},stopAutoplay:function(){this.interval&&clearInterval(this.interval)}}},{props:{draggable:Boolean},data:{draggable:!0,threshold:10},created:function(){var n=this;["start","move","end"].forEach(function(t){var i=n[t];n[t]=function(t){var e=oe(t).x*(ut?-1:1);n.prevPos=e!==n.pos?n.pos:n.prevPos,n.pos=e,i(t)}})},events:[{name:pt,delegate:function(){return this.selSlides},handler:function(t){var e;!this.draggable||!re(t)&&(!(e=t.target).children.length&&e.childNodes.length)||Nt(t.target,Ft)||0<t.button||this.length<2||this.start(t)}},{name:"touchmove",passive:!1,handler:"move",filter:function(){return"touchmove"==vt},delegate:function(){return this.selSlides}},{name:"dragstart",handler:function(t){t.preventDefault()}}],methods:{start:function(){var t=this;this.drag=this.pos,this._transitioner?(this.percent=this._transitioner.percent(),this.drag+=this._transitioner.getDistance()*this.percent*this.dir,this._transitioner.cancel(),this._transitioner.translate(this.percent),this.dragging=!0,this.stack=[]):this.prevIndex=this.index;var e="touchmove"!=vt?Yt(document,vt,this.move,{passive:!1}):et;this.unbindMove=function(){e(),t.unbindMove=null},Yt(window,"scroll",this.unbindMove),Yt(window.visualViewport,"resize",this.unbindMove),Yt(document,wt+" "+yt,this.end,!0),We(this.list,"userSelect","none")},move:function(t){var e=this;if(this.unbindMove){var i=this.pos-this.drag;if(!(0==i||this.prevPos===this.pos||!this.dragging&&Math.abs(i)<this.threshold)){We(this.list,"pointerEvents","none"),t.cancelable&&t.preventDefault(),this.dragging=!0,this.dir=i<0?1:-1;for(var n=this.slides,r=this.prevIndex,o=Math.abs(i),s=this.getIndex(r+this.dir,r),a=this._getDistance(r,s)||n[r].offsetWidth;s!==r&&a<o;)this.drag-=a*this.dir,r=s,o-=a,s=this.getIndex(r+this.dir,r),a=this._getDistance(r,s)||n[r].offsetWidth;this.percent=o/a;var h,c=n[r],l=n[s],u=this.index!==s,d=r===s;[this.index,this.prevIndex].filter(function(t){return!x([s,r],t)}).forEach(function(t){Jt(n[t],"itemhidden",[e]),d&&(h=!0,e.prevIndex=r)}),(this.index===r&&this.prevIndex!==r||h)&&Jt(n[this.index],"itemshown",[this]),u&&(this.prevIndex=r,this.index=s,d||Jt(c,"beforeitemhide",[this]),Jt(l,"beforeitemshow",[this])),this._transitioner=this._translate(Math.abs(this.percent),c,!d&&l),u&&(d||Jt(c,"itemhide",[this]),Jt(l,"itemshow",[this]))}}},end:function(){if(Xt(window,"scroll",this.unbindMove),Xt(window.visualViewport,"resize",this.unbindMove),this.unbindMove&&this.unbindMove(),Xt(document,wt,this.end,!0),this.dragging)if(this.dragging=null,this.index===this.prevIndex)this.percent=1-this.percent,this.dir*=-1,this._show(!1,this.index,!0),this._transitioner=null;else{var t=(ut?this.dir*(ut?1:-1):this.dir)<0==this.prevPos>this.pos;this.index=t?this.index:this.prevIndex,t&&(this.percent=1-this.percent),this.show(0<this.dir&&!t||this.dir<0&&t?"next":"previous",!0)}We(this.list,{userSelect:"",pointerEvents:""}),this.drag=this.percent=null}}},{data:{selNav:!1},computed:{nav:function(t,e){return Te(t.selNav,e)},selNavItem:function(t){var e=t.attrItem;return"["+e+"],[data-"+e+"]"},navItems:function(t,e){return ze(this.selNavItem,e)}},update:{write:function(){var i=this;this.nav&&this.length!==this.nav.children.length&&me(this.nav,this.slides.map(function(t,e){return"<li "+i.attrItem+'="'+e+'"><a href></a></li>'}).join("")),Oe(ze(this.selNavItem,this.$el).concat(this.nav),"uk-hidden",!this.maxIndex),this.updateNav()},events:["resize"]},events:[{name:"click",delegate:function(){return this.selNavItem},handler:function(t){t.preventDefault(),this.show(ht(t.current,this.attrItem))}},{name:"itemshow",handler:"updateNav"}],methods:{updateNav:function(){var i=this,n=this.getValidIndex();this.navItems.forEach(function(t){var e=ht(t,i.attrItem);Oe(t,i.clsActive,j(e)===n),Oe(t,"uk-invisible",i.finite&&("previous"===e&&0===n||"next"===e&&n>=i.maxIndex))})}}}],props:{clsActivated:Boolean,easing:String,index:Number,finite:Boolean,velocity:Number,selSlides:String},data:function(){return{easing:"ease",finite:!1,velocity:1,index:0,prevIndex:-1,stack:[],percent:0,clsActive:"uk-active",clsActivated:!1,Transitioner:!1,transitionOptions:{}}},connected:function(){this.prevIndex=-1,this.index=this.getValidIndex(this.index),this.stack=[]},disconnected:function(){Ne(this.slides,this.clsActive)},computed:{duration:function(t,e){var i=t.velocity;return Wr(e.offsetWidth/i)},list:function(t,e){return Te(t.selList,e)},maxIndex:function(){return this.length-1},selSlides:function(t){return t.selList+" "+(t.selSlides||"> *")},slides:{get:function(){return ze(this.selSlides,this.$el)},watch:function(){this.$reset()}},length:function(){return this.slides.length}},events:{itemshown:function(){this.$update(this.list)}},methods:{show:function(t,e){var i=this;if(void 0===e&&(e=!1),!this.dragging&&this.length){var n=this.stack,r=e?0:n.length,o=function(){n.splice(r,1),n.length&&i.show(n.shift(),!0)};if(n[e?"unshift":"push"](t),!e&&1<n.length)2===n.length&&this._transitioner.forward(Math.min(this.duration,200));else{var s=this.getIndex(this.index),a=Pe(this.slides,this.clsActive)&&this.slides[s],h=this.getIndex(t,this.index),c=this.slides[h];if(a!==c){var l,u;if(this.dir=(u=s,"next"!==(l=t)&&("previous"===l||l<u)?-1:1),this.prevIndex=s,this.index=h,a&&!Jt(a,"beforeitemhide",[this])||!Jt(c,"beforeitemshow",[this,a]))return this.index=this.prevIndex,void o();var d=this._show(a,c,e).then(function(){return a&&Jt(a,"itemhidden",[i]),Jt(c,"itemshown",[i]),new ae(function(t){yi.write(function(){n.shift(),n.length?i.show(n.shift(),!0):i._transitioner=null,t()})})});return a&&Jt(a,"itemhide",[this]),Jt(c,"itemshow",[this]),d}o()}}},getIndex:function(t,e){return void 0===t&&(t=this.index),void 0===e&&(e=this.index),tt(ve(t,this.slides,e,this.finite),0,this.maxIndex)},getValidIndex:function(t,e){return void 0===t&&(t=this.index),void 0===e&&(e=this.prevIndex),this.getIndex(t,e)},_show:function(t,e,i){if(this._transitioner=this._getTransitioner(t,e,this.dir,X({easing:i?e.offsetWidth<600?"cubic-bezier(0.25, 0.46, 0.45, 0.94)":"cubic-bezier(0.165, 0.84, 0.44, 1)":this.easing},this.transitionOptions)),!i&&!t)return this._translate(1),ae.resolve();var n=this.stack.length;return this._transitioner[1<n?"forward":"show"](1<n?Math.min(this.duration,75+75/(n-1)):this.duration,this.percent)},_getDistance:function(t,e){return this._getTransitioner(t,t!==e&&e).getDistance()},_translate:function(t,e,i){void 0===e&&(e=this.prevIndex),void 0===i&&(i=this.index);var n=this._getTransitioner(e!==i&&e,i);return n.translate(t),n},_getTransitioner:function(t,e,i,n){return void 0===t&&(t=this.prevIndex),void 0===e&&(e=this.index),void 0===i&&(i=this.dir||1),void 0===n&&(n=this.transitionOptions),new this.Transitioner(N(t)?this.slides[t]:t,N(e)?this.slides[e]:e,i*(ut?-1:1),n)}}};function Wr(t){return.5*t+300}var Rr={mixins:[Vr],props:{animation:String},data:{animation:"slide",clsActivated:"uk-transition-active",Animations:Dr,Transitioner:function(o,s,a,t){var e=t.animation,h=t.easing,i=e.percent,n=e.translate,r=e.show;void 0===r&&(r=et);var c=r(a),l=new se;return{dir:a,show:function(t,e,i){var n=this;void 0===e&&(e=0);var r=i?"linear":h;return t-=Math.round(t*tt(e,-1,1)),this.translate(e),Fr(s,"itemin",{percent:e,duration:t,timing:r,dir:a}),Fr(o,"itemout",{percent:1-e,duration:t,timing:r,dir:a}),ae.all([Qe.start(s,c[1],t,r),Qe.start(o,c[0],t,r)]).then(function(){n.reset(),l.resolve()},et),l.promise},stop:function(){return Qe.stop([s,o])},cancel:function(){Qe.cancel([s,o])},reset:function(){for(var t in c[0])We([s,o],t,"")},forward:function(t,e){return void 0===e&&(e=this.percent()),Qe.cancel([s,o]),this.show(t,e,!0)},translate:function(t){this.reset();var e=n(t,a);We(s,e[1]),We(o,e[0]),Fr(s,"itemtranslatein",{percent:t,dir:a}),Fr(o,"itemtranslateout",{percent:1-t,dir:a})},percent:function(){return i(o||s,s,a)},getDistance:function(){return o&&o.offsetWidth}}}},computed:{animation:function(t){var e=t.animation,i=t.Animations;return X(i[e]||i.slide,{name:e})},transitionOptions:function(){return{animation:this.animation}}},events:{"itemshow itemhide itemshown itemhidden":function(t){var e=t.target;this.$update(e)},beforeitemshow:function(t){Ae(t.target,this.clsActive)},itemshown:function(t){Ae(t.target,this.clsActivated)},itemhidden:function(t){Ne(t.target,this.clsActive,this.clsActivated)}}},qr={mixins:[or,ar,cn,Rr],functional:!0,props:{delayControls:Number,preload:Number,videoAutoplay:Boolean,template:String},data:function(){return{preload:1,videoAutoplay:!1,delayControls:3e3,items:[],cls:"uk-open",clsPage:"uk-lightbox-page",selList:".uk-lightbox-items",attrItem:"uk-lightbox-item",selClose:".uk-close-large",selCaption:".uk-lightbox-caption",pauseOnHover:!1,velocity:2,Animations:Zr,template:'<div class="uk-lightbox uk-overflow-hidden"> <ul class="uk-lightbox-items"></ul> <div class="uk-lightbox-toolbar uk-position-top uk-text-right uk-transition-slide-top uk-transition-opaque"> <button class="uk-lightbox-toolbar-icon uk-close-large" type="button" uk-close></button> </div> <a class="uk-lightbox-button uk-position-center-left uk-position-medium uk-transition-fade" href uk-slidenav-previous uk-lightbox-item="previous"></a> <a class="uk-lightbox-button uk-position-center-right uk-position-medium uk-transition-fade" href uk-slidenav-next uk-lightbox-item="next"></a> <div class="uk-lightbox-toolbar uk-lightbox-caption uk-position-bottom uk-text-center uk-transition-slide-bottom uk-transition-opaque"></div> </div>'}},created:function(){var t=Te(this.template),e=Te(this.selList,t);this.items.forEach(function(){return xe(e,"<li>")}),this.$mount(xe(this.container,t))},computed:{caption:function(t,e){t.selCaption;return Te(".uk-lightbox-caption",e)}},events:[{name:vt+" "+pt+" keydown",handler:"showControls"},{name:"click",self:!0,delegate:function(){return this.selSlides},handler:function(t){t.defaultPrevented||this.hide()}},{name:"shown",self:!0,handler:function(){this.showControls()}},{name:"hide",self:!0,handler:function(){this.hideControls(),Ne(this.slides,this.clsActive),Qe.stop(this.slides)}},{name:"hidden",self:!0,handler:function(){this.$destroy(!0)}},{name:"keyup",el:ct&&document,handler:function(t){if(this.isToggled(this.$el)&&this.draggable)switch(t.keyCode){case 37:this.show("previous");break;case 39:this.show("next")}}},{name:"beforeitemshow",handler:function(t){this.isToggled()||(this.draggable=!1,t.preventDefault(),this.toggleElement(this.$el,!0,!1),this.animation=Zr.scale,Ne(t.target,this.clsActive),this.stack.splice(1,0,this.index))}},{name:"itemshow",handler:function(){me(this.caption,this.getItem().caption||"");for(var t=-this.preload;t<=this.preload;t++)this.loadItem(this.index+t)}},{name:"itemshown",handler:function(){this.draggable=this.$props.draggable}},{name:"itemload",handler:function(t,r){var o=this,n=r.source,e=r.type,s=r.alt;void 0===s&&(s="");var i=r.poster,a=r.attrs;if(void 0===a&&(a={}),this.setItem(r,"<span uk-spinner></span>"),n){var h,c={frameborder:"0",allow:"autoplay",allowfullscreen:"",style:"max-width: 100%; box-sizing: border-box;","uk-responsive":"","uk-video":""+this.videoAutoplay};if("image"===e||n.match(/\.(jpe?g|png|gif|svg|webp)($|\?)/i))fe(n,a.srcset,a.size).then(function(t){var e=t.width,i=t.height;return o.setItem(r,Ur("img",X({src:n,width:e,height:i,alt:s},a)))},function(){return o.setError(r)});else if("video"===e||n.match(/\.(mp4|webm|ogv)($|\?)/i)){var l=Ur("video",X({src:n,poster:i,controls:"",playsinline:"","uk-video":""+this.videoAutoplay},a));Yt(l,"loadedmetadata",function(){ot(l,{width:l.videoWidth,height:l.videoHeight}),o.setItem(r,l)}),Yt(l,"error",function(){return o.setError(r)})}else"iframe"===e||n.match(/\.(html|php)($|\?)/i)?this.setItem(r,Ur("iframe",X({src:n,frameborder:"0",allowfullscreen:"",class:"uk-lightbox-iframe"},a))):(h=n.match(/\/\/(?:.*?youtube(-nocookie)?\..*?[?&]v=|youtu\.be\/)([\w-]{11})[&?]?(.*)?/))?this.setItem(r,Ur("iframe",X({src:"https://www.youtube"+(h[1]||"")+".com/embed/"+h[2]+(h[3]?"?"+h[3]:""),width:1920,height:1080},c,a))):(h=n.match(/\/\/.*?vimeo\.[a-z]+\/(\d+)[&?]?(.*)?/))&&de("https://vimeo.com/api/oembed.json?maxwidth=1920&url="+encodeURI(n),{responseType:"json",withCredentials:!1}).then(function(t){var e=t.response,i=e.height,n=e.width;return o.setItem(r,Ur("iframe",X({src:"https://player.vimeo.com/video/"+h[1]+(h[2]?"?"+h[2]:""),width:n,height:i},c,a)))},function(){return o.setError(r)})}}}],methods:{loadItem:function(t){void 0===t&&(t=this.index);var e=this.getItem(t);this.getSlide(e).childElementCount||Jt(this.$el,"itemload",[e])},getItem:function(t){return void 0===t&&(t=this.index),this.items[ve(t,this.slides)]},setItem:function(t,e){Jt(this.$el,"itemloaded",[this,me(this.getSlide(t),e)])},getSlide:function(t){return this.slides[this.items.indexOf(t)]},setError:function(t){this.setItem(t,'<span uk-icon="icon: bolt; ratio: 2"></span>')},showControls:function(){clearTimeout(this.controlsTimer),this.controlsTimer=setTimeout(this.hideControls,this.delayControls),Ae(this.$el,"uk-active","uk-transition-active")},hideControls:function(){Ne(this.$el,"uk-active","uk-transition-active")}}};function Ur(t,e){var i=Se("<"+t+">");return ot(i,e),i}var Yr,Xr={install:function(t,e){t.lightboxPanel||t.component("lightboxPanel",qr);X(e.props,t.component("lightboxPanel").options.props)},props:{toggle:String},data:{toggle:"a"},computed:{toggles:{get:function(t,e){return ze(t.toggle,e)},watch:function(){this.hide()}}},disconnected:function(){this.hide()},events:[{name:"click",delegate:function(){return this.toggle+":not(.uk-disabled)"},handler:function(t){t.preventDefault(),this.show(t.current)}}],methods:{show:function(t){var e=this,i=Q(this.toggles.map(Gr),"source");if(T(t)){var n=Gr(t).source;t=k(i,function(t){var e=t.source;return n===e})}return this.panel=this.panel||this.$create("lightboxPanel",X({},this.$props,{items:i})),Yt(this.panel.$el,"hidden",function(){return e.panel=!1}),this.panel.show(t)},hide:function(){return this.panel&&this.panel.hide()}}};function Gr(e){var i={};return["href","caption","type","poster","alt","attrs"].forEach(function(t){i["href"===t?"source":t]=ht(e,t)}),i.attrs=Ti(i.attrs),i}var Jr={functional:!0,args:["message","status"],data:{message:"",status:"",timeout:5e3,group:null,pos:"top-center",clsContainer:"uk-notification",clsClose:"uk-notification-close",clsMsg:"uk-notification-message"},install:function(r){r.notification.closeAll=function(i,n){Ee(document.body,function(t){var e=r.getComponent(t,"notification");!e||i&&i!==e.group||e.close(n)})}},computed:{marginProp:function(t){return"margin"+(m(t.pos,"top")?"Top":"Bottom")},startProps:function(){var t;return(t={opacity:0})[this.marginProp]=-this.$el.offsetHeight,t}},created:function(){var t=Te("."+this.clsContainer+"-"+this.pos,this.$container)||xe(this.$container,'<div class="'+this.clsContainer+" "+this.clsContainer+"-"+this.pos+'" style="display: block"></div>');this.$mount(xe(t,'<div class="'+this.clsMsg+(this.status?" "+this.clsMsg+"-"+this.status:"")+'"> <a href class="'+this.clsClose+'" data-uk-close></a> <div>'+this.message+"</div> </div>"))},connected:function(){var t,e=this,i=Z(We(this.$el,this.marginProp));Qe.start(We(this.$el,this.startProps),((t={opacity:1})[this.marginProp]=i,t)).then(function(){e.timeout&&(e.timer=setTimeout(e.close,e.timeout))})},events:((Yr={click:function(t){Nt(t.target,'a[href="#"],a[href=""]')&&t.preventDefault(),this.close()}})[mt]=function(){this.timer&&clearTimeout(this.timer)},Yr[xt]=function(){this.timeout&&(this.timer=setTimeout(this.close,this.timeout))},Yr),methods:{close:function(t){function e(){var t=i.$el.parentNode;Jt(i.$el,"close",[i]),be(i.$el),t&&!t.hasChildNodes()&&be(t)}var i=this;this.timer&&clearTimeout(this.timer),t?e():Qe.start(this.$el,this.startProps).then(e)}}};var Kr=["x","y","bgx","bgy","rotate","scale","color","backgroundColor","borderColor","opacity","blur","hue","grayscale","invert","saturate","sepia","fopacity","stroke"],Qr={mixins:[nr],props:Kr.reduce(function(t,e){return t[e]="list",t},{}),data:Kr.reduce(function(t,e){return t[e]=void 0,t},{}),computed:{props:function(p,v){var w=this;return Kr.reduce(function(t,e){if(P(p[e]))return t;var i,n,r,o=e.match(/color/i),s=o||"opacity"===e,a=p[e].slice(0);s&&We(v,e,""),a.length<2&&a.unshift(("scale"===e?1:s?We(v,e):0)||0);var h=a.reduce(function(t,e){return A(e)&&e.replace(/-|\d/g,"").trim()||t},"");if(o){var c=v.style.color;a=a.map(function(t){return We(We(v,"color",t),"color").split(/[(),]/g).slice(1,-1).concat(1).slice(0,4).map(Z)}),v.style.color=c}else if(m(e,"bg")){var l="bgy"===e?"height":"width";if(a=a.map(function(t){return mi(t,l,w.$el)}),We(v,"background-position-"+e[2],""),n=We(v,"backgroundPosition").split(" ")["x"===e[2]?0:1],w.covers){var u=Math.min.apply(Math,a),d=Math.max.apply(Math,a),f=a.indexOf(u)<a.indexOf(d);r=d-u,a=a.map(function(t){return t-(f?u:d)}),i=(f?-r:0)+"px"}else i=n}else a=a.map(Z);if("stroke"===e){if(!a.some(function(t){return t}))return t;var g=Hn(w.$el);We(v,"strokeDasharray",g),"%"===h&&(a=a.map(function(t){return t*g/100})),a=a.reverse(),e="strokeDashoffset"}return t[e]={steps:a,unit:h,pos:i,bgPos:n,diff:r},t},{})},bgProps:function(){var e=this;return["bgx","bgy"].filter(function(t){return t in e.props})},covers:function(t,e){return n=(i=e).style.backgroundSize,r="cover"===We(We(i,"backgroundSize",""),"backgroundSize"),i.style.backgroundSize=n,r;var i,n,r}},disconnected:function(){delete this._image},update:{read:function(t){var h=this;if(t.active=this.matchMedia,t.active){if(!t.image&&this.covers&&this.bgProps.length){var e=We(this.$el,"backgroundImage").replace(/^none|url\(["']?(.+?)["']?\)$/,"$1");if(e){var i=new Image;i.src=e,(t.image=i).naturalWidth||(i.onload=function(){return h.$update()})}}var n=t.image;if(n&&n.naturalWidth){var c={width:this.$el.offsetWidth,height:this.$el.offsetHeight},l={width:n.naturalWidth,height:n.naturalHeight},u=rt.cover(l,c);this.bgProps.forEach(function(t){var e=h.props[t],i=e.diff,n=e.bgPos,r=e.steps,o="bgy"===t?"height":"width",s=u[o]-c[o];if(s<i)c[o]=u[o]+i-s;else if(i<s){var a=c[o]/mi(n,o,h.$el);a&&(h.props[t].steps=r.map(function(t){return t-(s-i)/a}))}u=rt.cover(l,c)}),t.dim=u}}},write:function(t){var e=t.dim;t.active?e&&We(this.$el,{backgroundSize:e.width+"px "+e.height+"px",backgroundRepeat:"no-repeat"}):We(this.$el,{backgroundSize:"",backgroundRepeat:""})},events:["resize"]},methods:{reset:function(){var i=this;J(this.getCss(0),function(t,e){return We(i.$el,e,"")})},getCss:function(u){var d=this.props;return Object.keys(d).reduce(function(t,e){var i=d[e],n=i.steps,r=i.unit,o=i.pos,s=function(t,e,i){void 0===i&&(i=2);var n=to(t,e),r=n[0],o=n[1],s=n[2];return(N(r)?r+Math.abs(r-o)*s*(r<o?1:-1):+o).toFixed(i)}(n,u);switch(e){case"x":case"y":r=r||"px",t.transform+=" translate"+g(e)+"("+Z(s).toFixed("px"===r?0:2)+r+")";break;case"rotate":r=r||"deg",t.transform+=" rotate("+(s+r)+")";break;case"scale":t.transform+=" scale("+s+")";break;case"bgy":case"bgx":t["background-position-"+e[2]]="calc("+o+" + "+s+"px)";break;case"color":case"backgroundColor":case"borderColor":var a=to(n,u),h=a[0],c=a[1],l=a[2];t[e]="rgba("+h.map(function(t,e){return t+=l*(c[e]-t),3===e?Z(t):parseInt(t,10)}).join(",")+")";break;case"blur":r=r||"px",t.filter+=" blur("+(s+r)+")";break;case"hue":r=r||"deg",t.filter+=" hue-rotate("+(s+r)+")";break;case"fopacity":r=r||"%",t.filter+=" opacity("+(s+r)+")";break;case"grayscale":case"invert":case"saturate":case"sepia":r=r||"%",t.filter+=" "+e+"("+(s+r)+")";break;default:t[e]=s}return t},{transform:"",filter:""})}}};function to(t,e){var i=t.length-1,n=Math.min(Math.floor(i*e),i-1),r=t.slice(n,n+2);return r.push(1===e?1:e%(1/i)*i),r}var eo={mixins:[Qr],props:{target:String,viewport:Number,easing:Number},data:{target:!1,viewport:1,easing:1},computed:{target:function(t,e){var i=t.target;return function t(e){return e?"offsetTop"in e?e:t(e.parentNode):document.body}(i&&kt(i,e)||e)}},update:{read:function(t,e){var i=t.percent;if("scroll"!==e&&(i=!1),t.active){var n,r,o=i;return n=Pi(this.target)/(this.viewport||1),r=this.easing,{percent:i=tt(n*(1-(r-r*n))),style:o!==i&&this.getCss(i)}}},write:function(t){var e=t.style;t.active?e&&We(this.$el,e):this.reset()},events:["scroll","resize"]}};var io={update:{write:function(){if(!this.stack.length&&!this.dragging){var t=this.getValidIndex(this.index);~this.prevIndex&&this.index===t||this.show(t)}},events:["resize"]}};function no(t,e,i){var n,r=so(t,e);return i?r-(n=t,si(e).width/2-si(n).width/2):Math.min(r,ro(e))}function ro(t){return Math.max(0,oo(t)-si(t).width)}function oo(t){return ho(t).reduce(function(t,e){return si(e).width+t},0)}function so(t,e){return(hi(t).left+(ut?si(t).width-si(e).width:0))*(ut?-1:1)}function ao(t,e,i){Jt(t,Kt(e,!1,!1,i))}function ho(t){return Ut(t)}var co={mixins:[hn,Vr,io],props:{center:Boolean,sets:Boolean},data:{center:!1,sets:!1,attrItem:"uk-slider-item",selList:".uk-slider-items",selNav:".uk-slider-nav",clsContainer:"uk-slider-container",Transitioner:function(r,n,o,t){var e=t.center,s=t.easing,a=t.list,h=new se,i=r?no(r,a,e):no(n,a,e)+si(n).width*o,c=n?no(n,a,e):i+si(r).width*o*(ut?-1:1);return{dir:o,show:function(t,e,i){void 0===e&&(e=0);var n=i?"linear":s;return t-=Math.round(t*tt(e,-1,1)),this.translate(e),r&&this.updateTranslates(),e=r?e:tt(e,0,1),ao(this.getItemIn(),"itemin",{percent:e,duration:t,timing:n,dir:o}),r&&ao(this.getItemIn(!0),"itemout",{percent:1-e,duration:t,timing:n,dir:o}),Qe.start(a,{transform:Or(-c*(ut?-1:1),"px")},t,n).then(h.resolve,et),h.promise},stop:function(){return Qe.stop(a)},cancel:function(){Qe.cancel(a)},reset:function(){We(a,"transform","")},forward:function(t,e){return void 0===e&&(e=this.percent()),Qe.cancel(a),this.show(t,e,!0)},translate:function(t){var e=this.getDistance()*o*(ut?-1:1);We(a,"transform",Or(tt(e-e*t-c,-oo(a),si(a).width)*(ut?-1:1),"px")),this.updateTranslates(),r&&(t=tt(t,-1,1),ao(this.getItemIn(),"itemtranslatein",{percent:t,dir:o}),ao(this.getItemIn(!0),"itemtranslateout",{percent:1-t,dir:o}))},percent:function(){return Math.abs((We(a,"transform").split(",")[4]*(ut?-1:1)+i)/(c-i))},getDistance:function(){return Math.abs(c-i)},getItemIn:function(t){void 0===t&&(t=!1);var e=this.getActives(),i=K(ho(a),"offsetLeft"),n=pe(i,e[0<o*(t?-1:1)?e.length-1:0]);return~n&&i[n+(r&&!t?o:0)]},getActives:function(){var i=no(r||n,a,e);return K(ho(a).filter(function(t){var e=so(t,a);return i<=e&&e+si(t).width<=si(a).width+i}),"offsetLeft")},updateTranslates:function(){var i=this.getActives();ho(a).forEach(function(t){var e=x(i,t);ao(t,"itemtranslate"+(e?"in":"out"),{percent:e?1:0,dir:t.offsetLeft<=n.offsetLeft?1:-1})})}}}},computed:{avgWidth:function(){return oo(this.list)/this.length},finite:function(t){return t.finite||Math.ceil(oo(this.list))<si(this.list).width+ho(this.list).reduce(function(t,e){return Math.max(t,si(e).width)},0)+this.center},maxIndex:function(){if(!this.finite||this.center&&!this.sets)return this.length-1;if(this.center)return G(this.sets);We(this.slides,"order","");for(var t=ro(this.list),e=this.length;e--;)if(so(this.list.children[e],this.list)<t)return Math.min(e+1,this.length-1);return 0},sets:function(t){var o=this,e=t.sets,s=si(this.list).width/(this.center?2:1),a=0,h=s,c=0;return!D(e=e&&this.slides.reduce(function(t,e,i){var n=si(e).width;if(a<c+n&&(!o.center&&i>o.maxIndex&&(i=o.maxIndex),!x(t,i))){var r=o.slides[i+1];o.center&&r&&n<h-si(r).width/2?h-=n:(h=s,t.push(i),a=c+s+(o.center?n/2:0))}return c+=n,t},[]))&&e},transitionOptions:function(){return{center:this.center,list:this.list}}},connected:function(){Oe(this.$el,this.clsContainer,!Te("."+this.clsContainer,this.$el))},update:{write:function(){var i=this;ze("["+this.attrItem+"],[data-"+this.attrItem+"]",this.$el).forEach(function(t){var e=ht(t,i.attrItem);i.maxIndex&&Oe(t,"uk-hidden",H(e)&&(i.sets&&!x(i.sets,Z(e))||e>i.maxIndex))}),!this.length||this.dragging||this.stack.length||(this.reorder(),this._translate(1));var e=this._getTransitioner(this.index).getActives();this.slides.forEach(function(t){return Oe(t,i.clsActive,x(e,t))}),this.sets&&!x(this.sets,Z(this.index))||this.slides.forEach(function(t){return Oe(t,i.clsActivated,x(e,t))})},events:["resize"]},events:{beforeitemshow:function(t){!this.dragging&&this.sets&&this.stack.length<2&&!x(this.sets,this.index)&&(this.index=this.getValidIndex());var e=Math.abs(this.index-this.prevIndex+(0<this.dir&&this.index<this.prevIndex||this.dir<0&&this.index>this.prevIndex?(this.maxIndex+1)*this.dir:0));if(!this.dragging&&1<e){for(var i=0;i<e;i++)this.stack.splice(1,0,0<this.dir?"next":"previous");t.preventDefault()}else this.duration=Wr(this.avgWidth/this.velocity)*(si(this.dir<0||!this.slides[this.prevIndex]?this.slides[this.index]:this.slides[this.prevIndex]).width/this.avgWidth),this.reorder()},itemshow:function(){~this.prevIndex&&Ae(this._getTransitioner().getItemIn(),this.clsActive)}},methods:{reorder:function(){var i=this;if(this.finite)We(this.slides,"order","");else{var n=0<this.dir&&this.slides[this.prevIndex]?this.prevIndex:this.index;if(this.slides.forEach(function(t,e){return We(t,"order",0<i.dir&&e<n?1:i.dir<0&&e>=i.index?-1:"")}),this.center)for(var t=this.slides[n],e=si(this.list).width/2-si(t).width/2,r=0;0<e;){var o=this.getIndex(--r+n,n),s=this.slides[o];We(s,"order",n<o?-2:-1),e-=si(s).width}}},getValidIndex:function(t,e){if(void 0===t&&(t=this.index),void 0===e&&(e=this.prevIndex),t=this.getIndex(t,e),!this.sets)return t;var i;do{if(x(this.sets,t))return t;i=t,t=this.getIndex(t+this.dir,e)}while(t!==i);return t}}},lo={mixins:[Qr],data:{selItem:"!li"},computed:{item:function(t,e){return kt(t.selItem,e)}},events:[{name:"itemshown",self:!0,el:function(){return this.item},handler:function(){We(this.$el,this.getCss(.5))}},{name:"itemin itemout",self:!0,el:function(){return this.item},handler:function(t){var e=t.type,i=t.detail,n=i.percent,r=i.duration,o=i.timing,s=i.dir;Qe.cancel(this.$el),We(this.$el,this.getCss(fo(e,s,n))),Qe.start(this.$el,this.getCss(uo(e)?.5:0<s?1:0),r,o).catch(et)}},{name:"transitioncanceled transitionend",self:!0,el:function(){return this.item},handler:function(){Qe.cancel(this.$el)}},{name:"itemtranslatein itemtranslateout",self:!0,el:function(){return this.item},handler:function(t){var e=t.type,i=t.detail,n=i.percent,r=i.dir;Qe.cancel(this.$el),We(this.$el,this.getCss(fo(e,r,n)))}}]};function uo(t){return c(t,"in")}function fo(t,e,i){return i/=2,uo(t)?e<0?1-i:i:e<0?i:1-i}var go,po,vo=X({},Dr,{fade:{show:function(){return[{opacity:0,zIndex:0},{zIndex:-1}]},percent:function(t){return 1-We(t,"opacity")},translate:function(t){return[{opacity:1-t,zIndex:0},{zIndex:-1}]}},scale:{show:function(){return[{opacity:0,transform:jr(1.5),zIndex:0},{zIndex:-1}]},percent:function(t){return 1-We(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:jr(1+.5*t),zIndex:0},{zIndex:-1}]}},pull:{show:function(t){return t<0?[{transform:Or(30),zIndex:-1},{transform:Or(),zIndex:0}]:[{transform:Or(-100),zIndex:0},{transform:Or(),zIndex:-1}]},percent:function(t,e,i){return i<0?1-Pr(e):Pr(t)},translate:function(t,e){return e<0?[{transform:Or(30*t),zIndex:-1},{transform:Or(-100*(1-t)),zIndex:0}]:[{transform:Or(100*-t),zIndex:0},{transform:Or(30*(1-t)),zIndex:-1}]}},push:{show:function(t){return t<0?[{transform:Or(100),zIndex:0},{transform:Or(),zIndex:-1}]:[{transform:Or(-30),zIndex:-1},{transform:Or(),zIndex:0}]},percent:function(t,e,i){return 0<i?1-Pr(e):Pr(t)},translate:function(t,e){return e<0?[{transform:Or(100*t),zIndex:0},{transform:Or(-30*(1-t)),zIndex:-1}]:[{transform:Or(-30*t),zIndex:-1},{transform:Or(100*(1-t)),zIndex:0}]}}}),wo={mixins:[hn,Rr,io],props:{ratio:String,minHeight:Number,maxHeight:Number},data:{ratio:"16:9",minHeight:!1,maxHeight:!1,selList:".uk-slideshow-items",attrItem:"uk-slideshow-item",selNav:".uk-slideshow-nav",Animations:vo},update:{read:function(){var t=this.ratio.split(":").map(Number),e=t[0],i=t[1];return i=i*this.list.offsetWidth/e||0,this.minHeight&&(i=Math.max(this.minHeight,i)),this.maxHeight&&(i=Math.min(this.maxHeight,i)),{height:i-fi(this.list,"height","content-box")}},write:function(t){var e=t.height;0<e&&We(this.list,"minHeight",e)},events:["resize"]}},mo={mixins:[hn,Er],props:{group:String,threshold:Number,clsItem:String,clsPlaceholder:String,clsDrag:String,clsDragState:String,clsBase:String,clsNoDrag:String,clsEmpty:String,clsCustom:String,handle:String},data:{group:!1,threshold:5,clsItem:"uk-sortable-item",clsPlaceholder:"uk-sortable-placeholder",clsDrag:"uk-sortable-drag",clsDragState:"uk-drag",clsBase:"uk-sortable",clsNoDrag:"uk-sortable-nodrag",clsEmpty:"uk-sortable-empty",clsCustom:"",handle:!1,pos:{}},created:function(){var i=this;["init","start","move","end"].forEach(function(t){var e=i[t];i[t]=function(t){X(i.pos,oe(t)),e(t)}})},events:{name:pt,passive:!1,handler:"init"},computed:{target:function(){return(this.$el.tBodies||[this.$el])[0]},items:function(){return Ut(this.target)},isEmpty:{get:function(){return D(this.items)},watch:function(t){Oe(this.target,this.clsEmpty,t)},immediate:!0},handles:{get:function(t,e){var i=t.handle;return i?ze(i,e):this.items},watch:function(t,e){We(e,{touchAction:"",userSelect:""}),We(t,{touchAction:gt?"none":"",userSelect:"none"})},immediate:!0}},update:{write:function(){if(this.drag&&Ht(this.placeholder)){var t=this.pos,e=t.x,i=t.y,n=this.origin,r=n.offsetTop,o=n.offsetLeft,s=this.drag,a=s.offsetHeight,h=s.offsetWidth,c=si(window),l=c.right,u=c.bottom,d=document.elementFromPoint(e,i);We(this.drag,{top:tt(i-r,0,u-a),left:tt(e-o,0,l-h)});var f=this.getSortable(d),g=this.getSortable(this.placeholder),p=f!==g;if(f&&!Rt(d,this.placeholder)&&(!p||f.group&&f.group===g.group)){if(d=f.target===d.parentNode&&d||f.items.filter(function(t){return Rt(d,t)})[0],p)g.remove(this.placeholder);else if(!d)return;f.insert(this.placeholder,d),x(this.touched,f)||this.touched.push(f)}}},events:["move"]},methods:{init:function(t){var e=t.target,i=t.button,n=t.defaultPrevented,r=this.items.filter(function(t){return Rt(e,t)})[0];!r||n||0<i||Vt(e)||Rt(e,"."+this.clsNoDrag)||this.handle&&!Rt(e,this.handle)||(t.preventDefault(),this.touched=[this],this.placeholder=r,this.origin=X({target:e,index:pe(r)},this.pos),Yt(document,vt,this.move),Yt(document,wt,this.end),this.threshold||this.start(t))},start:function(t){var e,i,n;this.drag=(e=this.$container,i=this.placeholder,ot(n=xe(e,i.outerHTML.replace(/(^<)(?:li|tr)|(?:li|tr)(\/>$)/g,"$1div$2")),"style",ot(n,"style")+";margin:0!important"),We(n,X({boxSizing:"border-box",width:i.offsetWidth,height:i.offsetHeight,overflow:"hidden"},We(i,["paddingLeft","paddingRight","paddingTop","paddingBottom"]))),li(n.firstElementChild,li(i.firstElementChild)),n);var r,o,s=this.placeholder.getBoundingClientRect(),a=s.left,h=s.top;X(this.origin,{offsetLeft:this.pos.x-a,offsetTop:this.pos.y-h}),Ae(this.drag,this.clsDrag,this.clsCustom),Ae(this.placeholder,this.clsPlaceholder),Ae(this.items,this.clsItem),Ae(document.documentElement,this.clsDragState),Jt(this.$el,"start",[this,this.placeholder]),r=this.pos,o=Date.now(),go=setInterval(function(){var t=r.x,a=r.y;a+=window.pageYOffset;var h=.3*(Date.now()-o);o=Date.now(),Oi(document.elementFromPoint(t,r.y)).some(function(t){var e=t.scrollTop,i=t.scrollHeight,n=si(ji(t)),r=n.top,o=n.bottom,s=n.height;if(r<a&&a<r+30)e-=h;else{if(!(a<o&&o-30<a))return;e+=h}if(0<e&&e<i-s)return Hi(t,e),!0})},15),this.move(t)},move:function(t){this.drag?this.$emit("move"):(Math.abs(this.pos.x-this.origin.x)>this.threshold||Math.abs(this.pos.y-this.origin.y)>this.threshold)&&this.start(t)},end:function(t){if(Xt(document,vt,this.move),Xt(document,wt,this.end),Xt(window,"scroll",this.scroll),this.drag){clearInterval(go);var e=this.getSortable(this.placeholder);this===e?this.origin.index!==pe(this.placeholder)&&Jt(this.$el,"moved",[this,this.placeholder]):(Jt(e.$el,"added",[e,this.placeholder]),Jt(this.$el,"removed",[this,this.placeholder])),Jt(this.$el,"stop",[this,this.placeholder]),be(this.drag),this.drag=null;var i=this.touched.map(function(t){return t.clsPlaceholder+" "+t.clsItem}).join(" ");this.touched.forEach(function(t){return Ne(t.items,i)}),Ne(document.documentElement,this.clsDragState)}else"touchend"===t.type&&t.target.click()},insert:function(i,n){var r=this;Ae(this.items,this.clsItem);function t(){var t,e;n?(!Rt(i,r.target)||(e=n,(t=i).parentNode===e.parentNode&&pe(t)>pe(e))?ye:ke)(n,i):xe(r.target,i)}this.animation?this.animate(t):t()},remove:function(t){Rt(t,this.target)&&(this.animation?this.animate(function(){return be(t)}):be(t))},getSortable:function(t){return t&&(this.$getComponent(t,"sortable")||this.getSortable(t.parentNode))}}};var xo=[],yo={mixins:[or,cn,wn],args:"title",props:{delay:Number,title:String},data:{pos:"top",title:"",delay:0,animation:["uk-animation-scale-up"],duration:100,cls:"uk-active",clsPos:"uk-tooltip"},beforeConnect:function(){this._hasTitle=st(this.$el,"title"),ot(this.$el,{title:"","aria-expanded":!1})},disconnected:function(){this.hide(),ot(this.$el,{title:this._hasTitle?this.title:null,"aria-expanded":null})},methods:{show:function(){var e=this;!this.isActive()&&this.title&&(xo.forEach(function(t){return t.hide()}),xo.push(this),this._unbind=Yt(document,wt,function(t){return!Rt(t.target,e.$el)&&e.hide()}),clearTimeout(this.showTimer),this.showTimer=setTimeout(this._show,this.delay))},hide:function(){var t=this;this.isActive()&&!_t(this.$el,"input:focus")&&this.toggleElement(this.tooltip,!1,!1).then(function(){xo.splice(xo.indexOf(t),1),clearTimeout(t.showTimer),t.tooltip=be(t.tooltip),t._unbind()})},_show:function(){var e=this;this.tooltip=xe(this.container,'<div class="'+this.clsPos+'"> <div class="'+this.clsPos+'-inner">'+this.title+"</div> </div>"),Yt(this.tooltip,"toggled",function(){var t=e.isToggled(e.tooltip);ot(e.$el,"aria-expanded",t),t&&(e.positionAt(e.tooltip,e.$el),e.origin="y"===e.getAxis()?wi(e.dir)+"-"+e.align:e.align+"-"+wi(e.dir))}),this.toggleElement(this.tooltip,!0)},isActive:function(){return x(xo,this)}},events:((po={focus:"show",blur:"hide"})[mt+" "+xt]=function(t){re(t)||(t.type===mt?this.show():this.hide())},po[pt]=function(t){re(t)&&(this.isActive()?this.hide():this.show())},po)},ko={props:{allow:String,clsDragover:String,concurrent:Number,maxSize:Number,method:String,mime:String,msgInvalidMime:String,msgInvalidName:String,msgInvalidSize:String,multiple:Boolean,name:String,params:Object,type:String,url:String},data:{allow:!1,clsDragover:"uk-dragover",concurrent:1,maxSize:0,method:"POST",mime:!1,msgInvalidMime:"Invalid File Type: %s",msgInvalidName:"Invalid File Name: %s",msgInvalidSize:"Invalid File Size: %s Kilobytes Max",multiple:!1,name:"files[]",params:{},type:"",url:"",abort:et,beforeAll:et,beforeSend:et,complete:et,completeAll:et,error:et,fail:et,load:et,loadEnd:et,loadStart:et,progress:et},events:{change:function(t){_t(t.target,'input[type="file"]')&&(t.preventDefault(),t.target.files&&this.upload(t.target.files),t.target.value="")},drop:function(t){bo(t);var e=t.dataTransfer;e&&e.files&&(Ne(this.$el,this.clsDragover),this.upload(e.files))},dragenter:function(t){bo(t)},dragover:function(t){bo(t),Ae(this.$el,this.clsDragover)},dragleave:function(t){bo(t),Ne(this.$el,this.clsDragover)}},methods:{upload:function(t){var n=this;if(t.length){Jt(this.$el,"upload",[t]);for(var e=0;e<t.length;e++){if(this.maxSize&&1e3*this.maxSize<t[e].size)return void this.fail(this.msgInvalidSize.replace("%s",this.maxSize));if(this.allow&&!Co(this.allow,t[e].name))return void this.fail(this.msgInvalidName.replace("%s",this.allow));if(this.mime&&!Co(this.mime,t[e].type))return void this.fail(this.msgInvalidMime.replace("%s",this.mime))}this.multiple||(t=[t[0]]),this.beforeAll(this,t);var r=function(t,e){for(var i=[],n=0;n<t.length;n+=e){for(var r=[],o=0;o<e;o++)r.push(t[n+o]);i.push(r)}return i}(t,this.concurrent),o=function(t){var e=new FormData;for(var i in t.forEach(function(t){return e.append(n.name,t)}),n.params)e.append(i,n.params[i]);de(n.url,{data:e,method:n.method,responseType:n.type,beforeSend:function(t){var e=t.xhr;e.upload&&Yt(e.upload,"progress",n.progress),["loadStart","load","loadEnd","abort"].forEach(function(t){return Yt(e,t.toLowerCase(),n[t])}),n.beforeSend(t)}}).then(function(t){n.complete(t),r.length?o(r.shift()):n.completeAll(t)},function(t){return n.error(t)})};o(r.shift())}}}};function Co(t,e){return e.match(new RegExp("^"+t.replace(/\//g,"\\/").replace(/\*\*/g,"(\\/[^\\/]+)*").replace(/\*/g,"[^\\/]+").replace(/((?!\\))\?/g,"$1.")+"$","i"))}function bo(t){t.preventDefault(),t.stopPropagation()}return J(Object.freeze({__proto__:null,Countdown:Br,Filter:Ar,Lightbox:Xr,LightboxPanel:qr,Notification:Jr,Parallax:eo,Slider:co,SliderParallax:lo,Slideshow:wo,SlideshowParallax:lo,Sortable:mo,Tooltip:yo,Upload:ko}),function(t,e){return Ri.component(e,t)}),Ri}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define("uikiticons",e):(t=t||self).UIkitIcons=e()}(this,function(){"use strict";function e(t){e.installed||t.icon.add({"500px":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.624,11.866c-0.141,0.132,0.479,0.658,0.662,0.418c0.051-0.046,0.607-0.61,0.662-0.664c0,0,0.738,0.719,0.814,0.719 c0.1,0,0.207-0.055,0.322-0.17c0.27-0.269,0.135-0.416,0.066-0.495l-0.631-0.616l0.658-0.668c0.146-0.156,0.021-0.314-0.1-0.449 c-0.182-0.18-0.359-0.226-0.471-0.125l-0.656,0.654l-0.654-0.654c-0.033-0.034-0.08-0.045-0.124-0.045 c-0.079,0-0.191,0.068-0.307,0.181c-0.202,0.202-0.247,0.351-0.133,0.462l0.665,0.665L9.624,11.866z"/><path d="M11.066,2.884c-1.061,0-2.185,0.248-3.011,0.604c-0.087,0.034-0.141,0.106-0.15,0.205C7.893,3.784,7.919,3.909,7.982,4.066 c0.05,0.136,0.187,0.474,0.452,0.372c0.844-0.326,1.779-0.507,2.633-0.507c0.963,0,1.9,0.191,2.781,0.564 c0.695,0.292,1.357,0.719,2.078,1.34c0.051,0.044,0.105,0.068,0.164,0.068c0.143,0,0.273-0.137,0.389-0.271 c0.191-0.214,0.324-0.395,0.135-0.575c-0.686-0.654-1.436-1.138-2.363-1.533C13.24,3.097,12.168,2.884,11.066,2.884z"/><path d="M16.43,15.747c-0.092-0.028-0.242,0.05-0.309,0.119l0,0c-0.652,0.652-1.42,1.169-2.268,1.521 c-0.877,0.371-1.814,0.551-2.779,0.551c-0.961,0-1.896-0.189-2.775-0.564c-0.848-0.36-1.612-0.879-2.268-1.53 c-0.682-0.688-1.196-1.455-1.529-2.268c-0.325-0.799-0.471-1.643-0.471-1.643c-0.045-0.24-0.258-0.249-0.567-0.203 c-0.128,0.021-0.519,0.079-0.483,0.36v0.01c0.105,0.644,0.289,1.284,0.545,1.895c0.417,0.969,1.002,1.849,1.756,2.604 c0.757,0.754,1.636,1.34,2.604,1.757C8.901,18.785,9.97,19,11.088,19c1.104,0,2.186-0.215,3.188-0.645 c1.838-0.896,2.604-1.757,2.604-1.757c0.182-0.204,0.227-0.317-0.1-0.643C16.779,15.956,16.525,15.774,16.43,15.747z"/><path d="M5.633,13.287c0.293,0.71,0.723,1.341,1.262,1.882c0.54,0.54,1.172,0.971,1.882,1.264c0.731,0.303,1.509,0.461,2.298,0.461 c0.801,0,1.578-0.158,2.297-0.461c0.711-0.293,1.344-0.724,1.883-1.264c0.543-0.541,0.971-1.172,1.264-1.882 c0.314-0.721,0.463-1.5,0.463-2.298c0-0.79-0.148-1.569-0.463-2.289c-0.293-0.699-0.721-1.329-1.264-1.881 c-0.539-0.541-1.172-0.959-1.867-1.263c-0.721-0.303-1.5-0.461-2.299-0.461c-0.802,0-1.613,0.159-2.322,0.461 c-0.577,0.25-1.544,0.867-2.119,1.454v0.012V2.108h8.16C15.1,2.104,15.1,1.69,15.1,1.552C15.1,1.417,15.1,1,14.809,1H5.915 C5.676,1,5.527,1.192,5.527,1.384v6.84c0,0.214,0.273,0.372,0.529,0.428c0.5,0.105,0.614-0.056,0.737-0.224l0,0 c0.18-0.273,0.776-0.884,0.787-0.894c0.901-0.905,2.117-1.408,3.416-1.408c1.285,0,2.5,0.501,3.412,1.408 c0.914,0.914,1.408,2.122,1.408,3.405c0,1.288-0.508,2.496-1.408,3.405c-0.9,0.896-2.152,1.406-3.438,1.406 c-0.877,0-1.711-0.229-2.433-0.671v-4.158c0-0.553,0.237-1.151,0.643-1.614c0.462-0.519,1.094-0.799,1.782-0.799 c0.664,0,1.293,0.253,1.758,0.715c0.459,0.459,0.709,1.071,0.709,1.723c0,1.385-1.094,2.468-2.488,2.468 c-0.273,0-0.769-0.121-0.781-0.125c-0.281-0.087-0.405,0.306-0.438,0.436c-0.159,0.496,0.079,0.585,0.123,0.607 c0.452,0.137,0.743,0.157,1.129,0.157c1.973,0,3.572-1.6,3.572-3.57c0-1.964-1.6-3.552-3.572-3.552c-0.97,0-1.872,0.36-2.546,1.038 c-0.656,0.631-1.027,1.487-1.027,2.322v3.438v-0.011c-0.372-0.42-0.732-1.041-0.981-1.682c-0.102-0.248-0.315-0.202-0.607-0.113 c-0.135,0.035-0.519,0.157-0.44,0.439C5.372,12.799,5.577,13.164,5.633,13.287z"/></svg>',album:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="5" y="2" width="10" height="1"/><rect x="3" y="4" width="14" height="1"/><rect fill="none" stroke="#000" x="1.5" y="6.5" width="17" height="11"/></svg>',"arrow-down":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="10.5,16.08 5.63,10.66 6.37,10 10.5,14.58 14.63,10 15.37,10.66"/><line fill="none" stroke="#000" x1="10.5" y1="4" x2="10.5" y2="15"/></svg>',"arrow-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="10 14 5 9.5 10 5"/><line fill="none" stroke="#000" x1="16" y1="9.5" x2="5" y2="9.52"/></svg>',"arrow-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="10 5 15 9.5 10 14"/><line fill="none" stroke="#000" x1="4" y1="9.5" x2="15" y2="9.5"/></svg>',"arrow-up":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="10.5,4 15.37,9.4 14.63,10.08 10.5,5.49 6.37,10.08 5.63,9.4"/><line fill="none" stroke="#000" x1="10.5" y1="16" x2="10.5" y2="5"/></svg>',ban:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"/><line fill="none" stroke="#000" stroke-width="1.1" x1="4" y1="3.5" x2="16" y2="16.5"/></svg>',behance:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.5,10.6c-0.4-0.5-0.9-0.9-1.6-1.1c1.7-1,2.2-3.2,0.7-4.7C7.8,4,6.3,4,5.2,4C3.5,4,1.7,4,0,4v12c1.7,0,3.4,0,5.2,0 c1,0,2.1,0,3.1-0.5C10.2,14.6,10.5,12.3,9.5,10.6L9.5,10.6z M5.6,6.1c1.8,0,1.8,2.7-0.1,2.7c-1,0-2,0-2.9,0V6.1H5.6z M2.6,13.8v-3.1 c1.1,0,2.1,0,3.2,0c2.1,0,2.1,3.2,0.1,3.2L2.6,13.8z"/><path d="M19.9,10.9C19.7,9.2,18.7,7.6,17,7c-4.2-1.3-7.3,3.4-5.3,7.1c0.9,1.7,2.8,2.3,4.7,2.1c1.7-0.2,2.9-1.3,3.4-2.9h-2.2 c-0.4,1.3-2.4,1.5-3.5,0.6c-0.4-0.4-0.6-1.1-0.6-1.7H20C20,11.7,19.9,10.9,19.9,10.9z M13.5,10.6c0-1.6,2.3-2.7,3.5-1.4 c0.4,0.4,0.5,0.9,0.6,1.4H13.5L13.5,10.6z"/><rect x="13" y="4" width="5" height="1.4"/></svg>',bell:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.1" d="M17,15.5 L3,15.5 C2.99,14.61 3.79,13.34 4.1,12.51 C4.58,11.3 4.72,10.35 5.19,7.01 C5.54,4.53 5.89,3.2 7.28,2.16 C8.13,1.56 9.37,1.5 9.81,1.5 L9.96,1.5 C9.96,1.5 11.62,1.41 12.67,2.17 C14.08,3.2 14.42,4.54 14.77,7.02 C15.26,10.35 15.4,11.31 15.87,12.52 C16.2,13.34 17.01,14.61 17,15.5 L17,15.5 Z"/><path fill="none" stroke="#000" d="M12.39,16 C12.39,17.37 11.35,18.43 9.91,18.43 C8.48,18.43 7.42,17.37 7.42,16"/></svg>',bold:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M5,15.3 C5.66,15.3 5.9,15 5.9,14.53 L5.9,5.5 C5.9,4.92 5.56,4.7 5,4.7 L5,4 L8.95,4 C12.6,4 13.7,5.37 13.7,6.9 C13.7,7.87 13.14,9.17 10.86,9.59 L10.86,9.7 C13.25,9.86 14.29,11.28 14.3,12.54 C14.3,14.47 12.94,16 9,16 L5,16 L5,15.3 Z M9,9.3 C11.19,9.3 11.8,8.5 11.85,7 C11.85,5.65 11.3,4.8 9,4.8 L7.67,4.8 L7.67,9.3 L9,9.3 Z M9.185,15.22 C11.97,15 12.39,14 12.4,12.58 C12.4,11.15 11.39,10 9,10 L7.67,10 L7.67,15 L9.18,15 Z"/></svg>',bolt:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M4.74,20 L7.73,12 L3,12 L15.43,1 L12.32,9 L17.02,9 L4.74,20 L4.74,20 L4.74,20 Z M9.18,11 L7.1,16.39 L14.47,10 L10.86,10 L12.99,4.67 L5.61,11 L9.18,11 L9.18,11 L9.18,11 Z"/></svg>',bookmark:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" points="5.5 1.5 15.5 1.5 15.5 17.5 10.5 12.5 5.5 17.5"/></svg>',calendar:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M 2,3 2,17 18,17 18,3 2,3 Z M 17,16 3,16 3,8 17,8 17,16 Z M 17,7 3,7 3,4 17,4 17,7 Z"/><rect width="1" height="3" x="6" y="2"/><rect width="1" height="3" x="13" y="2"/></svg>',camera:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10.8" r="3.8"/><path fill="none" stroke="#000" d="M1,4.5 C0.7,4.5 0.5,4.7 0.5,5 L0.5,17 C0.5,17.3 0.7,17.5 1,17.5 L19,17.5 C19.3,17.5 19.5,17.3 19.5,17 L19.5,5 C19.5,4.7 19.3,4.5 19,4.5 L13.5,4.5 L13.5,2.9 C13.5,2.6 13.3,2.5 13,2.5 L7,2.5 C6.7,2.5 6.5,2.6 6.5,2.9 L6.5,4.5 L1,4.5 L1,4.5 Z"/></svg>',cart:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="7.3" cy="17.3" r="1.4"/><circle cx="13.3" cy="17.3" r="1.4"/><polyline fill="none" stroke="#000" points="0 2 3.2 4 5.3 12.5 16 12.5 18 6.5 8 6.5"/></svg>',check:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.1" points="4,10 8,15 17,4"/></svg>',"chevron-double-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.03" points="10 14 6 10 10 6"/><polyline fill="none" stroke="#000" stroke-width="1.03" points="14 14 10 10 14 6"/></svg>',"chevron-double-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.03" points="10 6 14 10 10 14"/><polyline fill="none" stroke="#000" stroke-width="1.03" points="6 6 10 10 6 14"/></svg>',"chevron-down":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.03" points="16 7 10 13 4 7"/></svg>',"chevron-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.03" points="13 16 7 10 13 4"/></svg>',"chevron-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.03" points="7 4 13 10 7 16"/></svg>',"chevron-up":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.03" points="4 13 10 7 16 13"/></svg>',clock:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"/><rect x="9" y="4" width="1" height="7"/><path fill="none" stroke="#000" stroke-width="1.1" d="M13.018,14.197 L9.445,10.625"/></svg>',close:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.06" d="M16,16 L4,4"/><path fill="none" stroke="#000" stroke-width="1.06" d="M16,4 L4,16"/></svg>',"cloud-download":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.1" d="M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.3,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6"/><polyline fill="none" stroke="#000" points="11.75 16 9.5 18.25 7.25 16"/><path fill="none" stroke="#000" d="M9.5,18 L9.5,9.5"/></svg>',"cloud-upload":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.1" d="M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.31,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6"/><polyline fill="none" stroke="#000" points="7.25 11.75 9.5 9.5 11.75 11.75"/><path fill="none" stroke="#000" d="M9.5,18 L9.5,9.5"/></svg>',code:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.01" points="13,4 19,10 13,16"/><polyline fill="none" stroke="#000" stroke-width="1.01" points="7,4 1,10 7,16"/></svg>',cog:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" cx="9.997" cy="10" r="3.31"/><path fill="none" stroke="#000" d="M18.488,12.285 L16.205,16.237 C15.322,15.496 14.185,15.281 13.303,15.791 C12.428,16.289 12.047,17.373 12.246,18.5 L7.735,18.5 C7.938,17.374 7.553,16.299 6.684,15.791 C5.801,15.27 4.655,15.492 3.773,16.237 L1.5,12.285 C2.573,11.871 3.317,10.999 3.317,9.991 C3.305,8.98 2.573,8.121 1.5,7.716 L3.765,3.784 C4.645,4.516 5.794,4.738 6.687,4.232 C7.555,3.722 7.939,2.637 7.735,1.5 L12.263,1.5 C12.072,2.637 12.441,3.71 13.314,4.22 C14.206,4.73 15.343,4.516 16.225,3.794 L18.487,7.714 C17.404,8.117 16.661,8.988 16.67,10.009 C16.672,11.018 17.415,11.88 18.488,12.285 L18.488,12.285 Z"/></svg>',comment:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6,18.71 L6,14 L1,14 L1,1 L19,1 L19,14 L10.71,14 L6,18.71 L6,18.71 Z M2,13 L7,13 L7,16.29 L10.29,13 L18,13 L18,2 L2,2 L2,13 L2,13 Z"/></svg>',commenting:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" points="1.5,1.5 18.5,1.5 18.5,13.5 10.5,13.5 6.5,17.5 6.5,13.5 1.5,13.5"/><circle cx="10" cy="8" r="1"/><circle cx="6" cy="8" r="1"/><circle cx="14" cy="8" r="1"/></svg>',comments:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="2 0.5 19.5 0.5 19.5 13"/><path d="M5,19.71 L5,15 L0,15 L0,2 L18,2 L18,15 L9.71,15 L5,19.71 L5,19.71 L5,19.71 Z M1,14 L6,14 L6,17.29 L9.29,14 L17,14 L17,3 L1,3 L1,14 L1,14 L1,14 Z"/></svg>',copy:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" x="3.5" y="2.5" width="12" height="16"/><polyline fill="none" stroke="#000" points="5 0.5 17.5 0.5 17.5 17"/></svg>',"credit-card":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" x="1.5" y="4.5" width="17" height="12"/><rect x="1" y="7" width="18" height="3"/></svg>',database:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><ellipse fill="none" stroke="#000" cx="10" cy="4.64" rx="7.5" ry="3.14"/><path fill="none" stroke="#000" d="M17.5,8.11 C17.5,9.85 14.14,11.25 10,11.25 C5.86,11.25 2.5,9.84 2.5,8.11"/><path fill="none" stroke="#000" d="M17.5,11.25 C17.5,12.99 14.14,14.39 10,14.39 C5.86,14.39 2.5,12.98 2.5,11.25"/><path fill="none" stroke="#000" d="M17.49,4.64 L17.5,14.36 C17.5,16.1 14.14,17.5 10,17.5 C5.86,17.5 2.5,16.09 2.5,14.36 L2.5,4.64"/></svg>',desktop:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="8" y="15" width="1" height="2"/><rect x="11" y="15" width="1" height="2"/><rect x="5" y="16" width="10" height="1"/><rect fill="none" stroke="#000" x="1.5" y="3.5" width="17" height="11"/></svg>',download:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="14,10 9.5,14.5 5,10"/><rect x="3" y="17" width="13" height="1"/><line fill="none" stroke="#000" x1="9.5" y1="13.91" x2="9.5" y2="3"/></svg>',dribbble:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.4" d="M1.3,8.9c0,0,5,0.1,8.6-1c1.4-0.4,2.6-0.9,4-1.9 c1.4-1.1,2.5-2.5,2.5-2.5"/><path fill="none" stroke="#000" stroke-width="1.4" d="M3.9,16.6c0,0,1.7-2.8,3.5-4.2 c1.8-1.3,4-2,5.7-2.2C16,10,19,10.6,19,10.6"/><path fill="none" stroke="#000" stroke-width="1.4" d="M6.9,1.6c0,0,3.3,4.6,4.2,6.8 c0.4,0.9,1.3,3.1,1.9,5.2c0.6,2,0.9,4.4,0.9,4.4"/><circle fill="none" stroke="#000" stroke-width="1.4" cx="10" cy="10" r="9"/></svg>',etsy:'<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><path d="M8,4.26C8,4.07,8,4,8.31,4h4.46c.79,0,1.22.67,1.53,1.91l.25,1h.76c.14-2.82.26-4,.26-4S13.65,3,12.52,3H6.81L3.75,2.92v.84l1,.2c.73.11.9.27,1,1,0,0,.06,2,.06,5.17s-.06,5.14-.06,5.14c0,.59-.23.81-1,.94l-1,.2v.84l3.06-.1h5.11c1.15,0,3.82.1,3.82.1,0-.7.45-3.88.51-4.22h-.73l-.76,1.69a2.25,2.25,0,0,1-2.45,1.47H9.4c-1,0-1.44-.4-1.44-1.24V10.44s2.16,0,2.86.06c.55,0,.85.19,1.06,1l.23,1H13L12.9,9.94,13,7.41h-.85l-.28,1.13c-.16.74-.28.84-1,1-1,.1-2.89.09-2.89.09Z"/></svg>',expand:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="13 2 18 2 18 7 17 7 17 3 13 3"/><polygon points="2 13 3 13 3 17 7 17 7 18 2 18"/><path fill="none" stroke="#000" stroke-width="1.1" d="M11,9 L17,3"/><path fill="none" stroke="#000" stroke-width="1.1" d="M3,17 L9,11"/></svg>',facebook:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11,10h2.6l0.4-3H11V5.3c0-0.9,0.2-1.5,1.5-1.5H14V1.1c-0.3,0-1-0.1-2.1-0.1C9.6,1,8,2.4,8,5v2H5.5v3H8v8h3V10z"/></svg>',"file-edit":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" d="M18.65,1.68 C18.41,1.45 18.109,1.33 17.81,1.33 C17.499,1.33 17.209,1.45 16.98,1.68 L8.92,9.76 L8,12.33 L10.55,11.41 L18.651,3.34 C19.12,2.87 19.12,2.15 18.65,1.68 L18.65,1.68 L18.65,1.68 Z"/><polyline fill="none" stroke="#000" points="16.5 8.482 16.5 18.5 3.5 18.5 3.5 1.5 14.211 1.5"/></svg>',"file-pdf":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" width="13" height="17" x="3.5" y="1.5"/><path d="M14.65 11.67c-.48.3-1.37-.19-1.79-.37a4.65 4.65 0 0 1 1.49.06c.35.1.36.28.3.31zm-6.3.06l.43-.79a14.7 14.7 0 0 0 .75-1.64 5.48 5.48 0 0 0 1.25 1.55l.2.15a16.36 16.36 0 0 0-2.63.73zM9.5 5.32c.2 0 .32.5.32.97a1.99 1.99 0 0 1-.23 1.04 5.05 5.05 0 0 1-.17-1.3s0-.71.08-.71zm-3.9 9a4.35 4.35 0 0 1 1.21-1.46l.24-.22a4.35 4.35 0 0 1-1.46 1.68zm9.23-3.3a2.05 2.05 0 0 0-1.32-.3 11.07 11.07 0 0 0-1.58.11 4.09 4.09 0 0 1-.74-.5 5.39 5.39 0 0 1-1.32-2.06 10.37 10.37 0 0 0 .28-2.62 1.83 1.83 0 0 0-.07-.25.57.57 0 0 0-.52-.4H9.4a.59.59 0 0 0-.6.38 6.95 6.95 0 0 0 .37 3.14c-.26.63-1 2.12-1 2.12-.3.58-.57 1.08-.82 1.5l-.8.44A3.11 3.11 0 0 0 5 14.16a.39.39 0 0 0 .15.42l.24.13c1.15.56 2.28-1.74 2.66-2.42a23.1 23.1 0 0 1 3.59-.85 4.56 4.56 0 0 0 2.91.8.5.5 0 0 0 .3-.21 1.1 1.1 0 0 0 .12-.75.84.84 0 0 0-.14-.25z"/></svg>',"file-text":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" width="13" height="17" x="3.5" y="1.5"/><line fill="none" stroke="#000" x1="6" x2="12" y1="12.5" y2="12.5"/><line fill="none" stroke="#000" x1="6" x2="14" y1="8.5" y2="8.5"/><line fill="none" stroke="#000" x1="6" x2="14" y1="6.5" y2="6.5"/><line fill="none" stroke="#000" x1="6" x2="14" y1="10.5" y2="10.5"/></svg>',file:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" x="3.5" y="1.5" width="13" height="17"/></svg>',flickr:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="5.5" cy="9.5" r="3.5"/><circle cx="14.5" cy="9.5" r="3.5"/></svg>',folder:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" points="9.5 5.5 8.5 3.5 1.5 3.5 1.5 16.5 18.5 16.5 18.5 5.5"/></svg>',forward:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2.47,13.11 C4.02,10.02 6.27,7.85 9.04,6.61 C9.48,6.41 10.27,6.13 11,5.91 L11,2 L18.89,9 L11,16 L11,12.13 C9.25,12.47 7.58,13.19 6.02,14.25 C3.03,16.28 1.63,18.54 1.63,18.54 C1.63,18.54 1.38,15.28 2.47,13.11 L2.47,13.11 Z M5.3,13.53 C6.92,12.4 9.04,11.4 12,10.92 L12,13.63 L17.36,9 L12,4.25 L12,6.8 C11.71,6.86 10.86,7.02 9.67,7.49 C6.79,8.65 4.58,10.96 3.49,13.08 C3.18,13.7 2.68,14.87 2.49,16 C3.28,15.05 4.4,14.15 5.3,13.53 L5.3,13.53 Z"/></svg>',foursquare:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15.23,2 C15.96,2 16.4,2.41 16.5,2.86 C16.57,3.15 16.56,3.44 16.51,3.73 C16.46,4.04 14.86,11.72 14.75,12.03 C14.56,12.56 14.16,12.82 13.61,12.83 C13.03,12.84 11.09,12.51 10.69,13 C10.38,13.38 7.79,16.39 6.81,17.53 C6.61,17.76 6.4,17.96 6.08,17.99 C5.68,18.04 5.29,17.87 5.17,17.45 C5.12,17.28 5.1,17.09 5.1,16.91 C5.1,12.4 4.86,7.81 5.11,3.31 C5.17,2.5 5.81,2.12 6.53,2 L15.23,2 L15.23,2 Z M9.76,11.42 C9.94,11.19 10.17,11.1 10.45,11.1 L12.86,11.1 C13.12,11.1 13.31,10.94 13.36,10.69 C13.37,10.64 13.62,9.41 13.74,8.83 C13.81,8.52 13.53,8.28 13.27,8.28 C12.35,8.29 11.42,8.28 10.5,8.28 C9.84,8.28 9.83,7.69 9.82,7.21 C9.8,6.85 10.13,6.55 10.5,6.55 C11.59,6.56 12.67,6.55 13.76,6.55 C14.03,6.55 14.23,6.4 14.28,6.14 C14.34,5.87 14.67,4.29 14.67,4.29 C14.67,4.29 14.82,3.74 14.19,3.74 L7.34,3.74 C7,3.75 6.84,4.02 6.84,4.33 C6.84,7.58 6.85,14.95 6.85,14.99 C6.87,15 8.89,12.51 9.76,11.42 L9.76,11.42 Z"/></svg>',future:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline points="19 2 18 2 18 6 14 6 14 7 19 7 19 2"/><path fill="none" stroke="#000" stroke-width="1.1" d="M18,6.548 C16.709,3.29 13.354,1 9.6,1 C4.6,1 0.6,5 0.6,10 C0.6,15 4.6,19 9.6,19 C14.6,19 18.6,15 18.6,10"/><rect x="9" y="4" width="1" height="7"/><path d="M13.018,14.197 L9.445,10.625" fill="none" stroke="#000" stroke-width="1.1"/></svg>',"git-branch":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.2" cx="7" cy="3" r="2"/><circle fill="none" stroke="#000" stroke-width="1.2" cx="14" cy="6" r="2"/><circle fill="none" stroke="#000" stroke-width="1.2" cx="7" cy="17" r="2"/><path fill="none" stroke="#000" stroke-width="2" d="M14,8 C14,10.41 12.43,10.87 10.56,11.25 C9.09,11.54 7,12.06 7,15 L7,5"/></svg>',"git-fork":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.2" cx="5.79" cy="2.79" r="1.79"/><circle fill="none" stroke="#000" stroke-width="1.2" cx="14.19" cy="2.79" r="1.79"/><circle fill="none" stroke="#000" stroke-width="1.2" cx="10.03" cy="16.79" r="1.79"/><path fill="none" stroke="#000" stroke-width="2" d="M5.79,4.57 L5.79,6.56 C5.79,9.19 10.03,10.22 10.03,13.31 C10.03,14.86 10.04,14.55 10.04,14.55 C10.04,14.37 10.04,14.86 10.04,13.31 C10.04,10.22 14.2,9.19 14.2,6.56 L14.2,4.57"/></svg>',"github-alt":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10,0.5 C4.75,0.5 0.5,4.76 0.5,10.01 C0.5,15.26 4.75,19.51 10,19.51 C15.24,19.51 19.5,15.26 19.5,10.01 C19.5,4.76 15.25,0.5 10,0.5 L10,0.5 Z M12.81,17.69 C12.81,17.69 12.81,17.7 12.79,17.69 C12.47,17.75 12.35,17.59 12.35,17.36 L12.35,16.17 C12.35,15.45 12.09,14.92 11.58,14.56 C12.2,14.51 12.77,14.39 13.26,14.21 C13.87,13.98 14.36,13.69 14.74,13.29 C15.42,12.59 15.76,11.55 15.76,10.17 C15.76,9.25 15.45,8.46 14.83,7.8 C15.1,7.08 15.07,6.29 14.75,5.44 L14.51,5.42 C14.34,5.4 14.06,5.46 13.67,5.61 C13.25,5.78 12.79,6.03 12.31,6.35 C11.55,6.16 10.81,6.05 10.09,6.05 C9.36,6.05 8.61,6.15 7.88,6.35 C7.28,5.96 6.75,5.68 6.26,5.54 C6.07,5.47 5.9,5.44 5.78,5.44 L5.42,5.44 C5.06,6.29 5.04,7.08 5.32,7.8 C4.7,8.46 4.4,9.25 4.4,10.17 C4.4,11.94 4.96,13.16 6.08,13.84 C6.53,14.13 7.05,14.32 7.69,14.43 C8.03,14.5 8.32,14.54 8.55,14.55 C8.07,14.89 7.82,15.42 7.82,16.16 L7.82,17.51 C7.8,17.69 7.7,17.8 7.51,17.8 C4.21,16.74 1.82,13.65 1.82,10.01 C1.82,5.5 5.49,1.83 10,1.83 C14.5,1.83 18.17,5.5 18.17,10.01 C18.18,13.53 15.94,16.54 12.81,17.69 L12.81,17.69 Z"/></svg>',github:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10,1 C5.03,1 1,5.03 1,10 C1,13.98 3.58,17.35 7.16,18.54 C7.61,18.62 7.77,18.34 7.77,18.11 C7.77,17.9 7.76,17.33 7.76,16.58 C5.26,17.12 4.73,15.37 4.73,15.37 C4.32,14.33 3.73,14.05 3.73,14.05 C2.91,13.5 3.79,13.5 3.79,13.5 C4.69,13.56 5.17,14.43 5.17,14.43 C5.97,15.8 7.28,15.41 7.79,15.18 C7.87,14.6 8.1,14.2 8.36,13.98 C6.36,13.75 4.26,12.98 4.26,9.53 C4.26,8.55 4.61,7.74 5.19,7.11 C5.1,6.88 4.79,5.97 5.28,4.73 C5.28,4.73 6.04,4.49 7.75,5.65 C8.47,5.45 9.24,5.35 10,5.35 C10.76,5.35 11.53,5.45 12.25,5.65 C13.97,4.48 14.72,4.73 14.72,4.73 C15.21,5.97 14.9,6.88 14.81,7.11 C15.39,7.74 15.73,8.54 15.73,9.53 C15.73,12.99 13.63,13.75 11.62,13.97 C11.94,14.25 12.23,14.8 12.23,15.64 C12.23,16.84 12.22,17.81 12.22,18.11 C12.22,18.35 12.38,18.63 12.84,18.54 C16.42,17.35 19,13.98 19,10 C19,5.03 14.97,1 10,1 L10,1 Z"/></svg>',gitter:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="3.5" y="1" width="1.531" height="11.471"/><rect x="7.324" y="4.059" width="1.529" height="15.294"/><rect x="11.148" y="4.059" width="1.527" height="15.294"/><rect x="14.971" y="4.059" width="1.529" height="8.412"/></svg>',"google-plus":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M12.9,9c0,2.7-0.6,5-3.2,6.3c-3.7,1.8-8.1,0.2-9.4-3.6C-1.1,7.6,1.9,3.3,6.1,3c1.7-0.1,3.2,0.3,4.6,1.3 c0.1,0.1,0.3,0.2,0.4,0.4c-0.5,0.5-1.2,1-1.7,1.6c-1-0.8-2.1-1.1-3.5-0.9C5,5.6,4.2,6,3.6,6.7c-1.3,1.3-1.5,3.4-0.5,5 c1,1.7,2.6,2.3,4.6,1.9c1.4-0.3,2.4-1.2,2.6-2.6H6.9V9H12.9z"/><polygon points="20,9 20,11 18,11 18,13 16,13 16,11 14,11 14,9 16,9 16,7 18,7 18,9"/></svg>',google:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.86,9.09 C18.46,12.12 17.14,16.05 13.81,17.56 C9.45,19.53 4.13,17.68 2.47,12.87 C0.68,7.68 4.22,2.42 9.5,2.03 C11.57,1.88 13.42,2.37 15.05,3.65 C15.22,3.78 15.37,3.93 15.61,4.14 C14.9,4.81 14.23,5.45 13.5,6.14 C12.27,5.08 10.84,4.72 9.28,4.98 C8.12,5.17 7.16,5.76 6.37,6.63 C4.88,8.27 4.62,10.86 5.76,12.82 C6.95,14.87 9.17,15.8 11.57,15.25 C13.27,14.87 14.76,13.33 14.89,11.75 L10.51,11.75 L10.51,9.09 L17.86,9.09 L17.86,9.09 Z"/></svg>',grid:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="2" y="2" width="3" height="3"/><rect x="8" y="2" width="3" height="3"/><rect x="14" y="2" width="3" height="3"/><rect x="2" y="8" width="3" height="3"/><rect x="8" y="8" width="3" height="3"/><rect x="14" y="8" width="3" height="3"/><rect x="2" y="14" width="3" height="3"/><rect x="8" y="14" width="3" height="3"/><rect x="14" y="14" width="3" height="3"/></svg>',happy:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="13" cy="7" r="1"/><circle cx="7" cy="7" r="1"/><circle fill="none" stroke="#000" cx="10" cy="10" r="8.5"/><path fill="none" stroke="#000" d="M14.6,11.4 C13.9,13.3 12.1,14.5 10,14.5 C7.9,14.5 6.1,13.3 5.4,11.4"/></svg>',hashtag:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15.431,8 L15.661,7 L12.911,7 L13.831,3 L12.901,3 L11.98,7 L9.29,7 L10.21,3 L9.281,3 L8.361,7 L5.23,7 L5,8 L8.13,8 L7.21,12 L4.23,12 L4,13 L6.98,13 L6.061,17 L6.991,17 L7.911,13 L10.601,13 L9.681,17 L10.611,17 L11.531,13 L14.431,13 L14.661,12 L11.76,12 L12.681,8 L15.431,8 Z M10.831,12 L8.141,12 L9.061,8 L11.75,8 L10.831,12 Z"/></svg>',heart:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.03" d="M10,4 C10,4 8.1,2 5.74,2 C3.38,2 1,3.55 1,6.73 C1,8.84 2.67,10.44 2.67,10.44 L10,18 L17.33,10.44 C17.33,10.44 19,8.84 19,6.73 C19,3.55 16.62,2 14.26,2 C11.9,2 10,4 10,4 L10,4 Z"/></svg>',history:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="#000" points="1 2 2 2 2 6 6 6 6 7 1 7 1 2"/><path fill="none" stroke="#000" stroke-width="1.1" d="M2.1,6.548 C3.391,3.29 6.746,1 10.5,1 C15.5,1 19.5,5 19.5,10 C19.5,15 15.5,19 10.5,19 C5.5,19 1.5,15 1.5,10"/><rect x="9" y="4" width="1" height="7"/><path fill="none" stroke="#000" stroke-width="1.1" d="M13.018,14.197 L9.445,10.625"/></svg>',home:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="18.65 11.35 10 2.71 1.35 11.35 0.65 10.65 10 1.29 19.35 10.65"/><polygon points="15 4 18 4 18 7 17 7 17 5 15 5"/><polygon points="3 11 4 11 4 18 7 18 7 12 12 12 12 18 16 18 16 11 17 11 17 19 11 19 11 13 8 13 8 19 3 19"/></svg>',image:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="16.1" cy="6.1" r="1.1"/><rect fill="none" stroke="#000" x=".5" y="2.5" width="19" height="15"/><polyline fill="none" stroke="#000" stroke-width="1.01" points="4,13 8,9 13,14"/><polyline fill="none" stroke="#000" stroke-width="1.01" points="11,12 12.5,10.5 16,14"/></svg>',info:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M12.13,11.59 C11.97,12.84 10.35,14.12 9.1,14.16 C6.17,14.2 9.89,9.46 8.74,8.37 C9.3,8.16 10.62,7.83 10.62,8.81 C10.62,9.63 10.12,10.55 9.88,11.32 C8.66,15.16 12.13,11.15 12.14,11.18 C12.16,11.21 12.16,11.35 12.13,11.59 C12.08,11.95 12.16,11.35 12.13,11.59 L12.13,11.59 Z M11.56,5.67 C11.56,6.67 9.36,7.15 9.36,6.03 C9.36,5 11.56,4.54 11.56,5.67 L11.56,5.67 Z"/><circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"/></svg>',instagram:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M13.55,1H6.46C3.45,1,1,3.44,1,6.44v7.12c0,3,2.45,5.44,5.46,5.44h7.08c3.02,0,5.46-2.44,5.46-5.44V6.44 C19.01,3.44,16.56,1,13.55,1z M17.5,14c0,1.93-1.57,3.5-3.5,3.5H6c-1.93,0-3.5-1.57-3.5-3.5V6c0-1.93,1.57-3.5,3.5-3.5h8 c1.93,0,3.5,1.57,3.5,3.5V14z"/><circle cx="14.87" cy="5.26" r="1.09"/><path d="M10.03,5.45c-2.55,0-4.63,2.06-4.63,4.6c0,2.55,2.07,4.61,4.63,4.61c2.56,0,4.63-2.061,4.63-4.61 C14.65,7.51,12.58,5.45,10.03,5.45L10.03,5.45L10.03,5.45z M10.08,13c-1.66,0-3-1.34-3-2.99c0-1.65,1.34-2.99,3-2.99s3,1.34,3,2.99 C13.08,11.66,11.74,13,10.08,13L10.08,13L10.08,13z"/></svg>',italic:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M12.63,5.48 L10.15,14.52 C10,15.08 10.37,15.25 11.92,15.3 L11.72,16 L6,16 L6.2,15.31 C7.78,15.26 8.19,15.09 8.34,14.53 L10.82,5.49 C10.97,4.92 10.63,4.76 9.09,4.71 L9.28,4 L15,4 L14.81,4.69 C13.23,4.75 12.78,4.91 12.63,5.48 L12.63,5.48 Z"/></svg>',joomla:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7.8,13.4l1.7-1.7L5.9,8c-0.6-0.5-0.6-1.5,0-2c0.6-0.6,1.4-0.6,2,0l1.7-1.7c-1-1-2.3-1.3-3.6-1C5.8,2.2,4.8,1.4,3.7,1.4 c-1.3,0-2.3,1-2.3,2.3c0,1.1,0.8,2,1.8,2.3c-0.4,1.3-0.1,2.8,1,3.8L7.8,13.4L7.8,13.4z"/><path d="M10.2,4.3c1-1,2.5-1.4,3.8-1c0.2-1.1,1.1-2,2.3-2c1.3,0,2.3,1,2.3,2.3c0,1.2-0.9,2.2-2,2.3c0.4,1.3,0,2.8-1,3.8L13.9,8 c0.6-0.5,0.6-1.5,0-2c-0.5-0.6-1.5-0.6-2,0L8.2,9.7L6.5,8"/><path d="M14.1,16.8c-1.3,0.4-2.8,0.1-3.8-1l1.7-1.7c0.6,0.6,1.5,0.6,2,0c0.5-0.6,0.6-1.5,0-2l-3.7-3.7L12,6.7l3.7,3.7 c1,1,1.3,2.4,1,3.6c1.1,0.2,2,1.1,2,2.3c0,1.3-1,2.3-2.3,2.3C15.2,18.6,14.3,17.8,14.1,16.8"/><path d="M13.2,12.2l-3.7,3.7c-1,1-2.4,1.3-3.6,1c-0.2,1-1.2,1.8-2.2,1.8c-1.3,0-2.3-1-2.3-2.3c0-1.1,0.8-2,1.8-2.3 c-0.3-1.3,0-2.7,1-3.7l1.7,1.7c-0.6,0.6-0.6,1.5,0,2c0.6,0.6,1.4,0.6,2,0l3.7-3.7"/></svg>',laptop:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect y="16" width="20" height="1"/><rect fill="none" stroke="#000" x="2.5" y="4.5" width="15" height="10"/></svg>',lifesaver:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10,0.5 C4.76,0.5 0.5,4.76 0.5,10 C0.5,15.24 4.76,19.5 10,19.5 C15.24,19.5 19.5,15.24 19.5,10 C19.5,4.76 15.24,0.5 10,0.5 L10,0.5 Z M10,1.5 C11.49,1.5 12.89,1.88 14.11,2.56 L11.85,4.82 C11.27,4.61 10.65,4.5 10,4.5 C9.21,4.5 8.47,4.67 7.79,4.96 L5.58,2.75 C6.87,1.95 8.38,1.5 10,1.5 L10,1.5 Z M4.96,7.8 C4.67,8.48 4.5,9.21 4.5,10 C4.5,10.65 4.61,11.27 4.83,11.85 L2.56,14.11 C1.88,12.89 1.5,11.49 1.5,10 C1.5,8.38 1.95,6.87 2.75,5.58 L4.96,7.79 L4.96,7.8 L4.96,7.8 Z M10,18.5 C8.25,18.5 6.62,17.97 5.27,17.06 L7.46,14.87 C8.22,15.27 9.08,15.5 10,15.5 C10.79,15.5 11.53,15.33 12.21,15.04 L14.42,17.25 C13.13,18.05 11.62,18.5 10,18.5 L10,18.5 Z M10,14.5 C7.52,14.5 5.5,12.48 5.5,10 C5.5,7.52 7.52,5.5 10,5.5 C12.48,5.5 14.5,7.52 14.5,10 C14.5,12.48 12.48,14.5 10,14.5 L10,14.5 Z M15.04,12.21 C15.33,11.53 15.5,10.79 15.5,10 C15.5,9.08 15.27,8.22 14.87,7.46 L17.06,5.27 C17.97,6.62 18.5,8.25 18.5,10 C18.5,11.62 18.05,13.13 17.25,14.42 L15.04,12.21 L15.04,12.21 Z"/></svg>',link:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.1" d="M10.625,12.375 L7.525,15.475 C6.825,16.175 5.925,16.175 5.225,15.475 L4.525,14.775 C3.825,14.074 3.825,13.175 4.525,12.475 L7.625,9.375"/><path fill="none" stroke="#000" stroke-width="1.1" d="M9.325,7.375 L12.425,4.275 C13.125,3.575 14.025,3.575 14.724,4.275 L15.425,4.975 C16.125,5.675 16.125,6.575 15.425,7.275 L12.325,10.375"/><path fill="none" stroke="#000" stroke-width="1.1" d="M7.925,11.875 L11.925,7.975"/></svg>',linkedin:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M5.77,17.89 L5.77,7.17 L2.21,7.17 L2.21,17.89 L5.77,17.89 L5.77,17.89 Z M3.99,5.71 C5.23,5.71 6.01,4.89 6.01,3.86 C5.99,2.8 5.24,2 4.02,2 C2.8,2 2,2.8 2,3.85 C2,4.88 2.77,5.7 3.97,5.7 L3.99,5.7 L3.99,5.71 L3.99,5.71 Z"/><path d="M7.75,17.89 L11.31,17.89 L11.31,11.9 C11.31,11.58 11.33,11.26 11.43,11.03 C11.69,10.39 12.27,9.73 13.26,9.73 C14.55,9.73 15.06,10.71 15.06,12.15 L15.06,17.89 L18.62,17.89 L18.62,11.74 C18.62,8.45 16.86,6.92 14.52,6.92 C12.6,6.92 11.75,7.99 11.28,8.73 L11.3,8.73 L11.3,7.17 L7.75,7.17 C7.79,8.17 7.75,17.89 7.75,17.89 L7.75,17.89 L7.75,17.89 Z"/></svg>',list:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="6" y="4" width="12" height="1"/><rect x="6" y="9" width="12" height="1"/><rect x="6" y="14" width="12" height="1"/><rect x="2" y="4" width="2" height="1"/><rect x="2" y="9" width="2" height="1"/><rect x="2" y="14" width="2" height="1"/></svg>',location:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.01" d="M10,0.5 C6.41,0.5 3.5,3.39 3.5,6.98 C3.5,11.83 10,19 10,19 C10,19 16.5,11.83 16.5,6.98 C16.5,3.39 13.59,0.5 10,0.5 L10,0.5 Z"/><circle fill="none" stroke="#000" cx="10" cy="6.8" r="2.3"/></svg>',lock:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" height="10" width="13" y="8.5" x="3.5"/><path fill="none" stroke="#000" d="M6.5,8 L6.5,4.88 C6.5,3.01 8.07,1.5 10,1.5 C11.93,1.5 13.5,3.01 13.5,4.88 L13.5,8"/></svg>',mail:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="1.4,6.5 10,11 18.6,6.5"/><path d="M 1,4 1,16 19,16 19,4 1,4 Z M 18,15 2,15 2,5 18,5 18,15 Z"/></svg>',menu:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="2" y="4" width="16" height="1"/><rect x="2" y="9" width="16" height="1"/><rect x="2" y="14" width="16" height="1"/></svg>',microphone:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" x1="10" x2="10" y1="16.44" y2="18.5"/><line fill="none" stroke="#000" x1="7" x2="13" y1="18.5" y2="18.5"/><path fill="none" stroke="#000" stroke-width="1.1" d="M13.5 4.89v5.87a3.5 3.5 0 0 1-7 0V4.89a3.5 3.5 0 0 1 7 0z"/><path fill="none" stroke="#000" stroke-width="1.1" d="M15.5 10.36V11a5.5 5.5 0 0 1-11 0v-.6"/></svg>',"minus-circle":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9.5" cy="9.5" r="9"/><line fill="none" stroke="#000" x1="5" y1="9.5" x2="14" y2="9.5"/></svg>',minus:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect height="1" width="18" y="9" x="1"/></svg>',"more-vertical":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="10" cy="3" r="2"/><circle cx="10" cy="10" r="2"/><circle cx="10" cy="17" r="2"/></svg>',more:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="3" cy="10" r="2"/><circle cx="10" cy="10" r="2"/><circle cx="17" cy="10" r="2"/></svg>',move:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="4,5 1,5 1,9 2,9 2,6 4,6"/><polygon points="1,16 2,16 2,18 4,18 4,19 1,19"/><polygon points="14,16 14,19 11,19 11,18 13,18 13,16"/><rect fill="none" stroke="#000" x="5.5" y="1.5" width="13" height="13"/><rect x="1" y="11" width="1" height="3"/><rect x="6" y="18" width="3" height="1"/></svg>',nut:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" points="2.5,5.7 10,1.3 17.5,5.7 17.5,14.3 10,18.7 2.5,14.3"/><circle fill="none" stroke="#000" cx="10" cy="10" r="3.5"/></svg>',pagekit:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="3,1 17,1 17,16 10,16 10,13 14,13 14,4 6,4 6,16 10,16 10,19 3,19"/></svg>',"paint-bucket":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.21,1 L0,11.21 L8.1,19.31 L18.31,9.1 L10.21,1 L10.21,1 Z M16.89,9.1 L15,11 L1.7,11 L10.21,2.42 L16.89,9.1 Z"/><path fill="none" stroke="#000" stroke-width="1.1" d="M6.42,2.33 L11.7,7.61"/><path d="M18.49,12 C18.49,12 20,14.06 20,15.36 C20,16.28 19.24,17 18.49,17 L18.49,17 C17.74,17 17,16.28 17,15.36 C17,14.06 18.49,12 18.49,12 L18.49,12 Z"/></svg>',pencil:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" d="M17.25,6.01 L7.12,16.1 L3.82,17.2 L5.02,13.9 L15.12,3.88 C15.71,3.29 16.66,3.29 17.25,3.88 C17.83,4.47 17.83,5.42 17.25,6.01 L17.25,6.01 Z"/><path fill="none" stroke="#000" d="M15.98,7.268 L13.851,5.148"/></svg>',"phone-landscape":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" d="M17,5.5 C17.8,5.5 18.5,6.2 18.5,7 L18.5,14 C18.5,14.8 17.8,15.5 17,15.5 L3,15.5 C2.2,15.5 1.5,14.8 1.5,14 L1.5,7 C1.5,6.2 2.2,5.5 3,5.5 L17,5.5 L17,5.5 L17,5.5 Z"/><circle cx="3.8" cy="10.5" r=".8"/></svg>',phone:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" d="M15.5,17 C15.5,17.8 14.8,18.5 14,18.5 L7,18.5 C6.2,18.5 5.5,17.8 5.5,17 L5.5,3 C5.5,2.2 6.2,1.5 7,1.5 L14,1.5 C14.8,1.5 15.5,2.2 15.5,3 L15.5,17 L15.5,17 L15.5,17 Z"/><circle cx="10.5" cy="16.5" r=".8"/></svg>',pinterest:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.21,1 C5.5,1 3,4.16 3,7.61 C3,9.21 3.85,11.2 5.22,11.84 C5.43,11.94 5.54,11.89 5.58,11.69 C5.62,11.54 5.8,10.8 5.88,10.45 C5.91,10.34 5.89,10.24 5.8,10.14 C5.36,9.59 5,8.58 5,7.65 C5,5.24 6.82,2.91 9.93,2.91 C12.61,2.91 14.49,4.74 14.49,7.35 C14.49,10.3 13,12.35 11.06,12.35 C9.99,12.35 9.19,11.47 9.44,10.38 C9.75,9.08 10.35,7.68 10.35,6.75 C10.35,5.91 9.9,5.21 8.97,5.21 C7.87,5.21 6.99,6.34 6.99,7.86 C6.99,8.83 7.32,9.48 7.32,9.48 C7.32,9.48 6.24,14.06 6.04,14.91 C5.7,16.35 6.08,18.7 6.12,18.9 C6.14,19.01 6.26,19.05 6.33,18.95 C6.44,18.81 7.74,16.85 8.11,15.44 C8.24,14.93 8.79,12.84 8.79,12.84 C9.15,13.52 10.19,14.09 11.29,14.09 C14.58,14.09 16.96,11.06 16.96,7.3 C16.94,3.7 14,1 10.21,1"/></svg>',"play-circle":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" stroke-width="1.1" points="8.5 7 13.5 10 8.5 13"/><circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"/></svg>',play:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" points="6.5,5 14.5,10 6.5,15"/></svg>',"plus-circle":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9.5" cy="9.5" r="9"/><line fill="none" stroke="#000" x1="9.5" y1="5" x2="9.5" y2="14"/><line fill="none" stroke="#000" x1="5" y1="9.5" x2="14" y2="9.5"/></svg>',plus:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="9" y="1" width="1" height="17"/><rect x="1" y="9" width="17" height="1"/></svg>',print:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="4.5 13.5 1.5 13.5 1.5 6.5 18.5 6.5 18.5 13.5 15.5 13.5"/><polyline fill="none" stroke="#000" points="15.5 6.5 15.5 2.5 4.5 2.5 4.5 6.5"/><rect fill="none" stroke="#000" width="11" height="6" x="4.5" y="11.5"/><rect width="8" height="1" x="6" y="13"/><rect width="8" height="1" x="6" y="15"/></svg>',pull:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="6.85,8 9.5,10.6 12.15,8 12.85,8.7 9.5,12 6.15,8.7"/><line fill="none" stroke="#000" x1="9.5" y1="11" x2="9.5" y2="2"/><polyline fill="none" stroke="#000" points="6,5.5 3.5,5.5 3.5,18.5 15.5,18.5 15.5,5.5 13,5.5"/></svg>',push:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="12.15,4 9.5,1.4 6.85,4 6.15,3.3 9.5,0 12.85,3.3"/><line fill="none" stroke="#000" x1="9.5" y1="10" x2="9.5" y2="1"/><polyline fill="none" stroke="#000" points="6 5.5 3.5 5.5 3.5 18.5 15.5 18.5 15.5 5.5 13 5.5"/></svg>',question:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"/><circle cx="10.44" cy="14.42" r="1.05"/><path fill="none" stroke="#000" stroke-width="1.2" d="M8.17,7.79 C8.17,4.75 12.72,4.73 12.72,7.72 C12.72,8.67 11.81,9.15 11.23,9.75 C10.75,10.24 10.51,10.73 10.45,11.4 C10.44,11.53 10.43,11.64 10.43,11.75"/></svg>',"quote-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.27,7.79 C17.27,9.45 16.97,10.43 15.99,12.02 C14.98,13.64 13,15.23 11.56,15.97 L11.1,15.08 C12.34,14.2 13.14,13.51 14.02,11.82 C14.27,11.34 14.41,10.92 14.49,10.54 C14.3,10.58 14.09,10.6 13.88,10.6 C12.06,10.6 10.59,9.12 10.59,7.3 C10.59,5.48 12.06,4 13.88,4 C15.39,4 16.67,5.02 17.05,6.42 C17.19,6.82 17.27,7.27 17.27,7.79 L17.27,7.79 Z"/><path d="M8.68,7.79 C8.68,9.45 8.38,10.43 7.4,12.02 C6.39,13.64 4.41,15.23 2.97,15.97 L2.51,15.08 C3.75,14.2 4.55,13.51 5.43,11.82 C5.68,11.34 5.82,10.92 5.9,10.54 C5.71,10.58 5.5,10.6 5.29,10.6 C3.47,10.6 2,9.12 2,7.3 C2,5.48 3.47,4 5.29,4 C6.8,4 8.08,5.02 8.46,6.42 C8.6,6.82 8.68,7.27 8.68,7.79 L8.68,7.79 Z"/></svg>',receiver:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.01" d="M6.189,13.611C8.134,15.525 11.097,18.239 13.867,18.257C16.47,18.275 18.2,16.241 18.2,16.241L14.509,12.551L11.539,13.639L6.189,8.29L7.313,5.355L3.76,1.8C3.76,1.8 1.732,3.537 1.7,6.092C1.667,8.809 4.347,11.738 6.189,13.611"/></svg>',reddit:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M19 9.05a2.56 2.56 0 0 0-2.56-2.56 2.59 2.59 0 0 0-1.88.82 10.63 10.63 0 0 0-4.14-1v-.08c.58-1.62 1.58-3.89 2.7-4.1.38-.08.77.12 1.19.57a1.15 1.15 0 0 0-.06.37 1.48 1.48 0 1 0 1.51-1.45 1.43 1.43 0 0 0-.76.19A2.29 2.29 0 0 0 12.91 1c-2.11.43-3.39 4.38-3.63 5.19 0 0 0 .11-.06.11a10.65 10.65 0 0 0-3.75 1A2.56 2.56 0 0 0 1 9.05a2.42 2.42 0 0 0 .72 1.76A5.18 5.18 0 0 0 1.24 13c0 3.66 3.92 6.64 8.73 6.64s8.74-3 8.74-6.64a5.23 5.23 0 0 0-.46-2.13A2.58 2.58 0 0 0 19 9.05zm-16.88 0a1.44 1.44 0 0 1 2.27-1.19 7.68 7.68 0 0 0-2.07 1.91 1.33 1.33 0 0 1-.2-.72zM10 18.4c-4.17 0-7.55-2.4-7.55-5.4S5.83 7.53 10 7.53 17.5 10 17.5 13s-3.38 5.4-7.5 5.4zm7.69-8.61a7.62 7.62 0 0 0-2.09-1.91 1.41 1.41 0 0 1 .84-.28 1.47 1.47 0 0 1 1.44 1.45 1.34 1.34 0 0 1-.21.72z"/><path d="M6.69 12.58a1.39 1.39 0 1 1 1.39-1.39 1.38 1.38 0 0 1-1.38 1.39z"/><path d="M14.26 11.2a1.39 1.39 0 1 1-1.39-1.39 1.39 1.39 0 0 1 1.39 1.39z"/><path d="M13.09 14.88a.54.54 0 0 1-.09.77 5.3 5.3 0 0 1-3.26 1.19 5.61 5.61 0 0 1-3.4-1.22.55.55 0 1 1 .73-.83 4.09 4.09 0 0 0 5.25 0 .56.56 0 0 1 .77.09z"/></svg>',refresh:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.1" d="M17.08,11.15 C17.09,11.31 17.1,11.47 17.1,11.64 C17.1,15.53 13.94,18.69 10.05,18.69 C6.16,18.68 3,15.53 3,11.63 C3,7.74 6.16,4.58 10.05,4.58 C10.9,4.58 11.71,4.73 12.46,5"/><polyline fill="none" stroke="#000" points="9.9 2 12.79 4.89 9.79 7.9"/></svg>',reply:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.7,13.11 C16.12,10.02 13.84,7.85 11.02,6.61 C10.57,6.41 9.75,6.13 9,5.91 L9,2 L1,9 L9,16 L9,12.13 C10.78,12.47 12.5,13.19 14.09,14.25 C17.13,16.28 18.56,18.54 18.56,18.54 C18.56,18.54 18.81,15.28 17.7,13.11 L17.7,13.11 Z M14.82,13.53 C13.17,12.4 11.01,11.4 8,10.92 L8,13.63 L2.55,9 L8,4.25 L8,6.8 C8.3,6.86 9.16,7.02 10.37,7.49 C13.3,8.65 15.54,10.96 16.65,13.08 C16.97,13.7 17.48,14.86 17.68,16 C16.87,15.05 15.73,14.15 14.82,13.53 L14.82,13.53 Z"/></svg>',rss:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="3.12" cy="16.8" r="1.85"/><path fill="none" stroke="#000" stroke-width="1.1" d="M1.5,8.2 C1.78,8.18 2.06,8.16 2.35,8.16 C7.57,8.16 11.81,12.37 11.81,17.57 C11.81,17.89 11.79,18.19 11.76,18.5"/><path fill="none" stroke="#000" stroke-width="1.1" d="M1.5,2.52 C1.78,2.51 2.06,2.5 2.35,2.5 C10.72,2.5 17.5,9.24 17.5,17.57 C17.5,17.89 17.49,18.19 17.47,18.5"/></svg>',search:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9" cy="9" r="7"/><path fill="none" stroke="#000" stroke-width="1.1" d="M14,14 L18,18 L14,14 Z"/></svg>',server:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="3" y="3" width="1" height="2"/><rect x="5" y="3" width="1" height="2"/><rect x="7" y="3" width="1" height="2"/><rect x="16" y="3" width="1" height="1"/><rect x="16" y="10" width="1" height="1"/><circle fill="none" stroke="#000" cx="9.9" cy="17.4" r="1.4"/><rect x="3" y="10" width="1" height="2"/><rect x="5" y="10" width="1" height="2"/><rect x="9.5" y="14" width="1" height="2"/><rect x="3" y="17" width="6" height="1"/><rect x="11" y="17" width="6" height="1"/><rect fill="none" stroke="#000" x="1.5" y="1.5" width="17" height="5"/><rect fill="none" stroke="#000" x="1.5" y="8.5" width="17" height="5"/></svg>',settings:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><ellipse fill="none" stroke="#000" cx="6.11" cy="3.55" rx="2.11" ry="2.15"/><ellipse fill="none" stroke="#000" cx="6.11" cy="15.55" rx="2.11" ry="2.15"/><circle fill="none" stroke="#000" cx="13.15" cy="9.55" r="2.15"/><rect x="1" y="3" width="3" height="1"/><rect x="10" y="3" width="8" height="1"/><rect x="1" y="9" width="8" height="1"/><rect x="15" y="9" width="3" height="1"/><rect x="1" y="15" width="3" height="1"/><rect x="10" y="15" width="8" height="1"/></svg>',shrink:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="11 4 12 4 12 8 16 8 16 9 11 9"/><polygon points="4 11 9 11 9 16 8 16 8 12 4 12"/><path fill="none" stroke="#000" stroke-width="1.1" d="M12,8 L18,2"/><path fill="none" stroke="#000" stroke-width="1.1" d="M2,18 L8,12"/></svg>',"sign-in":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="7 2 17 2 17 17 7 17 7 16 16 16 16 3 7 3"/><polygon points="9.1 13.4 8.5 12.8 11.28 10 4 10 4 9 11.28 9 8.5 6.2 9.1 5.62 13 9.5"/></svg>',"sign-out":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="13.1 13.4 12.5 12.8 15.28 10 8 10 8 9 15.28 9 12.5 6.2 13.1 5.62 17 9.5"/><polygon points="13 2 3 2 3 17 13 17 13 16 4 16 4 3 13 3"/></svg>',social:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.1" x1="13.4" y1="14" x2="6.3" y2="10.7"/><line fill="none" stroke="#000" stroke-width="1.1" x1="13.5" y1="5.5" x2="6.5" y2="8.8"/><circle fill="none" stroke="#000" stroke-width="1.1" cx="15.5" cy="4.6" r="2.3"/><circle fill="none" stroke="#000" stroke-width="1.1" cx="15.5" cy="14.8" r="2.3"/><circle fill="none" stroke="#000" stroke-width="1.1" cx="4.5" cy="9.8" r="2.3"/></svg>',soundcloud:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.2,9.4c-0.4,0-0.8,0.1-1.101,0.2c-0.199-2.5-2.399-4.5-5-4.5c-0.6,0-1.2,0.1-1.7,0.3C9.2,5.5,9.1,5.6,9.1,5.6V15h8 c1.601,0,2.801-1.2,2.801-2.8C20,10.7,18.7,9.4,17.2,9.4L17.2,9.4z"/><rect x="6" y="6.5" width="1.5" height="8.5"/><rect x="3" y="8" width="1.5" height="7"/><rect y="10" width="1.5" height="5"/></svg>',star:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" stroke-width="1.01" points="10 2 12.63 7.27 18.5 8.12 14.25 12.22 15.25 18 10 15.27 4.75 18 5.75 12.22 1.5 8.12 7.37 7.27"/></svg>',strikethrough:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6,13.02 L6.65,13.02 C7.64,15.16 8.86,16.12 10.41,16.12 C12.22,16.12 12.92,14.93 12.92,13.89 C12.92,12.55 11.99,12.03 9.74,11.23 C8.05,10.64 6.23,10.11 6.23,7.83 C6.23,5.5 8.09,4.09 10.4,4.09 C11.44,4.09 12.13,4.31 12.72,4.54 L13.33,4 L13.81,4 L13.81,7.59 L13.16,7.59 C12.55,5.88 11.52,4.89 10.07,4.89 C8.84,4.89 7.89,5.69 7.89,7.03 C7.89,8.29 8.89,8.78 10.88,9.45 C12.57,10.03 14.38,10.6 14.38,12.91 C14.38,14.75 13.27,16.93 10.18,16.93 C9.18,16.93 8.17,16.69 7.46,16.39 L6.52,17 L6,17 L6,13.02 L6,13.02 Z"/><rect x="3" y="10" width="15" height="1"/></svg>',table:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="1" y="3" width="18" height="1"/><rect x="1" y="7" width="18" height="1"/><rect x="1" y="11" width="18" height="1"/><rect x="1" y="15" width="18" height="1"/></svg>',"tablet-landscape":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" d="M1.5,5 C1.5,4.2 2.2,3.5 3,3.5 L17,3.5 C17.8,3.5 18.5,4.2 18.5,5 L18.5,16 C18.5,16.8 17.8,17.5 17,17.5 L3,17.5 C2.2,17.5 1.5,16.8 1.5,16 L1.5,5 L1.5,5 L1.5,5 Z"/><circle cx="3.7" cy="10.5" r=".8"/></svg>',tablet:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" d="M5,18.5 C4.2,18.5 3.5,17.8 3.5,17 L3.5,3 C3.5,2.2 4.2,1.5 5,1.5 L16,1.5 C16.8,1.5 17.5,2.2 17.5,3 L17.5,17 C17.5,17.8 16.8,18.5 16,18.5 L5,18.5 L5,18.5 L5,18.5 Z"/><circle cx="10.5" cy="16.3" r=".8"/></svg>',tag:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.1" d="M17.5,3.71 L17.5,7.72 C17.5,7.96 17.4,8.2 17.21,8.39 L8.39,17.2 C7.99,17.6 7.33,17.6 6.93,17.2 L2.8,13.07 C2.4,12.67 2.4,12.01 2.8,11.61 L11.61,2.8 C11.81,2.6 12.08,2.5 12.34,2.5 L16.19,2.5 C16.52,2.5 16.86,2.63 17.11,2.88 C17.35,3.11 17.48,3.4 17.5,3.71 L17.5,3.71 Z"/><circle cx="14" cy="6" r="1"/></svg>',thumbnails:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" x="3.5" y="3.5" width="5" height="5"/><rect fill="none" stroke="#000" x="11.5" y="3.5" width="5" height="5"/><rect fill="none" stroke="#000" x="11.5" y="11.5" width="5" height="5"/><rect fill="none" stroke="#000" x="3.5" y="11.5" width="5" height="5"/></svg>',trash:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="6.5 3 6.5 1.5 13.5 1.5 13.5 3"/><polyline fill="none" stroke="#000" points="4.5 4 4.5 18.5 15.5 18.5 15.5 4"/><rect x="8" y="7" width="1" height="9"/><rect x="11" y="7" width="1" height="9"/><rect x="2" y="3" width="16" height="1"/></svg>',"triangle-down":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="5 7 15 7 10 12"/></svg>',"triangle-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="12 5 7 10 12 15"/></svg>',"triangle-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="8 5 13 10 8 15"/></svg>',"triangle-up":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="5 13 10 8 15 13"/></svg>',tripadvisor:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M19.021,7.866C19.256,6.862,20,5.854,20,5.854h-3.346C14.781,4.641,12.504,4,9.98,4C7.363,4,4.999,4.651,3.135,5.876H0\tc0,0,0.738,0.987,0.976,1.988c-0.611,0.837-0.973,1.852-0.973,2.964c0,2.763,2.249,5.009,5.011,5.009\tc1.576,0,2.976-0.737,3.901-1.879l1.063,1.599l1.075-1.615c0.475,0.611,1.1,1.111,1.838,1.451c1.213,0.547,2.574,0.612,3.825,0.15\tc2.589-0.963,3.913-3.852,2.964-6.439c-0.175-0.463-0.4-0.876-0.675-1.238H19.021z M16.38,14.594\tc-1.002,0.371-2.088,0.328-3.06-0.119c-0.688-0.317-1.252-0.817-1.657-1.438c-0.164-0.25-0.313-0.52-0.417-0.811\tc-0.124-0.328-0.186-0.668-0.217-1.014c-0.063-0.689,0.037-1.396,0.339-2.043c0.448-0.971,1.251-1.71,2.25-2.079\tc2.075-0.765,4.375,0.3,5.14,2.366c0.762,2.066-0.301,4.37-2.363,5.134L16.38,14.594L16.38,14.594z M8.322,13.066\tc-0.72,1.059-1.935,1.76-3.309,1.76c-2.207,0-4.001-1.797-4.001-3.996c0-2.203,1.795-4.002,4.001-4.002\tc2.204,0,3.999,1.8,3.999,4.002c0,0.137-0.024,0.261-0.04,0.396c-0.067,0.678-0.284,1.313-0.648,1.853v-0.013H8.322z M2.472,10.775\tc0,1.367,1.112,2.479,2.476,2.479c1.363,0,2.472-1.11,2.472-2.479c0-1.359-1.11-2.468-2.472-2.468\tC3.584,8.306,2.473,9.416,2.472,10.775L2.472,10.775z M12.514,10.775c0,1.367,1.104,2.479,2.471,2.479\tc1.363,0,2.474-1.108,2.474-2.479c0-1.359-1.11-2.468-2.474-2.468c-1.364,0-2.477,1.109-2.477,2.468H12.514z M3.324,10.775\tc0-0.893,0.726-1.618,1.614-1.618c0.889,0,1.625,0.727,1.625,1.618c0,0.898-0.725,1.627-1.625,1.627\tc-0.901,0-1.625-0.729-1.625-1.627H3.324z M13.354,10.775c0-0.893,0.726-1.618,1.627-1.618c0.886,0,1.61,0.727,1.61,1.618\tc0,0.898-0.726,1.627-1.626,1.627s-1.625-0.729-1.625-1.627H13.354z M9.977,4.875c1.798,0,3.425,0.324,4.849,0.968\tc-0.535,0.015-1.061,0.108-1.586,0.3c-1.264,0.463-2.264,1.388-2.815,2.604c-0.262,0.551-0.398,1.133-0.448,1.72\tC9.79,7.905,7.677,5.873,5.076,5.82C6.501,5.208,8.153,4.875,9.94,4.875H9.977z"/></svg>',tumblr:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6.885,8.598c0,0,0,3.393,0,4.996c0,0.282,0,0.66,0.094,0.942c0.377,1.509,1.131,2.545,2.545,3.11 c1.319,0.472,2.356,0.472,3.676,0c0.565-0.188,1.132-0.659,1.132-0.659l-0.849-2.263c0,0-1.036,0.378-1.603,0.283 c-0.565-0.094-1.226-0.66-1.226-1.508c0-1.603,0-4.902,0-4.902h2.828V5.771h-2.828V2H8.205c0,0-0.094,0.66-0.188,0.942 C7.828,3.791,7.262,4.733,6.603,5.394C5.848,6.147,5,6.43,5,6.43v2.168H6.885z"/></svg>',tv:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="7" y="16" width="6" height="1"/><rect fill="none" stroke="#000" x=".5" y="3.5" width="19" height="11"/></svg>',twitter:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M19,4.74 C18.339,5.029 17.626,5.229 16.881,5.32 C17.644,4.86 18.227,4.139 18.503,3.28 C17.79,3.7 17.001,4.009 16.159,4.17 C15.485,3.45 14.526,3 13.464,3 C11.423,3 9.771,4.66 9.771,6.7 C9.771,6.99 9.804,7.269 9.868,7.539 C6.795,7.38 4.076,5.919 2.254,3.679 C1.936,4.219 1.754,4.86 1.754,5.539 C1.754,6.82 2.405,7.95 3.397,8.61 C2.79,8.589 2.22,8.429 1.723,8.149 L1.723,8.189 C1.723,9.978 2.997,11.478 4.686,11.82 C4.376,11.899 4.049,11.939 3.713,11.939 C3.475,11.939 3.245,11.919 3.018,11.88 C3.49,13.349 4.852,14.419 6.469,14.449 C5.205,15.429 3.612,16.019 1.882,16.019 C1.583,16.019 1.29,16.009 1,15.969 C2.635,17.019 4.576,17.629 6.662,17.629 C13.454,17.629 17.17,12 17.17,7.129 C17.17,6.969 17.166,6.809 17.157,6.649 C17.879,6.129 18.504,5.478 19,4.74"/></svg>',uikit:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="14.4,3.1 11.3,5.1 15,7.3 15,12.9 10,15.7 5,12.9 5,8.5 2,6.8 2,14.8 9.9,19.5 18,14.8 18,5.3"/><polygon points="9.8,4.2 6.7,2.4 9.8,0.4 12.9,2.3"/></svg>',unlock:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" x="3.5" y="8.5" width="13" height="10"/><path fill="none" stroke="#000" d="M6.5,8.5 L6.5,4.9 C6.5,3 8.1,1.5 10,1.5 C11.9,1.5 13.5,3 13.5,4.9"/></svg>',upload:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="5 8 9.5 3.5 14 8"/><rect x="3" y="17" width="13" height="1"/><line fill="none" stroke="#000" x1="9.5" y1="15" x2="9.5" y2="4"/></svg>',user:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9.9" cy="6.4" r="4.4"/><path fill="none" stroke="#000" stroke-width="1.1" d="M1.5,19 C2.3,14.5 5.8,11.2 10,11.2 C14.2,11.2 17.7,14.6 18.5,19.2"/></svg>',users:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="7.7" cy="8.6" r="3.5"/><path fill="none" stroke="#000" stroke-width="1.1" d="M1,18.1 C1.7,14.6 4.4,12.1 7.6,12.1 C10.9,12.1 13.7,14.8 14.3,18.3"/><path fill="none" stroke="#000" stroke-width="1.1" d="M11.4,4 C12.8,2.4 15.4,2.8 16.3,4.7 C17.2,6.6 15.7,8.9 13.6,8.9 C16.5,8.9 18.8,11.3 19.2,14.1"/></svg>',"video-camera":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" points="17.5 6.9 17.5 13.1 13.5 10.4 13.5 14.5 2.5 14.5 2.5 5.5 13.5 5.5 13.5 9.6 17.5 6.9"/></svg>',vimeo:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2.065,7.59C1.84,7.367,1.654,7.082,1.468,6.838c-0.332-0.42-0.137-0.411,0.274-0.772c1.026-0.91,2.004-1.896,3.127-2.688 c1.017-0.713,2.365-1.173,3.286-0.039c0.849,1.045,0.869,2.629,1.084,3.891c0.215,1.309,0.421,2.648,0.88,3.901 c0.127,0.352,0.37,1.018,0.81,1.074c0.567,0.078,1.145-0.917,1.408-1.289c0.684-0.987,1.611-2.317,1.494-3.587 c-0.115-1.349-1.572-1.095-2.482-0.773c0.146-1.514,1.555-3.216,2.912-3.792c1.439-0.597,3.579-0.587,4.302,1.036 c0.772,1.759,0.078,3.802-0.763,5.396c-0.918,1.731-2.1,3.333-3.363,4.829c-1.114,1.329-2.432,2.787-4.093,3.422 c-1.897,0.723-3.021-0.686-3.667-2.318c-0.705-1.777-1.056-3.771-1.565-5.621C4.898,8.726,4.644,7.836,4.136,7.191 C3.473,6.358,2.72,7.141,2.065,7.59C1.977,7.502,2.115,7.551,2.065,7.59L2.065,7.59z"/></svg>',warning:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="10" cy="14" r="1"/><circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"/><path d="M10.97,7.72 C10.85,9.54 10.56,11.29 10.56,11.29 C10.51,11.87 10.27,12 9.99,12 C9.69,12 9.49,11.87 9.43,11.29 C9.43,11.29 9.16,9.54 9.03,7.72 C8.96,6.54 9.03,6 9.03,6 C9.03,5.45 9.46,5.02 9.99,5 C10.53,5.01 10.97,5.44 10.97,6 C10.97,6 11.04,6.54 10.97,7.72 L10.97,7.72 Z"/></svg>',whatsapp:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M16.7,3.3c-1.8-1.8-4.1-2.8-6.7-2.8c-5.2,0-9.4,4.2-9.4,9.4c0,1.7,0.4,3.3,1.3,4.7l-1.3,4.9l5-1.3c1.4,0.8,2.9,1.2,4.5,1.2 l0,0l0,0c5.2,0,9.4-4.2,9.4-9.4C19.5,7.4,18.5,5,16.7,3.3 M10.1,17.7L10.1,17.7c-1.4,0-2.8-0.4-4-1.1l-0.3-0.2l-3,0.8l0.8-2.9 l-0.2-0.3c-0.8-1.2-1.2-2.7-1.2-4.2c0-4.3,3.5-7.8,7.8-7.8c2.1,0,4.1,0.8,5.5,2.3c1.5,1.5,2.3,3.4,2.3,5.5 C17.9,14.2,14.4,17.7,10.1,17.7 M14.4,11.9c-0.2-0.1-1.4-0.7-1.6-0.8c-0.2-0.1-0.4-0.1-0.5,0.1c-0.2,0.2-0.6,0.8-0.8,0.9 c-0.1,0.2-0.3,0.2-0.5,0.1c-0.2-0.1-1-0.4-1.9-1.2c-0.7-0.6-1.2-1.4-1.3-1.6c-0.1-0.2,0-0.4,0.1-0.5C8,8.8,8.1,8.7,8.2,8.5 c0.1-0.1,0.2-0.2,0.2-0.4c0.1-0.2,0-0.3,0-0.4C8.4,7.6,7.9,6.5,7.7,6C7.5,5.5,7.3,5.6,7.2,5.6c-0.1,0-0.3,0-0.4,0 c-0.2,0-0.4,0.1-0.6,0.3c-0.2,0.2-0.8,0.8-0.8,2c0,1.2,0.8,2.3,1,2.4c0.1,0.2,1.7,2.5,4,3.5c0.6,0.2,1,0.4,1.3,0.5 c0.6,0.2,1.1,0.2,1.5,0.1c0.5-0.1,1.4-0.6,1.6-1.1c0.2-0.5,0.2-1,0.1-1.1C14.8,12.1,14.6,12,14.4,11.9"/></svg>',wordpress:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10,0.5c-5.2,0-9.5,4.3-9.5,9.5s4.3,9.5,9.5,9.5c5.2,0,9.5-4.3,9.5-9.5S15.2,0.5,10,0.5L10,0.5L10,0.5z M15.6,3.9h-0.1 c-0.8,0-1.4,0.7-1.4,1.5c0,0.7,0.4,1.3,0.8,1.9c0.3,0.6,0.7,1.3,0.7,2.3c0,0.7-0.3,1.5-0.6,2.7L14.1,15l-3-8.9 c0.5,0,0.9-0.1,0.9-0.1C12.5,6,12.5,5.3,12,5.4c0,0-1.3,0.1-2.2,0.1C9,5.5,7.7,5.4,7.7,5.4C7.2,5.3,7.2,6,7.6,6c0,0,0.4,0.1,0.9,0.1 l1.3,3.5L8,15L5,6.1C5.5,6.1,5.9,6,5.9,6C6.4,6,6.3,5.3,5.9,5.4c0,0-1.3,0.1-2.2,0.1c-0.2,0-0.3,0-0.5,0c1.5-2.2,4-3.7,6.9-3.7 C12.2,1.7,14.1,2.6,15.6,3.9L15.6,3.9L15.6,3.9z M2.5,6.6l3.9,10.8c-2.7-1.3-4.6-4.2-4.6-7.4C1.8,8.8,2,7.6,2.5,6.6L2.5,6.6L2.5,6.6 z M10.2,10.7l2.5,6.9c0,0,0,0.1,0.1,0.1C11.9,18,11,18.2,10,18.2c-0.8,0-1.6-0.1-2.3-0.3L10.2,10.7L10.2,10.7L10.2,10.7z M14.2,17.1 l2.5-7.3c0.5-1.2,0.6-2.1,0.6-2.9c0-0.3,0-0.6-0.1-0.8c0.6,1.2,1,2.5,1,4C18.3,13,16.6,15.7,14.2,17.1L14.2,17.1L14.2,17.1z"/></svg>',world:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" d="M1,10.5 L19,10.5"/><path fill="none" stroke="#000" d="M2.35,15.5 L17.65,15.5"/><path fill="none" stroke="#000" d="M2.35,5.5 L17.523,5.5"/><path fill="none" stroke="#000" d="M10,19.46 L9.98,19.46 C7.31,17.33 5.61,14.141 5.61,10.58 C5.61,7.02 7.33,3.83 10,1.7 C10.01,1.7 9.99,1.7 10,1.7 L10,1.7 C12.67,3.83 14.4,7.02 14.4,10.58 C14.4,14.141 12.67,17.33 10,19.46 L10,19.46 L10,19.46 L10,19.46 Z"/><circle fill="none" stroke="#000" cx="10" cy="10.5" r="9"/></svg>',xing:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M4.4,4.56 C4.24,4.56 4.11,4.61 4.05,4.72 C3.98,4.83 3.99,4.97 4.07,5.12 L5.82,8.16 L5.82,8.17 L3.06,13.04 C2.99,13.18 2.99,13.33 3.06,13.44 C3.12,13.55 3.24,13.62 3.4,13.62 L6,13.62 C6.39,13.62 6.57,13.36 6.71,13.12 C6.71,13.12 9.41,8.35 9.51,8.16 C9.49,8.14 7.72,5.04 7.72,5.04 C7.58,4.81 7.39,4.56 6.99,4.56 L4.4,4.56 L4.4,4.56 Z"/><path d="M15.3,1 C14.91,1 14.74,1.25 14.6,1.5 C14.6,1.5 9.01,11.42 8.82,11.74 C8.83,11.76 12.51,18.51 12.51,18.51 C12.64,18.74 12.84,19 13.23,19 L15.82,19 C15.98,19 16.1,18.94 16.16,18.83 C16.23,18.72 16.23,18.57 16.16,18.43 L12.5,11.74 L12.5,11.72 L18.25,1.56 C18.32,1.42 18.32,1.27 18.25,1.16 C18.21,1.06 18.08,1 17.93,1 L15.3,1 L15.3,1 Z"/></svg>',yelp:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.175,14.971c-0.112,0.77-1.686,2.767-2.406,3.054c-0.246,0.1-0.487,0.076-0.675-0.069\tc-0.122-0.096-2.446-3.859-2.446-3.859c-0.194-0.293-0.157-0.682,0.083-0.978c0.234-0.284,0.581-0.393,0.881-0.276\tc0.016,0.01,4.21,1.394,4.332,1.482c0.178,0.148,0.263,0.379,0.225,0.646L17.175,14.971L17.175,14.971z M11.464,10.789\tc-0.203-0.307-0.199-0.666,0.009-0.916c0,0,2.625-3.574,2.745-3.657c0.203-0.135,0.452-0.141,0.69-0.025\tc0.691,0.335,2.085,2.405,2.167,3.199v0.027c0.024,0.271-0.082,0.491-0.273,0.623c-0.132,0.083-4.43,1.155-4.43,1.155\tc-0.322,0.096-0.68-0.06-0.882-0.381L11.464,10.789z M9.475,9.563C9.32,9.609,8.848,9.757,8.269,8.817c0,0-3.916-6.16-4.007-6.351\tc-0.057-0.212,0.011-0.455,0.202-0.65C5.047,1.211,8.21,0.327,9.037,0.529c0.27,0.069,0.457,0.238,0.522,0.479\tc0.047,0.266,0.433,5.982,0.488,7.264C10.098,9.368,9.629,9.517,9.475,9.563z M9.927,19.066c-0.083,0.225-0.273,0.373-0.54,0.421\tc-0.762,0.13-3.15-0.751-3.647-1.342c-0.096-0.131-0.155-0.262-0.167-0.394c-0.011-0.095,0-0.189,0.036-0.272\tc0.061-0.155,2.917-3.538,2.917-3.538c0.214-0.272,0.595-0.355,0.952-0.213c0.345,0.13,0.56,0.428,0.536,0.749\tC10.014,14.479,9.977,18.923,9.927,19.066z M3.495,13.912c-0.235-0.009-0.444-0.148-0.568-0.382c-0.089-0.17-0.151-0.453-0.19-0.794\tC2.63,11.701,2.761,10.144,3.07,9.648c0.145-0.226,0.357-0.345,0.592-0.336c0.154,0,4.255,1.667,4.255,1.667\tc0.321,0.118,0.521,0.453,0.5,0.833c-0.023,0.37-0.236,0.655-0.551,0.738L3.495,13.912z"/></svg>',youtube:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15,4.1c1,0.1,2.3,0,3,0.8c0.8,0.8,0.9,2.1,0.9,3.1C19,9.2,19,10.9,19,12c-0.1,1.1,0,2.4-0.5,3.4c-0.5,1.1-1.4,1.5-2.5,1.6 c-1.2,0.1-8.6,0.1-11,0c-1.1-0.1-2.4-0.1-3.2-1c-0.7-0.8-0.7-2-0.8-3C1,11.8,1,10.1,1,8.9c0-1.1,0-2.4,0.5-3.4C2,4.5,3,4.3,4.1,4.2 C5.3,4.1,12.6,4,15,4.1z M8,7.5v6l5.5-3L8,7.5z"/></svg>'})}return"undefined"!=typeof window&&window.UIkit&&window.UIkit.use(e),e});var u=function(t,e){return this instanceof u?t instanceof u?t:("string"==typeof t&&(t=this.select(t,e)),t&&t.nodeName&&(t=[t]),void(this.nodes=this.slice(t))):new u(t,e)};u.prototype={get length(){return this.nodes.length}},u.prototype.nodes=[],u.prototype.addClass=function(){return this.eacharg(arguments,function(t,e){t.classList.add(e)})},u.prototype.adjacent=function(o,t,i){return"number"==typeof t&&(t=0===t?[]:new Array(t).join().split(",").map(Number.call,Number)),this.each(function(n,r){var e=document.createDocumentFragment();u(t||{}).map(function(t,e){var i="function"==typeof o?o.call(this,t,e,n,r):o;return"string"==typeof i?this.generate(i):u(i)}).each(function(t){this.isInPage(t)?e.appendChild(u(t).clone().first()):e.appendChild(t)}),i.call(this,n,e)})},u.prototype.after=function(t,e){return this.adjacent(t,e,function(t,e){t.parentNode.insertBefore(e,t.nextSibling)})},u.prototype.append=function(t,e){return this.adjacent(t,e,function(t,e){t.appendChild(e)})},u.prototype.args=function(t,e,i){return"function"==typeof t&&(t=t(e,i)),"string"!=typeof t&&(t=this.slice(t).map(this.str(e,i))),t.toString().split(/[\s,]+/).filter(function(t){return t.length})},u.prototype.array=function(r){r=r;var o=this;return this.nodes.reduce(function(t,e,i){var n;return r?("string"==typeof(n=(n=r.call(o,e,i))||!1)&&(n=u(n)),n instanceof u&&(n=n.nodes)):n=e.innerHTML,t.concat(!1!==n?n:[])},[])},u.prototype.attr=function(t,e,n){return n=n?"data-":"",this.pairs(t,e,function(t,e){return t.getAttribute(n+e)},function(t,e,i){t.setAttribute(n+e,i)})},u.prototype.before=function(t,e){return this.adjacent(t,e,function(t,e){t.parentNode.insertBefore(e,t)})},u.prototype.children=function(t){return this.map(function(t){return this.slice(t.children)}).filter(t)},u.prototype.clone=function(){return this.map(function(t,e){var i=t.cloneNode(!0),n=this.getAll(i);return this.getAll(t).each(function(t,e){for(var i in this.mirror)this.mirror[i]&&this.mirror[i](t,n.nodes[e])}),i})},u.prototype.getAll=function(t){return u([t].concat(u("*",t).nodes))},u.prototype.mirror={},u.prototype.mirror.events=function(t,e){if(t._e)for(var i in t._e)t._e[i].forEach(function(t){u(e).on(i,t)})},u.prototype.mirror.select=function(t,e){u(t).is("select")&&(e.value=t.value)},u.prototype.mirror.textarea=function(t,e){u(t).is("textarea")&&(e.value=t.value)},u.prototype.closest=function(e){return this.map(function(t){do{if(u(t).is(e))return t}while((t=t.parentNode)&&t!==document)})},u.prototype.data=function(t,e){return this.attr(t,e,!0)},u.prototype.each=function(t){return this.nodes.forEach(t.bind(this)),this},u.prototype.eacharg=function(i,n){return this.each(function(e,t){this.args(i,e,t).forEach(function(t){n.call(this,e,t)},this)})},u.prototype.empty=function(){return this.each(function(t){for(;t.firstChild;)t.removeChild(t.firstChild)})},u.prototype.filter=function(e){var t=function(t){return t.matches=t.matches||t.msMatchesSelector||t.webkitMatchesSelector,t.matches(e||"*")};return"function"==typeof e&&(t=e),e instanceof u&&(t=function(t){return-1!==e.nodes.indexOf(t)}),u(this.nodes.filter(t))},u.prototype.find=function(e){return this.map(function(t){return u(e||"*",t)})},u.prototype.first=function(){return this.nodes[0]||!1},u.prototype.generate=function(t){return/^\s*<tr[> ]/.test(t)?u(document.createElement("table")).html(t).children().children().nodes:/^\s*<t(h|d)[> ]/.test(t)?u(document.createElement("table")).html(t).children().children().children().nodes:/^\s*</.test(t)?u(document.createElement("div")).html(t).children().nodes:document.createTextNode(t)},u.prototype.handle=function(){var t=this.slice(arguments).map(function(e){return"function"==typeof e?function(t){t.preventDefault(),e.apply(this,arguments)}:e},this);return this.on.apply(this,t)},u.prototype.hasClass=function(){return this.is("."+this.args(arguments).join("."))},u.prototype.html=function(e){return void 0===e?this.first().innerHTML||"":this.each(function(t){t.innerHTML=e})},u.prototype.is=function(t){return 0<this.filter(t).length},u.prototype.isInPage=function(t){return t!==document.body&&document.body.contains(t)},u.prototype.last=function(){return this.nodes[this.length-1]||!1},u.prototype.map=function(t){return t?u(this.array(t)).unique():this},u.prototype.not=function(e){return this.filter(function(t){return!u(t).is(e||!0)})},u.prototype.off=function(t){return this.eacharg(t,function(e,i){u(e._e?e._e[i]:[]).each(function(t){e.removeEventListener(i,t)})})},u.prototype.on=function(t,e,n){if("string"==typeof e){var r=e;e=function(e){var i=arguments;u(e.currentTarget).find(r).each(function(t){if(t===e.target||t.contains(e.target)){try{Object.defineProperty(e,"currentTarget",{get:function(){return t}})}catch(t){}n.apply(t,i)}})}}function i(t){return e.apply(this,[t].concat(t.detail||[]))}return this.eacharg(t,function(t,e){t.addEventListener(e,i),t._e=t._e||{},t._e[e]=t._e[e]||[],t._e[e].push(i)})},u.prototype.pairs=function(i,t,e,n){if(void 0!==t){var r=i;(i={})[r]=t}return"object"==typeof i?this.each(function(t){for(var e in i)n(t,e,i[e])}):this.length?e(this.first(),i):""},u.prototype.param=function(e){return Object.keys(e).map(function(t){return this.uri(t)+"="+this.uri(e[t])}.bind(this)).join("&")},u.prototype.parent=function(t){return this.map(function(t){return t.parentNode}).filter(t)},u.prototype.prepend=function(t,e){return this.adjacent(t,e,function(t,e){t.insertBefore(e,t.firstChild)})},u.prototype.remove=function(){return this.each(function(t){t.parentNode&&t.parentNode.removeChild(t)})},u.prototype.removeClass=function(){return this.eacharg(arguments,function(t,e){t.classList.remove(e)})},u.prototype.replace=function(t,e){var i=[];return this.adjacent(t,e,function(t,e){i=i.concat(this.slice(e.children)),t.parentNode.replaceChild(e,t)}),u(i)},u.prototype.scroll=function(){return this.first().scrollIntoView({behavior:"smooth"}),this},u.prototype.select=function(t,e){return t=t.replace(/^\s*/,"").replace(/\s*$/,""),/^</.test(t)?u().generate(t):(e||document).querySelectorAll(t)},u.prototype.serialize=function(){var n=this;return this.slice(this.first().elements).reduce(function(e,i){return!i.name||i.disabled||"file"===i.type||/(checkbox|radio)/.test(i.type)&&!i.checked?e:"select-multiple"===i.type?(u(i.options).each(function(t){t.selected&&(e+="&"+n.uri(i.name)+"="+n.uri(t.value))}),e):e+"&"+n.uri(i.name)+"="+n.uri(i.value)},"").slice(1)},u.prototype.siblings=function(t){return this.parent().children(t).not(this)},u.prototype.size=function(){return this.first().getBoundingClientRect()},u.prototype.slice=function(t){return t&&0!==t.length&&"string"!=typeof t&&"[object Function]"!==t.toString()?t.length?[].slice.call(t.nodes||t):[t]:[]},u.prototype.str=function(e,i){return function(t){return"function"==typeof t?t.call(this,e,i):t.toString()}},u.prototype.text=function(e){return void 0===e?this.first().textContent||"":this.each(function(t){t.textContent=e})},u.prototype.toggleClass=function(t,e){return!!e===e?this[e?"addClass":"removeClass"](t):this.eacharg(t,function(t,e){t.classList.toggle(e)})},u.prototype.trigger=function(t){var r=this.slice(arguments).slice(1);return this.eacharg(t,function(t,e){var i,n={bubbles:!0,cancelable:!0,detail:r};try{i=new window.CustomEvent(e,n)}catch(t){(i=document.createEvent("CustomEvent")).initCustomEvent(e,!0,!0,r)}t.dispatchEvent(i)})},u.prototype.unique=function(){return u(this.nodes.reduce(function(t,e){return null!=e&&!1!==e&&-1===t.indexOf(e)?t.concat(e):t},[]))},u.prototype.uri=function(t){return encodeURIComponent(t).replace(/!/g,"%21").replace(/'/g,"%27").replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/\*/g,"%2A").replace(/%20/g,"+")},u.prototype.wrap=function(t){return this.map(function(e){return u(t).each(function(t){(function(t){for(;t.firstElementChild;)t=t.firstElementChild;return u(t)})(t).append(e.cloneNode(!0)),e.parentNode.replaceChild(t,e)})})},"object"==typeof module&&module.exports&&(module.exports=u,module.exports.u=u),u(document).on("DOMContentLoaded",function(){if(0!==u("#map").length){mapboxgl.accessToken="pk.eyJ1Ijoiamt1ZXN0ZXJzIiwiYSI6ImNpZzUwaDI2ajNpZGh0bGt4cXE5ZWIxbTkifQ.UwgJqpQ8Qg_-wkZnOj0thA";var n=new mapboxgl.Map({container:"map",style:"mapbox://styles/mapbox/streets-v10",scrollZoom:!1,center:mapCenter,zoom:mapZoom}),t=new mapboxgl.NavigationControl;n.addControl(t,"top-left"),n.addControl(new mapboxgl.FullscreenControl),mapGeoJson.features.forEach(function(t){var e=document.createElement("img");e.width=t.properties.iconSize[0],e.height=t.properties.iconSize[1],e.alt=t.properties.message,e.src=mapMarkerIcon;var i=document.createElement("div");i.className="marker",i.style.cursor="pointer",i.appendChild(e),new mapboxgl.Marker(i).setLngLat(t.geometry.coordinates).setPopup(new mapboxgl.Popup({offset:25}).setHTML('<h5><a href="'+t.properties.url+'">'+t.properties.title+"</a></h5>")).addTo(n)}),function t(){UIkit._initialized?n.resize():setTimeout(t,100)}(),UIkit.util.on("#searchResultSwitcher > li","shown",function(){n.resize()})}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpa2l0LmpzIiwidWlraXQtaWNvbnMuanMiLCJ1bWJyZWxsYS5qcyIsInNpdGUuanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwiVUlraXQiLCJ0aGlzIiwib2JqUHJvdG90eXBlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJoYXNPd24iLCJvYmoiLCJrZXkiLCJjYWxsIiwiaHlwaGVuYXRlQ2FjaGUiLCJoeXBoZW5hdGVSZSIsImh5cGhlbmF0ZSIsInN0ciIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsImNhbWVsaXplUmUiLCJjYW1lbGl6ZSIsInRvVXBwZXIiLCJfIiwiYyIsInRvVXBwZXJDYXNlIiwidWNmaXJzdCIsImxlbmd0aCIsImNoYXJBdCIsInNsaWNlIiwic3RyUHJvdG90eXBlIiwiU3RyaW5nIiwic3RhcnRzV2l0aEZuIiwic3RhcnRzV2l0aCIsInNlYXJjaCIsImxhc3RJbmRleE9mIiwiZW5kc1dpdGhGbiIsImVuZHNXaXRoIiwic3Vic3RyIiwiaW5jbHVkZXNGbiIsImkiLCJpbmRleE9mIiwiYXJyUHJvdG90eXBlIiwiQXJyYXkiLCJpbmNsdWRlc1N0ciIsImluY2x1ZGVzIiwiaW5jbHVkZXNBcnJheSIsImlzU3RyaW5nIiwiZmluZEluZGV4Rm4iLCJmaW5kSW5kZXgiLCJwcmVkaWNhdGUiLCJhcmd1bWVudHMkMSIsImFyZ3VtZW50cyIsImFycmF5IiwiaXNBcnJheSIsImlzRnVuY3Rpb24iLCJpc09iamVjdCIsInRvU3RyaW5nIiwiaXNQbGFpbk9iamVjdCIsImlzV2luZG93Iiwid2luZG93IiwiaXNEb2N1bWVudCIsIm5vZGVUeXBlIiwiaXNKUXVlcnkiLCJqcXVlcnkiLCJpc05vZGUiLCJpc0VsZW1lbnQiLCJpc05vZGVDb2xsZWN0aW9uIiwibWF0Y2giLCJpc0Jvb2xlYW4iLCJ2YWx1ZSIsImlzTnVtYmVyIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiaXNFbXB0eSIsImtleXMiLCJpc1VuZGVmaW5lZCIsInRvQm9vbGVhbiIsInRvTnVtYmVyIiwibnVtYmVyIiwiTnVtYmVyIiwidG9GbG9hdCIsInRvTm9kZSIsImVsZW1lbnQiLCJ0b05vZGVzIiwibWFwIiwiZmlsdGVyIiwiQm9vbGVhbiIsInRvQXJyYXkiLCJ0b1dpbmRvdyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsInRvTGlzdCIsInNwbGl0IiwidHJpbSIsInRvTXMiLCJ0aW1lIiwiaXNFcXVhbCIsIm90aGVyIiwiZWFjaCIsInZhbCIsInN3YXAiLCJhIiwiYiIsIlJlZ0V4cCIsImFzc2lnbiIsInRhcmdldCIsImFyZ3MiLCJsZW4iLCJzb3VyY2UiLCJsYXN0IiwiY2IiLCJzb3J0QnkiLCJwcm9wIiwic29ydCIsInJlZiIsInJlZiQxIiwicHJvcEEiLCJwcm9wQiIsInVuaXF1ZUJ5Iiwic2VlbiIsIlNldCIsImNoZWNrIiwiaGFzIiwiYWRkIiwiY2xhbXAiLCJtaW4iLCJtYXgiLCJNYXRoIiwibm9vcCIsImludGVyc2VjdFJlY3QiLCJyMSIsInIyIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwicG9pbnRJblJlY3QiLCJwb2ludCIsInJlY3QiLCJ4IiwieSIsIkRpbWVuc2lvbnMiLCJyYXRpbyIsImRpbWVuc2lvbnMiLCJhUHJvcCIsInJvdW5kIiwiY29udGFpbiIsIm1heERpbWVuc2lvbnMiLCJ0aGlzJDEiLCJjb3ZlciIsImF0dHIiLCJuYW1lIiwiZ2V0QXR0cmlidXRlIiwiZm9yRWFjaCIsInJlbW92ZUF0dHIiLCJzZXRBdHRyaWJ1dGUiLCJoYXNBdHRyIiwic29tZSIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImRhdGEiLCJhdHRyaWJ1dGUiLCJhdHRycyIsImluQnJvd3NlciIsImlzSUUiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNSdGwiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImhhc1RvdWNoRXZlbnRzIiwiaGFzUG9pbnRlckV2ZW50cyIsIlBvaW50ZXJFdmVudCIsImhhc1RvdWNoIiwiRG9jdW1lbnRUb3VjaCIsIm1heFRvdWNoUG9pbnRzIiwicG9pbnRlckRvd24iLCJwb2ludGVyTW92ZSIsInBvaW50ZXJVcCIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsInBvaW50ZXJDYW5jZWwiLCJxdWVyeSIsInNlbGVjdG9yIiwiY29udGV4dCIsImZpbmQiLCJnZXRDb250ZXh0IiwicXVlcnlBbGwiLCJub2RlcyIsImZpbmRBbGwiLCJpc0NvbnRleHRTZWxlY3RvciIsIl9xdWVyeSIsInF1ZXJ5Rm4iLCJyZW1vdmVzIiwiY29udGV4dFNhbml0aXplUmUiLCJzZWxlY3RvclJlIiwiY3R4Iiwic2VsZWN0b3JzIiwiY2xvc2VzdCIsInBhcmVudCIsImpvaW4iLCJzZWxlY3RvcnMkMSIsInByZXYiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwibWF0Y2hlcyIsImlkIiwiRGF0ZSIsIm5vdyIsInB1c2giLCJlc2NhcGUiLCJlIiwicmVtb3ZlIiwiY29udGV4dFNlbGVjdG9yUmUiLCJlbFByb3RvIiwiRWxlbWVudCIsIm1hdGNoZXNGbiIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiY2xvc2VzdEZuIiwiYW5jZXN0b3IiLCJwYXJlbnROb2RlIiwiZXNjYXBlRm4iLCJDU1MiLCJjc3MiLCJ2b2lkRWxlbWVudHMiLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1lbnVpdGVtIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJpc1ZvaWRFbGVtZW50IiwidGFnTmFtZSIsImlzVmlzaWJsZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiZ2V0Q2xpZW50UmVjdHMiLCJzZWxJbnB1dCIsImlzSW5wdXQiLCJ3aXRoaW4iLCJjb250YWlucyIsInBhcmVudHMiLCJlbGVtZW50cyIsImNoaWxkcmVuIiwib24iLCJsaXN0ZW5lciIsImdldEFyZ3MiLCJ0YXJnZXRzIiwidHlwZSIsInVzZUNhcHR1cmUiLCJ0b0V2ZW50VGFyZ2V0cyIsImRldGFpbCIsImFwcGx5IiwiY29uY2F0IiwiY3VycmVudFRhcmdldCIsImN1cnJlbnQiLCJkZWxlZ2F0ZXMiLCJkZWxlZ2F0ZSIsInJldmVyc2UiLCJ1c2VDYXB0dXJlRmlsdGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9mZiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbmNlIiwiY29uZGl0aW9uIiwicmVzdWx0IiwidHJpZ2dlciIsImV2ZW50IiwicmVkdWNlIiwibm90Q2FuY2VsZWQiLCJkaXNwYXRjaEV2ZW50IiwiY3JlYXRlRXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImluaXRDdXN0b21FdmVudCIsInNwbGljZSIsIm9wdGlvbnMiLCJjYXB0dXJlIiwiaXNFdmVudFRhcmdldCIsInRvRXZlbnRUYXJnZXQiLCJpc1RvdWNoIiwicG9pbnRlclR5cGUiLCJ0b3VjaGVzIiwiZ2V0RXZlbnRQb3MiLCJjaGFuZ2VkVG91Y2hlcyIsImNsaWVudFgiLCJjbGllbnRZIiwiRGVmZXJyZWQiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJQcm9taXNlRm4iLCJQRU5ESU5HIiwiYXN5bmMiLCJzZXRJbW1lZGlhdGUiLCJzZXRUaW1lb3V0IiwiZXhlY3V0b3IiLCJzdGF0ZSIsInVuZGVmaW5lZCIsImRlZmVycmVkIiwiciIsImFsbCIsIml0ZXJhYmxlIiwiY291bnQiLCJyZXNvbHZlciIsInRoZW4iLCJyYWNlIiwicCIsImFqYXgiLCJ1cmwiLCJlbnYiLCJtZXRob2QiLCJoZWFkZXJzIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJiZWZvcmVTZW5kIiwicmVzcG9uc2VUeXBlIiwiaGVhZGVyIiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJzdGF0dXMiLCJFcnJvciIsInN0YXR1c1RleHQiLCJzZW5kIiwiZ2V0SW1hZ2UiLCJzcmMiLCJzcmNzZXQiLCJzaXplcyIsIkltYWdlIiwib25lcnJvciIsIm9ubG9hZCIsInJlYWR5IiwiZm4iLCJyZWFkeVN0YXRlIiwidW5iaW5kIiwiaW5kZXgiLCJnZXRJbmRleCIsImZpbml0ZSIsImVtcHR5IiwiJCIsImlubmVySFRNTCIsImh0bWwiLCJhcHBlbmQiLCJoYXNDaGlsZE5vZGVzIiwiaW5zZXJ0Tm9kZXMiLCJhcHBlbmRDaGlsZCIsImJlZm9yZSIsImluc2VydEJlZm9yZSIsImFmdGVyIiwibmV4dFNpYmxpbmciLCJmcmFnbWVudCIsInJlbW92ZUNoaWxkIiwid3JhcEFsbCIsInN0cnVjdHVyZSIsImZpcnN0Q2hpbGQiLCJ3cmFwSW5uZXIiLCJjaGlsZE5vZGVzIiwidW53cmFwIiwiVHlwZUVycm9yIiwiY2FsbGVkIiwibm90aWZ5IiwicmVhc29uIiwic2hpZnQiLCJvblJlc29sdmVkIiwib25SZWplY3RlZCIsImNhdGNoIiwiZnJhZ21lbnRSZSIsInNpbmdsZVRhZ1JlIiwiZXhlYyIsImNyZWF0ZUVsZW1lbnQiLCJjb250YWluZXIiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJ0ZXh0Q29udGVudCIsIm5vZGUiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIm5leHQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJpc0h0bWwiLCIkJCIsImFkZENsYXNzIiwiYXBwbHkkMSIsInJlbW92ZUNsYXNzIiwicmVtb3ZlQ2xhc3NlcyIsImNscyIsInJlcGxhY2VDbGFzcyIsImhhc0NsYXNzIiwiY2xhc3NMaXN0IiwidG9nZ2xlQ2xhc3MiLCJmb3JjZSIsImdldEFyZ3MkMSIsInBvcCIsInN1cHBvcnRzIiwiRm9yY2UiLCJ0b2dnbGUiLCJNdWx0aXBsZSIsImFyZyIsImdldCIsIl9tdWx0aXBsZSIsIl9mb3JjZSIsImNzc051bWJlciIsImFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQiLCJjb2x1bW4tY291bnQiLCJmaWxsLW9wYWNpdHkiLCJmbGV4LWdyb3ciLCJmbGV4LXNocmluayIsImZvbnQtd2VpZ2h0IiwibGluZS1oZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwic3Ryb2tlLWRhc2hhcnJheSIsInN0cm9rZS1kYXNob2Zmc2V0Iiwid2lkb3dzIiwiei1pbmRleCIsInpvb20iLCJwcm9wZXJ0eSIsInByb3BOYW1lIiwiZ2V0U3R5bGUiLCJzdHlsZSIsInJlbW92ZVByb3BlcnR5Iiwic3R5bGVzIiwiZ2V0U3R5bGVzIiwicHJvcHMiLCJwc2V1ZG9FbHQiLCJnZXRDb21wdXRlZFN0eWxlIiwidmFycyIsImdldENzc1ZhciIsImRvY0VsIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImNzc1Byb3BzIiwicmV0IiwicHJlZml4ZWROYW1lIiwiY3NzUHJlZml4ZXMiLCJ2ZW5kb3JQcm9wTmFtZSIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsInRpbWluZyIsInRpbWVyIiwiY2xlYXJUaW1lb3V0IiwidHJhbnNpdGlvblByb3BlcnR5IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uIiwiVHJhbnNpdGlvbiIsInN0YXJ0Iiwic3RvcCIsImNhbmNlbCIsImluUHJvZ3Jlc3MiLCJhbmltYXRpb25QcmVmaXgiLCJhbmltYXRlIiwiYW5pbWF0aW9uIiwib3JpZ2luIiwib3V0IiwicmVzZXQiLCJBbmltYXRpb24iLCJpbiIsImRpcnMiLCJ3aWR0aCIsImhlaWdodCIsInBvc2l0aW9uQXQiLCJlbEF0dGFjaCIsInRhcmdldEF0dGFjaCIsImVsT2Zmc2V0IiwidGFyZ2V0T2Zmc2V0IiwiZmxpcCIsImJvdW5kYXJ5IiwiZ2V0UG9zIiwiZmxpcHBlZCIsImRpbSIsImdldERpbWVuc2lvbnMiLCJ0YXJnZXREaW0iLCJwb3NpdGlvbiIsIm1vdmVUbyIsImdldE9mZnNldHMiLCJib3VuZGFyaWVzIiwidW5zaGlmdCIsImRpciIsImFsaWduIiwiYWxpZ25GbGlwIiwiZWxlbU9mZnNldCIsImNlbnRlck9mZnNldCIsImNlbnRlclRhcmdldE9mZnNldCIsIm5ld1ZhbCIsImVsIiwib2Zmc2V0IiwiY29vcmRpbmF0ZXMiLCJjdXJyZW50T2Zmc2V0IiwicG9zIiwiaGlkZGVuIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsImlubmVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm9mZnNldFBhcmVudCIsImVsZW1lbnRPZmZzZXQiLCJwYXJlbnRPZmZzZXQiLCJvZmZzZXRQb3NpdGlvbiIsIm9mZnNldFRvcCIsIm9mZnNldExlZnQiLCJ3aW4iLCJkaW1lbnNpb24iLCJkb2MiLCJib3hNb2RlbEFkanVzdCIsInNpemluZyIsImF0dGFjaCIsImZhY3RvciIsIm9mZnNldHMiLCJmbGlwUG9zaXRpb24iLCJ0b1B4IiwicGVyY2VudCIsImZhc3Rkb20iLCJyZWFkcyIsIndyaXRlcyIsInJlYWQiLCJ0YXNrIiwic2NoZWR1bGVGbHVzaCIsIndyaXRlIiwiY2xlYXIiLCJyZW1vdmUkMSIsImZsdXNoIiwicmVjdXJzaW9uIiwicnVuVGFza3MiLCJzY2hlZHVsZWQiLCJSRUNVUlNJT05fTElNSVQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ0YXNrcyIsIml0ZW0iLCJNb3VzZVRyYWNrZXIiLCJwb3NpdGlvbnMiLCJpbml0IiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJtb3Zlc1RvIiwicHJldlBvc2l0aW9uIiwicGF0aCIsImRpYWdvbmFsIiwiaW50ZXJzZWN0aW9uIiwicmVmXzAiLCJ4MSIsInkxIiwicmVmXzEiLCJ4MiIsInkyIiwicmVmJDFfMCIsIngzIiwieTMiLCJyZWYkMV8xIiwieDQiLCJ5NCIsImRlbm9taW5hdG9yIiwidWEiLCJpbnRlcnNlY3QiLCJzdHJhdHMiLCJtZXJnZUZuRGF0YSIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwidm0iLCJjb21wdXRlZCIsImNvbmNhdFN0cmF0IiwibWVyZ2VPcHRpb25zIiwiY2hpbGQiLCJleHRlbmRzIiwibWl4aW5zIiwibCIsIm1lcmdlS2V5Iiwia2V5JDEiLCJwYXJzZU9wdGlvbnMiLCJKU09OIiwicGFyc2UiLCJvcHRpb24iLCJldmVudHMiLCJjcmVhdGVkIiwiYmVmb3JlQ29ubmVjdCIsImNvbm5lY3RlZCIsImJlZm9yZURpc2Nvbm5lY3QiLCJkaXNjb25uZWN0ZWQiLCJkZXN0cm95IiwidXBkYXRlIiwibWV0aG9kcyIsIlBsYXllciIsInBvc3QiLCJjbWQiLCJjb250ZW50V2luZG93IiwicG9zdE1lc3NhZ2UiLCJzdHJpbmdpZnkiLCJpc0luVmlldyIsIm92ZXJmbG93UGFyZW50cyIsImV2ZXJ5IiwiY2xpZW50IiwiZ2V0Vmlld3BvcnQiLCJzY3JvbGxUb3AiLCJnZXRTY3JvbGxpbmdFbGVtZW50Iiwic2Nyb2xsSW50b1ZpZXciLCJvZmZzZXRCeSIsImxvb3AiLCJkaXN0Iiwic2Nyb2xsRWxlbWVudCIsInNjcm9sbCIsImNlaWwiLCJhYnMiLCJwb3ciLCJzdGVwIiwiayIsImNvcyIsIlBJIiwic2Nyb2xsZWRPdmVyIiwiaGVpZ2h0T2Zmc2V0Iiwic2Nyb2xsUGFyZW50cyIsInNjcm9sbEhlaWdodCIsInZpZXdwb3J0SGVpZ2h0Iiwidmlld3BvcnRUb3AiLCJ2aWV3cG9ydERpc3QiLCJvdmVyZmxvd1JlIiwic2Nyb2xsRWwiLCJzY3JvbGxpbmdFbGVtZW50IiwiaXNWaWRlbyIsImlzWW91dHViZSIsImlzVmltZW8iLCJpc0hUTUw1IiwiaXNJRnJhbWUiLCJlbmFibGVBcGkiLCJwb2xsZXIiLCJ5b3V0dWJlIiwidmltZW8iLCJwbGF5ZXJfaWQiLCJwbGF5IiwiZnVuYyIsInBhdXNlIiwibXV0ZSIsIm11dGVkIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlckNsYXNzIiwiY2FsbGJhY2siLCJyb290TWFyZ2luIiwicGVuZGluZyIsInJlY29yZHMiLCJ0YWtlUmVjb3JkcyIsInBhc3NpdmUiLCJlbnRyeSIsImluVmlldyIsImlzSW50ZXJzZWN0aW5nIiwib2JzZXJ2ZSIsImRpc2Nvbm5lY3QiLCJnZXRDb21wb25lbnROYW1lIiwiX2luaXQiLCJEQVRBIiwidWlkIiwiY29tcG9uZW50cyIsIl9jb25uZWN0ZWQiLCJfY2FsbFVwZGF0ZSIsImdldFByb3BzIiwib3B0cyIsImRhdGEkMSIsImNvZXJjZSIsInByb3AkMSIsInJlZ2lzdGVyQ29tcHV0ZWQiLCJjb21wb25lbnQiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJfY29tcHV0ZWRzIiwiJHByb3BzIiwiJGVsIiwic2V0IiwicmVnaXN0ZXJFdmVudCIsImhhbmRsZXIiLCJfZXZlbnRzIiwiYmluZCIsIm5vdEluIiwiYXJyIiwidXRpbCIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsInByZXBlbmQiLCJwcmVmaXgiLCJ2ZXJzaW9uIiwidXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkIiwibWl4aW4iLCJleHRlbmQiLCJTdWIiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInN1cGVyIiwiYm9keSIsIl9jYWxsSG9vayIsImhvb2siLCJoYW5kbGVycyIsIiRvcHRpb25zIiwiX2NhbGxDb25uZWN0ZWQiLCJfZGF0YSIsIl9mcmFtZXMiLCJfaW5pdFByb3BzIiwiX2luaXRFdmVudHMiLCJfaW5pdE9ic2VydmVyIiwiX2NhbGxEaXNjb25uZWN0ZWQiLCJfb2JzZXJ2ZXIiLCJfdW5iaW5kRXZlbnRzIiwiX2NhbGxXYXRjaGVzIiwidXBkYXRlcyIsIl93YXRjaCIsImluaXRpdGFsIiwiaGFzUHJldiIsIndhdGNoIiwiaW1tZWRpYXRlIiwibm9ybWFsaXplRGF0YSIsIl91aWQiLCJfaW5pdERhdGEiLCJfaW5pdE1ldGhvZHMiLCJfaW5pdENvbXB1dGVkcyIsIiRtb3VudCIsIiRuYW1lIiwiZXhjbHVkZSIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJhdHRyaWJ1dGVOYW1lIiwiJHJlc2V0IiwiYXR0cmlidXRlcyIsImF0dHJpYnV0ZUZpbHRlciIsImFyZ3NBcnJheSIsImZ1bmN0aW9uYWwiLCJpbnN0YW5jZSIsImdldENvbXBvbmVudCIsIiRkZXN0cm95Iiwib3B0IiwiaW5zdGFsbCIsIl9pbml0aWFsaXplZCIsImdldENvbXBvbmVudHMiLCJjb25uZWN0IiwibmFtZSQxIiwiJGNyZWF0ZSIsInJlbW92ZUVsIiwiJGVtaXQiLCIkdXBkYXRlIiwiJGdldENvbXBvbmVudCIsIm5hbWVzIiwiZGVmaW5lUHJvcGVydGllcyIsIiRjb250YWluZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJpbnN0YW5jZUFQSSIsIkNsYXNzIiwiVG9nZ2xhYmxlIiwiaW5pdFByb3BzIiwib3ZlcmZsb3ciLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImhpZGVQcm9wcyIsImhhc0FuaW1hdGlvbiIsImhhc1RyYW5zaXRpb24iLCJ0b2dnbGVFbGVtZW50Iiwic2hvdyIsIl90b2dnbGVFbGVtZW50IiwiaXNUb2dnbGVkIiwidXBkYXRlQXJpYSIsImNtcCIsInRvZ2dsZUhlaWdodCIsIl90b2dnbGUiLCJmaW5hbCIsInRvZ2dsZWQiLCJjaGFuZ2VkIiwiZm9jdXMiLCJibHVyIiwiaW5uZXIiLCJsYXN0RWxlbWVudENoaWxkIiwiY3VycmVudEhlaWdodCIsImVuZEhlaWdodCIsIkFjY29yZGlvbiIsImFjdGl2ZSIsImNvbGxhcHNpYmxlIiwibXVsdGlwbGUiLCJjb250ZW50IiwiY2xzT3BlbiIsIml0ZW1zIiwiaGlkZSIsInByZXZlbnREZWZhdWx0IiwiYWN0aXZlSXRlbXMiLCJfd3JhcHBlciIsImFsZXJ0IiwiY2xvc2UiLCJzZWxDbG9zZSIsIlZpZGVvIiwiYXV0b211dGUiLCJhdXRvcGxheSIsInByZWxvYWQiLCJwbGF5ZXIiLCJ2aXNpYmxlIiwiZ2V0UG9zaXRpb25lZFBhcmVudCIsIm5hdHVyYWxXaWR0aCIsInZpZGVvV2lkdGgiLCJjbGllbnRXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJ2aWRlb0hlaWdodCIsImNsaWVudEhlaWdodCIsIlBvc2l0aW9uIiwiY2xzUG9zIiwib2Zmc2V0JDEiLCJheGlzIiwiZ2V0QXhpcyIsImRyb3AiLCJtb2RlIiwiYm91bmRhcnlBbGlnbiIsImRlbGF5U2hvdyIsImRlbGF5SGlkZSIsImNsc0Ryb3AiLCJ0cmFja2VyIiwiaXNBY3RpdmUiLCJkZWZhdWx0UHJldmVudGVkIiwiaGFzaCIsImNsZWFyVGltZXJzIiwibmV3VGFyZ2V0Iiwia2V5Q29kZSIsImRlbGF5IiwiaXNEZWxheWluZyIsInNob3dUaW1lciIsImhpZGVUaW1lciIsImFsaWduVG8iLCJmb3JtQ3VzdG9tIiwiZmlsZXMiLCJzZWxlY3RlZCIsImdpZiIsImludmlldyIsIk1hcmdpbiIsIm1hcmdpbiIsImZpcnN0Q29sdW1uIiwiY29sdW1ucyIsInNvcnRCeSQxIiwicm93cyIsImdldFJvd3MiLCJyb3ciLCJzdGFydFByb3AiLCJlbmRQcm9wIiwic29ydGVkIiwiZ2V0T2Zmc2V0IiwiaiIsInN0YXJ0RGltIiwiZ3JpZCIsIm1hc29ucnkiLCJwYXJhbGxheCIsImNsc1N0YWNrIiwicm93SGVpZ2h0cyIsInRyYW5zaXRpb25JblByb2dyZXNzIiwidHJhbnNsYXRlcyIsImVsSGVpZ2h0IiwicGFkZGluZyIsImNvbHVtbiIsImNvbHVtbkhlaWdodHMiLCJzdW0iLCJuZXdQYWRkaW5nIiwiaGd0IiwiaGVpZ2h0JDEiLCJzY3JvbGxlZCIsIkZsZXhCdWciLCJzZWxNaW5IZWlnaHQiLCJmb3JjZUhlaWdodCIsImhlaWdodE1hdGNoIiwiaGVpZ2h0cyIsImdldEhlaWdodHMiLCJoYXNNaW5IZWlnaHQiLCJtaW5IZWlnaHQiLCJoYXNTaHJ1bmsiLCJ0b0ZpeGVkIiwiaGVpZ2h0Vmlld3BvcnQiLCJleHBhbmQiLCJvZmZzZXRCb3R0b20iLCJib3giLCJkYXRhc2V0IiwiaGVpZ2h0RXhwYW5kIiwiU1ZHIiwiaWNvbiIsImNsYXNzIiwic3Ryb2tlQW5pbWF0aW9uIiwiZm9jdXNhYmxlIiwiaW5jbHVkZSIsInN2ZyIsImdldFN2ZyIsImFwcGx5QXR0cmlidXRlcyIsInN2Z0VsIiwicm9vdCIsImVxdWFscyIsImluc2VydFNWRyIsImdldE1heFBhdGhMZW5ndGgiLCJzZXRQcm9wZXJ0eSIsInN2Z3MiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZXNwb25zZSIsImxvYWRTVkciLCJzeW1ib2xzIiwic3ltYm9sUmUiLCJsYXN0SW5kZXgiLCJwYXJzZVN5bWJvbHMiLCJwYXJzZVNWRyIsInZpZXdCb3giLCJzdHJva2UiLCJnZXRUb3RhbExlbmd0aCIsImljb25zIiwic3Bpbm5lciIsInRvdG9wIiwibWFya2VyIiwiY2xvc2UtaWNvbiIsImNsb3NlLWxhcmdlIiwibmF2YmFyLXRvZ2dsZS1pY29uIiwib3ZlcmxheS1pY29uIiwicGFnaW5hdGlvbi1uZXh0IiwicGFnaW5hdGlvbi1wcmV2aW91cyIsInNlYXJjaC1pY29uIiwic2VhcmNoLWxhcmdlIiwic2VhcmNoLW5hdmJhciIsInNsaWRlbmF2LW5leHQiLCJzbGlkZW5hdi1uZXh0LWxhcmdlIiwic2xpZGVuYXYtcHJldmlvdXMiLCJzbGlkZW5hdi1wcmV2aW91cy1sYXJnZSIsIkljb24iLCJhZGRlZCIsInBhcnNlZCIsImlzSWNvbiIsImFwcGx5UnRsIiwiY2xvbmVOb2RlIiwiZ2V0SWNvbiIsIkljb25Db21wb25lbnQiLCJTbGlkZW5hdiIsIlNlYXJjaCIsIkNsb3NlIiwiU3Bpbm5lciIsImRhdGFTcmMiLCJkYXRhU3Jjc2V0IiwiY2FjaGVLZXkiLCJkYXRhV2lkdGgiLCJkYXRhSGVpZ2h0IiwiZGF0YVNpemVzIiwiaXNJbWciLCJzdG9yYWdlIiwic2V0U3JjQXR0cnMiLCJzaXplc1RvUGl4ZWwiLCJnZXRQbGFjZWhvbGRlckltYWdlIiwib2JzZXJ2ZXIiLCJsb2FkIiwiaW1hZ2UiLCJjdXJyZW50U3JjIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImJnU2l6ZSIsInNyY1NpemUiLCJkZXNjcmlwdG9ycyIsInNyY1NldFJlIiwic2l6ZSIsImVudHJpZXMiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJzaXplc1JlIiwibWF0Y2hNZWRpYSIsInN1YnN0cmluZyIsInNpemVSZSIsImFkZGl0aW9uUmUiLCJzZXNzaW9uU3RvcmFnZSIsIk1lZGlhIiwibWVkaWEiLCJ0b01lZGlhIiwibGVhZGVyIiwiZmlsbCIsImNsc1dyYXBwZXIiLCJjbHNIaWRlIiwiYXR0ckZpbGwiLCJ3cmFwcGVyIiwiZmxvb3IiLCJDb250YWluZXIiLCJhY3RpdmUkMSIsIk1vZGFsIiwic2VsUGFuZWwiLCJlc2NDbG9zZSIsImJnQ2xvc2UiLCJzdGFjayIsIm92ZXJsYXkiLCJwYW5lbCIsInRyYW5zaXRpb25FbGVtZW50IiwibW9kYWwiLCJjbHNQYWdlIiwiYW5pbWF0ZSQxIiwiX3JlamVjdCIsIm9wZW5EaWFsb2ciLCJ0bXBsIiwiaGlkZUZuIiwic3VibWl0Rm4iLCJsYWJlbHMiLCJkaWFsb2ciLCJyZXNvbHZlZCIsIm1lc3NhZ2UiLCJjb25maXJtIiwicHJvbXB0Iiwib2siLCJuYXYiLCJuYXZiYXIiLCJkcm9wZG93biIsImRyb3BiYXIiLCJkcm9wYmFyTW9kZSIsImRyb3BiYXJBbmNob3IiLCJfZHJvcGJhciIsImRyb3Bkb3ducyIsImdldERyb3Bkb3duIiwiZ2V0QWN0aXZlIiwidHJhbnNpdGlvblRvIiwibmV3SGVpZ2h0Iiwib2xkSGVpZ2h0IiwiY2xpcCIsIm9mZmNhbnZhcyIsImNsc0NvbnRhaW5lciIsImNsc0ZsaXAiLCJjbHNDb250YWluZXJBbmltYXRpb24iLCJjbHNTaWRlYmFyQW5pbWF0aW9uIiwiY2xzTW9kZSIsImNsc092ZXJsYXkiLCJ0YXJnZXRUb3VjaGVzIiwiZ2V0Vmlld3BvcnQkMSIsInZpZXdwb3J0IiwiaGVhZCIsIm92ZXJmbG93QXV0byIsInNlbENvbnRhaW5lciIsInNlbENvbnRlbnQiLCJyZXNwb25zaXZlIiwic2Nyb2xsVG8iLCJjbGljayIsInNjcm9sbHNweSIsInJlcGVhdCIsImluVmlld0NsYXNzIiwiX3VrU2Nyb2xsc3B5U3RhdGUiLCJxdWV1ZWQiLCJzY3JvbGxzcHlOYXYiLCJsaW5rcyIsInN0aWNreSIsImNsc0FjdGl2ZSIsImNsc0luYWN0aXZlIiwiY2xzRml4ZWQiLCJjbHNCZWxvdyIsInNlbFRhcmdldCIsIndpZHRoRWxlbWVudCIsInNob3dPblVwIiwicGxhY2Vob2xkZXIiLCJpc0ZpeGVkIiwibG9jYXRpb24iLCJlbFRvcCIsInRvcE9mZnNldCIsImJvdHRvbU9mZnNldCIsInBhcnNlUHJvcCIsImluYWN0aXZlIiwibGFzdFNjcm9sbCIsIm1hcmdpbnMiLCJpbml0VGltZXN0YW1wIiwibGFzdERpciIsInBlcmZvcm1hbmNlIiwiZGlzYWJsZWQiLCJpbml0U2Nyb2xsIiwicHJvcE9mZnNldCIsIlN3aXRjaGVyIiwic3dpcGluZyIsImF0dHJJdGVtIiwiY29ubmVjdHMiLCJsaXN0IiwidG9nZ2xlcyIsInRhYiIsImhyZWYiLCJBbGVydCIsIkNvdmVyIiwiRHJvcCIsIkRyb3Bkb3duIiwiRm9ybUN1c3RvbSIsIkdpZiIsIkdyaWQiLCJIZWlnaHRNYXRjaCIsIkhlaWdodFZpZXdwb3J0IiwiSW1nIiwiTGVhZGVyIiwiTmF2IiwiTmF2YmFyIiwiT2ZmY2FudmFzIiwiT3ZlcmZsb3dBdXRvIiwiUmVzcG9uc2l2ZSIsIlNjcm9sbCIsIlNjcm9sbHNweSIsIlNjcm9sbHNweU5hdiIsIlN0aWNreSIsIlN2ZyIsIlRhYiIsIlRvZ2dsZSIsIlNsaWRlbmF2TmV4dCIsIlNsaWRlbmF2UHJldmlvdXMiLCJTZWFyY2hJY29uIiwiTWFya2VyIiwiTmF2YmFyVG9nZ2xlSWNvbiIsIk92ZXJsYXlJY29uIiwiUGFnaW5hdGlvbk5leHQiLCJQYWdpbmF0aW9uUHJldmlvdXMiLCJUb3RvcCIsInN0YXJ0ZWQiLCJtdXRhdGlvbnMiLCJtdXRhdGlvbiIsImFkZGVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJpJDEiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiY2hhcmFjdGVyRGF0YSIsImNvdW50ZG93biIsImRhdGUiLCJkYXlzIiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsInVuaXRzIiwidW5pdCIsInRvdGFsIiwidGltZXNwYW4iLCJkaWdpdHMiLCJkaWdpdCIsInRhcmdldENsYXNzIiwiQW5pbWF0ZSIsImFjdGlvbiIsInNoZWV0IiwiaW5zZXJ0UnVsZSIsImFkZFN0eWxlIiwiY2hpbGRyZW4kMSIsInByb3BzRnJvbSIsIm9sZFNjcm9sbFkiLCJwcm9wc1RvIiwiZ2V0UG9zaXRpb25XaXRoTWFyZ2luIiwiZnJvbSIsImRpc3BsYXkiLCJ6SW5kZXgiLCJwb2ludGVyRXZlbnRzIiwiZmlsdGVyJDEiLCJzZWxBY3RpdmUiLCJ1cGRhdGVTdGF0ZSIsImFjdGl2ZXMiLCJvbGQiLCJsaXN0QSIsImxpc3RCIiwic2V0U3RhdGUiLCJtZXJnZVN0YXRlIiwiZ2V0U3RhdGUiLCIiLCJzdGF0ZUZpbHRlciIsInJlZl9zb3J0Iiwic3RhdGVTb3J0Iiwic3RhdGVPcmRlciIsImdldEZpbHRlciIsImdyb3VwIiwibWF0Y2hGaWx0ZXIiLCJsb2NhbGVDb21wYXJlIiwibnVtZXJpYyIsImZpbHRlckJ5IiwiQW5pbWF0aW9ucyIsInNsaWRlIiwidHJhbnNmb3JtIiwidHJhbnNsYXRlIiwidHJhbnNsYXRlZCIsInNjYWxlM2QiLCJBbmltYXRpb25zJDEiLCJmYWRlIiwic2NhbGUiLCJ0cmlnZ2VyVXBkYXRlIiwiU2xpZGVyIiwiYXV0b3BsYXlJbnRlcnZhbCIsInBhdXNlT25Ib3ZlciIsInN0YXJ0QXV0b3BsYXkiLCJzdG9wQXV0b3BsYXkiLCJzbGlkZXMiLCJkcmFnZ2FibGUiLCJ0aHJlc2hvbGQiLCJwcmV2UG9zIiwic2VsU2xpZGVzIiwiYnV0dG9uIiwiZHJhZyIsIl90cmFuc2l0aW9uZXIiLCJnZXREaXN0YW5jZSIsImRyYWdnaW5nIiwicHJldkluZGV4IiwibW92ZSIsInVuYmluZE1vdmUiLCJ2aXN1YWxWaWV3cG9ydCIsImVuZCIsImRpc3RhbmNlIiwiZGlzIiwibmV4dEluZGV4IiwiX2dldERpc3RhbmNlIiwiaXRlbVNob3duIiwiZWRnZSIsIl90cmFuc2xhdGUiLCJfc2hvdyIsImRpckNoYW5nZSIsInVzZXJTZWxlY3QiLCJzZWxOYXYiLCJzZWxOYXZJdGVtIiwibmF2SXRlbXMiLCJtYXhJbmRleCIsInVwZGF0ZU5hdiIsImdldFZhbGlkSW5kZXgiLCJjbHNBY3RpdmF0ZWQiLCJlYXNpbmciLCJ2ZWxvY2l0eSIsIlRyYW5zaXRpb25lciIsInRyYW5zaXRpb25PcHRpb25zIiwic3BlZWRVcCIsInNlbExpc3QiLCJpdGVtc2hvd24iLCJxdWV1ZUluZGV4IiwiZm9yd2FyZCIsIl9nZXRUcmFuc2l0aW9uZXIiLCJ0cmFuc2l0aW9uZXIiLCJTbGlkZXNob3ciLCJsaW5lYXIiLCJpdGVtc2hvdyBpdGVtaGlkZSBpdGVtc2hvd24gaXRlbWhpZGRlbiIsImJlZm9yZWl0ZW1zaG93IiwiaXRlbWhpZGRlbiIsIkxpZ2h0Ym94UGFuZWwiLCJkZWxheUNvbnRyb2xzIiwidmlkZW9BdXRvcGxheSIsInRlbXBsYXRlIiwic2VsQ2FwdGlvbiIsImNhcHRpb24iLCJzaG93Q29udHJvbHMiLCJoaWRlQ29udHJvbHMiLCJnZXRJdGVtIiwibG9hZEl0ZW0iLCJhbHQiLCJwb3N0ZXIiLCJzZXRJdGVtIiwiaWZyYW1lQXR0cnMiLCJmcmFtZWJvcmRlciIsImFsbG93IiwiYWxsb3dmdWxsc2NyZWVuIiwidWstcmVzcG9uc2l2ZSIsInVrLXZpZGVvIiwiY3JlYXRlRWwiLCJzZXRFcnJvciIsInZpZGVvIiwiY29udHJvbHMiLCJwbGF5c2lubGluZSIsImVuY29kZVVSSSIsIndpdGhDcmVkZW50aWFscyIsInJlZl9yZXNwb25zZSIsImdldFNsaWRlIiwiY2hpbGRFbGVtZW50Q291bnQiLCJjb250cm9sc1RpbWVyIiwidGFnIiwibGlnaHRib3giLCJMaWdodGJveCIsImxpZ2h0Ym94UGFuZWwiLCJ0b0l0ZW0iLCJub3RpZmljYXRpb24iLCJ0aW1lb3V0IiwiY2xzQ2xvc2UiLCJjbHNNc2ciLCJjbG9zZUFsbCIsIm1hcmdpblByb3AiLCJzdGFydFByb3BzIiwicmVtb3ZlRm4iLCJQYXJhbGxheCIsInByb3BlcnRpZXMiLCJiZ1BvcyIsImRpZmYiLCJpc0NvbG9yIiwiaXNDc3NQcm9wIiwic3RlcHMiLCJjb2xvciIsImNvdmVycyIsImRvd24iLCJiZ1Byb3BzIiwiYmciLCJiYWNrZ3JvdW5kU2l6ZSIsIl9pbWFnZSIsImRpbUVsIiwiZGltSW1hZ2UiLCJzcGFuIiwicG9zUGVyY2VudGFnZSIsImJhY2tncm91bmRSZXBlYXQiLCJnZXRDc3MiLCJnZXRTdGVwIiwiZ2V0VmFsdWUiLCJwYXJzZUludCIsImdldE9mZnNldEVsZW1lbnQiLCJTbGlkZXJSZWFjdGl2ZSIsImdldExlZnQiLCJjZW50ZXIiLCJnZXRFbExlZnQiLCJnZXRNYXgiLCJnZXRXaWR0aCIsInRyaWdnZXJVcGRhdGUkMSIsInNsaWRlciIsInNldHMiLCJ0byIsInVwZGF0ZVRyYW5zbGF0ZXMiLCJnZXRJdGVtSW4iLCJnZXRBY3RpdmVzIiwic2xpZGVMZWZ0IiwiYXZnV2lkdGgiLCJsZWZ0Q2VudGVyIiwic2xpZGVXaWR0aCIsInJlb3JkZXIiLCJpdGVtc2hvdyIsInNsaWRlSW5kZXgiLCJzbGlkZXJQYXJhbGxheCIsInNlbEl0ZW0iLCJyZWZfZGV0YWlsIiwiZ2V0Q3VycmVudCIsImlzSW4iLCJ0cmFja1RpbWVyIiwib2JqJDEiLCJBbmltYXRpb25zJDIiLCJwdWxsIiwic2xpZGVzaG93IiwibWF4SGVpZ2h0Iiwic29ydGFibGUiLCJjbHNJdGVtIiwiY2xzUGxhY2Vob2xkZXIiLCJjbHNEcmFnIiwiY2xzRHJhZ1N0YXRlIiwiY2xzQmFzZSIsImNsc05vRHJhZyIsImNsc0VtcHR5IiwiY2xzQ3VzdG9tIiwiaGFuZGxlIiwidEJvZGllcyIsImhhbmRsZXMiLCJ0b3VjaEFjdGlvbiIsInJlZiQyIiwicmVmJDMiLCJlbGVtZW50RnJvbVBvaW50IiwiZ2V0U29ydGFibGUiLCJwcmV2aW91cyIsImluc2VydCIsInRvdWNoZWQiLCJjbG9uZSIsIm91dGVySFRNTCIsImJveFNpemluZyIsImNsYXNzZXMiLCJ0b29sdGlwIiwidGl0bGUiLCJfaGFzVGl0bGUiLCJhcmlhLWV4cGFuZGVkIiwiX3VuYmluZCIsInVwbG9hZCIsImNsc0RyYWdvdmVyIiwiY29uY3VycmVudCIsIm1heFNpemUiLCJtaW1lIiwibXNnSW52YWxpZE1pbWUiLCJtc2dJbnZhbGlkTmFtZSIsIm1zZ0ludmFsaWRTaXplIiwicGFyYW1zIiwiYWJvcnQiLCJiZWZvcmVBbGwiLCJjb21wbGV0ZSIsImNvbXBsZXRlQWxsIiwiZXJyb3IiLCJmYWlsIiwibG9hZEVuZCIsImxvYWRTdGFydCIsInByb2dyZXNzIiwiY2hhbmdlIiwidHJhbnNmZXIiLCJkYXRhVHJhbnNmZXIiLCJkcmFnZW50ZXIiLCJkcmFnb3ZlciIsImRyYWdsZWF2ZSIsIm1hdGNoJDEiLCJjaHVua3MiLCJjaHVuayIsIkZvcm1EYXRhIiwiZmlsZSIsInBhdHRlcm4iLCJzdG9wUHJvcGFnYXRpb24iLCJDb3VudGRvd24iLCJGaWx0ZXIiLCJOb3RpZmljYXRpb24iLCJTbGlkZXJQYXJhbGxheCIsIlNsaWRlc2hvd1BhcmFsbGF4IiwiU29ydGFibGUiLCJUb29sdGlwIiwiVXBsb2FkIiwiVUlraXRJY29ucyIsIjUwMHB4IiwiYWxidW0iLCJhcnJvdy1kb3duIiwiYXJyb3ctbGVmdCIsImFycm93LXJpZ2h0IiwiYXJyb3ctdXAiLCJiYW4iLCJiZWhhbmNlIiwiYmVsbCIsImJvbGQiLCJib2x0IiwiYm9va21hcmsiLCJjYWxlbmRhciIsImNhbWVyYSIsImNhcnQiLCJjaGV2cm9uLWRvdWJsZS1sZWZ0IiwiY2hldnJvbi1kb3VibGUtcmlnaHQiLCJjaGV2cm9uLWRvd24iLCJjaGV2cm9uLWxlZnQiLCJjaGV2cm9uLXJpZ2h0IiwiY2hldnJvbi11cCIsImNsb2NrIiwiY2xvdWQtZG93bmxvYWQiLCJjbG91ZC11cGxvYWQiLCJjb2RlIiwiY29nIiwiY29tbWVudCIsImNvbW1lbnRpbmciLCJjb21tZW50cyIsImNvcHkiLCJjcmVkaXQtY2FyZCIsImRhdGFiYXNlIiwiZGVza3RvcCIsImRvd25sb2FkIiwiZHJpYmJibGUiLCJldHN5IiwiZmFjZWJvb2siLCJmaWxlLWVkaXQiLCJmaWxlLXBkZiIsImZpbGUtdGV4dCIsImZsaWNrciIsImZvbGRlciIsImZvdXJzcXVhcmUiLCJmdXR1cmUiLCJnaXQtYnJhbmNoIiwiZ2l0LWZvcmsiLCJnaXRodWItYWx0IiwiZ2l0aHViIiwiZ2l0dGVyIiwiZ29vZ2xlLXBsdXMiLCJnb29nbGUiLCJoYXBweSIsImhhc2h0YWciLCJoZWFydCIsImhpc3RvcnkiLCJob21lIiwiaW5mbyIsImluc3RhZ3JhbSIsIml0YWxpYyIsImpvb21sYSIsImxhcHRvcCIsImxpZmVzYXZlciIsImxpbmtlZGluIiwibG9jayIsIm1haWwiLCJtZW51IiwibWljcm9waG9uZSIsIm1pbnVzLWNpcmNsZSIsIm1pbnVzIiwibW9yZS12ZXJ0aWNhbCIsIm1vcmUiLCJudXQiLCJwYWdla2l0IiwicGFpbnQtYnVja2V0IiwicGVuY2lsIiwicGhvbmUtbGFuZHNjYXBlIiwicGhvbmUiLCJwaW50ZXJlc3QiLCJwbGF5LWNpcmNsZSIsInBsdXMtY2lyY2xlIiwicGx1cyIsInByaW50IiwicXVlc3Rpb24iLCJxdW90ZS1yaWdodCIsInJlY2VpdmVyIiwicmVkZGl0IiwicmVmcmVzaCIsInJlcGx5IiwicnNzIiwic2VydmVyIiwic2V0dGluZ3MiLCJzaHJpbmsiLCJzaWduLWluIiwic2lnbi1vdXQiLCJzb2NpYWwiLCJzb3VuZGNsb3VkIiwic3RhciIsInN0cmlrZXRocm91Z2giLCJ0YWJsZSIsInRhYmxldC1sYW5kc2NhcGUiLCJ0YWJsZXQiLCJ0aHVtYm5haWxzIiwidHJhc2giLCJ0cmlhbmdsZS1kb3duIiwidHJpYW5nbGUtbGVmdCIsInRyaWFuZ2xlLXJpZ2h0IiwidHJpYW5nbGUtdXAiLCJ0cmlwYWR2aXNvciIsInR1bWJsciIsInR2IiwidHdpdHRlciIsInVpa2l0IiwidW5sb2NrIiwidXNlciIsInVzZXJzIiwidmlkZW8tY2FtZXJhIiwid2FybmluZyIsIndoYXRzYXBwIiwid29yZHByZXNzIiwid29ybGQiLCJ4aW5nIiwieWVscCIsInUiLCJwYXJhbWV0ZXIiLCJzZWxlY3QiLCJub2RlTmFtZSIsImVhY2hhcmciLCJhZGphY2VudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJwYXJ0IiwiZ2VuZXJhdGUiLCJuIiwiaXNJblBhZ2UiLCJmaXJzdCIsInBhaXJzIiwiZGVzdCIsImdldEFsbCIsIm1pcnJvciIsIl9lIiwiaXMiLCJ0ZXh0YXJlYSIsImNyZWF0ZVRleHROb2RlIiwidGV4dCIsInVuaXF1ZSIsIm5vdCIsImNiMiIsInNlbCIsImVyciIsIm5tIiwidXJpIiwicmVwbGFjZUNoaWxkIiwiYmVoYXZpb3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2VyaWFsaXplIiwiY2hlY2tlZCIsInNpYmxpbmdzIiwicHNldWRvIiwiYWRkT3JSZW1vdmUiLCJldiIsIkN1c3RvbUV2ZW50IiwiY2xlYW4iLCJlbmNvZGVVUklDb21wb25lbnQiLCJ3cmFwIiwiZmluZERlZXBlc3ROb2RlIiwibWFwYm94Z2wiLCJhY2Nlc3NUb2tlbiIsIk1hcCIsInNjcm9sbFpvb20iLCJtYXBDZW50ZXIiLCJtYXBab29tIiwiTmF2aWdhdGlvbkNvbnRyb2wiLCJhZGRDb250cm9sIiwiRnVsbHNjcmVlbkNvbnRyb2wiLCJtYXBHZW9Kc29uIiwiZmVhdHVyZXMiLCJpY29uU2l6ZSIsIm1hcE1hcmtlckljb24iLCJjbGFzc05hbWUiLCJjdXJzb3IiLCJzZXRMbmdMYXQiLCJnZW9tZXRyeSIsInNldFBvcHVwIiwiUG9wdXAiLCJzZXRIVE1MIiwiYWRkVG8iLCJyZXNpemVNYXBXaGVuUmVhZHkiLCJyZXNpemUiXSwibWFwcGluZ3MiOiJDQUVBLFNBQUFBLEVBQUFDLEdBQ0EsaUJBQUFDLFNBQUEsb0JBQUFDLE9BQUFBLE9BQUFELFFBQUFELElBQ0EsbUJBQUFHLFFBQUFBLE9BQUFDLElBQUFELE9BQUEsUUFBQUgsSUFDQUQsRUFBQUEsR0FBQU0sTUFBQUMsTUFBQU4sSUFIQSxDQUlBTyxLQUFBLFdBQUEsYUFFQSxJQUFBQyxFQUFBQyxPQUFBQyxVQUNBQyxFQUFBSCxFQUFBRyxlQUVBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQUgsRUFBQUksS0FBQUYsRUFBQUMsR0FHQSxJQUFBRSxFQUFBLEdBQ0FDLEVBQUEsb0JBRUEsU0FBQUMsRUFBQUMsR0FRQSxPQU5BQSxLQUFBSCxJQUNBQSxFQUFBRyxHQUFBQSxFQUNBQyxRQUFBSCxFQUFBLFNBQ0FJLGVBR0FMLEVBQUFHLEdBR0EsSUFBQUcsRUFBQSxTQUVBLFNBQUFDLEVBQUFKLEdBQ0EsT0FBQUEsRUFBQUMsUUFBQUUsRUFBQUUsR0FHQSxTQUFBQSxFQUFBQyxFQUFBQyxHQUNBLE9BQUFBLEVBQUFBLEVBQUFDLGNBQUEsR0FHQSxTQUFBQyxFQUFBVCxHQUNBLE9BQUFBLEVBQUFVLE9BQUFMLEVBQUEsRUFBQUwsRUFBQVcsT0FBQSxJQUFBWCxFQUFBWSxNQUFBLEdBQUEsR0FHQSxJQUFBQyxFQUFBQyxPQUFBdkIsVUFDQXdCLEVBQUFGLEVBQUFHLFlBQUEsU0FBQUMsR0FBQSxPQUFBLElBQUE3QixLQUFBOEIsWUFBQUQsRUFBQSxJQUVBLFNBQUFELEVBQUFoQixFQUFBaUIsR0FDQSxPQUFBRixFQUFBbkIsS0FBQUksRUFBQWlCLEdBR0EsSUFBQUUsRUFBQU4sRUFBQU8sVUFBQSxTQUFBSCxHQUFBLE9BQUE3QixLQUFBaUMsUUFBQUosRUFBQVAsVUFBQU8sR0FFQSxTQUFBRyxFQUFBcEIsRUFBQWlCLEdBQ0EsT0FBQUUsRUFBQXZCLEtBQUFJLEVBQUFpQixHQUtBLFNBQUFLLEVBQUFMLEVBQUFNLEdBQUEsU0FBQW5DLEtBQUFvQyxRQUFBUCxFQUFBTSxHQUZBLElBQUFFLEVBQUFDLE1BQUFuQyxVQUdBb0MsRUFBQWQsRUFBQWUsVUFBQU4sRUFDQU8sRUFBQUosRUFBQUcsVUFBQU4sRUFFQSxTQUFBTSxFQUFBbEMsRUFBQXVCLEdBQ0EsT0FBQXZCLElBQUFvQyxFQUFBcEMsR0FBQWlDLEVBQUFFLEdBQUFqQyxLQUFBRixFQUFBdUIsR0FHQSxJQUFBYyxFQUFBTixFQUFBTyxXQUFBLFNBQUFDLEdBR0EsSUFGQSxJQUFBQyxFQUFBQyxVQUVBWixFQUFBLEVBQUFBLEVBQUFuQyxLQUFBc0IsT0FBQWEsSUFDQSxHQUFBVSxFQUFBckMsS0FBQXNDLEVBQUEsR0FBQTlDLEtBQUFtQyxHQUFBQSxFQUFBbkMsTUFDQSxPQUFBbUMsRUFHQSxPQUFBLEdBR0EsU0FBQVMsRUFBQUksRUFBQUgsR0FDQSxPQUFBRixFQUFBbkMsS0FBQXdDLEVBQUFILEdBR0EsSUFBQUksRUFBQVgsTUFBQVcsUUFFQSxTQUFBQyxFQUFBNUMsR0FDQSxNQUFBLG1CQUFBQSxFQUdBLFNBQUE2QyxFQUFBN0MsR0FDQSxPQUFBLE9BQUFBLEdBQUEsaUJBQUFBLEVBR0EsSUFBQThDLEVBQUFuRCxFQUFBbUQsU0FDQSxTQUFBQyxFQUFBL0MsR0FDQSxNQUFBLG9CQUFBOEMsRUFBQTVDLEtBQUFGLEdBR0EsU0FBQWdELEVBQUFoRCxHQUNBLE9BQUE2QyxFQUFBN0MsSUFBQUEsSUFBQUEsRUFBQWlELE9BR0EsU0FBQUMsRUFBQWxELEdBQ0EsT0FBQTZDLEVBQUE3QyxJQUFBLElBQUFBLEVBQUFtRCxTQUdBLFNBQUFDLEVBQUFwRCxHQUNBLE9BQUE2QyxFQUFBN0MsTUFBQUEsRUFBQXFELE9BR0EsU0FBQUMsRUFBQXRELEdBQ0EsT0FBQTZDLEVBQUE3QyxJQUFBLEdBQUFBLEVBQUFtRCxTQUdBLFNBQUFJLEVBQUF2RCxHQUNBLE9BQUE2QyxFQUFBN0MsSUFBQSxJQUFBQSxFQUFBbUQsU0FHQSxTQUFBSyxFQUFBeEQsR0FDQSxPQUFBOEMsRUFBQTVDLEtBQUFGLEdBQUF5RCxNQUFBLDBDQUdBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQSxrQkFBQUEsRUFHQSxTQUFBdkIsRUFBQXVCLEdBQ0EsTUFBQSxpQkFBQUEsRUFHQSxTQUFBQyxFQUFBRCxHQUNBLE1BQUEsaUJBQUFBLEVBR0EsU0FBQUUsRUFBQUYsR0FDQSxPQUFBQyxFQUFBRCxJQUFBdkIsRUFBQXVCLEtBQUFHLE1BQUFILEVBQUFJLFdBQUFKLElBR0EsU0FBQUssRUFBQWhFLEdBQ0EsUUFBQTJDLEVBQUEzQyxHQUNBQSxFQUFBZ0IsT0FDQTZCLEVBQUE3QyxJQUNBSixPQUFBcUUsS0FBQWpFLEdBQUFnQixRQUtBLFNBQUFrRCxFQUFBUCxHQUNBLFlBQUEsSUFBQUEsRUFHQSxTQUFBUSxFQUFBUixHQUNBLE9BQUFELEVBQUFDLEdBQ0FBLEVBQ0EsU0FBQUEsR0FBQSxNQUFBQSxHQUFBLEtBQUFBLEdBRUEsVUFBQUEsR0FBQSxNQUFBQSxHQUVBQSxFQUdBLFNBQUFTLEVBQUFULEdBQ0EsSUFBQVUsRUFBQUMsT0FBQVgsR0FDQSxPQUFBRyxNQUFBTyxJQUFBQSxFQUdBLFNBQUFFLEVBQUFaLEdBQ0EsT0FBQUksV0FBQUosSUFBQSxFQUdBLFNBQUFhLEVBQUFDLEdBQ0EsT0FBQW5CLEVBQUFtQixHQUNBQSxFQUNBakIsRUFBQWlCLElBQUFyQixFQUFBcUIsR0FDQUEsRUFBQSxHQUNBOUIsRUFBQThCLEdBQ0FELEVBQUFDLEVBQUEsSUFDQSxLQUdBLFNBQUFDLEVBQUFELEdBQ0EsT0FBQW5CLEVBQUFtQixHQUNBLENBQUFBLEdBQ0FqQixFQUFBaUIsR0FDQTFDLEVBQUFiLE1BQUFoQixLQUFBdUUsR0FDQTlCLEVBQUE4QixHQUNBQSxFQUFBRSxJQUFBSCxHQUFBSSxPQUFBQyxTQUNBekIsRUFBQXFCLEdBQ0FBLEVBQUFLLFVBQ0EsR0FHQSxTQUFBQyxFQUFBTixHQUNBLE9BQUF6QixFQUFBeUIsR0FDQUEsR0FHQUEsRUFBQUQsRUFBQUMsS0FHQXZCLEVBQUF1QixHQUNBQSxFQUNBQSxFQUFBTyxlQUNBQyxZQUNBaEMsT0FHQSxTQUFBaUMsRUFBQXZCLEdBQ0EsT0FBQWhCLEVBQUFnQixHQUNBQSxFQUNBdkIsRUFBQXVCLEdBQ0FBLEVBQUF3QixNQUFBLGdCQUFBUixJQUFBLFNBQUFoQixHQUFBLE9BQUFFLEVBQUFGLEdBQ0FTLEVBQUFULEdBQ0FRLEVBQUFSLEVBQUF5QixVQUNBLENBQUF6QixHQUdBLFNBQUEwQixFQUFBQyxHQUNBLE9BQUFBLEVBRUE1RCxFQUFBNEQsRUFBQSxNQUNBZixFQUFBZSxHQUNBLElBQUFmLEVBQUFlLEdBSEEsRUFNQSxTQUFBQyxFQUFBNUIsRUFBQTZCLEdBQ0EsT0FBQTdCLElBQUE2QixHQUNBM0MsRUFBQWMsSUFDQWQsRUFBQTJDLElBQ0E1RixPQUFBcUUsS0FBQU4sR0FBQTNDLFNBQUFwQixPQUFBcUUsS0FBQXVCLEdBQUF4RSxRQUNBeUUsRUFBQTlCLEVBQUEsU0FBQStCLEVBQUF6RixHQUFBLE9BQUF5RixJQUFBRixFQUFBdkYsS0FHQSxTQUFBMEYsRUFBQWhDLEVBQUFpQyxFQUFBQyxHQUNBLE9BQUFsQyxFQUFBcEQsUUFDQSxJQUFBdUYsT0FBQUYsRUFBQSxJQUFBQyxFQUFBLEtBQ0EsU0FBQXBDLEdBQUEsT0FBQUEsSUFBQW1DLEVBQUFDLEVBQUFELElBSUEsSUFBQUcsRUFBQW5HLE9BQUFtRyxRQUFBLFNBQUFDLEdBRUEsSUFEQSxJQUFBQyxFQUFBLEdBQUFDLEVBQUF6RCxVQUFBekIsT0FBQSxFQUNBLEVBQUFrRixLQUFBRCxFQUFBQyxHQUFBekQsVUFBQXlELEVBQUEsR0FFQUYsRUFBQXBHLE9BQUFvRyxHQUNBLElBQUEsSUFBQW5FLEVBQUEsRUFBQUEsRUFBQW9FLEVBQUFqRixPQUFBYSxJQUFBLENBQ0EsSUFBQXNFLEVBQUFGLEVBQUFwRSxHQUNBLEdBQUEsT0FBQXNFLEVBQ0EsSUFBQSxJQUFBbEcsS0FBQWtHLEVBQ0FwRyxFQUFBb0csRUFBQWxHLEtBQ0ErRixFQUFBL0YsR0FBQWtHLEVBQUFsRyxJQUtBLE9BQUErRixHQUdBLFNBQUFJLEVBQUExRCxHQUNBLE9BQUFBLEVBQUFBLEVBQUExQixPQUFBLEdBR0EsU0FBQXlFLEVBQUF6RixFQUFBcUcsR0FDQSxJQUFBLElBQUFwRyxLQUFBRCxFQUNBLElBQUEsSUFBQXFHLEVBQUFyRyxFQUFBQyxHQUFBQSxHQUNBLE9BQUEsRUFHQSxPQUFBLEVBR0EsU0FBQXFHLEVBQUE1RCxFQUFBNkQsR0FDQSxPQUFBN0QsRUFBQThELEtBQUEsU0FBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBRixFQUFBRixRQUFBLElBQUFJLElBQUFBLEVBQUEsR0FDQSxJQUFBQyxFQUFBRixFQUFBSCxHQUVBLFlBRkEsSUFBQUssSUFBQUEsRUFBQSxHQUVBQSxFQUFBRCxFQUNBLEVBQ0FBLEVBQUFDLEdBQ0EsRUFDQSxJQUtBLFNBQUFDLEVBQUFuRSxFQUFBNkQsR0FDQSxJQUFBTyxFQUFBLElBQUFDLElBQ0EsT0FBQXJFLEVBQUFrQyxPQUFBLFNBQUE2QixHQUNBLElBQUFPLEVBQUFQLEVBQUFGLEdBRUEsT0FBQU8sRUFBQUcsSUFBQUQsS0FFQUYsRUFBQUksSUFBQUYsS0FBQSxLQUtBLFNBQUFHLEdBQUE5QyxFQUFBK0MsRUFBQUMsR0FJQSxZQUhBLElBQUFELElBQUFBLEVBQUEsUUFDQSxJQUFBQyxJQUFBQSxFQUFBLEdBRUFDLEtBQUFGLElBQUFFLEtBQUFELElBQUFqRCxFQUFBQyxJQUFBLEVBQUErQyxHQUFBQyxHQUdBLFNBQUFFLE1BRUEsU0FBQUMsR0FBQUMsRUFBQUMsR0FDQSxPQUFBRCxFQUFBRSxLQUFBRCxFQUFBRSxPQUNBSCxFQUFBRyxNQUFBRixFQUFBQyxNQUNBRixFQUFBSSxJQUFBSCxFQUFBSSxRQUNBTCxFQUFBSyxPQUFBSixFQUFBRyxJQUdBLFNBQUFFLEdBQUFDLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQUUsR0FBQUQsRUFBQUwsT0FDQUksRUFBQUUsR0FBQUQsRUFBQU4sTUFDQUssRUFBQUcsR0FBQUYsRUFBQUgsUUFDQUUsRUFBQUcsR0FBQUYsRUFBQUosSUFHQSxJQUFBTyxHQUFBLENBRUFDLE1BQUEsU0FBQUMsRUFBQS9CLEVBQUE1QyxHQUNBLElBQUEzRCxFQUdBdUksRUFBQSxVQUFBaEMsRUFBQSxTQUFBLFFBRUEsT0FBQXZHLEVBQUEsSUFBQXVJLEdBQUFELEVBQUEvQixHQUFBZSxLQUFBa0IsTUFBQTdFLEVBQUEyRSxFQUFBQyxHQUFBRCxFQUFBL0IsSUFBQStCLEVBQUFDLEdBQUF2SSxFQUFBdUcsR0FBQTVDLEVBQUEzRCxHQUdBeUksUUFBQSxTQUFBSCxFQUFBSSxHQUNBLElBQUFDLEVBQUFqSixLQVNBLE9BTEErRixFQUZBNkMsRUFBQXZDLEVBQUEsR0FBQXVDLEdBRUEsU0FBQTFILEVBQUEyRixHQUFBLE9BQUErQixFQUFBQSxFQUFBL0IsR0FBQW1DLEVBQUFuQyxHQUNBb0MsRUFBQU4sTUFBQUMsRUFBQS9CLEVBQUFtQyxFQUFBbkMsSUFDQStCLElBR0FBLEdBR0FNLE1BQUEsU0FBQU4sRUFBQUksR0FDQSxJQUFBQyxFQUFBakosS0FTQSxPQUxBK0YsRUFGQTZDLEVBQUE1SSxLQUFBK0ksUUFBQUgsRUFBQUksR0FFQSxTQUFBOUgsRUFBQTJGLEdBQUEsT0FBQStCLEVBQUFBLEVBQUEvQixHQUFBbUMsRUFBQW5DLEdBQ0FvQyxFQUFBTixNQUFBQyxFQUFBL0IsRUFBQW1DLEVBQUFuQyxJQUNBK0IsSUFHQUEsSUFLQSxTQUFBTyxHQUFBcEUsRUFBQXFFLEVBQUFuRixHQUVBLEdBQUFkLEVBQUFpRyxHQUNBLElBQUEsSUFBQTdJLEtBQUE2SSxFQUNBRCxHQUFBcEUsRUFBQXhFLEVBQUE2SSxFQUFBN0ksUUFGQSxDQU9BLEdBQUFpRSxFQUFBUCxHQUVBLE9BREFjLEVBQUFELEVBQUFDLEtBQ0FBLEVBQUFzRSxhQUFBRCxHQUVBcEUsRUFBQUQsR0FBQXVFLFFBQUEsU0FBQXZFLEdBRUE3QixFQUFBZSxLQUNBQSxFQUFBQSxFQUFBekQsS0FBQXVFLEVBQUFvRSxHQUFBcEUsRUFBQXFFLEtBR0EsT0FBQW5GLEVBQ0FzRixHQUFBeEUsRUFBQXFFLEdBRUFyRSxFQUFBeUUsYUFBQUosRUFBQW5GLE1BT0EsU0FBQXdGLEdBQUExRSxFQUFBcUUsR0FDQSxPQUFBcEUsRUFBQUQsR0FBQTJFLEtBQUEsU0FBQTNFLEdBQUEsT0FBQUEsRUFBQTRFLGFBQUFQLEtBR0EsU0FBQUcsR0FBQXhFLEVBQUFxRSxHQUNBckUsRUFBQUMsRUFBQUQsR0FDQXFFLEVBQUEzRCxNQUFBLEtBQUE2RCxRQUFBLFNBQUFGLEdBQUEsT0FBQXJFLEVBQUF1RSxRQUFBLFNBQUF2RSxHQUFBLE9BQUFBLEVBQUE0RSxhQUFBUCxJQUFBckUsRUFBQTZFLGdCQUFBUixPQUtBLFNBQUFTLEdBQUE5RSxFQUFBK0UsR0FDQSxJQUFBLElBQUEzSCxFQUFBLEVBQUE0SCxFQUFBLENBQUFELEVBQUEsUUFBQUEsR0FBQTNILEVBQUE0SCxFQUFBekksT0FBQWEsSUFDQSxHQUFBc0gsR0FBQTFFLEVBQUFnRixFQUFBNUgsSUFDQSxPQUFBZ0gsR0FBQXBFLEVBQUFnRixFQUFBNUgsSUFPQSxJQUFBNkgsR0FBQSxvQkFBQXpHLE9BQ0EwRyxHQUFBRCxJQUFBLGdCQUFBRSxLQUFBM0csT0FBQTRHLFVBQUFDLFdBQ0FDLEdBQUFMLElBQUEsUUFBQWIsR0FBQW1CLFNBQUFDLGdCQUFBLE9BRUFDLEdBQUFSLElBQUEsaUJBQUF6RyxPQUNBa0gsR0FBQVQsSUFBQXpHLE9BQUFtSCxhQUNBQyxHQUFBWCxLQUFBUSxJQUNBakgsT0FBQXFILGVBQUFOLG9CQUFBTSxlQUNBVCxVQUFBVSxnQkFFQUMsR0FBQUwsR0FBQSxjQUFBRCxHQUFBLGFBQUEsWUFDQU8sR0FBQU4sR0FBQSxjQUFBRCxHQUFBLFlBQUEsWUFDQVEsR0FBQVAsR0FBQSxZQUFBRCxHQUFBLFdBQUEsVUFDQVMsR0FBQVIsR0FBQSxlQUFBRCxHQUFBLEdBQUEsYUFDQVUsR0FBQVQsR0FBQSxlQUFBRCxHQUFBLEdBQUEsYUFDQVcsR0FBQVYsR0FBQSxnQkFBQSxjQUVBLFNBQUFXLEdBQUFDLEVBQUFDLEdBQ0EsT0FBQXhHLEVBQUF1RyxJQUFBRSxHQUFBRixFQUFBRyxHQUFBSCxFQUFBQyxJQUdBLFNBQUFHLEdBQUFKLEVBQUFDLEdBQ0EsSUFBQUksRUFBQTFHLEVBQUFxRyxHQUNBLE9BQUFLLEVBQUFwSyxRQUFBb0ssR0FBQUMsR0FBQU4sRUFBQUcsR0FBQUgsRUFBQUMsSUFHQSxTQUFBRSxHQUFBSCxFQUFBQyxHQUdBLFlBRkEsSUFBQUEsSUFBQUEsRUFBQWhCLFVBRUFzQixHQUFBUCxJQUFBN0gsRUFBQThILEdBQ0FBLEVBQ0FBLEVBQUFoRyxjQUdBLFNBQUFpRyxHQUFBRixFQUFBQyxHQUNBLE9BQUF4RyxFQUFBK0csR0FBQVIsRUFBQUMsRUFBQSxrQkFHQSxTQUFBSyxHQUFBTixFQUFBQyxHQUNBLE9BQUF0RyxFQUFBNkcsR0FBQVIsRUFBQUMsRUFBQSxxQkFHQSxTQUFBTyxHQUFBUixFQUFBQyxFQUFBUSxHQUlBLFFBSEEsSUFBQVIsSUFBQUEsRUFBQWhCLFdBR0FlLElBQUEzSSxFQUFBMkksR0FDQSxPQUFBLEtBS0EsSUFBQVUsRUFFQUgsR0FKQVAsRUFBQUEsRUFBQXhLLFFBQUFtTCxHQUFBLFdBTUFELEVBQUEsR0FFQVYsRUFBQUEsRUFnRUF0SCxNQUFBa0ksSUFBQWhILElBQUEsU0FBQW9HLEdBQUEsT0FBQUEsRUFBQXhLLFFBQUEsS0FBQSxJQUFBNkUsU0FoRUFULElBQUEsU0FBQW9HLEVBQUFsSixHQUVBLElBQUErSixFQUFBWixFQUVBLEdBQUEsTUFBQUQsRUFBQSxHQUFBLENBRUEsSUFBQWMsRUFBQWQsRUFBQXBKLE9BQUEsR0FBQXlELE9BQUFELE1BQUEsS0FDQXlHLEVBQUFFLEdBQUFDLEdBQUFmLEdBQUFhLEVBQUEsSUFDQWQsRUFBQWMsRUFBQTNLLE1BQUEsR0FBQThLLEtBQUEsS0FBQTVHLE9BSUEsR0FBQSxNQUFBMkYsRUFBQSxHQUFBLENBRUEsSUFBQWtCLEVBQUFsQixFQUFBcEosT0FBQSxHQUFBeUQsT0FBQUQsTUFBQSxLQUNBK0csR0FBQU4sR0FBQVosR0FBQW1CLHVCQUNBUCxFQUFBUSxHQUFBRixFQUFBbkIsRUFBQXBKLE9BQUEsSUFBQXVLLEVBQUEsS0FDQW5CLEVBQUFrQixFQUFBL0ssTUFBQSxHQUFBOEssS0FBQSxLQUlBLE9BQUFKLEdBSUFBLEVBQUFTLEtBQ0FULEVBQUFTLEdBQUEsTUFBQUMsS0FBQUMsTUFBQTFLLEVBQ0E0SixFQUFBZSxLQUFBLFdBQUEsT0FBQXZELEdBQUEyQyxFQUFBLFNBR0EsSUFBQWEsR0FBQWIsRUFBQVMsSUFBQSxJQUFBdEIsR0FSQSxPQVVBbkcsT0FBQUMsU0FBQW1ILEtBQUEsS0FFQWhCLEVBQUFoQixVQUlBLElBRUEsT0FBQWdCLEVBQUFRLEdBQUFULEdBRUEsTUFBQTJCLEdBRUEsT0FBQSxLQUVBLFFBRUFqQixHQUFBQSxFQUFBekMsUUFBQSxTQUFBMkQsR0FBQSxPQUFBQSxPQU1BLElBQUFDLEdBQUEsdUJBQ0FsQixHQUFBLGdDQUVBLFNBQUFKLEdBQUFQLEdBQ0EsT0FBQTNJLEVBQUEySSxJQUFBQSxFQUFBdEgsTUFBQW1KLElBR0EsSUFBQWpCLEdBQUEsbUJBTUEsSUFBQWtCLEdBQUFuRCxHQUFBb0QsUUFBQWpOLFVBQUEsR0FDQWtOLEdBQUFGLEdBQUFULFNBQUFTLEdBQUFHLHVCQUFBSCxHQUFBSSxtQkFBQTFGLEdBRUEsU0FBQTZFLEdBQUEzSCxFQUFBc0csR0FDQSxPQUFBckcsRUFBQUQsR0FBQTJFLEtBQUEsU0FBQTNFLEdBQUEsT0FBQXNJLEdBQUE3TSxLQUFBdUUsRUFBQXNHLEtBR0EsSUFBQW1DLEdBQUFMLEdBQUFmLFNBQUEsU0FBQWYsR0FDQSxJQUFBb0MsRUFBQXpOLEtBRUEsR0FFQSxHQUFBME0sR0FBQWUsRUFBQXBDLEdBQ0EsT0FBQW9DLFFBR0FBLEVBQUFwQixHQUFBb0IsS0FHQSxTQUFBckIsR0FBQXJILEVBQUFzRyxHQU1BLE9BSkF6SixFQUFBeUosRUFBQSxPQUNBQSxFQUFBQSxFQUFBN0osTUFBQSxJQUdBcUMsRUFBQWtCLEdBQ0F5SSxHQUFBaE4sS0FBQXVFLEVBQUFzRyxHQUNBckcsRUFBQUQsR0FBQUUsSUFBQSxTQUFBRixHQUFBLE9BQUFxSCxHQUFBckgsRUFBQXNHLEtBQUFuRyxPQUFBQyxTQUdBLFNBQUFrSCxHQUFBdEgsR0FFQSxPQURBQSxFQUFBRCxFQUFBQyxLQUNBbEIsRUFBQWtCLEVBQUEySSxhQUFBM0ksRUFBQTJJLFdBR0EsSUFBQUMsR0FBQTNELElBQUF6RyxPQUFBcUssS0FBQUEsSUFBQWIsUUFBQSxTQUFBYyxHQUFBLE9BQUFBLEVBQUFoTixRQUFBLHVCQUFBLFNBQUFrRCxHQUFBLE1BQUEsS0FBQUEsS0FDQSxTQUFBZ0osR0FBQWMsR0FDQSxPQUFBbkwsRUFBQW1MLEdBQUFGLEdBQUFuTixLQUFBLEtBQUFxTixHQUFBLEdBR0EsSUFBQUMsR0FBQSxDQUNBQyxNQUFBLEVBQ0FDLE1BQUEsRUFDQUMsSUFBQSxFQUNBQyxLQUFBLEVBQ0FDLE9BQUEsRUFDQUMsSUFBQSxFQUNBQyxLQUFBLEVBQ0FDLE9BQUEsRUFDQUMsUUFBQSxFQUNBQyxNQUFBLEVBQ0FDLFVBQUEsRUFDQUMsTUFBQSxFQUNBQyxPQUFBLEVBQ0FsSSxRQUFBLEVBQ0FtSSxPQUFBLEVBQ0FDLEtBQUEsR0FFQSxTQUFBQyxHQUFBL0osR0FDQSxPQUFBQyxFQUFBRCxHQUFBMkUsS0FBQSxTQUFBM0UsR0FBQSxPQUFBK0ksR0FBQS9JLEVBQUFnSyxRQUFBak8saUJBR0EsU0FBQWtPLEdBQUFqSyxHQUNBLE9BQUFDLEVBQUFELEdBQUEyRSxLQUFBLFNBQUEzRSxHQUFBLE9BQUFBLEVBQUFrSyxhQUFBbEssRUFBQW1LLGNBQUFuSyxFQUFBb0ssaUJBQUE3TixTQUdBLElBQUE4TixHQUFBLCtCQUNBLFNBQUFDLEdBQUF0SyxHQUNBLE9BQUFDLEVBQUFELEdBQUEyRSxLQUFBLFNBQUEzRSxHQUFBLE9BQUEySCxHQUFBM0gsRUFBQXFLLE1BR0EsU0FBQWxLLEdBQUFILEVBQUFzRyxHQUNBLE9BQUFyRyxFQUFBRCxHQUFBRyxPQUFBLFNBQUFILEdBQUEsT0FBQTJILEdBQUEzSCxFQUFBc0csS0FHQSxTQUFBaUUsR0FBQXZLLEVBQUFzRyxHQUNBLE9BQUEzSSxFQUFBMkksR0FJQXFCLEdBQUEzSCxFQUFBc0csSUFBQWUsR0FBQXJILEVBQUFzRyxHQUhBdEcsSUFBQXNHLElBQUE3SCxFQUFBNkgsR0FDQUEsRUFBQWQsZ0JBQ0F6RixFQUFBdUcsSUFBQWtFLFNBQUF6SyxFQUFBQyxJQUlBLFNBQUF5SyxHQUFBekssRUFBQXNHLEdBR0EsSUFGQSxJQUFBb0UsRUFBQSxHQUVBMUssRUFBQXNILEdBQUF0SCxJQUNBc0csSUFBQXFCLEdBQUEzSCxFQUFBc0csSUFDQW9FLEVBQUEzQyxLQUFBL0gsR0FJQSxPQUFBMEssRUFHQSxTQUFBQyxHQUFBM0ssRUFBQXNHLEdBRUEsSUFBQXFFLEdBREEzSyxFQUFBRCxFQUFBQyxJQUNBQyxFQUFBRCxFQUFBMkssVUFBQSxHQUNBLE9BQUFyRSxFQUFBbkcsR0FBQXdLLEVBQUFyRSxHQUFBcUUsRUFHQSxTQUFBQyxLQUVBLElBREEsSUFBQXBKLEVBQUEsR0FBQUMsRUFBQXpELFVBQUF6QixPQUNBa0YsS0FBQUQsRUFBQUMsR0FBQXpELFVBQUF5RCxHQUdBLElBOEdBb0osRUFJQUEsRUFsSEE3SSxFQUFBOEksR0FBQXRKLEdBQ0F1SixFQUFBL0ksRUFBQSxHQUNBZ0osRUFBQWhKLEVBQUEsR0FDQXNFLEVBQUF0RSxFQUFBLEdBQ0E2SSxFQUFBN0ksRUFBQSxHQUNBaUosRUFBQWpKLEVBQUEsR0FxQkEsT0FuQkErSSxFQUFBRyxHQUFBSCxHQUVBLEVBQUFGLEVBQUF0TyxTQXFHQXNPLEVBcEdBQSxFQUFBQSxFQXFHQSxTQUFBNUMsR0FBQSxPQUFBL0osRUFBQStKLEVBQUFrRCxRQUFBTixFQUFBTyxXQUFBLEVBQUEsQ0FBQW5ELEdBQUFvRCxPQUFBcEQsRUFBQWtELFNBQUFOLEVBQUE1QyxLQWxHQWdELEdBQUFBLEVBQUFsUSxPQXFHQThQLEVBcEdBQSxFQUFBQSxFQXFHQSxTQUFBNUMsR0FDQSxHQUFBQSxFQUFBMUcsU0FBQTBHLEVBQUFxRCxlQUFBckQsRUFBQTFHLFNBQUEwRyxFQUFBc0QsUUFDQSxPQUFBVixFQUFBcFAsS0FBQSxLQUFBd00sS0FwR0EzQixJQUNBdUUsRUFxRUEsU0FBQVcsRUFBQWxGLEVBQUF1RSxHQUNBLElBQUEzRyxFQUFBakosS0FFQSxPQUFBLFNBQUFnTixHQUVBdUQsRUFBQWpILFFBQUEsU0FBQWtILEdBRUEsSUFBQUYsRUFBQSxNQUFBakYsRUFBQSxHQUNBTSxHQUFBTixFQUFBbUYsR0FBQUMsVUFBQXZMLE9BQUEsU0FBQUgsR0FBQSxPQUFBdUssR0FBQXRDLEVBQUExRyxPQUFBdkIsS0FBQSxHQUNBcUgsR0FBQVksRUFBQTFHLE9BQUErRSxHQUVBaUYsSUFDQXRELEVBQUF3RCxTQUFBQSxFQUNBeEQsRUFBQXNELFFBQUFBLEVBRUFWLEVBQUFwUCxLQUFBeUksRUFBQStELE9BcEZBd0QsQ0FBQVYsRUFBQXpFLEVBQUF1RSxJQUdBSSxFQUFBVSxHQUFBVixHQUVBRCxFQUFBdEssTUFBQSxLQUFBNkQsUUFBQSxTQUFBeUcsR0FBQSxPQUFBRCxFQUFBeEcsUUFBQSxTQUFBaEQsR0FBQSxPQUFBQSxFQUFBcUssaUJBQUFaLEVBQUFILEVBQUFJLE9BR0EsV0FBQSxPQUFBWSxHQUFBZCxFQUFBQyxFQUFBSCxFQUFBSSxJQUdBLFNBQUFZLEdBQUFkLEVBQUFDLEVBQUFILEVBQUFJLFFBQ0EsSUFBQUEsSUFBQUEsR0FBQSxHQUVBQSxFQUFBVSxHQUFBVixHQUNBRixFQUFBRyxHQUFBSCxHQUNBQyxFQUFBdEssTUFBQSxLQUFBNkQsUUFBQSxTQUFBeUcsR0FBQSxPQUFBRCxFQUFBeEcsUUFBQSxTQUFBaEQsR0FBQSxPQUFBQSxFQUFBdUssb0JBQUFkLEVBQUFILEVBQUFJLE9BS0EsU0FBQWMsS0FFQSxJQURBLElBQUF2SyxFQUFBLEdBQUFDLEVBQUF6RCxVQUFBekIsT0FDQWtGLEtBQUFELEVBQUFDLEdBQUF6RCxVQUFBeUQsR0FHQSxJQUFBTyxFQUFBOEksR0FBQXRKLEdBQ0F4QixFQUFBZ0MsRUFBQSxHQUNBZ0osRUFBQWhKLEVBQUEsR0FDQXNFLEVBQUF0RSxFQUFBLEdBQ0E2SSxFQUFBN0ksRUFBQSxHQUNBaUosRUFBQWpKLEVBQUEsR0FDQWdLLEVBQUFoSyxFQUFBLEdBQ0E2SixFQUFBakIsR0FBQTVLLEVBQUFnTCxFQUFBMUUsRUFBQSxTQUFBMkIsR0FDQSxJQUFBZ0UsR0FBQUQsR0FBQUEsRUFBQS9ELEdBQ0FnRSxJQUNBSixJQUNBaEIsRUFBQTVDLEVBQUFnRSxLQUVBaEIsR0FFQSxPQUFBWSxFQUdBLFNBQUFLLEdBQUFuQixFQUFBb0IsRUFBQWhCLEdBQ0EsT0FBQUQsR0FBQUgsR0FBQXFCLE9BQUEsU0FBQUMsRUFBQTlLLEdBQUEsT0FBQThLLEdBQUE5SyxFQUFBK0ssY0FBQUMsR0FBQUosR0FBQSxHQUFBLEVBQUFoQixNQUNBLEdBR0EsU0FBQW9CLEdBQUF0RSxFQUFBdUUsRUFBQUMsRUFBQXRCLEdBSUEsUUFIQSxJQUFBcUIsSUFBQUEsR0FBQSxRQUNBLElBQUFDLElBQUFBLEdBQUEsR0FFQTlPLEVBQUFzSyxHQUFBLENBQ0EsSUFBQWtFLEVBQUE1RyxTQUFBZ0gsWUFBQSxlQUNBSixFQUFBTyxnQkFBQXpFLEVBQUF1RSxFQUFBQyxFQUFBdEIsR0FDQWxELEVBQUFrRSxFQUdBLE9BQUFsRSxFQUdBLFNBQUE2QyxHQUFBdEosR0FJQSxPQUhBckQsRUFBQXFELEVBQUEsS0FDQUEsRUFBQW1MLE9BQUEsRUFBQSxHQUFBLEdBRUFuTCxFQXNDQSxTQUFBbUssR0FBQWlCLEdBQ0EsT0FBQUEsR0FBQTFILEtBQUFqRyxFQUFBMk4sS0FDQUEsRUFBQUMsUUFDQUQsRUFHQSxTQUFBRSxHQUFBdkwsR0FDQSxPQUFBQSxHQUFBLHFCQUFBQSxFQUdBLFNBQUF3TCxHQUFBeEwsR0FDQSxPQUFBdUwsR0FBQXZMLEdBQUFBLEVBQUF4QixFQUFBd0IsR0FHQSxTQUFBMkosR0FBQTNKLEdBQ0EsT0FBQXJELEVBQUFxRCxHQUNBQSxFQUFBckIsSUFBQTZNLElBQUE1TSxPQUFBQyxTQUNBekMsRUFBQTRELEdBQ0FxRixHQUFBckYsR0FDQXVMLEdBQUF2TCxHQUNBLENBQUFBLEdBQ0F0QixFQUFBc0IsR0FHQSxTQUFBeUwsR0FBQS9FLEdBQ0EsTUFBQSxVQUFBQSxFQUFBZ0YsZUFBQWhGLEVBQUFpRixRQUdBLFNBQUFDLEdBQUFsRixHQUNBLElBQUFpRixFQUFBakYsRUFBQWlGLFFBQ0FFLEVBQUFuRixFQUFBbUYsZUFDQXBMLEVBQUFrTCxHQUFBQSxFQUFBLElBQUFFLEdBQUFBLEVBQUEsSUFBQW5GLEVBSUEsTUFBQSxDQUFBeEUsRUFIQXpCLEVBQUFxTCxRQUdBM0osRUFGQTFCLEVBQUFzTCxTQVNBLFNBQUFDLEtBQ0EsSUFBQXJKLEVBQUFqSixLQUVBQSxLQUFBdVMsUUFBQSxJQUFBQyxHQUFBLFNBQUFDLEVBQUFDLEdBQ0F6SixFQUFBeUosT0FBQUEsRUFDQXpKLEVBQUF3SixRQUFBQSxJQVBBLElBQUFELEdBQUF4SSxJQUFBekcsT0FBQWlQLFNBQUFHLEdBaUJBQyxHQUFBLEVBRUFDLEdBQUE3SSxJQUFBekcsT0FBQXVQLGNBQUFDLFdBRUEsU0FBQUosR0FBQUssR0FFQWhULEtBQUFpVCxNQUFBTCxHQUNBNVMsS0FBQWlFLFdBQUFpUCxFQUNBbFQsS0FBQW1ULFNBQUEsR0FFQSxJQUFBWixFQUFBdlMsS0FFQSxJQUNBZ1QsRUFDQSxTQUFBeEssR0FDQStKLEVBQUFFLFFBQUFqSyxJQUVBLFNBQUE0SyxHQUNBYixFQUFBRyxPQUFBVSxLQUdBLE1BQUFwRyxHQUNBdUYsRUFBQUcsT0FBQTFGLElBSUEyRixHQUFBRCxPQUFBLFNBQUFVLEdBQ0EsT0FBQSxJQUFBVCxHQUFBLFNBQUFGLEVBQUFDLEdBQ0FBLEVBQUFVLE1BSUFULEdBQUFGLFFBQUEsU0FBQWpLLEdBQ0EsT0FBQSxJQUFBbUssR0FBQSxTQUFBRixFQUFBQyxHQUNBRCxFQUFBakssTUFJQW1LLEdBQUFVLElBQUEsU0FBQUMsR0FDQSxPQUFBLElBQUFYLEdBQUEsU0FBQUYsRUFBQUMsR0FDQSxJQUFBMUIsRUFBQSxHQUNBdUMsRUFBQSxFQU1BLFNBQUFDLEVBQUFyUixHQUNBLE9BQUEsU0FBQXFHLEdBQ0F3SSxFQUFBN08sR0FBQXFHLEdBQ0ErSyxHQUFBLEtBRUFELEVBQUFoUyxRQUNBbVIsRUFBQXpCLElBVkEsSUFBQXNDLEVBQUFoUyxRQUNBbVIsRUFBQXpCLEdBY0EsSUFBQSxJQUFBN08sRUFBQSxFQUFBQSxFQUFBbVIsRUFBQWhTLE9BQUFhLEdBQUEsRUFDQXdRLEdBQUFGLFFBQUFhLEVBQUFuUixJQUFBc1IsS0FBQUQsRUFBQXJSLEdBQUF1USxNQUtBQyxHQUFBZSxLQUFBLFNBQUFKLEdBQ0EsT0FBQSxJQUFBWCxHQUFBLFNBQUFGLEVBQUFDLEdBQ0EsSUFBQSxJQUFBdlEsRUFBQSxFQUFBQSxFQUFBbVIsRUFBQWhTLE9BQUFhLEdBQUEsRUFDQXdRLEdBQUFGLFFBQUFhLEVBQUFuUixJQUFBc1IsS0FBQWhCLEVBQUFDLE1BS0EsSUFBQWlCLEdBQUFoQixHQUFBeFMsVUEyR0EsU0FBQXlULEdBQUFDLEVBQUFsQyxHQUNBLE9BQUEsSUFBQWEsR0FBQSxTQUFBQyxFQUFBQyxHQUVBLElBQUFvQixFQUFBek4sRUFBQSxDQUNBd0QsS0FBQSxLQUNBa0ssT0FBQSxNQUNBQyxRQUFBLEdBQ0FDLElBQUEsSUFBQUMsZUFDQUMsV0FBQXRNLEdBQ0F1TSxhQUFBLElBQ0F6QyxHQUVBbUMsRUFBQUssV0FBQUwsR0FFQSxJQUFBRyxFQUFBSCxFQUFBRyxJQUVBLElBQUEsSUFBQXBOLEtBQUFpTixFQUNBLEdBQUFqTixLQUFBb04sRUFDQSxJQUVBQSxFQUFBcE4sR0FBQWlOLEVBQUFqTixHQUVBLE1BQUFtRyxJQU1BLElBQUEsSUFBQXFILEtBRkFKLEVBQUFLLEtBQUFSLEVBQUFDLE9BQUEzUyxjQUFBeVMsR0FFQUMsRUFBQUUsUUFDQUMsRUFBQU0saUJBQUFGLEVBQUFQLEVBQUFFLFFBQUFLLElBR0ExRSxHQUFBc0UsRUFBQSxPQUFBLFdBRUEsSUFBQUEsRUFBQU8sUUFBQSxLQUFBUCxFQUFBTyxRQUFBUCxFQUFBTyxPQUFBLEtBQUEsTUFBQVAsRUFBQU8sT0FDQS9CLEVBQUF3QixHQUVBdkIsRUFBQXJNLEVBQUFvTyxNQUFBUixFQUFBUyxZQUFBLENBQ0FULElBQUFBLEVBQ0FPLE9BQUFQLEVBQUFPLFlBTUE3RSxHQUFBc0UsRUFBQSxRQUFBLFdBQUEsT0FBQXZCLEVBQUFyTSxFQUFBb08sTUFBQSxpQkFBQSxDQUFBUixJQUFBQSxPQUNBdEUsR0FBQXNFLEVBQUEsVUFBQSxXQUFBLE9BQUF2QixFQUFBck0sRUFBQW9PLE1BQUEsbUJBQUEsQ0FBQVIsSUFBQUEsT0FFQUEsRUFBQVUsS0FBQWIsRUFBQWpLLFFBSUEsU0FBQStLLEdBQUFDLEVBQUFDLEVBQUFDLEdBRUEsT0FBQSxJQUFBdkMsR0FBQSxTQUFBQyxFQUFBQyxHQUNBLElBQUFyRSxFQUFBLElBQUEyRyxNQUVBM0csRUFBQTRHLFFBQUF2QyxFQUNBckUsRUFBQTZHLE9BQUEsV0FBQSxPQUFBekMsRUFBQXBFLElBRUEwRyxJQUFBMUcsRUFBQTBHLE1BQUFBLEdBQ0FELElBQUF6RyxFQUFBeUcsT0FBQUEsR0FDQXpHLEVBQUF3RyxJQUFBQSxJQUtBLFNBQUFNLEdBQUFDLEdBRUEsR0FBQSxZQUFBOUssU0FBQStLLFdBS0EsSUFBQUMsRUFBQTNGLEdBQUFyRixTQUFBLG1CQUFBLFdBQ0FnTCxJQUNBRixXQU5BQSxJQVVBLFNBQUFHLEdBQUF4USxFQUFBZ0MsR0FDQSxPQUFBQSxFQUNBL0IsRUFBQUQsR0FBQTNDLFFBQUEwQyxFQUFBaUMsSUFDQTJJLEdBQUFyRCxHQUFBdEgsSUFBQTNDLFFBQUEyQyxHQUdBLFNBQUF5USxHQUFBclQsRUFBQXNOLEVBQUFhLEVBQUFtRixRQUNBLElBQUFuRixJQUFBQSxFQUFBLFFBQ0EsSUFBQW1GLElBQUFBLEdBQUEsR0FLQSxJQUFBblUsR0FGQW1PLEVBQUF6SyxFQUFBeUssSUFFQW5PLE9BVUEsT0FSQWEsRUFBQWdDLEVBQUFoQyxHQUNBdUMsRUFBQXZDLEdBQ0EsU0FBQUEsRUFDQW1PLEVBQUEsRUFDQSxhQUFBbk8sRUFDQW1PLEVBQUEsRUFDQWlGLEdBQUE5RixFQUFBdE4sR0FFQXNULEVBQ0FoTyxHQUFBdEYsRUFBQSxFQUFBYixFQUFBLElBR0FhLEdBQUFiLEdBRUEsRUFBQWEsRUFBQWIsRUFBQWEsRUFHQSxTQUFBdVQsR0FBQTNRLEdBR0EsT0FGQUEsRUFBQTRRLEdBQUE1USxJQUNBNlEsVUFBQSxHQUNBN1EsRUFHQSxTQUFBOFEsR0FBQXhKLEVBQUF3SixHQUVBLE9BREF4SixFQUFBc0osR0FBQXRKLEdBQ0E3SCxFQUFBcVIsR0FDQXhKLEVBQUF1SixVQUNBRSxHQUFBekosRUFBQTBKLGdCQUFBTCxHQUFBckosR0FBQUEsRUFBQXdKLEdBY0EsU0FBQUMsR0FBQXpKLEVBQUF0SCxHQUVBLE9BREFzSCxFQUFBc0osR0FBQXRKLEdBQ0EySixHQUFBalIsRUFBQSxTQUFBQSxHQUFBLE9BQUFzSCxFQUFBNEosWUFBQWxSLEtBR0EsU0FBQW1SLEdBQUFuUCxFQUFBaEMsR0FFQSxPQURBZ0MsRUFBQTRPLEdBQUE1TyxHQUNBaVAsR0FBQWpSLEVBQUEsU0FBQUEsR0FBQSxPQUFBZ0MsRUFBQTJHLFdBQUF5SSxhQUFBcFIsRUFBQWdDLEtBR0EsU0FBQXFQLEdBQUFyUCxFQUFBaEMsR0FFQSxPQURBZ0MsRUFBQTRPLEdBQUE1TyxHQUNBaVAsR0FBQWpSLEVBQUEsU0FBQUEsR0FBQSxPQUFBZ0MsRUFBQXNQLFlBQ0FILEdBQUFuUCxFQUFBc1AsWUFBQXRSLEdBQ0ErUSxHQUFBL08sRUFBQTJHLFdBQUEzSSxLQUlBLFNBQUFpUixHQUFBalIsRUFBQXFRLEdBRUEsT0FEQXJRLEVBQUFyQyxFQUFBcUMsR0FBQXVSLEdBQUF2UixHQUFBQSxHQUVBLFdBQUFBLEVBQ0FDLEVBQUFELEdBQUFFLElBQUFtUSxHQUNBQSxFQUFBclEsR0FDQSxLQUdBLFNBQUFrSSxHQUFBbEksR0FDQUMsRUFBQUQsR0FBQUUsSUFBQSxTQUFBRixHQUFBLE9BQUFBLEVBQUEySSxZQUFBM0ksRUFBQTJJLFdBQUE2SSxZQUFBeFIsS0FHQSxTQUFBeVIsR0FBQXpSLEVBQUEwUixHQUlBLElBRkFBLEVBQUEzUixFQUFBb1IsR0FBQW5SLEVBQUEwUixJQUVBQSxFQUFBQyxZQUNBRCxFQUFBQSxFQUFBQyxXQUtBLE9BRkFaLEdBQUFXLEVBQUExUixHQUVBMFIsRUFHQSxTQUFBRSxHQUFBNVIsRUFBQTBSLEdBQ0EsT0FBQXpSLEVBQUFBLEVBQUFELEdBQUFFLElBQUEsU0FBQUYsR0FBQSxPQUFBQSxFQUFBZ1IsY0FBQVMsR0FBQXhSLEVBQUFELEVBQUE2UixZQUFBSCxHQUFBWCxHQUFBL1EsRUFBQTBSLE1BSUEsU0FBQUksR0FBQTlSLEdBQ0FDLEVBQUFELEdBQ0FFLElBQUFvSCxJQUNBbkgsT0FBQSxTQUFBakIsRUFBQXNSLEVBQUF6VixHQUFBLE9BQUFBLEVBQUFzQyxRQUFBNkIsS0FBQXNSLElBQ0FqTSxRQUFBLFNBQUErQyxHQUNBNkosR0FBQTdKLEVBQUFBLEVBQUF1SyxZQUNBM0osR0FBQVosS0F4U0FzSCxHQUFBbEIsUUFBQSxTQUFBakssR0FDQSxJQUFBK0osRUFBQXZTLEtBRUEsR0FBQXVTLEVBQUFVLFFBQUFMLEdBQUEsQ0FDQSxHQUFBcEssSUFBQStKLEVBQ0EsTUFBQSxJQUFBdUUsVUFBQSxnQ0FHQSxJQUFBQyxHQUFBLEVBRUEsSUFDQSxJQUFBdEQsRUFBQWpMLEdBQUFBLEVBQUFpTCxLQUVBLEdBQUEsT0FBQWpMLEdBQUFyRixFQUFBcUYsSUFBQXRGLEVBQUF1USxHQWdCQSxZQWZBQSxFQUFBalQsS0FDQWdJLEVBQ0EsU0FBQUEsR0FDQXVPLEdBQ0F4RSxFQUFBRSxRQUFBakssR0FFQXVPLEdBQUEsR0FFQSxTQUFBM0QsR0FDQTJELEdBQ0F4RSxFQUFBRyxPQUFBVSxHQUVBMkQsR0FBQSxJQUtBLE1BQUEvSixHQUlBLFlBSEErSixHQUNBeEUsRUFBQUcsT0FBQTFGLElBS0F1RixFQUFBVSxNQWxIQSxFQW1IQVYsRUFBQXRPLE1BQUF1RSxFQUNBK0osRUFBQXlFLFdBSUFyRCxHQUFBakIsT0FBQSxTQUFBdUUsR0FDQSxJQUFBMUUsRUFBQXZTLEtBRUEsR0FBQXVTLEVBQUFVLFFBQUFMLEdBQUEsQ0FDQSxHQUFBcUUsSUFBQTFFLEVBQ0EsTUFBQSxJQUFBdUUsVUFBQSxnQ0FHQXZFLEVBQUFVLE1BL0hBLEVBZ0lBVixFQUFBdE8sTUFBQWdULEVBQ0ExRSxFQUFBeUUsV0FJQXJELEdBQUFxRCxPQUFBLFdBQ0EsSUFBQS9OLEVBQUFqSixLQUVBNlMsR0FBQSxXQUNBLEdBQUE1SixFQUFBZ0ssUUFBQUwsR0FDQSxLQUFBM0osRUFBQWtLLFNBQUE3UixRQUFBLENBQ0EsSUFBQXlGLEVBQUFrQyxFQUFBa0ssU0FBQStELFFBQ0FDLEVBQUFwUSxFQUFBLEdBQ0FxUSxFQUFBclEsRUFBQSxHQUNBMEwsRUFBQTFMLEVBQUEsR0FDQTJMLEVBQUEzTCxFQUFBLEdBRUEsSUFsSkEsSUFtSkFrQyxFQUFBZ0ssTUFDQS9QLEVBQUFpVSxHQUNBMUUsRUFBQTBFLEVBQUEzVyxVQUFBMFMsRUFBQWpLLEVBQUFoRixRQUVBd08sRUFBQXhKLEVBQUFoRixPQXRKQSxJQXdKQWdGLEVBQUFnSyxRQUNBL1AsRUFBQWtVLEdBQ0EzRSxFQUFBMkUsRUFBQTVXLFVBQUEwUyxFQUFBakssRUFBQWhGLFFBRUF5TyxFQUFBekosRUFBQWhGLFFBR0EsTUFBQStJLEdBQ0EwRixFQUFBMUYsUUFPQTJHLEdBQUFGLEtBQUEsU0FBQTBELEVBQUFDLEdBQ0EsSUFBQW5PLEVBQUFqSixLQUVBLE9BQUEsSUFBQTJTLEdBQUEsU0FBQUYsRUFBQUMsR0FDQXpKLEVBQUFrSyxTQUFBckcsS0FBQSxDQUFBcUssRUFBQUMsRUFBQTNFLEVBQUFDLElBQ0F6SixFQUFBK04sWUFJQXJELEdBQUEwRCxNQUFBLFNBQUFELEdBQ0EsT0FBQXBYLEtBQUF5VCxVQUFBUCxFQUFBa0UsSUFzTUEsSUFBQUUsR0FBQSxxQkFDQUMsR0FBQSw2QkFFQSxTQUFBakIsR0FBQVQsR0FFQSxJQUFBbkosRUFBQTZLLEdBQUFDLEtBQUEzQixHQUNBLEdBQUFuSixFQUNBLE9BQUFwQyxTQUFBbU4sY0FBQS9LLEVBQUEsSUFHQSxJQUFBZ0wsRUFBQXBOLFNBQUFtTixjQUFBLE9BT0EsT0FOQUgsR0FBQXBOLEtBQUEyTCxHQUNBNkIsRUFBQUMsbUJBQUEsWUFBQTlCLEVBQUFuUSxRQUVBZ1MsRUFBQUUsWUFBQS9CLEVBR0EsRUFBQTZCLEVBQUFkLFdBQUF0VixPQUFBMEQsRUFBQTBTLEVBQUFkLFlBQUFjLEVBQUFoQixXQUlBLFNBQUF2RyxHQUFBMEgsRUFBQXpDLEdBRUEsR0FBQXZSLEVBQUFnVSxHQU1BLElBRkF6QyxFQUFBeUMsR0FDQUEsRUFBQUEsRUFBQUMsa0JBQ0FELEdBQUEsQ0FDQSxJQUFBRSxFQUFBRixFQUFBRyxtQkFDQTdILEdBQUEwSCxFQUFBekMsR0FDQXlDLEVBQUFFLEdBSUEsU0FBQXBDLEdBQUF0SyxFQUFBQyxHQUNBLE9BQUE1SSxFQUFBMkksR0FFQTRNLEdBQUE1TSxHQUNBdkcsRUFBQXdSLEdBQUFqTCxJQUNBRSxHQUFBRixFQUFBQyxHQUhBeEcsRUFBQXVHLEdBTUEsU0FBQTZNLEdBQUE3TSxFQUFBQyxHQUNBLE9BQUE1SSxFQUFBMkksR0FFQTRNLEdBQUE1TSxHQUNBckcsRUFBQXNSLEdBQUFqTCxJQUNBTSxHQUFBTixFQUFBQyxHQUhBdEcsRUFBQXFHLEdBTUEsU0FBQTRNLEdBQUFyWCxHQUNBLE1BQUEsTUFBQUEsRUFBQSxJQUFBQSxFQUFBbUQsTUFBQSxTQUdBLFNBQUFvVSxHQUFBcFQsR0FFQSxJQURBLElBQUF3QixFQUFBLEdBQUFDLEVBQUF6RCxVQUFBekIsT0FBQSxFQUNBLEVBQUFrRixLQUFBRCxFQUFBQyxHQUFBekQsVUFBQXlELEVBQUEsR0FFQTRSLEdBQUFyVCxFQUFBd0IsRUFBQSxPQUdBLFNBQUE4UixHQUFBdFQsR0FFQSxJQURBLElBQUF3QixFQUFBLEdBQUFDLEVBQUF6RCxVQUFBekIsT0FBQSxFQUNBLEVBQUFrRixLQUFBRCxFQUFBQyxHQUFBekQsVUFBQXlELEVBQUEsR0FFQTRSLEdBQUFyVCxFQUFBd0IsRUFBQSxVQUdBLFNBQUErUixHQUFBdlQsRUFBQXdULEdBQ0FwUCxHQUFBcEUsRUFBQSxRQUFBLFNBQUFkLEdBQUEsT0FBQUEsR0FBQSxJQUFBcEQsUUFBQSxJQUFBdUYsT0FBQSxNQUFBbVMsRUFBQSxNQUFBLEtBQUEsTUFHQSxTQUFBQyxHQUFBelQsR0FFQSxJQURBLElBQUF3QixFQUFBLEdBQUFDLEVBQUF6RCxVQUFBekIsT0FBQSxFQUNBLEVBQUFrRixLQUFBRCxFQUFBQyxHQUFBekQsVUFBQXlELEVBQUEsR0FFQUQsRUFBQSxJQUFBOFIsR0FBQXRULEVBQUF3QixFQUFBLElBQ0FBLEVBQUEsSUFBQTRSLEdBQUFwVCxFQUFBd0IsRUFBQSxJQUdBLFNBQUFrUyxHQUFBMVQsRUFBQXdULEdBQ0EsT0FBQUEsR0FBQXZULEVBQUFELEdBQUEyRSxLQUFBLFNBQUEzRSxHQUFBLE9BQUFBLEVBQUEyVCxVQUFBbkosU0FBQWdKLEVBQUE5UyxNQUFBLEtBQUEsTUFHQSxTQUFBa1QsR0FBQTVULEdBRUEsSUFEQSxJQUFBd0IsRUFBQSxHQUFBQyxFQUFBekQsVUFBQXpCLE9BQUEsRUFDQSxFQUFBa0YsS0FBQUQsRUFBQUMsR0FBQXpELFVBQUF5RCxFQUFBLEdBR0EsR0FBQUQsRUFBQWpGLE9BQUEsQ0FNQSxJQUFBc1gsRUFBQWxXLEVBQUFnRSxFQUZBSCxFQUFBc1MsR0FBQXRTLEtBRUEsR0FBQUEsRUFBQXVTLE1BRUF2UyxFQUFBQSxFQUFBckIsT0FBQUMsU0FFQUgsRUFBQUQsR0FBQXVFLFFBQUEsU0FBQXZDLEdBR0EsSUFGQSxJQUFBMlIsRUFBQTNSLEVBQUEyUixVQUVBdlcsRUFBQSxFQUFBQSxFQUFBb0UsRUFBQWpGLE9BQUFhLElBQ0E0VyxHQUFBQyxNQUNBTixFQUFBTyxPQUFBOUksTUFBQXVJLEVBQUEsQ0FBQW5TLEVBQUFwRSxJQUFBaU8sT0FBQXdJLElBQ0FGLEdBQUFsVSxFQUFBb1UsSUFBQUYsRUFBQW5KLFNBQUFoSixFQUFBcEUsSUFBQXlXLEdBQUEsTUFBQSxVQUFBclMsRUFBQXBFLE9BTUEsU0FBQWlXLEdBQUFyVCxFQUFBd0IsRUFBQTZPLElBQ0E3TyxFQUFBc1MsR0FBQXRTLEdBQUFyQixPQUFBQyxVQUVBN0QsUUFBQTBELEVBQUFELEdBQUF1RSxRQUFBLFNBQUF2QyxHQUNBLElBQUEyUixFQUFBM1IsRUFBQTJSLFVBRUFLLEdBQUFHLFNBQ0FSLEVBQUF0RCxHQUFBakYsTUFBQXVJLEVBQUFuUyxHQUNBQSxFQUFBK0MsUUFBQSxTQUFBaVAsR0FBQSxPQUFBRyxFQUFBdEQsR0FBQW1ELE9BSUEsU0FBQU0sR0FBQXRTLEdBQ0EsT0FBQUEsRUFBQTRLLE9BQUEsU0FBQTVLLEVBQUE0UyxHQUFBLE9BQUE1UyxFQUFBNkosT0FBQTVQLEtBQUErRixFQUFBN0QsRUFBQXlXLElBQUEzVyxFQUFBMlcsRUFBQSxLQUFBQSxFQUFBelQsT0FBQUQsTUFBQSxLQUFBMFQsSUFDQSxJQUlBLElBQUFKLEdBQUEsQ0FFQUcsZUFDQSxPQUFBbFosS0FBQW9aLElBQUEsY0FHQUosWUFDQSxPQUFBaFosS0FBQW9aLElBQUEsV0FHQUEsSUFBQSxTQUFBN1ksR0FFQSxJQUFBRixFQUFBTCxLQUFBTyxHQUFBLENBQ0EsSUFDQW1ZLEVBREFwTyxTQUFBbU4sY0FBQSxLQUNBaUIsVUFDQUEsRUFBQWxSLElBQUEsSUFBQSxLQUNBa1IsRUFBQU8sT0FBQSxLQUFBLEdBQ0FqWixLQUFBcVosVUFBQVgsRUFBQW5KLFNBQUEsS0FDQXZQLEtBQUFzWixRQUFBWixFQUFBbkosU0FBQSxLQUdBLE9BQUF2UCxLQUFBTyxLQUtBZ1osR0FBQSxDQUNBQyw2QkFBQSxFQUNBQyxnQkFBQSxFQUNBQyxnQkFBQSxFQUNBQyxhQUFBLEVBQ0FDLGVBQUEsRUFDQUMsZUFBQSxFQUNBQyxlQUFBLEVBQ0FDLFNBQUEsRUFDQUMsT0FBQSxFQUNBQyxTQUFBLEVBQ0FDLG9CQUFBLEVBQ0FDLHFCQUFBLEVBQ0FDLFFBQUEsRUFDQUMsV0FBQSxFQUNBQyxNQUFBLEdBR0EsU0FBQXpNLEdBQUE5SSxFQUFBd1YsRUFBQXRXLEdBRUEsT0FBQWUsRUFBQUQsR0FBQUUsSUFBQSxTQUFBRixHQUVBLEdBQUFyQyxFQUFBNlgsR0FBQSxDQUlBLEdBRkFBLEVBQUFDLEdBQUFELEdBRUEvVixFQUFBUCxHQUNBLE9BQUF3VyxHQUFBMVYsRUFBQXdWLEdBQ0F0VyxHQUFBQyxFQUFBRCxHQUdBYyxFQUFBMlYsTUFBQUgsR0FBQXBXLEVBQUFGLEtBQUFzVixHQUFBZ0IsR0FBQXRXLEVBQUEsS0FBQUEsRUFGQWMsRUFBQTJWLE1BQUFDLGVBQUFKLE9BS0EsQ0FBQSxHQUFBdFgsRUFBQXNYLEdBQUEsQ0FFQSxJQUFBSyxFQUFBQyxHQUFBOVYsR0FFQSxPQUFBd1YsRUFBQXBKLE9BQUEsU0FBQTJKLEVBQUFQLEdBRUEsT0FEQU8sRUFBQVAsR0FBQUssRUFBQUosR0FBQUQsSUFDQU8sR0FDQSxJQUVBM1gsRUFBQW9YLElBQ0F4VSxFQUFBd1UsRUFBQSxTQUFBdFcsRUFBQXNXLEdBQUEsT0FBQTFNLEdBQUE5SSxFQUFBd1YsRUFBQXRXLEtBR0EsT0FBQWMsSUFFQSxHQUlBLFNBQUE4VixHQUFBOVYsRUFBQWdXLEdBRUEsT0FEQWhXLEVBQUFELEVBQUFDLElBQ0FPLGNBQUFDLFlBQUF5VixpQkFBQWpXLEVBQUFnVyxHQUdBLFNBQUFOLEdBQUExVixFQUFBd1YsRUFBQVEsR0FDQSxPQUFBRixHQUFBOVYsRUFBQWdXLEdBQUFSLEdBR0EsSUFBQVUsR0FBQSxHQUVBLFNBQUFDLEdBQUE5UixHQUVBLElBQUErUixFQUFBN1EsU0FBQUMsZ0JBRUEsSUFBQU4sR0FDQSxPQUFBNFEsR0FBQU0sR0FBQUMsaUJBQUEsUUFBQWhTLEdBR0EsS0FBQUEsS0FBQTZSLElBQUEsQ0FJQSxJQUFBbFcsRUFBQStRLEdBQUFxRixFQUFBN1EsU0FBQW1OLGNBQUEsUUFFQVUsR0FBQXBULEVBQUEsTUFBQXFFLEdBRUE2UixHQUFBN1IsR0FBQXFSLEdBQUExVixFQUFBLFVBQUEsV0FBQWxFLFFBQUEsaUJBQUEsTUFFQW9NLEdBQUFsSSxHQUlBLE9BQUFrVyxHQUFBN1IsR0FJQSxJQUFBaVMsR0FBQSxHQUVBLFNBQUFiLEdBQUFwUixHQUVBLElBQUFrUyxFQUFBRCxHQUFBalMsR0FJQSxPQUZBa1MsRUFEQUEsSUFDQUQsR0FBQWpTLEdBT0EsU0FBQUEsR0FFQUEsRUFBQXpJLEVBQUF5SSxHQUVBLElBQ0FzUixFQURBcFEsU0FBQUMsZ0JBQ0FtUSxNQUVBLEdBQUF0UixLQUFBc1IsRUFDQSxPQUFBdFIsRUFHQSxJQUFBbVMsRUFBQXBaLEVBQUFxWixHQUFBbGEsT0FFQSxLQUFBYSxLQUVBLElBREFvWixFQUFBLElBQUFDLEdBQUFyWixHQUFBLElBQUFpSCxLQUNBc1IsRUFDQSxPQUFBYSxFQXZCQUUsQ0FBQXJTLElBQUFBLEdBS0EsSUFBQW9TLEdBQUEsQ0FBQSxTQUFBLE1BQUEsTUF1QkEsU0FBQUUsR0FBQTNXLEVBQUErVixFQUFBYSxFQUFBQyxHQUtBLFlBSkEsSUFBQUQsSUFBQUEsRUFBQSxVQUNBLElBQUFDLElBQUFBLEVBQUEsVUFHQXBKLEdBQUFhLElBQUFyTyxFQUFBRCxHQUFBRSxJQUFBLFNBQUFGLEdBQUEsT0FBQSxJQUFBeU4sR0FBQSxTQUFBQyxFQUFBQyxHQUVBLElBQUEsSUFBQXRKLEtBQUEwUixFQUFBLENBQ0EsSUFBQTdXLEVBQUE0SixHQUFBOUksRUFBQXFFLEdBQ0EsS0FBQW5GLEdBQ0E0SixHQUFBOUksRUFBQXFFLEVBQUFuRixHQUlBLElBQUE0WCxFQUFBOUksV0FBQSxXQUFBLE9BQUE5QixHQUFBbE0sRUFBQSxrQkFBQTRXLEdBRUE3SyxHQUFBL0wsRUFBQSxtQ0FBQSxTQUFBZ0MsR0FDQSxJQUFBZ0osRUFBQWhKLEVBQUFnSixLQUVBK0wsYUFBQUQsR0FDQXhELEdBQUF0VCxFQUFBLGlCQUNBOEksR0FBQTlJLEVBQUEsQ0FDQWdYLG1CQUFBLEdBQ0FDLG1CQUFBLEdBQ0FDLHlCQUFBLE1BRUEsdUJBQUFsTSxFQUFBMkMsRUFBQUQsTUFDQSxDQUFBM1MsTUFBQSxJQUVBcVksR0FBQXBULEVBQUEsaUJBQ0E4SSxHQUFBOUksRUFBQXNCLEVBQUEsQ0FDQTBWLG1CQUFBN2IsT0FBQXFFLEtBQUF1VyxHQUFBN1YsSUFBQXVWLElBQUFsTyxLQUFBLEtBQ0EwUCxtQkFBQUwsRUFBQSxLQUNBTSx5QkFBQUwsR0FDQWQsU0FPQSxJQUFBb0IsR0FBQSxDQUVBQyxNQUFBVCxHQUVBVSxLQUFBLFNBQUFyWCxHQUVBLE9BREFrTSxHQUFBbE0sRUFBQSxpQkFDQXlOLEdBQUFDLFdBR0E0SixPQUFBLFNBQUF0WCxHQUNBa00sR0FBQWxNLEVBQUEsdUJBR0F1WCxXQUFBLFNBQUF2WCxHQUNBLE9BQUEwVCxHQUFBMVQsRUFBQSxtQkFLQXdYLEdBQUEsZ0JBRUEsU0FBQUMsR0FBQXpYLEVBQUEwWCxFQUFBZCxFQUFBZSxFQUFBQyxHQUlBLFlBSEEsSUFBQWhCLElBQUFBLEVBQUEsS0FHQW5KLEdBQUFhLElBQUFyTyxFQUFBRCxHQUFBRSxJQUFBLFNBQUFGLEdBQUEsT0FBQSxJQUFBeU4sR0FBQSxTQUFBQyxFQUFBQyxHQXlCQSxTQUFBa0ssSUFDQS9PLEdBQUE5SSxFQUFBLG9CQUFBLElBQ0F1VCxHQUFBdlQsRUFBQXdYLEdBQUEsUUF6QkFLLElBRUE5TCxHQUFBL0wsRUFBQSwrQkFBQSxTQUFBZ0MsSUFJQSxvQkFIQUEsRUFBQWdKLEtBSUEyQyxFQUVBRCxLQUdBbUssS0FFQSxDQUFBOWMsTUFBQSxJQUVBK04sR0FBQTlJLEVBQUEsb0JBQUE0VyxFQUFBLE1BQ0F4RCxHQUFBcFQsRUFBQTBYLEVBQUFGLElBQUFJLEVBQUEsUUFBQSxVQUVBL2EsRUFBQTZhLEVBQUFGLEtBQ0FwRSxHQUFBcFQsRUFBQTJYLEdBQUEsdUJBQUFBLEVBQUFDLEdBQUFKLEdBQUEsZ0JBYUEsSUFBQUQsR0FBQSxJQUFBbFcsT0FBQW1XLEdBQUEsaUJBQ0FNLEdBQUEsQ0FFQUMsR0FBQSxTQUFBL1gsRUFBQTBYLEVBQUFkLEVBQUFlLEdBQ0EsT0FBQUYsR0FBQXpYLEVBQUEwWCxFQUFBZCxFQUFBZSxHQUFBLElBR0FDLElBQUEsU0FBQTVYLEVBQUEwWCxFQUFBZCxFQUFBZSxHQUNBLE9BQUFGLEdBQUF6WCxFQUFBMFgsRUFBQWQsRUFBQWUsR0FBQSxJQUdBSixXQUFBLFNBQUF2WCxHQUNBLE9BQUF1WCxHQUFBcFMsS0FBQWYsR0FBQXBFLEVBQUEsV0FHQXNYLE9BQUEsU0FBQXRYLEdBQ0FrTSxHQUFBbE0sRUFBQSxxQkFLQWdZLEdBQUEsQ0FDQUMsTUFBQSxDQUFBLElBQUEsT0FBQSxTQUNBQyxPQUFBLENBQUEsSUFBQSxNQUFBLFdBR0EsU0FBQUMsR0FBQW5ZLEVBQUF1QixFQUFBNlcsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FFQUwsRUFBQU0sR0FBQU4sR0FDQUMsRUFBQUssR0FBQUwsR0FFQSxJQUFBTSxFQUFBLENBQUEzWSxRQUFBb1ksRUFBQTdXLE9BQUE4VyxHQUVBLElBQUFyWSxJQUFBdUIsRUFDQSxPQUFBb1gsRUFHQSxJQUFBQyxFQUFBQyxHQUFBN1ksR0FDQThZLEVBQUFELEdBQUF0WCxHQUNBd1gsRUFBQUQsRUFjQSxHQVpBRSxHQUFBRCxFQUFBWCxFQUFBUSxHQUFBLEdBQ0FJLEdBQUFELEVBQUFWLEVBQUFTLEVBQUEsR0FFQVIsRUFBQVcsR0FBQVgsRUFBQU0sRUFBQVgsTUFBQVcsRUFBQVYsUUFDQUssRUFBQVUsR0FBQVYsRUFBQU8sRUFBQWIsTUFBQWEsRUFBQVosUUFFQUksRUFBQSxHQUFBQyxFQUFBLEVBQ0FELEVBQUEsR0FBQUMsRUFBQSxFQUVBUSxFQUFBN1YsTUFBQW9WLEVBQUEsRUFDQVMsRUFBQTNWLEtBQUFrVixFQUFBLEVBRUFFLEVBQUEsQ0FFQSxJQUFBVSxFQUFBLENBQUFMLEdBQUF2WSxFQUFBTixLQUVBeVksR0FDQVMsRUFBQUMsUUFBQU4sR0FBQUosSUFHQXpYLEVBQUFnWCxHQUFBLFNBQUFoVyxFQUFBRixHQUNBLElBQUFzWCxFQUFBcFgsRUFBQSxHQUNBcVgsRUFBQXJYLEVBQUEsR0FDQXNYLEVBQUF0WCxFQUFBLElBR0EsSUFBQXdXLElBQUEvYSxFQUFBK2EsRUFBQVksSUFJQUYsRUFBQXZVLEtBQUEsU0FBQThULEdBRUEsSUFBQWMsRUFBQW5CLEVBQUFnQixLQUFBQyxHQUNBVCxFQUFBOVcsR0FDQXNXLEVBQUFnQixLQUFBRSxFQUNBVixFQUFBOVcsR0FDQSxFQUVBeVcsRUFBQUYsRUFBQWUsS0FBQUMsRUFDQVAsRUFBQWhYLEdBQ0F1VyxFQUFBZSxLQUFBRSxHQUNBUixFQUFBaFgsR0FDQSxFQUVBLEdBQUFpWCxFQUFBTSxHQUFBWixFQUFBWSxJQUFBTixFQUFBTSxHQUFBVCxFQUFBOVcsR0FBQTJXLEVBQUFhLEdBQUEsQ0FFQSxJQUFBRSxFQUFBWixFQUFBOVcsR0FBQSxFQUNBMlgsRUFBQSxXQUFBcEIsRUFBQWUsSUFBQU4sRUFBQWhYLEdBQUEsRUFBQSxFQUVBLE1BQUEsV0FBQXNXLEVBQUFnQixLQUNBaE8sRUFBQW9PLEVBQUFDLElBQ0FyTyxHQUFBb08sR0FBQUMsS0FDQXJPLEVBQUFtTyxFQUFBaEIsR0FJQSxTQUFBbk4sRUFBQW1PLEVBQUFoQixHQUVBLElBQUFtQixFQUFBWCxFQUFBTSxHQUFBRSxFQUFBaEIsRUFBQSxFQUFBRCxFQUFBYyxHQUVBLEdBQUFNLEdBQUFqQixFQUFBWSxJQUFBSyxFQUFBZCxFQUFBOVcsSUFBQTJXLEVBQUFhLEdBV0EsT0FWQVAsRUFBQU0sR0FBQUssRUFFQSxDQUFBLFVBQUEsVUFBQW5WLFFBQUEsU0FBQW9WLEdBQ0FoQixFQUFBZ0IsR0FBQVAsR0FBQUcsRUFFQVosRUFBQWdCLEdBQUFQLEtBQUFwQixHQUFBbFcsR0FBQSxHQUNBa1csR0FBQWxXLEdBQUEsR0FDQWtXLEdBQUFsVyxHQUFBLEdBSEE2VyxFQUFBZ0IsR0FBQVAsTUFNQSxPQVlBLE9BRkFRLEdBQUE1WixFQUFBK1ksR0FFQUosRUFHQSxTQUFBaUIsR0FBQTVaLEVBQUE2WixHQUVBLElBQUFBLEVBQ0EsT0FBQWhCLEdBQUE3WSxHQUdBLElBQUE4WixFQUFBRixHQUFBNVosR0FDQStaLEVBQUFqUixHQUFBOUksRUFBQSxZQUVBLENBQUEsT0FBQSxPQUFBdUUsUUFBQSxTQUFBekMsR0FDQSxHQUFBQSxLQUFBK1gsRUFBQSxDQUNBLElBQUEzYSxFQUFBNEosR0FBQTlJLEVBQUE4QixHQUNBZ0gsR0FBQTlJLEVBQUE4QixFQUFBK1gsRUFBQS9YLEdBQUFnWSxFQUFBaFksR0FDQWhDLEVBQUEsYUFBQWlhLEdBQUEsU0FBQTdhLEVBQ0E2WixHQUFBL1ksR0FBQThCLEdBQ0E1QyxPQU1BLFNBQUEyWixHQUFBN1ksR0FFQSxJQUFBQSxFQUNBLE1BQUEsR0FHQSxJQW1CQTJWLEVBQUFxRSxFQW5CQWhZLEVBQUExQixFQUFBTixHQUNBb0QsRUFBQXBCLEVBQUFpWSxZQUNBL1csRUFBQWxCLEVBQUFrWSxZQUVBLEdBQUEzYixFQUFBeUIsR0FBQSxDQUVBLElBQUFrWSxFQUFBbFksRUFBQW1hLFlBQ0FsQyxFQUFBalksRUFBQW9hLFdBRUEsTUFBQSxDQUNBaFgsSUFBQUEsRUFDQUYsS0FBQUEsRUFDQWdWLE9BQUFBLEVBQ0FELE1BQUFBLEVBQ0E1VSxPQUFBRCxFQUFBOFUsRUFDQS9VLE1BQUFELEVBQUErVSxHQU1BaE8sR0FBQWpLLElBQUEsU0FBQThJLEdBQUE5SSxFQUFBLGFBRUEyVixFQUFBdlIsR0FBQXBFLEVBQUEsU0FDQWdhLEVBQUE1VixHQUFBcEUsRUFBQSxVQUVBb0UsR0FBQXBFLEVBQUEsQ0FDQTJWLE9BQUFBLEdBQUEsSUFBQSw2QkFDQXFFLE9BQUEsUUFNQSxJQUFBeFcsR0FGQXhELEVBQUFELEVBQUFDLElBRUFxYSx3QkFNQSxPQUpBNWEsRUFBQWtXLElBQ0F2UixHQUFBcEUsRUFBQSxDQUFBMlYsTUFBQUEsRUFBQXFFLE9BQUFBLElBR0EsQ0FDQTlCLE9BQUExVSxFQUFBMFUsT0FDQUQsTUFBQXpVLEVBQUF5VSxNQUNBN1UsSUFBQUksRUFBQUosSUFBQUEsRUFDQUYsS0FBQU0sRUFBQU4sS0FBQUEsRUFDQUcsT0FBQUcsRUFBQUgsT0FBQUQsRUFDQUQsTUFBQUssRUFBQUwsTUFBQUQsR0FJQSxTQUFBNlYsR0FBQS9ZLEVBQUFzSCxHQUVBQSxFQUFBQSxHQUFBdkgsRUFBQUMsR0FBQXNhLGNBQUFoYSxFQUFBTixHQUFBdUYsU0FBQUMsZ0JBRUEsSUFBQStVLEVBQUFYLEdBQUE1WixHQUNBd2EsRUFBQVosR0FBQXRTLEdBRUEsTUFBQSxDQUNBbEUsSUFBQW1YLEVBQUFuWCxJQUFBb1gsRUFBQXBYLElBQUF0RCxFQUFBZ0osR0FBQXhCLEVBQUEsbUJBQ0FwRSxLQUFBcVgsRUFBQXJYLEtBQUFzWCxFQUFBdFgsS0FBQXBELEVBQUFnSixHQUFBeEIsRUFBQSxxQkFJQSxTQUFBbVQsR0FBQXphLEdBQ0EsSUFBQTRaLEVBQUEsQ0FBQSxFQUFBLEdBRUE1WixFQUFBRCxFQUFBQyxHQUVBLEdBS0EsR0FIQTRaLEVBQUEsSUFBQTVaLEVBQUEwYSxVQUNBZCxFQUFBLElBQUE1WixFQUFBMmEsV0FFQSxVQUFBN1IsR0FBQTlJLEVBQUEsWUFBQSxDQUNBLElBQUE0YSxFQUFBdGEsRUFBQU4sR0FHQSxPQUZBNFosRUFBQSxJQUFBZ0IsRUFBQVgsWUFDQUwsRUFBQSxJQUFBZ0IsRUFBQVYsWUFDQU4sU0FHQTVaLEVBQUFBLEVBQUFzYSxjQUVBLE9BQUFWLEVBR0EsSUFBQTFCLEdBQUEyQyxHQUFBLFVBQ0E1QyxHQUFBNEMsR0FBQSxTQUVBLFNBQUFBLEdBQUEvWSxHQUNBLElBQUEyVCxFQUFBblosRUFBQXdGLEdBQ0EsT0FBQSxTQUFBOUIsRUFBQWQsR0FFQSxHQUFBTyxFQUFBUCxHQUFBLENBRUEsR0FBQVgsRUFBQXlCLEdBQ0EsT0FBQUEsRUFBQSxRQUFBeVYsR0FHQSxHQUFBaFgsRUFBQXVCLEdBQUEsQ0FDQSxJQUFBOGEsRUFBQTlhLEVBQUF3RixnQkFDQSxPQUFBM0MsS0FBQUQsSUFBQWtZLEVBQUEsU0FBQXJGLEdBQUFxRixFQUFBLFNBQUFyRixJQVFBLE9BRkF2VyxFQUFBLFVBREFBLEVBQUE0SixHQUZBOUksRUFBQUQsRUFBQUMsR0FFQThCLElBQ0E5QixFQUFBLFNBQUF5VixHQUFBM1YsRUFBQVosSUFBQSxHQUVBNmIsR0FBQS9hLEVBQUE4QixHQUlBZ0gsR0FBQTlJLEVBQUE4QixFQUFBNUMsR0FBQSxJQUFBQSxHQUVBQSxFQUFBNmIsR0FBQS9hLEVBQUE4QixHQUFBLEtBREEsS0FTQSxTQUFBaVosR0FBQS9hLEVBQUE4QixFQUFBa1osR0FHQSxZQUZBLElBQUFBLElBQUFBLEVBQUEsY0FFQWxTLEdBQUE5SSxFQUFBLGVBQUFnYixFQUNBaEQsR0FBQWxXLEdBQUFyRixNQUFBLEdBQUF5RCxJQUFBNUQsR0FBQThQLE9BQUEsU0FBQWxOLEVBQUE0QyxHQUFBLE9BQUE1QyxFQUNBWSxFQUFBZ0osR0FBQTlJLEVBQUEsVUFBQThCLElBQ0FoQyxFQUFBZ0osR0FBQTlJLEVBQUEsU0FBQThCLEVBQUEsV0FDQSxHQUNBLEVBR0EsU0FBQWtYLEdBQUFELEVBQUFrQyxFQUFBckMsRUFBQXNDLEdBQ0FsYSxFQUFBZ1gsR0FBQSxTQUFBaFcsRUFBQUYsR0FDQSxJQUFBc1gsRUFBQXBYLEVBQUEsR0FDQXFYLEVBQUFyWCxFQUFBLEdBQ0FzWCxFQUFBdFgsRUFBQSxHQUVBaVosRUFBQTdCLEtBQUFFLEVBQ0FQLEVBQUFNLElBQUFULEVBQUE5VyxHQUFBb1osRUFDQSxXQUFBRCxFQUFBN0IsS0FDQUwsRUFBQU0sSUFBQVQsRUFBQTlXLEdBQUFvWixFQUFBLEtBS0EsU0FBQXhDLEdBQUFxQixHQUVBLElBQUF0VyxFQUFBLG9CQUNBQyxFQUFBLG9CQVlBLE9BUkEsS0FGQXFXLEdBQUFBLEdBQUEsSUFBQXJaLE1BQUEsTUFFQW5FLFNBQ0F3ZCxFQUFBdFcsRUFBQTBCLEtBQUE0VSxFQUFBLElBQ0FBLEVBQUExTyxPQUFBLFVBQ0EzSCxFQUFBeUIsS0FBQTRVLEVBQUEsSUFDQSxDQUFBLFVBQUExTyxPQUFBME8sR0FDQSxDQUFBLFNBQUEsV0FHQSxDQUNBdFcsRUFBQUEsRUFBQTBCLEtBQUE0VSxFQUFBLElBQUFBLEVBQUEsR0FBQSxTQUNBclcsRUFBQUEsRUFBQXlCLEtBQUE0VSxFQUFBLElBQUFBLEVBQUEsR0FBQSxVQUlBLFNBQUFkLEdBQUFrQyxFQUFBbEQsRUFBQUMsR0FFQSxJQUFBbFcsR0FBQW1aLEdBQUEsSUFBQXphLE1BQUEsS0FDQStDLEVBQUF6QixFQUFBLEdBQ0EwQixFQUFBMUIsRUFBQSxHQUVBLE1BQUEsQ0FDQXlCLEVBQUFBLEVBQUEzRCxFQUFBMkQsSUFBQXhHLEVBQUF3RyxFQUFBLEtBQUF3VSxFQUFBLElBQUEsR0FBQSxFQUNBdlUsRUFBQUEsRUFBQTVELEVBQUE0RCxJQUFBekcsRUFBQXlHLEVBQUEsS0FBQXdVLEVBQUEsSUFBQSxHQUFBLEdBSUEsU0FBQWtELEdBQUFyQixHQUNBLE9BQUFBLEdBQ0EsSUFBQSxPQUNBLE1BQUEsUUFDQSxJQUFBLFFBQ0EsTUFBQSxPQUNBLElBQUEsTUFDQSxNQUFBLFNBQ0EsSUFBQSxTQUNBLE1BQUEsTUFDQSxRQUNBLE9BQUFBLEdBSUEsU0FBQXNCLEdBQUFuYyxFQUFBc1csRUFBQXhWLEdBSUEsWUFIQSxJQUFBd1YsSUFBQUEsRUFBQSxjQUNBLElBQUF4VixJQUFBQSxFQUFBeEIsUUFFQVksRUFBQUYsSUFDQUEsRUFDQWpDLEVBQUFpQyxFQUFBLE1BQ0FvYyxHQUFBcEQsR0FBQTVYLEVBQUFOLElBQUFkLEdBQ0FqQyxFQUFBaUMsRUFBQSxNQUNBb2MsR0FBQXJELEdBQUEzWCxFQUFBTixJQUFBZCxHQUNBakMsRUFBQWlDLEVBQUEsS0FDQW9jLEdBQUF6QyxHQUFBN1ksR0FBQXdWLEdBQUF0VyxHQUNBWSxFQUFBWixHQUdBLFNBQUFvYyxHQUFBclMsRUFBQS9KLEdBQ0EsT0FBQStKLEVBQUFuSixFQUFBWixHQUFBLElBU0EsSUFBQXFjLEdBQUEsQ0FFQUMsTUFBQSxHQUNBQyxPQUFBLEdBRUFDLEtBQUEsU0FBQUMsR0FHQSxPQUZBMWdCLEtBQUF1Z0IsTUFBQXpULEtBQUE0VCxHQUNBQyxLQUNBRCxHQUdBRSxNQUFBLFNBQUFGLEdBR0EsT0FGQTFnQixLQUFBd2dCLE9BQUExVCxLQUFBNFQsR0FDQUMsS0FDQUQsR0FHQUcsTUFBQSxTQUFBSCxHQUNBLE9BQUFJLEdBQUE5Z0IsS0FBQXVnQixNQUFBRyxJQUFBSSxHQUFBOWdCLEtBQUF3Z0IsT0FBQUUsSUFHQUssTUFBQUEsSUFJQSxTQUFBQSxHQUFBQyxRQUNBLElBQUFBLElBQUFBLEVBQUEsR0FFQUMsR0FBQVgsR0FBQUMsT0FDQVUsR0FBQVgsR0FBQUUsT0FBQTlPLE9BQUEsRUFBQTRPLEdBQUFFLE9BQUFsZixTQUVBZ2YsR0FBQVksV0FBQSxHQUVBWixHQUFBQyxNQUFBamYsUUFBQWdmLEdBQUFFLE9BQUFsZixTQUNBcWYsR0FBQUssRUFBQSxHQUlBLElBQUFHLEdBQUEsRUFDQSxTQUFBUixHQUFBSyxHQUNBLElBQUFWLEdBQUFZLFVBQUEsQ0FFQSxHQURBWixHQUFBWSxXQUFBLEVBQ0FDLEdBQUFILEVBQ0EsTUFBQSxJQUFBdk0sTUFBQSxvQ0FDQXVNLEVBQ0F4TyxHQUFBQyxVQUFBZ0IsS0FBQSxXQUFBLE9BQUFzTixHQUFBQyxLQUVBSSxzQkFBQSxXQUFBLE9BQUFMLFFBS0EsU0FBQUUsR0FBQUksR0FFQSxJQURBLElBQUFYLEVBQ0FBLEVBQUFXLEVBQUFuSyxTQUNBd0osSUFJQSxTQUFBSSxHQUFBOWQsRUFBQXNlLEdBQ0EsSUFBQS9MLEVBQUF2UyxFQUFBWixRQUFBa2YsR0FDQSxTQUFBL0wsS0FBQXZTLEVBQUEwTyxPQUFBNkQsRUFBQSxHQUdBLFNBQUFnTSxNQUVBQSxHQUFBcGhCLFVBQUEsQ0FFQXFoQixVQUFBLEdBRUFDLEtBQUEsV0FDQSxJQUtBM0QsRUFMQTdVLEVBQUFqSixLQUdBQSxLQUFBd2hCLFVBQUEsR0FHQXhoQixLQUFBc1YsT0FBQTNGLEdBQUFyRixTQUFBLFlBQUEsU0FBQTBDLEdBQUEsT0FBQThRLEVBQUE1TCxHQUFBbEYsS0FDQWhOLEtBQUEwaEIsU0FBQUMsWUFBQSxXQUVBN0QsSUFJQTdVLEVBQUF1WSxVQUFBMVUsS0FBQWdSLEdBRUEsRUFBQTdVLEVBQUF1WSxVQUFBbGdCLFFBQ0EySCxFQUFBdVksVUFBQXRLLFVBRUEsS0FJQW1GLE9BQUEsV0FDQXJjLEtBQUFzVixRQUFBdFYsS0FBQXNWLFNBQ0F0VixLQUFBMGhCLFVBQUFFLGNBQUE1aEIsS0FBQTBoQixXQUdBRyxRQUFBLFNBQUF2YixHQUVBLEdBQUF0RyxLQUFBd2hCLFVBQUFsZ0IsT0FBQSxFQUNBLE9BQUEsRUFHQSxJQUFBcVMsRUFBQXJOLEVBQUE4WSx3QkFDQW5YLEVBQUEwTCxFQUFBMUwsS0FDQUMsRUFBQXlMLEVBQUF6TCxNQUNBQyxFQUFBd0wsRUFBQXhMLElBQ0FDLEVBQUF1TCxFQUFBdkwsT0FHQTBaLEVBREE5aEIsS0FBQXdoQixVQUNBLEdBQ0ExRCxFQUFBcFgsRUFBQTFHLEtBQUF3aEIsV0FDQU8sRUFBQSxDQUFBRCxFQUFBaEUsR0FFQSxPQUFBelYsR0FBQXlWLEVBQUFuSyxJQUlBLENBQUEsQ0FBQSxDQUFBbkwsRUFBQVAsRUFBQVEsRUFBQU4sR0FBQSxDQUFBSyxFQUFBTixFQUFBTyxFQUFBTCxJQUFBLENBQUEsQ0FBQUksRUFBQVAsRUFBQVEsRUFBQUwsR0FBQSxDQUFBSSxFQUFBTixFQUFBTyxFQUFBTixLQUVBdUIsS0FBQSxTQUFBc1ksR0FDQSxJQUFBQyxFQVFBLFNBQUFsYixFQUFBQyxHQUNBLElBQUFrYixFQUFBbmIsRUFBQSxHQUNBb2IsRUFBQUQsRUFBQTFaLEVBQ0E0WixFQUFBRixFQUFBelosRUFDQTRaLEVBQUF0YixFQUFBLEdBQ0F1YixFQUFBRCxFQUFBN1osRUFDQStaLEVBQUFGLEVBQUE1WixFQUNBK1osRUFBQXhiLEVBQUEsR0FDQXliLEVBQUFELEVBQUFoYSxFQUNBa2EsRUFBQUYsRUFBQS9aLEVBQ0FrYSxFQUFBM2IsRUFBQSxHQUNBNGIsRUFBQUQsRUFBQW5hLEVBQ0FxYSxFQUFBRixFQUFBbGEsRUFHQXFhLEdBQUFELEVBQUFILElBQUFKLEVBQUFILElBQUFTLEVBQUFILElBQUFGLEVBQUFILEdBR0EsR0FBQSxHQUFBVSxFQUNBLE9BQUEsRUFHQSxJQUFBQyxJQUFBSCxFQUFBSCxJQUFBTCxFQUFBTSxJQUFBRyxFQUFBSCxJQUFBUCxFQUFBTSxJQUFBSyxFQUVBLEdBQUFDLEVBQUEsRUFDQSxPQUFBLEVBSUEsTUFBQSxDQUFBdmEsRUFBQTJaLEVBQUFZLEdBQUFULEVBQUFILEdBQUExWixFQUFBMlosRUFBQVcsR0FBQVIsRUFBQUgsSUFyQ0FZLENBQUFqQixFQUFBQyxHQUNBLE9BQUFDLEdBQUE1WixHQUFBNFosRUFBQXRPLE9BdUNBLElBQUFzUCxHQUFBLEdBaUVBLFNBQUFDLEdBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQUosR0FBQUssU0FDQXBnQixFQUFBaWdCLEdBQ0FBLEVBQUEzaUIsS0FBQTZpQixFQUFBQSxHQUNBRixFQUNBamdCLEVBQUFrZ0IsR0FDQUEsRUFBQTVpQixLQUFBNmlCLEVBQUFBLEdBQ0FELEdBS0EsU0FBQUcsR0FBQUosRUFBQUMsR0FJQSxPQUZBRCxFQUFBQSxJQUFBbGdCLEVBQUFrZ0IsR0FBQSxDQUFBQSxHQUFBQSxFQUVBQyxFQUNBRCxFQUNBQSxFQUFBL1MsT0FBQWdULEdBQ0FuZ0IsRUFBQW1nQixHQUNBQSxFQUNBLENBQUFBLEdBQ0FELEVBUUEsU0FBQUssR0FBQW5YLEVBQUFvWCxFQUFBSixHQUVBLElBQUExUixFQUFBLEdBVUEsR0FSQXpPLEVBQUF1Z0IsS0FDQUEsRUFBQUEsRUFBQTlSLFNBR0E4UixFQUFBQyxVQUNBclgsRUFBQW1YLEdBQUFuWCxFQUFBb1gsRUFBQUMsUUFBQUwsSUFHQUksRUFBQUUsT0FDQSxJQUFBLElBQUF4aEIsRUFBQSxFQUFBeWhCLEVBQUFILEVBQUFFLE9BQUFyaUIsT0FBQWEsRUFBQXloQixFQUFBemhCLElBQ0FrSyxFQUFBbVgsR0FBQW5YLEVBQUFvWCxFQUFBRSxPQUFBeGhCLEdBQUFraEIsR0FJQSxJQUFBLElBQUE5aUIsS0FBQThMLEVBQ0F3WCxFQUFBdGpCLEdBR0EsSUFBQSxJQUFBdWpCLEtBQUFMLEVBQ0FwakIsRUFBQWdNLEVBQUF5WCxJQUNBRCxFQUFBQyxHQUlBLFNBQUFELEVBQUF0akIsR0FDQW9SLEVBQUFwUixJQUFBMGlCLEdBQUExaUIsSUFqQ0EsU0FBQTRpQixFQUFBQyxHQUNBLE9BQUE1ZSxFQUFBNGUsR0FBQUQsRUFBQUMsSUFnQ0EvVyxFQUFBOUwsR0FBQWtqQixFQUFBbGpCLEdBQUE4aUIsR0FHQSxPQUFBMVIsRUFHQSxTQUFBb1MsR0FBQXBTLEVBQUFwTCxHQUNBLElBQUFqRyxPQUVBLElBQUFpRyxJQUFBQSxFQUFBLElBRUEsSUFFQSxPQUFBb0wsRUFFQS9QLEVBQUErUCxFQUFBLEtBQ0FxUyxLQUFBQyxNQUFBdFMsR0FDQXBMLEVBQUFqRixTQUFBa0IsRUFBQW1QLEVBQUEsT0FDQXJSLEVBQUEsSUFBQWlHLEVBQUEsSUFBQW9MLEVBQUFyUixHQUNBcVIsRUFBQWxNLE1BQUEsS0FBQTBMLE9BQUEsU0FBQVEsRUFBQXVTLEdBQ0EsSUFBQW5kLEVBQUFtZCxFQUFBemUsTUFBQSxTQUNBbEYsRUFBQXdHLEVBQUEsR0FDQTlDLEVBQUE4QyxFQUFBLEdBSUEsT0FIQXhHLElBQUFpRSxFQUFBUCxLQUNBME4sRUFBQXBSLEVBQUFtRixRQUFBekIsRUFBQXlCLFFBRUFpTSxHQUNBLElBYkEsR0FlQSxNQUFBM0UsR0FDQSxNQUFBLElBeEpBaVcsR0FBQWtCLE9BQ0FsQixHQUFBbUIsUUFDQW5CLEdBQUFvQixjQUNBcEIsR0FBQXFCLFVBQ0FyQixHQUFBc0IsaUJBQ0F0QixHQUFBdUIsYUFDQXZCLEdBQUF3QixRQUFBbEIsR0FHQU4sR0FBQTFjLEtBQUEsU0FBQTRjLEVBQUFDLEdBQ0EsT0FBQSxJQUFBQSxHQUFBRyxHQUFBSCxHQUFBRCxJQUlBRixHQUFBeUIsT0FBQSxTQUFBdkIsRUFBQUMsR0FDQSxPQUFBeGMsRUFBQTJjLEdBQUFKLEVBQUFqZ0IsRUFBQWtnQixHQUFBLENBQUEzQyxLQUFBMkMsR0FBQUEsR0FBQSxVQUlBSCxHQUFBbkksTUFBQSxTQUFBcUksRUFBQUMsR0FTQSxPQVBBbmdCLEVBQUFtZ0IsS0FDQUEsRUFBQUEsRUFBQWpTLE9BQUEsU0FBQWxOLEVBQUExRCxHQUVBLE9BREEwRCxFQUFBMUQsR0FBQW1CLE9BQ0F1QyxHQUNBLEtBR0FnZixHQUFBMEIsUUFBQXhCLEVBQUFDLElBSUFILEdBQUFLLFNBQ0FMLEdBQUEwQixRQUFBLFNBQUF4QixFQUFBQyxHQUNBLE9BQUFBLEVBQ0FELEVBQ0E5YyxFQUFBLEdBQUE4YyxFQUFBQyxHQUNBQSxFQUNBRCxHQUlBRixHQUFBcFosS0FBQSxTQUFBc1osRUFBQUMsRUFBQUMsR0FFQSxPQUFBQSxFQWdCQUgsR0FBQUMsRUFBQUMsRUFBQUMsR0FkQUQsRUFJQUQsRUFJQSxTQUFBRSxHQUNBLE9BQUFILEdBQUFDLEVBQUFDLEVBQUFDLElBSkFELEVBSkFELEdBZ0hBLFNBQUF5QixHQUFBbEcsR0FDQTFlLEtBQUEyTSxLQUFBQSxHQUNBM00sS0FBQTBlLEdBQUE1WixFQUFBNFosR0FKQSxJQUFBL1IsR0FBQSxFQXlIQSxTQUFBa1ksR0FBQW5HLEVBQUFvRyxHQUNBLElBQ0FwRyxFQUFBcUcsY0FBQUMsWUFBQWhCLEtBQUFpQixVQUFBNWUsRUFBQSxDQUFBNkssTUFBQSxXQUFBNFQsSUFBQSxLQUNBLE1BQUE5WCxLQTJCQSxTQUFBa1ksR0FBQW5nQixFQUFBMGEsRUFBQUMsR0FLQSxRQUpBLElBQUFELElBQUFBLEVBQUEsUUFDQSxJQUFBQyxJQUFBQSxFQUFBLElBR0ExUSxHQUFBakssR0FDQSxPQUFBLEVBR0EsSUFBQXlLLEVBQUEyVixHQUFBcGdCLEdBRUEsT0FBQXlLLEVBQUE0VixNQUFBLFNBQUEvWSxFQUFBbEssR0FFQSxJQUFBa2pCLEVBQUExRyxHQUFBblAsRUFBQXJOLEVBQUEsSUFBQTRDLEdBQ0FnQyxFQUFBNFgsR0FBQTJHLEdBQUFqWixJQUNBbEUsRUFBQXBCLEVBQUFvQixJQUNBRixFQUFBbEIsRUFBQWtCLEtBQ0FHLEVBQUFyQixFQUFBcUIsT0FDQUYsRUFBQW5CLEVBQUFtQixNQUVBLE9BQUFKLEdBQUF1ZCxFQUFBLENBQ0FsZCxJQUFBQSxFQUFBc1gsRUFDQXhYLEtBQUFBLEVBQUF5WCxFQUNBdFgsT0FBQUEsRUFBQXFYLEVBQ0F2WCxNQUFBQSxFQUFBd1gsTUFLQSxTQUFBNkYsR0FBQXhnQixFQUFBb0QsSUFHQXBELEdBREF6QixFQUFBeUIsSUFBQXZCLEVBQUF1QixHQUNBeWdCLEdBRUExZ0IsR0FGQUMsSUFLQXdnQixVQUFBcGQsRUFHQSxTQUFBc2QsR0FBQTFnQixFQUFBZ0MsUUFDQSxJQUFBQSxJQUFBQSxFQUFBLElBQ0EsSUFBQTJlLEVBQUEzZSxFQUFBNFgsT0FHQSxRQUhBLElBQUErRyxJQUFBQSxFQUFBLEdBR0ExVyxHQUFBakssR0FBQSxDQXNDQSxJQWxDQSxJQUFBeUssRUFBQTJWLEdBQUFwZ0IsR0FBQXFMLE9BQUFyTCxHQUVBd04sRUFBQUMsR0FBQUMsVUFDQWtULEVBQUEsU0FBQXhqQixHQUNBb1EsRUFBQUEsRUFBQWtCLEtBQUEsV0FBQSxPQUFBLElBQUFqQixHQUFBLFNBQUFDLEdBRUEsSUFnQ0FtVCxFQWhDQUMsRUFBQXJXLEVBQUFyTixHQUNBNEMsRUFBQXlLLEVBQUFyTixFQUFBLEdBRUEyakIsRUFBQUQsRUFBQU4sVUFDQXBkLEVBQUFQLEtBQUFtZSxLQUFBakksR0FBQS9ZLEVBQUF1Z0IsR0FBQU8sSUFBQTFkLElBQUF1ZCxHQUNBL0osR0EyQkFpSyxFQTNCQWhlLEtBQUFvZSxJQUFBN2QsR0E0QkEsR0FBQVAsS0FBQXFlLElBQUFMLEVBQUEsT0ExQkF6SixFQUFBdlAsS0FBQUMsTUFDQXFaLEVBQUEsV0FFQSxJQTBCQUMsRUExQkE5RixHQTBCQThGLEVBMUJBMWUsSUFBQW1GLEtBQUFDLE1BQUFzUCxHQUFBUixHQTJCQSxJQUFBLEVBQUEvVCxLQUFBd2UsSUFBQXhlLEtBQUF5ZSxHQUFBRixLQXpCQVosR0FBQU0sRUFBQUMsRUFBQTNkLEVBQUFrWSxHQUdBLEdBQUFBLEVBQ0FlLHNCQUFBOEUsR0FFQXpULEtBS0F5VCxTQUtBL2pCLEVBQUEsRUFBQUEsRUFBQXFOLEVBQUFsTyxPQUFBLEVBQUFhLElBQUF3akIsRUFBQXhqQixHQUVBLE9BQUFvUSxHQVlBLFNBQUErVCxHQUFBdmhCLEVBQUF3aEIsR0FJQSxRQUhBLElBQUFBLElBQUFBLEVBQUEsSUFHQXZYLEdBQUFqSyxHQUNBLE9BQUEsRUFHQSxJQUFBOGdCLEVBQUFuZixFQUFBOGYsR0FBQXpoQixJQUNBMGhCLEVBQUFaLEVBQUFZLGFBQ0FsQixFQUFBTSxFQUFBTixVQUVBbUIsRUFBQS9ILEdBREEyRyxHQUFBTyxJQUNBNUksT0FDQTBKLEVBQUFuSCxHQUFBemEsR0FBQSxHQUFBd2dCLEVBQUEvRixHQUFBcUcsR0FBQSxHQUNBZSxFQUFBaGYsS0FBQUYsSUFBQWdmLEVBQUFDLEVBQUFwQixHQVNBLE9BQUE5ZCxJQUFBLEdBUEFrZixFQUFBQyxHQUNBaGYsS0FBQUYsSUFDQWlYLEdBQUE1WixHQUFBa1ksT0FBQXNKLEVBQUFLLEVBQ0FILEdBQUFFLEVBQUFwQixHQUNBa0IsRUFBQUMsSUFNQSxTQUFBRixHQUFBemhCLEVBQUE4aEIsUUFDQSxJQUFBQSxJQUFBQSxFQUFBLGVBRUEsSUFBQUMsRUFBQXRCLEdBQUF6Z0IsR0FDQXloQixFQUFBaFgsR0FBQXpLLEdBQUFHLE9BQUEsU0FBQW1ILEdBQUEsT0FBQUEsSUFBQXlhLEdBQ0FELEVBQUEzYyxLQUFBMkQsR0FBQXhCLEVBQUEsY0FDQUEsRUFBQW9hLGFBQUE3ZSxLQUFBa0IsTUFBQTZWLEdBQUF0UyxHQUFBNFEsVUFDQXhNLFVBQ0EsT0FBQStWLEVBQUFsbEIsT0FBQWtsQixFQUFBLENBQUFNLEdBR0EsU0FBQXhCLEdBQUFPLEdBQ0EsT0FBQUEsSUFBQUwsR0FBQUssR0FBQXRpQixPQUFBc2lCLEVBR0EsU0FBQVYsR0FBQXBnQixHQUNBLE9BQUF5aEIsR0FBQXpoQixFQUFBLHNCQUdBLFNBQUF5Z0IsR0FBQXpnQixHQUNBLElBQ0F1RixFQURBakYsRUFBQU4sR0FDQXVGLFNBQ0EsT0FBQUEsRUFBQXljLGtCQUFBemMsRUFBQUMsZ0JBalNBcWEsR0FBQXprQixVQUFBNm1CLFFBQUEsV0FDQSxPQUFBaG5CLEtBQUFpbkIsYUFBQWpuQixLQUFBa25CLFdBQUFsbkIsS0FBQW1uQixXQUdBdkMsR0FBQXprQixVQUFBZ25CLFFBQUEsV0FDQSxNQUFBLFVBQUFubkIsS0FBQTBlLEdBQUEzUCxTQUdBNlYsR0FBQXprQixVQUFBaW5CLFNBQUEsV0FDQSxNQUFBLFdBQUFwbkIsS0FBQTBlLEdBQUEzUCxTQUdBNlYsR0FBQXprQixVQUFBOG1CLFVBQUEsV0FDQSxPQUFBam5CLEtBQUFvbkIsY0FBQXBuQixLQUFBMGUsR0FBQTdKLElBQUE5USxNQUFBLCtFQUdBNmdCLEdBQUF6a0IsVUFBQSttQixRQUFBLFdBQ0EsT0FBQWxuQixLQUFBb25CLGNBQUFwbkIsS0FBQTBlLEdBQUE3SixJQUFBOVEsTUFBQSwwQkFHQTZnQixHQUFBemtCLFVBQUFrbkIsVUFBQSxXQUNBLElBQUFwZSxFQUFBakosS0FHQSxHQUFBQSxLQUFBbVYsTUFDQSxPQUFBblYsS0FBQW1WLE1BR0EsSUFHQW1TLEVBSEFDLEVBQUF2bkIsS0FBQWluQixZQUNBTyxFQUFBeG5CLEtBQUFrbkIsVUFJQSxPQUFBSyxHQUFBQyxFQUVBeG5CLEtBQUFtVixNQUFBLElBQUEzQyxHQUFBLFNBQUFDLEdBcUZBLElBQUE5TCxFQW5GQW1LLEdBQUE3SCxFQUFBeVYsR0FBQSxPQUFBLFdBQ0EsR0FBQTZJLEVBQUEsQ0FDQSxJQUFBM1gsRUFBQSxXQUFBLE9BQUFpVixHQUFBNWIsRUFBQXlWLEdBQUEsQ0FBQXhOLE1BQUEsWUFBQXZFLEdBQUExRCxFQUFBMEQsTUFDQTJhLEVBQUEzRixZQUFBL1IsRUFBQSxLQUNBQSxPQStFQWpKLEVBM0VBLFNBQUFrRCxHQUFBLE9BQUEwZCxHQUFBMWQsRUFBQThDLEtBQUExRCxFQUFBMEQsSUFBQSxZQUFBOUMsRUFBQXFILE9BQUFzVyxHQUFBNWlCLE9BQUFpRixFQUFBNGQsYUFBQXhlLEVBQUEwRCxJQTZFQSxJQUFBNkYsR0FBQSxTQUFBQyxHQUFBLE9BQUEzQixHQUFBdk4sT0FBQSxVQUFBLFNBQUFyQyxFQUFBMkksR0FBQSxPQUFBNEksRUFBQTVJLEtBQUEsRUFBQSxTQUFBOUMsR0FDQSxJQUFBOEMsRUFBQTlDLEVBQUE4QyxLQUdBLEdBQUFBLEdBQUFuSCxFQUFBbUgsR0FBQSxDQUlBLElBQ0FBLEVBQUFtYSxLQUFBQyxNQUFBcGEsR0FDQSxNQUFBbUQsR0FDQSxPQUdBLE9BQUFuRCxHQUFBbEQsRUFBQWtELFFBMUZBNEosS0FBQSxXQUNBaEIsSUFDQTZVLEdBQUExRixjQUFBMEYsS0FHQW5lLEdBQUFGLEVBQUF5VixHQUFBLE1BQUF6VixFQUFBeVYsR0FBQSxLQUFBbGMsRUFBQXlHLEVBQUF5VixHQUFBN0osSUFBQSxLQUFBLElBQUEsTUFBQTBTLEVBQUEsZ0JBQUEsbUJBQUF0ZSxFQUFBLE9BTUF1SixHQUFBQyxXQUlBbVMsR0FBQXprQixVQUFBdW5CLEtBQUEsV0FDQSxJQUFBemUsRUFBQWpKLEtBR0EsR0FBQUEsS0FBQWduQixVQUlBLEdBQUFobkIsS0FBQW9uQixXQUNBcG5CLEtBQUFxbkIsWUFBQTVULEtBQUEsV0FBQSxPQUFBb1IsR0FBQTViLEVBQUF5VixHQUFBLENBQUFpSixLQUFBLFlBQUE1VCxPQUFBLGdCQUNBLEdBQUEvVCxLQUFBbW5CLFVBQ0EsSUFDQSxJQUFBNVUsRUFBQXZTLEtBQUEwZSxHQUFBZ0osT0FFQW5WLEdBQ0FBLEVBQUE4RSxNQUFBeFAsSUFFQSxNQUFBbUYsTUFJQTRYLEdBQUF6a0IsVUFBQXluQixNQUFBLFdBQ0EsSUFBQTNlLEVBQUFqSixLQUdBQSxLQUFBZ25CLFlBSUFobkIsS0FBQW9uQixXQUNBcG5CLEtBQUFxbkIsWUFBQTVULEtBQUEsV0FBQSxPQUFBb1IsR0FBQTViLEVBQUF5VixHQUFBLENBQUFpSixLQUFBLGFBQUE1VCxPQUFBLFlBQ0EvVCxLQUFBbW5CLFdBQ0FubkIsS0FBQTBlLEdBQUFrSixVQUlBaEQsR0FBQXprQixVQUFBMG5CLEtBQUEsV0FDQSxJQUFBNWUsRUFBQWpKLEtBR0FBLEtBQUFnbkIsWUFJQWhuQixLQUFBb25CLFdBQ0FwbkIsS0FBQXFuQixZQUFBNVQsS0FBQSxXQUFBLE9BQUFvUixHQUFBNWIsRUFBQXlWLEdBQUEsQ0FBQWlKLEtBQUEsT0FBQTVULE9BQUEsWUFBQTlQLE1BQUEsTUFDQWpFLEtBQUFtbkIsWUFDQW5uQixLQUFBMGUsR0FBQW9KLE9BQUEsRUFDQTNlLEdBQUFuSixLQUFBMGUsR0FBQSxRQUFBLE9BdUxBLElBQUFxSixHQUFBL2QsSUFBQXpHLE9BQUF3a0Isc0JBQ0EsV0FDQSxTQUFBQyxFQUFBQyxFQUFBbGhCLEdBQ0EsSUFBQWtDLEVBQUFqSixVQUNBLElBQUErRyxJQUFBQSxFQUFBLElBQ0EsSUFBQW1oQixFQUFBbmhCLEVBQUFtaEIsZ0JBQUEsSUFBQUEsSUFBQUEsRUFBQSxPQUdBbG9CLEtBQUE4UCxRQUFBLEdBRUEsSUFPQXFZLEVBUEFuaEIsR0FBQWtoQixHQUFBLE9BQUF6aUIsTUFBQSxLQUFBUixJQUFBSixHQUNBNGEsRUFBQXpZLEVBQUEsR0FDQTBZLEVBQUExWSxFQUFBLEdBRUFoSCxLQUFBeWYsVUFBQUEsRUFDQXpmLEtBQUEwZixXQUFBQSxFQUdBMWYsS0FBQW1RLE1BQUEsV0FNQWdZLEVBSkFBLEdBSUEvRyxzQkFBQSxXQUFBLE9BQUFyTyxXQUFBLFdBQ0EsSUFBQXFWLEVBQUFuZixFQUFBb2YsY0FFQUQsRUFBQTltQixRQUNBMm1CLEVBQUFHLEVBQUFuZixHQUdBa2YsR0FBQSxPQUtBbm9CLEtBQUE0USxJQUFBakIsR0FBQXBNLE9BQUEscUJBQUF2RCxLQUFBbVEsTUFBQSxDQUFBbVksU0FBQSxFQUFBMVcsU0FBQSxJQWdDQSxPQTVCQW9XLEVBQUE3bkIsVUFBQWtvQixZQUFBLFdBQ0EsSUFBQXBmLEVBQUFqSixLQUVBLE9BQUFBLEtBQUE4UCxRQUFBNUssT0FBQSxTQUFBcWpCLEdBRUEsSUFBQUMsRUFBQXRELEdBQUFxRCxFQUFBamlCLE9BQUEyQyxFQUFBd1csVUFBQXhXLEVBQUF5VyxZQUVBLEdBQUEsT0FBQTZJLEVBQUFFLGdCQUFBRCxFQUFBRCxFQUFBRSxlQUVBLE9BREFGLEVBQUFFLGVBQUFELEdBQ0EsS0FNQVIsRUFBQTduQixVQUFBdW9CLFFBQUEsU0FBQXBpQixHQUNBdEcsS0FBQThQLFFBQUFoRCxLQUFBLENBQ0F4RyxPQUFBQSxFQUNBbWlCLGVBQUEsT0FFQXpvQixLQUFBbVEsU0FHQTZYLEVBQUE3bkIsVUFBQXdvQixXQUFBLFdBQ0Ezb0IsS0FBQThQLFFBQUEsR0FDQTlQLEtBQUE0USxPQUdBb1gsRUFuRUEsR0E0N0JBLFNBQUFZLEdBQUE5ZSxHQUNBLFNBQUFsSSxFQUFBa0ksRUFBQSxTQUFBbEksRUFBQWtJLEVBQUEsY0FDQTlJLEVBQUE4SSxFQUFBakosUUFBQSxXQUFBLElBQUFBLFFBQUEsTUFBQSxLQUlBLFNBQUFkLEdBQUE0UixHQUNBM1IsS0FBQTZvQixNQUFBbFgsR0FEQSxJQTd1QkE1UixHQWlEQTJYLEdBL0NBb1IsR0EyRUEvb0IsR0E0SkFBLEdBRUFncEIsR0EyWkFocEIsR0FFQStvQixHQUVBRSxHQTVrQkEsU0FBQXRFLEdBQUE3YSxFQUFBbUQsR0FFQSxHQUFBbkQsRUFJQSxJQUFBLElBQUFULEtBQUFTLEVBQ0FBLEVBQUFULEdBQUE2ZixZQUNBcGYsRUFBQVQsR0FBQThmLFlBQUFsYyxHQXFUQSxTQUFBbWMsR0FBQUMsRUFBQWhnQixHQUVBLElBQUFpZ0IsRUFBQSxHQUNBOWlCLEVBQUE2aUIsRUFBQTdpQixVQUFBLElBQUFBLElBQUFBLEVBQUEsSUFDQSxJQUFBdVUsRUFBQXNPLEVBQUF0TyxXQUFBLElBQUFBLElBQUFBLEVBQUEsSUFDQSxJQUFBNEQsRUFBQTBLLEVBQUExSyxHQUVBLElBQUE1RCxFQUNBLE9BQUF1TyxFQUdBLElBQUEsSUFBQTlvQixLQUFBdWEsRUFBQSxDQUNBLElBQUFqVSxFQUFBbEcsRUFBQUosR0FDQTBELEVBQUE0RixHQUFBNlUsRUFBQTdYLEdBRUFyQyxFQUFBUCxLQUlBQSxFQUFBNlcsRUFBQXZhLEtBQUE0RSxTQUFBLEtBQUFsQixHQUVBcWxCLEdBQUF4TyxFQUFBdmEsR0FBQTBELElBRUEsV0FBQTRDLEdBQUE1QyxJQUFBckMsRUFBQXFDLEVBQUEsUUFJQW9sQixFQUFBOW9CLEdBQUEwRCxJQUdBLElBQUEwTixFQUFBb1MsR0FBQWxhLEdBQUE2VSxFQUFBdFYsR0FBQTdDLEdBRUEsSUFBQSxJQUFBdWQsS0FBQW5TLEVBQUEsQ0FDQSxJQUFBNFgsRUFBQXZvQixFQUFBOGlCLFFBQ0E1USxJQUFBNEgsRUFBQXlPLEtBQ0FGLEVBQUFFLEdBQUFELEdBQUF4TyxFQUFBeU8sR0FBQTVYLEVBQUFtUyxLQUlBLE9BQUF1RixFQUdBLFNBQUFHLEdBQUFDLEVBQUFscEIsRUFBQW9HLEdBQ0F6RyxPQUFBd3BCLGVBQUFELEVBQUFscEIsRUFBQSxDQUVBb3BCLFlBQUEsRUFFQXZRLElBQUEsV0FFQSxJQUFBd1EsRUFBQUgsRUFBQUcsV0FDQUMsRUFBQUosRUFBQUksT0FDQUMsRUFBQUwsRUFBQUssSUFNQSxPQUpBenBCLEVBQUF1cEIsRUFBQXJwQixLQUNBcXBCLEVBQUFycEIsSUFBQW9HLEVBQUF5UyxLQUFBelMsR0FBQW5HLEtBQUFpcEIsRUFBQUksRUFBQUMsSUFHQUYsRUFBQXJwQixJQUdBd3BCLElBQUEsU0FBQTlsQixHQUVBLElBQUEybEIsRUFBQUgsRUFBQUcsV0FFQUEsRUFBQXJwQixHQUFBb0csRUFBQW9qQixJQUFBcGpCLEVBQUFvakIsSUFBQXZwQixLQUFBaXBCLEVBQUF4bEIsR0FBQUEsRUFFQU8sRUFBQW9sQixFQUFBcnBCLFlBQ0FxcEIsRUFBQXJwQixNQU9BLFNBQUF5cEIsR0FBQVAsRUFBQXZZLEVBQUEzUSxHQUVBOEMsRUFBQTZOLEtBQ0FBLEVBQUEsQ0FBQTlILEtBQUE3SSxFQUFBMHBCLFFBQUEvWSxJQUdBLElBQUE5SCxFQUFBOEgsRUFBQTlILEtBQ0FzVixFQUFBeE4sRUFBQXdOLEdBQ0F1TCxFQUFBL1ksRUFBQStZLFFBQ0FyWSxFQUFBVixFQUFBVSxRQUNBMFcsRUFBQXBYLEVBQUFvWCxRQUNBOVgsRUFBQVUsRUFBQVYsU0FDQXRMLEVBQUFnTSxFQUFBaE0sT0FDQXBGLEVBQUFvUixFQUFBcFIsS0FDQTRlLEVBQUF4YixFQUFBd2IsR0FDQUEsRUFBQWxlLEtBQUFpcEIsR0FDQS9LLEdBQUErSyxFQUFBSyxJQUVBN21CLEVBQUF5YixHQUNBQSxFQUFBcFYsUUFBQSxTQUFBb1YsR0FBQSxPQUFBc0wsR0FBQVAsRUFBQXBqQixFQUFBLEdBQUE2SyxFQUFBLENBQUF3TixHQUFBQSxJQUFBbmUsTUFJQW1lLEdBQUF4WixJQUFBQSxFQUFBMUUsS0FBQWlwQixJQUlBQSxFQUFBUyxRQUFBcGQsS0FDQTZDLEdBQ0ErTyxFQUNBdFYsRUFDQW9ILEVBRUE5TixFQUFBOE4sR0FDQUEsRUFDQUEsRUFBQWhRLEtBQUFpcEIsR0FIQSxLQUlBL21CLEVBQUF1bkIsR0FBQVIsRUFBQVEsR0FBQUEsRUFBQUUsS0FBQVYsR0FDQSxDQUFBbkIsUUFBQUEsRUFBQTFXLFFBQUFBLEVBQUE5UixLQUFBQSxLQU1BLFNBQUFzcUIsR0FBQXpZLEVBQUFwUixHQUNBLE9BQUFvUixFQUFBeVQsTUFBQSxTQUFBaUYsR0FBQSxPQUFBQSxJQUFBaHFCLEVBQUFncUIsRUFBQTlwQixLQUdBLFNBQUErb0IsR0FBQXZaLEVBQUE5TCxHQUVBLE9BQUE4TCxJQUFBNUssUUFDQVYsRUFBQVIsR0FDQThMLElBQUFuTCxPQUNBRixFQUFBVCxHQUNBLFNBQUE4TCxFQUNBdkssRUFBQXZCLEdBR0E4TCxFQUFBQSxFQUFBOUwsR0FBQUEsRUFtUEFsRSxHQUFBdXFCLEtBaDRCQXBxQixPQUFBcXFCLE9BQUEsQ0FDQUMsVUFBQSxLQUNBNVcsS0FBQUEsR0FDQWdCLFNBQUFBLEdBQ0E4RyxXQUFBQSxHQUNBUSxXQUFBQSxHQUNBTSxRQUFBQSxHQUNBSyxVQUFBQSxHQUNBMVQsS0FBQUEsR0FDQU0sUUFBQUEsR0FDQUYsV0FBQUEsR0FDQU0sS0FBQUEsR0FDQXNPLFNBQUFBLEdBQ0FFLFlBQUFBLEdBQ0FDLGNBQUFBLEdBQ0FFLGFBQUFBLEdBQ0FDLFNBQUFBLEdBQ0FFLFlBQUFBLEdBQ0F1RSxXQUFBQSxHQUNBeUIsT0FBQUEsR0FDQWIsU0FBQUEsR0FDQTBCLGVBQUFBLEdBQ0F2QyxPQUFBQSxHQUNBRCxNQUFBQSxHQUNBOEMsZUFBQUEsR0FDQUssYUFBQUEsR0FDQUMsS0FBQUEsR0FDQWpMLE1BQUFBLEdBQ0FJLE1BQUFBLEdBQ0FDLFNBQUFBLEdBQ0FFLE1BQUFBLEdBQ0FHLEtBQUFBLEdBQ0E0VSxRQTdnREEsU0FBQXBlLEVBQUF0SCxHQUlBLE9BRkFzSCxFQUFBc0osR0FBQXRKLElBRUEwSixnQkFHQUMsR0FBQWpSLEVBQUEsU0FBQUEsR0FBQSxPQUFBc0gsRUFBQThKLGFBQUFwUixFQUFBc0gsRUFBQXFLLGNBRkFaLEdBQUF6SixFQUFBdEgsSUF5Z0RBK1EsT0FBQUEsR0FDQUksT0FBQUEsR0FDQUUsTUFBQUEsR0FDQW5KLE9BQUFBLEdBQ0F1SixRQUFBQSxHQUNBRyxVQUFBQSxHQUNBRSxPQUFBQSxHQUNBUCxTQUFBQSxHQUNBbkcsTUFBQUEsR0FDQXdGLEVBQUFBLEdBQ0F1QyxHQUFBQSxHQUNBbE8sVUFBQUEsR0FDQUMsS0FBQUEsR0FDQUksTUFBQUEsR0FDQU0sU0FBQUEsR0FDQUcsWUFBQUEsR0FDQUMsWUFBQUEsR0FDQUMsVUFBQUEsR0FDQUMsYUFBQUEsR0FDQUMsYUFBQUEsR0FDQUMsY0FBQUEsR0FDQXdFLEdBQUFBLEdBQ0FpQixJQUFBQSxHQUNBRSxLQUFBQSxHQUNBRyxRQUFBQSxHQUNBSyxZQUFBQSxHQUNBckIsZUFBQUEsR0FDQThCLFFBQUFBLEdBQ0FHLFlBQUFBLEdBQ0FvTyxRQUFBQSxHQUNBeFIsY0FBQUEsR0FDQUUsVUFBQUEsR0FDQUksU0FBQUEsR0FDQUMsUUFBQUEsR0FDQW5LLE9BQUFBLEdBQ0FvSyxPQUFBQSxHQUNBRSxRQUFBQSxHQUNBRSxTQUFBQSxHQUNBclAsT0FBQUEsRUFDQU0sVUFBQUEsRUFDQUssU0FBQUEsRUFDQUssUUFBQUEsRUFDQU8sV0FBQUEsRUFDQUksU0FBQUEsRUFDQVEsU0FBQUEsRUFDQUksVUFBQUEsRUFDQUssUUFBQUEsRUFDQUMsV0FBQUEsRUFDQUMsU0FBQUEsRUFDQUUsY0FBQUEsRUFDQUMsU0FBQUEsRUFDQUUsV0FBQUEsRUFDQUUsU0FBQUEsRUFDQUUsT0FBQUEsRUFDQUMsVUFBQUEsRUFDQUMsaUJBQUFBLEVBQ0FFLFVBQUFBLEVBQ0F0QixTQUFBQSxFQUNBd0IsU0FBQUEsRUFDQUMsVUFBQUEsRUFDQUcsUUFBQUEsRUFDQUUsWUFBQUEsRUFDQUMsVUFBQUEsRUFDQUMsU0FBQUEsRUFDQUcsUUFBQUEsRUFDQUMsT0FBQUEsRUFDQUUsUUFBQUEsRUFDQUssU0FBQUEsRUFDQUcsT0FBQUEsRUFDQUcsS0FBQUEsRUFDQUUsUUFBQUEsRUFDQUksS0FBQUEsRUFDQUksT0FBQUEsRUFDQUssS0FBQUEsRUFDQVgsS0FBQUEsRUFDQWEsT0FBQUEsRUFDQU8sU0FBQUEsRUFDQU0sTUFBQUEsR0FDQUksS0FBQUEsR0FDQUMsY0FBQUEsR0FDQU8sWUFBQUEsR0FDQUssV0FBQUEsR0FDQTZZLGFBQUFBLEdBQ0FpQyxhQUFBQSxHQUNBTyxhQUFBQSxHQUNBYSxPQUFBQSxHQUNBcFMsUUFBQUEsR0FDQUYsU0FBQUEsR0FDQXlWLHFCQUFBQSxHQUNBM2MsTUFBQUEsR0FDQUssU0FBQUEsR0FDQUYsS0FBQUEsR0FDQUksUUFBQUEsR0FDQWUsUUFBQUEsR0FDQU4sUUFBQUEsR0FDQUMsT0FBQUEsR0FDQVUsT0FBQUEsR0FDQWMsSUFBQUEsR0FDQWdOLFVBQUFBLEdBQ0FKLFNBQUFBLEdBQ0FTLFVBQUFBLEdBQ0FWLFNBQUFBLEdBQ0EwSyxTQUFBQSxHQUNBSyxVQUFBQSxHQUNBRSxlQUFBQSxHQUNBYSxhQUFBQSxHQUNBRSxjQUFBQSxHQUNBbEIsWUFBQUEsS0FxdkJBdmxCLEdBQUE4SixLQUFBLFlBQ0E5SixHQUFBMnFCLE9BQUEsTUFDQTNxQixHQUFBNFIsUUFBQSxHQUNBNVIsR0FBQTRxQixRQUFBLFFBbnZCQTdCLElBRkEvb0IsR0F1dkJBQSxJQXJ2QkE4SixLQUVBOUosR0FBQTZxQixJQUFBLFNBQUFDLEdBRUEsSUFBQUEsRUFBQUMsVUFPQSxPQUhBRCxFQUFBcnFCLEtBQUEsS0FBQVIsTUFDQTZxQixFQUFBQyxXQUFBLEVBRUE5cUIsTUFHQUQsR0FBQWdyQixNQUFBLFNBQUFBLEVBQUF0QixJQUNBQSxHQUFBL21CLEVBQUErbUIsR0FBQTFwQixHQUFBMHBCLFVBQUFBLEdBQUFBLElBQUF6cEIsTUFDQTJSLFFBQUE2UixHQUFBaUcsRUFBQTlYLFFBQUFvWixJQUdBaHJCLEdBQUFpckIsT0FBQSxTQUFBclosR0FFQUEsRUFBQUEsR0FBQSxHQUdBLFNBQUFzWixFQUFBdFosR0FDQTNSLEtBQUE2b0IsTUFBQWxYLEdBVUEsUUFQQXNaLEVBQUE5cUIsVUFBQUQsT0FBQWdyQixPQUxBbHJCLEtBS0FHLFlBQ0FnckIsWUFBQUYsR0FDQXRaLFFBQUE2UixHQVBBeGpCLEtBT0EyUixRQUFBQSxHQUVBc1osRUFBQUcsTUFUQXByQixLQVVBaXJCLEVBQUFELE9BVkFockIsS0FVQWdyQixPQUVBQyxHQUdBbHJCLEdBQUEya0IsT0FBQSxTQUFBM2YsRUFBQWlJLEdBSUF3QyxHQUZBekssRUFBQUEsRUFBQUQsRUFBQUMsR0FBQXVGLFNBQUErZ0IsTUFFQTVhLFVBQUFuSCxRQUFBLFNBQUF2RSxHQUFBLE9BQUEyZixHQUFBM2YsRUFBQStqQixJQUFBOWIsS0FDQW1ELEdBQUFwTCxFQUFBLFNBQUFBLEdBQUEsT0FBQTJmLEdBQUEzZixFQUFBK2pCLElBQUE5YixNQUtBOU0sT0FBQXdwQixlQUFBM3BCLEdBQUEsWUFBQSxDQUVBcVosSUFBQSxXQUNBLE9BQUExQixJQUFBcE4sU0FBQStnQixNQUdBdEIsSUFBQSxTQUFBaGxCLEdBQ0EyUyxHQUFBL0IsR0FBQTVRLE9Bb0JBaEYsR0EycUJBQSxJQXpxQkFJLFVBQUFtckIsVUFBQSxTQUFBQyxHQUNBLElBQUF0aUIsRUFBQWpKLEtBR0F3ckIsRUFBQXhyQixLQUFBeXJCLFNBQUFGLEdBRUFDLEdBQ0FBLEVBQUFsaUIsUUFBQSxTQUFBMmdCLEdBQUEsT0FBQUEsRUFBQXpwQixLQUFBeUksTUFJQWxKLEdBQUFJLFVBQUF1ckIsZUFBQSxXQUVBMXJCLEtBQUFpcEIsYUFJQWpwQixLQUFBMnJCLE1BQUEsR0FDQTNyQixLQUFBNHBCLFdBQUEsR0FDQTVwQixLQUFBNHJCLFFBQUEsQ0FBQXJMLE1BQUEsR0FBQUMsT0FBQSxJQUVBeGdCLEtBQUE2ckIsYUFFQTdyQixLQUFBc3JCLFVBQUEsaUJBQ0F0ckIsS0FBQWlwQixZQUFBLEVBRUFqcEIsS0FBQThyQixjQUNBOXJCLEtBQUErckIsZ0JBRUEvckIsS0FBQXNyQixVQUFBLGFBQ0F0ckIsS0FBQWtwQixnQkFHQW5wQixHQUFBSSxVQUFBNnJCLGtCQUFBLFdBRUFoc0IsS0FBQWlwQixhQUlBanBCLEtBQUFzckIsVUFBQSxvQkFFQXRyQixLQUFBaXNCLFlBQ0Fqc0IsS0FBQWlzQixVQUFBdEQsYUFDQTNvQixLQUFBaXNCLFVBQUEsTUFHQWpzQixLQUFBa3NCLGdCQUNBbHNCLEtBQUFzckIsVUFBQSxnQkFFQXRyQixLQUFBaXBCLFlBQUEsSUFJQWxwQixHQUFBSSxVQUFBK29CLFlBQUEsU0FBQWxjLEdBQ0EsSUFBQS9ELEVBQUFqSixVQUNBLElBQUFnTixJQUFBQSxFQUFBLFVBR0EsSUFBQStDLEVBQUEvQyxFQUFBK0MsTUFBQS9DLEVBRUF4SyxFQUFBLENBQUEsU0FBQSxVQUFBdU4sSUFDQS9QLEtBQUFtc0IsZUFHQSxJQUFBQyxFQUFBcHNCLEtBQUF5ckIsU0FBQS9HLE9BQ0EzZCxFQUFBL0csS0FBQTRyQixRQUNBckwsRUFBQXhaLEVBQUF3WixNQUNBQyxFQUFBelosRUFBQXlaLE9BRUE0TCxHQUlBQSxFQUFBOWlCLFFBQUEsU0FBQXZDLEVBQUE1RSxHQUNBLElBQUFzZSxFQUFBMVosRUFBQTBaLEtBQ0FHLEVBQUE3WixFQUFBNlosTUFDQXVELEVBQUFwZCxFQUFBb2QsT0FHQSxXQUFBcFUsSUFBQXZOLEVBQUEyaEIsRUFBQXBVLEtBSUEwUSxJQUFBamUsRUFBQThkLEdBQUFDLE1BQUFBLEVBQUFwZSxNQUNBb2UsRUFBQXBlLEdBQUFtZSxHQUFBRyxLQUFBLFdBRUEsSUFBQXpQLEVBQUEvSCxFQUFBZ2dCLFlBQUF4SSxFQUFBamdCLEtBQUF5SSxFQUFBQSxFQUFBMGlCLE1BQUE1YixJQUVBLElBQUFpQixHQUFBNFAsRUFDQU4sR0FBQU8sTUFBQUwsRUFBQXJlLElBQ0FrQixFQUFBMk4sSUFDQTNLLEVBQUE0QyxFQUFBMGlCLE1BQUEzYSxNQUtBNFAsSUFBQXBlLEVBQUE4ZCxHQUFBRSxPQUFBQSxFQUFBcmUsTUFDQXFlLEVBQUFyZSxHQUFBbWUsR0FBQU0sTUFBQSxXQUFBLE9BQUEzWCxFQUFBZ2dCLFlBQUFySSxFQUFBcGdCLEtBQUF5SSxFQUFBQSxFQUFBMGlCLE1BQUE1YixVQU9BaFEsR0FBQUksVUFBQWdzQixhQUFBLFdBQ0EsSUFBQWxqQixFQUFBakosS0FJQTRyQixFQURBNXJCLEtBQ0E0ckIsUUFFQSxJQUFBQSxFQUFBUyxPQUFBLENBSUEsSUFBQUMsR0FBQWpzQixFQUFBdXJCLEVBQUEsVUFFQUEsRUFBQVMsT0FBQS9MLEdBQUFHLEtBQUEsV0FFQSxHQUFBeFgsRUFBQWdnQixXQUFBLENBSUEsSUFDQTNGLEVBREFyYSxFQUNBd2lCLFNBQUFuSSxTQUNBc0csRUFGQTNnQixFQUVBMmdCLFdBRUEsSUFBQSxJQUFBcnBCLEtBQUEraUIsRUFBQSxDQUVBLElBQUFpSixFQUFBbHNCLEVBQUF1cEIsRUFBQXJwQixHQUNBaU0sRUFBQW9kLEVBQUFycEIsVUFFQXFwQixFQUFBcnBCLEdBRUEsSUFBQXlHLEVBQUFzYyxFQUFBL2lCLEdBQ0Fpc0IsRUFBQXhsQixFQUFBd2xCLE1BQ0FDLEVBQUF6bEIsRUFBQXlsQixVQUNBRCxJQUNBRixHQUFBRyxHQUNBRixJQUFBMW1CLEVBQUEyRyxFQUFBdkQsRUFBQTFJLE1BRUFpc0IsRUFBQWhzQixLQUFBeUksRUFBQUEsRUFBQTFJLEdBQUFpTSxHQUtBb2YsRUFBQVMsT0FBQSxVQVVBdEQsR0FBQSxHQUZBaHBCLEdBZ2hCQUEsSUE1Z0JBSSxVQUFBMG9CLE1BQUEsU0FBQWxYLElBRUFBLEVBQUFBLEdBQUEsSUFDQTlILEtBaVJBLFNBQUE5QyxFQUFBQyxHQUNBLElBQUE2QyxFQUFBOUMsRUFBQThDLEtBRUF0RCxHQURBUSxFQUFBMlgsR0FDQTFYLEVBQUFULE1BQ0F1VSxFQUFBOVQsRUFBQThULFdBQUEsSUFBQUEsSUFBQUEsRUFBQSxJQWVBLEdBYkFqUixFQUFBNUcsRUFBQTRHLEdBQ0F2RixFQUFBaUMsUUFTQTJNLEVBUkFySixFQUFBckksTUFBQSxFQUFBK0UsRUFBQWpGLFFBQUE2UCxPQUFBLFNBQUF0SCxFQUFBNUYsRUFBQXNSLEdBTUEsT0FMQWxTLEVBQUFZLEdBQ0FvQyxFQUFBd0QsRUFBQTVGLEdBRUE0RixFQUFBdEQsRUFBQWdQLElBQUF0UixFQUVBNEYsR0FDQSxJQUVBQSxFQUdBLElBQUEsSUFBQXRKLEtBQUFzSixFQUNBckYsRUFBQXFGLEVBQUF0SixXQUNBc0osRUFBQXRKLEdBRUFzSixFQUFBdEosR0FBQXVhLEVBQUF2YSxHQUFBK29CLEdBQUF4TyxFQUFBdmEsR0FBQXNKLEVBQUF0SixJQUFBc0osRUFBQXRKLEdBS0EsT0FBQXNKLEVBOVNBNmlCLENBQUEvYSxFQUFBM1IsS0FBQW1yQixZQUFBeFosU0FFQTNSLEtBQUF5ckIsU0FBQWpJLEdBQUF4akIsS0FBQW1yQixZQUFBeFosUUFBQUEsRUFBQTNSLE1BQ0FBLEtBQUE4cEIsSUFBQSxLQUNBOXBCLEtBQUE2cEIsT0FBQSxHQUVBN3BCLEtBQUEyc0IsS0FBQTVELEtBQ0Evb0IsS0FBQTRzQixZQUNBNXNCLEtBQUE2c0IsZUFDQTdzQixLQUFBOHNCLGlCQUNBOXNCLEtBQUFzckIsVUFBQSxXQUVBM1osRUFBQStNLElBQ0ExZSxLQUFBK3NCLE9BQUFwYixFQUFBK00sS0FJQTNlLEdBQUFJLFVBQUF5c0IsVUFBQSxXQUVBLElBQ0EvaUIsRUFEQTdKLEtBQUF5ckIsU0FDQTVoQixLQUVBLElBQUEsSUFBQXRKLFVBRkEsSUFBQXNKLElBQUFBLEVBQUEsSUFFQUEsRUFDQTdKLEtBQUE2cEIsT0FBQXRwQixHQUFBUCxLQUFBTyxHQUFBc0osRUFBQXRKLElBSUFSLEdBQUFJLFVBQUEwc0IsYUFBQSxXQUVBLElBQ0FsSSxFQURBM2tCLEtBQUF5ckIsU0FDQTlHLFFBRUEsR0FBQUEsRUFDQSxJQUFBLElBQUFwa0IsS0FBQW9rQixFQUNBM2tCLEtBQUFPLEdBQUFva0IsRUFBQXBrQixHQUFBNHBCLEtBQUFucUIsT0FLQUQsR0FBQUksVUFBQTJzQixlQUFBLFdBRUEsSUFDQXhKLEVBREF0akIsS0FBQXlyQixTQUNBbkksU0FJQSxHQUZBdGpCLEtBQUE0cEIsV0FBQSxHQUVBdEcsRUFDQSxJQUFBLElBQUEvaUIsS0FBQStpQixFQUNBa0csR0FBQXhwQixLQUFBTyxFQUFBK2lCLEVBQUEvaUIsS0FLQVIsR0FBQUksVUFBQTByQixXQUFBLFNBQUEvUSxHQUVBLElBQUF2YSxFQUlBLElBQUFBLEtBRkF1YSxFQUFBQSxHQUFBcU8sR0FBQW5wQixLQUFBeXJCLFNBQUF6ckIsS0FBQWd0QixPQUdBeG9CLEVBQUFzVyxFQUFBdmEsTUFDQVAsS0FBQTZwQixPQUFBdHBCLEdBQUF1YSxFQUFBdmEsSUFJQSxJQUFBMHNCLEVBQUEsQ0FBQWp0QixLQUFBeXJCLFNBQUFuSSxTQUFBdGpCLEtBQUF5ckIsU0FBQTlHLFNBQ0EsSUFBQXBrQixLQUFBUCxLQUFBNnBCLE9BQ0F0cEIsS0FBQXVhLEdBQUFzUCxHQUFBNkMsRUFBQTFzQixLQUNBUCxLQUFBTyxHQUFBUCxLQUFBNnBCLE9BQUF0cEIsS0FLQVIsR0FBQUksVUFBQTJyQixZQUFBLFdBQ0EsSUFBQTdpQixFQUFBakosS0FHQUEsS0FBQWtxQixRQUFBLEdBRUEsSUFDQS9GLEVBREFua0IsS0FBQXlyQixTQUNBdEgsT0FFQUEsR0FFQUEsRUFBQTdhLFFBQUEsU0FBQTRILEdBRUEsR0FBQTdRLEVBQUE2USxFQUFBLFdBS0E4WSxHQUFBL2dCLEVBQUFpSSxRQUpBLElBQUEsSUFBQTNRLEtBQUEyUSxFQUNBOFksR0FBQS9nQixFQUFBaUksRUFBQTNRLEdBQUFBLE1BVUFSLEdBQUFJLFVBQUErckIsY0FBQSxXQUNBbHNCLEtBQUFrcUIsUUFBQTVnQixRQUFBLFNBQUFnTSxHQUFBLE9BQUFBLGFBQ0F0VixLQUFBa3FCLFNBR0FucUIsR0FBQUksVUFBQTRyQixjQUFBLFdBQ0EsSUFBQTlpQixFQUFBakosS0FHQStHLEVBQUEvRyxLQUFBeXJCLFNBQ0ExaEIsRUFBQWhELEVBQUFnRCxNQUNBK1EsRUFBQS9ULEVBQUErVCxNQUNBNEQsRUFBQTNYLEVBQUEyWCxHQUNBLElBQUExZSxLQUFBaXNCLFdBQUFuUixJQUFBLElBQUEvUSxFQUFBLENBSUFBLEVBQUE5RyxFQUFBOEcsR0FBQUEsRUFBQTdKLE9BQUFxRSxLQUFBdVcsR0FFQTlhLEtBQUFpc0IsVUFBQSxJQUFBaUIsaUJBQUEsU0FBQTlFLEdBQ0EsSUFBQXZlLEVBQUFzZixHQUFBbGdCLEVBQUF3aUIsU0FBQXhpQixFQUFBK2pCLE9BQ0E1RSxFQUFBMWUsS0FBQSxTQUFBM0MsR0FDQSxJQUVBRixFQUZBRSxFQUFBb21CLGNBRUF0c0IsUUFBQSxRQUFBLElBQ0EsT0FBQWdHLElBQUFvQyxFQUFBK2pCLE1BQUFqakIsRUFBQSxDQUFBL0ksRUFBQTZGLEtBQUE2QyxLQUFBLFNBQUE3QyxHQUFBLE9BQUFyQyxFQUFBcUYsRUFBQWhELEtBQUFnRCxFQUFBaEQsS0FBQW9DLEVBQUE0Z0IsT0FBQWhqQixRQUdBb0MsRUFBQW1rQixXQUtBLElBQUFsb0IsRUFBQTZFLEVBQUE5RSxJQUFBLFNBQUExRSxHQUFBLE9BQUFJLEVBQUFKLEtBQUE2UCxPQUFBcFEsS0FBQWd0QixPQUVBaHRCLEtBQUFpc0IsVUFBQXZELFFBQUFoSyxFQUFBLENBQ0EyTyxZQUFBLEVBQ0FDLGdCQUFBcG9CLEVBQUFrTCxPQUFBbEwsRUFBQUQsSUFBQSxTQUFBMUUsR0FBQSxNQUFBLFFBQUFBLFNBaVJBdW9CLElBRkEvb0IsR0FvSEFBLElBbEhBOEosS0FFQW1mLEdBQUEsR0FFQWpwQixHQUFBMHBCLFVBQUEsU0FBQXJnQixFQUFBdUksR0FFQSxJQUFBaEYsRUFBQWhNLEVBQUF5SSxHQUlBLEdBRkFBLEVBQUFwSSxFQUFBMkwsSUFFQWdGLEVBTUEsT0FKQXRPLEVBQUEybEIsR0FBQTVmLE1BQ0E0ZixHQUFBNWYsR0FBQXJKLEdBQUFpckIsT0FBQWhDLEdBQUE1ZixLQUdBNGYsR0FBQTVmLEdBSUFySixHQUFBcUosR0FBQSxTQUFBckUsRUFBQThFLEdBRUEsSUFEQSxJQUFBMUgsRUFBQVksVUFBQXpCLE9BQUFpc0IsRUFBQWpyQixNQUFBSCxHQUNBQSxLQUFBb3JCLEVBQUFwckIsR0FBQVksVUFBQVosR0FHQSxJQUFBc25CLEVBQUExcEIsR0FBQTBwQixVQUFBcmdCLEdBRUEsT0FBQXFnQixFQUFBOVgsUUFBQTZiLFdBQ0EsSUFBQS9ELEVBQUEsQ0FBQTVmLEtBQUF4RyxFQUFBMEIsR0FBQUEsRUFBQSxHQUFBcUwsT0FBQW1kLEtBQ0F4b0IsRUFBQW1ULEdBQUFuVCxHQUFBRSxJQUFBd2MsR0FBQSxHQUFBQSxFQUFBMWMsR0FFQSxTQUFBMGMsRUFBQTFjLEdBRUEsSUFBQTBvQixFQUFBMXRCLEdBQUEydEIsYUFBQTNvQixFQUFBcUUsR0FFQSxHQUFBcWtCLEVBQUEsQ0FDQSxJQUFBNWpCLEVBQ0EsT0FBQTRqQixFQUVBQSxFQUFBRSxXQUlBLE9BQUEsSUFBQWxFLEVBQUEsQ0FBQS9LLEdBQUEzWixFQUFBOEUsS0FBQUEsTUFNQSxJQUFBK2pCLEVBQUF2cUIsRUFBQXNPLEdBQUF0TCxFQUFBLEdBQUFzTCxHQUFBQSxFQUFBQSxRQVlBLE9BVkFpYyxFQUFBeGtCLEtBQUFBLEVBRUF3a0IsRUFBQUMsU0FDQUQsRUFBQUMsUUFBQTl0QixHQUFBNnRCLEVBQUF4a0IsR0FHQXJKLEdBQUErdEIsZUFBQUYsRUFBQUosWUFDQWxOLEdBQUFHLEtBQUEsV0FBQSxPQUFBMWdCLEdBQUFxSixHQUFBLE9BQUF1RCxFQUFBLGNBQUFBLEVBQUEsT0FHQXFjLEdBQUE1ZixHQUFBL0YsRUFBQXNPLEdBQUFpYyxFQUFBamMsR0FHQTVSLEdBQUFndUIsY0FBQSxTQUFBaHBCLEdBQUEsT0FBQUEsR0FBQUEsRUFBQStqQixLQUFBLElBQ0Evb0IsR0FBQTJ0QixhQUFBLFNBQUEzb0IsRUFBQXFFLEdBQUEsT0FBQXJKLEdBQUFndUIsY0FBQWhwQixHQUFBcUUsSUFFQXJKLEdBQUFpdUIsUUFBQSxTQUFBblcsR0FFQSxHQUFBQSxFQUFBaVIsSUFDQSxJQUFBLElBQUExZixLQUFBeU8sRUFBQWlSLElBQ0FqUixFQUFBaVIsSUFBQTFmLEdBQUFzaUIsaUJBSUEsSUFBQSxJQUFBdnBCLEVBQUEsRUFBQUEsRUFBQTBWLEVBQUF3VixXQUFBL3JCLE9BQUFhLElBQUEsQ0FFQSxJQUFBOHJCLEVBQUFyRixHQUFBL1EsRUFBQXdWLFdBQUFsckIsR0FBQWlILE1BRUE2a0IsR0FBQUEsS0FBQWpGLElBQ0FqcEIsR0FBQWt1QixHQUFBcFcsS0FPQTlYLEdBQUE0b0IsV0FBQSxTQUFBOVEsR0FDQSxJQUFBLElBQUF6TyxLQUFBeU8sRUFBQWlSLElBQ0FqUixFQUFBaVIsSUFBQTFmLEdBQUE0aUIscUJBL0xBLFNBQUFqc0IsR0FFQSxJQUFBK29CLEVBQUEvb0IsRUFBQThKLEtBRUE5SixFQUFBSSxVQUFBK3RCLFFBQUEsU0FBQXpFLEVBQUExa0IsRUFBQThFLEdBQ0EsT0FBQTlKLEVBQUEwcEIsR0FBQTFrQixFQUFBOEUsSUFHQTlKLEVBQUFJLFVBQUE0c0IsT0FBQSxTQUFBck8sR0FFQSxJQUNBdFYsRUFEQXBKLEtBQUF5ckIsU0FDQXJpQixLQUVBc1YsRUFBQW9LLEtBQ0FwSyxFQUFBb0ssR0FBQSxJQUdBcEssRUFBQW9LLEdBQUExZixNQUlBc1YsRUFBQW9LLEdBQUExZixHQUFBcEosTUFFQThwQixJQUFBOXBCLEtBQUF5ckIsU0FBQS9NLEdBQUExZSxLQUFBeXJCLFNBQUEvTSxJQUFBQSxFQUVBcFAsR0FBQW9QLEVBQUFwVSxXQUNBdEssS0FBQTByQixtQkFJQTNyQixFQUFBSSxVQUFBaXRCLE9BQUEsV0FDQXB0QixLQUFBZ3NCLG9CQUNBaHNCLEtBQUEwckIsa0JBR0EzckIsRUFBQUksVUFBQXd0QixTQUFBLFNBQUFRLFFBQ0EsSUFBQUEsSUFBQUEsR0FBQSxHQUdBLElBQUFwbkIsRUFBQS9HLEtBQUF5ckIsU0FDQS9NLEVBQUEzWCxFQUFBMlgsR0FDQXRWLEVBQUFyQyxFQUFBcUMsS0FFQXNWLEdBQ0ExZSxLQUFBZ3NCLG9CQUdBaHNCLEtBQUFzckIsVUFBQSxXQUVBNU0sR0FBQUEsRUFBQW9LLFlBSUFwSyxFQUFBb0ssR0FBQTFmLEdBRUE5RSxFQUFBb2EsRUFBQW9LLFlBQ0FwSyxFQUFBb0ssR0FHQXFGLEdBQ0FsaEIsR0FBQWpOLEtBQUE4cEIsT0FJQS9wQixFQUFBSSxVQUFBaXVCLE1BQUEsU0FBQXBoQixHQUNBaE4sS0FBQWtwQixZQUFBbGMsSUFHQWpOLEVBQUFJLFVBQUFrdUIsUUFBQSxTQUFBdHBCLEVBQUFpSSxRQUNBLElBQUFqSSxJQUFBQSxFQUFBL0UsS0FBQThwQixLQUVBL3BCLEVBQUEya0IsT0FBQTNmLEVBQUFpSSxJQUdBak4sRUFBQUksVUFBQW11QixjQUFBdnVCLEVBQUEydEIsYUFFQSxJQUFBYSxFQUFBLEdBQ0FydUIsT0FBQXN1QixpQkFBQXp1QixFQUFBSSxVQUFBLENBRUFzdUIsV0FBQXZ1QixPQUFBd3VCLHlCQUFBM3VCLEVBQUEsYUFFQWl0QixNQUFBLENBRUE1VCxJQUFBLFdBQ0EsSUFDQWhRLEVBREFwSixLQUFBeXJCLFNBQ0FyaUIsS0FNQSxPQUpBbWxCLEVBQUFubEIsS0FDQW1sQixFQUFBbmxCLEdBQUFySixFQUFBMnFCLE9BQUEvcEIsRUFBQXlJLElBR0FtbEIsRUFBQW5sQixPQThIQXVsQixDQUFBNXVCLElBdUxBLElBQUE2dUIsR0FBQSxDQUVBdEssVUFBQSxXQUNBN0wsR0FBQXpZLEtBQUE4cEIsSUFBQTlwQixLQUFBZ3RCLFFBQUE3VSxHQUFBblksS0FBQThwQixJQUFBOXBCLEtBQUFndEIsU0FLQTZCLEdBQUEsQ0FFQS9ULE1BQUEsQ0FDQXZDLElBQUFwVCxRQUNBc1gsVUFBQSxPQUNBZCxTQUFBL1csT0FDQThYLE9BQUFoYixPQUNBZ2EsV0FBQWhhLFFBR0FtSSxLQUFBLENBQ0EwTyxLQUFBLEVBQ0FrRSxVQUFBLEVBQUEsR0FDQWQsU0FBQSxJQUNBZSxRQUFBLEVBQ0FoQixXQUFBLFNBRUFvVCxVQUFBLENBQ0FDLFNBQUEsR0FDQTlSLE9BQUEsR0FDQStSLFdBQUEsR0FDQUMsY0FBQSxHQUNBQyxVQUFBLEdBQ0FDLGFBQUEsSUFHQUMsVUFBQSxDQUNBTCxTQUFBLFNBQ0E5UixPQUFBLEVBQ0ErUixXQUFBLEVBQ0FDLGNBQUEsRUFDQUMsVUFBQSxFQUNBQyxhQUFBLElBS0E3TCxTQUFBLENBRUErTCxhQUFBLFNBQUF0b0IsR0FHQSxRQUZBQSxFQUFBMFYsVUFFQSxJQUdBNlMsY0FBQSxTQUFBdm9CLEdBQ0EsSUFBQTBWLEVBQUExVixFQUFBMFYsVUFFQSxPQUFBemMsS0FBQXF2QixlQUFBLElBQUE1UyxFQUFBLEtBS0FrSSxRQUFBLENBRUE0SyxjQUFBLFNBQUF6ZixFQUFBMGYsRUFBQWhULEdBQ0EsSUFBQXZULEVBQUFqSixLQUVBLE9BQUF3UyxHQUFBYSxJQUFBck8sRUFBQThLLEdBQUE3SyxJQUFBLFNBQUF5WixHQUFBLE9BQUEsSUFBQWxNLEdBQUEsU0FBQUMsR0FBQSxPQUFBeEosRUFBQXdtQixlQUFBL1EsRUFBQThRLEVBQUFoVCxHQUFBL0ksS0FBQWhCLEVBQUE1SyxVQUtBNm5CLFVBQUEsU0FBQWhSLEdBQ0EsSUFBQWhULEVBQUExRyxFQUFBMFosR0FBQTFlLEtBQUE4cEIsS0FDQSxPQUFBOXBCLEtBQUF1WSxJQUNBRSxHQUFBL00sRUFBQTFMLEtBQUF1WSxJQUFBOVMsTUFBQSxLQUFBLEtBQ0FnRSxHQUFBaUMsRUFBQSxXQUdBaWtCLFdBQUEsU0FBQWpSLElBQ0EsSUFBQTFlLEtBQUF1WSxLQUNBcFAsR0FBQXVWLEVBQUEsZUFBQTFlLEtBQUEwdkIsVUFBQWhSLEtBSUErUSxlQUFBLFNBQUEvUSxFQUFBOFEsRUFBQWhULEdBQ0EsSUFBQXZULEVBQUFqSixLQVdBLEdBUkF3dkIsRUFBQXhyQixFQUFBd3JCLEdBQ0FBLEVBQ0EzUyxHQUFBUCxXQUFBb0MsR0FDQWpHLEdBQUFpRyxFQUFBLHNCQUNBeEMsR0FBQUksV0FBQW9DLEdBQ0EsUUFBQUEsRUFBQWhFLE1BQUF1QyxRQUNBamQsS0FBQTB2QixVQUFBaFIsSUFFQXpOLEdBQUF5TixFQUFBLFVBQUE4USxFQUFBLE9BQUEsUUFBQSxDQUFBeHZCLE9BQ0EsT0FBQXdTLEdBQUFFLFNBR0EsSUF1RkFrZCxFQXZGQXJkLEdBQ0FyUCxFQUFBc1osR0FDQUEsR0FDQSxJQUFBQSxHQUFBeGMsS0FBQXF2QixhQUVBcnZCLEtBQUFzdkIsY0FDQU8sR0FBQTd2QixPQWlGQTR2QixFQWhGQTV2QixLQWlGQSxTQUFBMGUsRUFBQThRLEdBRUEzUyxHQUFBUixPQUFBcUMsR0FFQSxJQUFBakMsRUFBQW1ULEVBQUFuVCxVQUNBZCxFQUFBaVUsRUFBQWpVLFNBQ0FtVSxFQUFBRixFQUFBRSxRQUVBLE9BQUFOLEdBQ0FNLEVBQUFwUixHQUFBLEdBQ0E3QixHQUFBQyxHQUFBNEIsRUFBQWpDLEVBQUEsR0FBQWQsRUFBQWlVLEVBQUFsVCxTQUdBRyxHQUFBRixJQUFBK0IsRUFBQWpDLEVBQUEsSUFBQUEsRUFBQSxHQUFBZCxFQUFBaVUsRUFBQWxULFFBQUFqSixLQUFBLFdBQUEsT0FBQXFjLEVBQUFwUixHQUFBLE9BakdBMWUsS0FBQTh2QixTQUlBcFIsRUFBQThRLEdBRUF2ZSxHQUFBeU4sRUFBQThRLEVBQUEsT0FBQSxPQUFBLENBQUF4dkIsT0FFQSxTQUFBK3ZCLElBQ0E5ZSxHQUFBeU4sRUFBQThRLEVBQUEsUUFBQSxTQUFBLENBQUF2bUIsSUFDQUEsRUFBQW9sQixRQUFBM1AsR0FHQSxPQUFBbk0sRUFBQUEsRUFBQWtCLEtBQUFzYyxHQUFBdmQsR0FBQUMsUUFBQXNkLE1BR0FELFFBQUEsU0FBQXBSLEVBQUFzUixHQVFBLElBQUFDLEVBTkF2UixJQUlBc1IsRUFBQTdxQixRQUFBNnFCLEdBR0Fod0IsS0FBQXVZLEtBQ0EwWCxFQUFBenRCLEVBQUF4QyxLQUFBdVksSUFBQSxNQUFBeVgsSUFBQXZYLEdBQUFpRyxFQUFBMWUsS0FBQXVZLE9BQ0FJLEdBQUErRixFQUFBMWUsS0FBQXVZLElBQUEvVixFQUFBeEMsS0FBQXVZLElBQUEsVUFBQXJGLEVBQUE4YyxJQUVBQyxFQUFBRCxJQUFBdm1CLEdBQUFpVixFQUFBLFlBQ0F2VixHQUFBdVYsRUFBQSxTQUFBc1IsRUFBQSxLQUFBLElBR0E5WCxHQUFBLGNBQUF3RyxHQUFBaFYsS0FBQSxTQUFBZ1YsR0FBQSxPQUFBMVAsR0FBQTBQLEdBQUFBLEVBQUF3UixVQUFBLEVBQUF4UixFQUFBeVIsU0FFQW53QixLQUFBMnZCLFdBQUFqUixHQUVBdVIsSUFDQWhmLEdBQUF5TixFQUFBLFVBQUEsQ0FBQTFlLE9BQ0FBLEtBQUFxdUIsUUFBQTNQLFFBUUEsU0FBQW1SLEdBQUE5b0IsR0FDQSxJQUFBMm9CLEVBQUEzb0IsRUFBQTJvQixVQUNBL1QsRUFBQTVVLEVBQUE0VSxTQUNBbVQsRUFBQS9uQixFQUFBK25CLFVBQ0FNLEVBQUFyb0IsRUFBQXFvQixVQUNBMVQsRUFBQTNVLEVBQUEyVSxXQUNBb1UsRUFBQS9vQixFQUFBK29CLFFBRUEsT0FBQSxTQUFBcFIsRUFBQThRLEdBRUEsSUFBQWxULEVBQUFKLEdBQUFJLFdBQUFvQyxHQUNBMFIsRUFBQTFSLEVBQUEzSSxjQUFBbFIsRUFBQWdKLEdBQUE2USxFQUFBNUcsa0JBQUEsY0FBQWpULEVBQUFnSixHQUFBNlEsRUFBQTJSLGlCQUFBLGlCQUFBLEVBQ0FDLEVBQUF0aEIsR0FBQTBQLEdBQUF6QixHQUFBeUIsSUFBQXBDLEVBQUEsRUFBQThULEdBQUEsRUFFQWxVLEdBQUFHLE9BQUFxQyxHQUVBZ1IsRUFBQWhSLElBQ0FvUixFQUFBcFIsR0FBQSxHQUdBekIsR0FBQXlCLEVBQUEsSUFHQTRCLEdBQUFTLFFBRUEsSUFBQXdQLEVBQUF0VCxHQUFBeUIsSUFBQXBDLEVBQUEsRUFBQThULEdBR0EsT0FGQW5ULEdBQUF5QixFQUFBNFIsSUFFQWQsRUFDQXRULEdBQUFDLE1BQUF1QyxFQUFBclksRUFBQSxHQUFBeW9CLEVBQUEsQ0FBQUMsU0FBQSxTQUFBOVIsT0FBQXNULElBQUEzb0IsS0FBQWtCLE1BQUE2UyxHQUFBLEVBQUEyVSxFQUFBQyxJQUFBN1UsR0FDQVEsR0FBQUMsTUFBQXVDLEVBQUEwUSxFQUFBeG5CLEtBQUFrQixNQUFBNlMsR0FBQTJVLEVBQUFDLElBQUE3VSxHQUFBakksS0FBQSxXQUFBLE9BQUFxYyxFQUFBcFIsR0FBQSxNQUNBakwsS0FBQSxXQUFBLE9BQUE1RixHQUFBNlEsRUFBQW9RLE1BdUJBLElBQUEwQixHQUFBLENBRUE3TSxPQUFBLENBQUFpTCxHQUFBQyxJQUVBL1QsTUFBQSxDQUNBaEwsUUFBQXBPLE9BQ0ErdUIsT0FBQSxLQUNBQyxZQUFBdnJCLFFBQ0F3ckIsU0FBQXhyQixRQUNBOFQsT0FBQXZYLE9BQ0FrdkIsUUFBQWx2QixPQUNBZ2EsV0FBQWhhLE9BQ0FpZCxPQUFBL1osUUFHQWlGLEtBQUEsQ0FDQWlHLFFBQUEsTUFDQTJnQixRQUFBLEVBQ0FoVSxVQUFBLEVBQUEsR0FDQWlVLGFBQUEsRUFDQUMsVUFBQSxFQUNBRSxRQUFBLFVBQ0E1WCxPQUFBLHdCQUNBMlgsUUFBQSwwQkFDQWxWLFdBQUEsT0FDQWlELE9BQUEsR0FHQTJFLFNBQUEsQ0FFQXdOLE1BQUEsQ0FFQTFYLElBQUEsU0FBQXJTLEVBQUEraUIsR0FHQSxPQUFBNVIsR0FGQW5SLEVBQUErSSxRQUVBZ2EsSUFHQTBDLE1BQUEsU0FBQXNFLEVBQUF0a0IsR0FDQSxJQUFBdkQsRUFBQWpKLEtBS0EsR0FGQTh3QixFQUFBeG5CLFFBQUEsU0FBQW9WLEdBQUEsT0FBQXFTLEdBQUFwYixHQUFBMU0sRUFBQTJuQixRQUFBbFMsSUFBQWpHLEdBQUFpRyxFQUFBelYsRUFBQTRuQixhQUVBcmtCLElBQUFpTSxHQUFBcVksRUFBQTl3QixLQUFBNndCLFNBQUEsQ0FJQSxJQUFBSixHQUFBLElBQUF6d0IsS0FBQXl3QixRQUFBSyxFQUFBbHNCLE9BQUE1RSxLQUFBeXdCLFdBQ0F6d0IsS0FBQTB3QixhQUFBSSxFQUFBLEdBRUFMLEdBQ0F6d0IsS0FBQWlaLE9BQUF3WCxHQUFBLEtBS0FoRSxXQUFBLElBTUF0SSxPQUFBLENBRUEsQ0FFQS9hLEtBQUEsUUFFQW9ILFNBQUEsV0FDQSxPQUFBeFEsS0FBQSxRQUFBLElBQUFBLEtBQUE2cEIsT0FBQSxRQUdBSSxRQUFBLFNBQUFqZCxHQUNBQSxFQUFBZ2tCLGlCQUNBaHhCLEtBQUFpWixPQUFBMUQsR0FBQTJDLEdBQUFsWSxLQUFBLFFBQUEsSUFBQUEsS0FBQTZwQixPQUFBLE9BQUE3cEIsS0FBQThwQixLQUFBOWMsRUFBQXNELGFBT0FxVSxRQUFBLENBRUExTCxPQUFBLFNBQUFxSSxFQUFBOUUsR0FDQSxJQUFBdlQsRUFBQWpKLEtBR0E4d0IsRUFBQSxDQUFBOXdCLEtBQUE4d0IsTUFBQXRiLEdBQUE4TCxFQUFBdGhCLEtBQUE4d0IsU0FDQUcsRUFBQS9yQixHQUFBbEYsS0FBQTh3QixNQUFBLElBQUE5d0IsS0FBQSxTQUVBQSxLQUFBMndCLFVBQUFudUIsRUFBQXl1QixFQUFBSCxFQUFBLE1BQ0FBLEVBQUFBLEVBQUExZ0IsT0FBQTZnQixLQUdBanhCLEtBQUEwd0IsYUFBQXhyQixHQUFBNHJCLEVBQUEsU0FBQTl3QixLQUFBLFFBQUEsS0FBQXNCLFNBSUF3dkIsRUFBQXhuQixRQUFBLFNBQUFvVixHQUFBLE9BQUF6VixFQUFBc21CLGNBQUE3USxHQUFBakcsR0FBQWlHLEVBQUF6VixFQUFBNG5CLFNBQUEsU0FBQW5TLEVBQUE4USxHQUVBN1csR0FBQStGLEVBQUF6VixFQUFBNG5CLFFBQUFyQixHQUVBLElBQUFvQixFQUFBamIsSUFBQStJLEVBQUF3UyxTQUFBLE9BQUEsSUFBQWpvQixFQUFBLFFBQUF5VixHQUVBLElBQUEsSUFBQWxDLEdBQUF2VCxFQUFBcW1CLGNBVUEsT0FMQTVRLEVBQUF3UyxXQUNBeFMsRUFBQXdTLFNBQUExYSxHQUFBb2EsRUFBQSxRQUFBcEIsRUFBQSxVQUFBLElBQUEsTUFHQXVCLEdBQUFILEdBQUEsR0FDQWYsR0FBQTVtQixFQUFBNG1CLENBQUFuUixFQUFBd1MsU0FBQTFCLEdBQUEvYixLQUFBLFdBS0EsR0FKQXNkLEdBQUFILEdBQUFwQixVQUNBOVEsRUFBQXdTLFNBQ0FyYSxHQUFBK1osR0FFQXBCLEVBQUEsQ0FDQSxJQUFBdlcsRUFBQXRELEdBQUExTSxFQUFBNGdCLE9BQUE1USxPQUFBeUYsR0FDQXdHLEdBQUFqTSxJQUNBd00sR0FBQXhNLEVBQUEsQ0FBQTBGLE9BQUExVixFQUFBMFYsWUFqQkFvUyxHQUFBSCxHQUFBcEIsVUE0QkEsU0FBQXVCLEdBQUFyUyxFQUFBcVMsR0FDQTVuQixHQUFBdVYsRUFBQSxTQUFBcVMsRUFBQSxHQUFBLE1BR0EsSUFBQUksR0FBQSxDQUVBeE4sT0FBQSxDQUFBaUwsR0FBQUMsSUFFQXRvQixLQUFBLFlBRUF1VSxNQUFBLENBQ0FzVyxNQUFBMXZCLFFBR0FtSSxLQUFBLENBQ0E0UyxVQUFBLEVBQUEsR0FDQTRVLFNBQUEsa0JBQ0ExVixTQUFBLElBQ0F5VCxVQUFBL29CLEVBQUEsQ0FBQTBULFFBQUEsR0FBQThVLEdBQUFobEIsS0FBQXVsQixZQUdBakwsT0FBQSxDQUVBLENBRUEvYSxLQUFBLFFBRUFvSCxTQUFBLFdBQ0EsT0FBQXhRLEtBQUFxeEIsVUFHQXBILFFBQUEsU0FBQWpkLEdBQ0FBLEVBQUFna0IsaUJBQ0FoeEIsS0FBQW94QixXQU9Bek0sUUFBQSxDQUVBeU0sTUFBQSxXQUNBLElBQUFub0IsRUFBQWpKLEtBRUFBLEtBQUF1dkIsY0FBQXZ2QixLQUFBOHBCLEtBQUFyVyxLQUFBLFdBQUEsT0FBQXhLLEVBQUEwa0IsVUFBQSxRQU9BMkQsR0FBQSxDQUVBL3FCLEtBQUEsV0FFQXVVLE1BQUEsQ0FDQXlXLFNBQUFwc0IsUUFDQXFzQixTQUFBcnNCLFNBR0EwRSxLQUFBLENBQ0EwbkIsVUFBQSxFQUNBQyxVQUFBLEdBR0FsTyxTQUFBLENBRUFrRixPQUFBLFNBQUF6aEIsR0FHQSxNQUFBLFdBRkFBLEVBQUF5cUIsV0FPQWxOLFVBQUEsV0FFQXRrQixLQUFBd29CLFNBQUEvZSxHQUFBekosS0FBQThwQixJQUFBLGFBQ0E5cEIsS0FBQThwQixJQUFBMkgsUUFBQSxRQUdBenhCLEtBQUEweEIsT0FBQSxJQUFBOU0sR0FBQTVrQixLQUFBOHBCLEtBRUE5cEIsS0FBQXV4QixVQUNBdnhCLEtBQUEweEIsT0FBQTdKLFFBS0FuRCxPQUFBLENBRUFqRSxLQUFBLFdBRUEsUUFBQXpnQixLQUFBMHhCLFFBRUEsQ0FDQUMsUUFBQTNpQixHQUFBaFAsS0FBQThwQixNQUFBLFdBQUFqYyxHQUFBN04sS0FBQThwQixJQUFBLGNBQ0F0QixPQUFBeG9CLEtBQUF3b0IsUUFBQXRELEdBQUFsbEIsS0FBQThwQixPQUlBbEosTUFBQSxTQUFBN1osR0FDQSxJQUFBNHFCLEVBQUE1cUIsRUFBQTRxQixRQUNBbkosRUFBQXpoQixFQUFBeWhCLFFBR0FtSixHQUFBM3hCLEtBQUF3b0IsU0FBQUEsRUFDQXhvQixLQUFBMHhCLE9BQUE5SixVQUNBLElBQUE1bkIsS0FBQXd4QixVQUFBeHhCLEtBQUF3b0IsUUFBQUEsSUFDQXhvQixLQUFBMHhCLE9BQUFoSyxRQUtBdkQsT0FBQSxDQUFBLFNBQUEsWUFNQWpiLEdBQUEsQ0FFQXlhLE9BQUEsQ0FBQWlMLEdBQUEwQyxJQUVBeFcsTUFBQSxDQUNBa0MsTUFBQXBZLE9BQ0FxWSxPQUFBclksUUFHQWlGLEtBQUEsQ0FDQTBuQixVQUFBLEdBR0E3TSxPQUFBLENBRUFqRSxLQUFBLFdBRUEsSUFBQS9CLEVBQUExZSxLQUFBOHBCLElBQ0EvaUIsRUFrQ0EsU0FBQTJYLEdBQ0EsS0FBQUEsRUFBQXJTLEdBQUFxUyxJQUNBLEdBQUEsV0FBQTdRLEdBQUE2USxFQUFBLFlBQ0EsT0FBQUEsRUFyQ0FrVCxDQUFBbFQsSUFBQUEsRUFBQWhSLFdBQ0F1UCxFQUFBbFcsRUFBQW1JLGFBQ0E4TixFQUFBalcsRUFBQWtJLFlBQ0EwTyxFQUFBalYsR0FBQVEsTUFDQSxDQUNBOFQsTUFBQWhkLEtBQUFnZCxPQUFBMEIsRUFBQW1ULGNBQUFuVCxFQUFBb1QsWUFBQXBULEVBQUFxVCxZQUNBOVUsT0FBQWpkLEtBQUFpZCxRQUFBeUIsRUFBQXNULGVBQUF0VCxFQUFBdVQsYUFBQXZULEVBQUF3VCxjQUVBLENBQ0FsVixNQUFBQSxHQUFBQSxFQUFBLEVBQUEsRUFBQSxHQUNBQyxPQUFBQSxHQUFBQSxFQUFBLEVBQUEsRUFBQSxLQUlBLFNBQUFVLEVBQUFYLFFBQUFXLEVBQUFWLFNBSUFVLEdBR0FpRCxNQUFBLFNBQUE3WixHQUNBLElBQUFrVyxFQUFBbFcsRUFBQWtXLE9BQ0FELEVBQUFqVyxFQUFBaVcsTUFFQW5QLEdBQUE3TixLQUFBOHBCLElBQUEsQ0FBQTdNLE9BQUFBLEVBQUFELE1BQUFBLEtBR0FtSCxPQUFBLENBQUEsWUFjQSxJQWlGQXNNLEdBakZBMEIsR0FBQSxDQUVBclgsTUFBQSxDQUNBZ0UsSUFBQXBkLE9BQ0FpZCxPQUFBLEtBQ0FwQixLQUFBcFksUUFDQWl0QixPQUFBMXdCLFFBR0FtSSxLQUFBLENBQ0FpVixJQUFBLFdBQUF6VSxHQUFBLFFBQUEsUUFDQWtULE1BQUEsRUFDQW9CLFFBQUEsRUFDQXlULE9BQUEsSUFHQTlPLFNBQUEsQ0FFQXhFLElBQUEsU0FBQS9YLEdBQ0EsSUFBQStYLEVBQUEvWCxFQUFBK1gsSUFFQSxPQUFBQSxHQUFBdGMsRUFBQXNjLEVBQUEsS0FBQSxHQUFBLFlBQUFyWixNQUFBLE1BR0EwWSxJQUFBLFdBQ0EsT0FBQW5lLEtBQUE4ZSxJQUFBLElBR0FWLE1BQUEsV0FDQSxPQUFBcGUsS0FBQThlLElBQUEsS0FLQTZGLFFBQUEsQ0FFQXpILFdBQUEsU0FBQW5ZLEVBQUF1QixFQUFBa1gsR0FLQSxJQUFBM0YsRUFIQVMsR0FBQXZULEVBQUEvRSxLQUFBLE9BQUEsc0NBQ0E2TixHQUFBOUksRUFBQSxDQUFBb0QsSUFBQSxHQUFBRixLQUFBLEtBR0EsSUFDQW9xQixFQURBcnlCLEtBQ0EyZSxPQUNBMlQsRUFBQXR5QixLQUFBdXlCLFVBRUFwdUIsRUFBQWt1QixLQUVBQSxHQURBeGEsRUFBQWxDLEdBQUEwYyxJQUVBMVQsR0FBQTlHLEdBQUEsTUFBQXlhLEVBQUEsT0FBQSxPQUFBM1QsR0FBQXJZLEdBQUEsTUFBQWdzQixFQUFBLFFBQUEsVUFDQSxHQUdBLElBQUF0ckIsRUFBQWtXLEdBQ0FuWSxFQUNBdUIsRUFDQSxNQUFBZ3NCLEVBQUFuUyxHQUFBbmdCLEtBQUFtZSxLQUFBLElBQUFuZSxLQUFBLE1BQUFBLEtBQUEsTUFBQSxJQUFBbWdCLEdBQUFuZ0IsS0FBQW1lLEtBQ0EsTUFBQW1VLEVBQUF0eUIsS0FBQSxJQUFBLElBQUFBLEtBQUEsTUFBQUEsS0FBQSxNQUFBLElBQUFBLEtBQUEsSUFDQSxNQUFBc3lCLEVBQUEsSUFBQSxTQUFBdHlCLEtBQUFtZSxLQUFBa1UsRUFBQUEsR0FBQSxLQUFBLFFBQUFyeUIsS0FBQW1lLEtBQUFrVSxFQUFBQSxHQUNBLEtBQ0FyeUIsS0FBQXVkLEtBQ0FDLEdBQ0FsWCxPQUNBa0MsRUFBQXhCLEVBQUF3QixFQUNBQyxFQUFBekIsRUFBQXlCLEVBRUF6SSxLQUFBbWUsSUFBQSxNQUFBbVUsRUFBQTlwQixFQUFBQyxFQUNBekksS0FBQW9lLE1BQUEsTUFBQWtVLEVBQUE3cEIsRUFBQUQsRUFFQW1RLEdBQUE1VCxFQUFBL0UsS0FBQSxPQUFBLElBQUFBLEtBQUEsSUFBQSxJQUFBQSxLQUFBLE9BQUEsSUFBQUEsS0FBQTJlLFNBSUE0VCxRQUFBLFdBQ0EsTUFBQSxRQUFBdnlCLEtBQUFtZSxLQUFBLFdBQUFuZSxLQUFBbWUsSUFBQSxJQUFBLE9BU0FxVSxHQUFBLENBRUE3TyxPQUFBLENBQUF3TyxHQUFBdEQsSUFFQXRvQixLQUFBLE1BRUF1VSxNQUFBLENBQ0EyWCxLQUFBLE9BQ0F4WixPQUFBOVQsUUFDQXFZLFNBQUFyWSxRQUNBdXRCLGNBQUF2dEIsUUFDQXd0QixVQUFBL3RCLE9BQ0FndUIsVUFBQWh1QixPQUNBaXVCLFFBQUFueEIsUUFHQW1JLEtBQUEsQ0FDQTRvQixLQUFBLENBQUEsUUFBQSxTQUNBeFosT0FBQSxNQUNBdUUsU0FBQXhULElBQUF6RyxPQUNBbXZCLGVBQUEsRUFDQUMsVUFBQSxFQUNBQyxVQUFBLElBQ0FDLFNBQUEsRUFDQXBXLFVBQUEsQ0FBQSxxQkFDQWxFLElBQUEsV0FHQStLLFNBQUEsQ0FFQTlGLFNBQUEsU0FBQXpXLEVBQUEraUIsR0FHQSxPQUFBMWUsR0FGQXJFLEVBQUF5VyxTQUVBc00sSUFHQStJLFFBQUEsU0FBQTlyQixHQUdBLE9BRkFBLEVBQUE4ckIsU0FFQSxNQUFBN3lCLEtBQUF5ckIsU0FBQSxNQUdBMkcsT0FBQSxXQUNBLE9BQUFweUIsS0FBQTZ5QixVQUtBek8sUUFBQSxXQUNBcGtCLEtBQUE4eUIsUUFBQSxJQUFBdlIsSUFHQStDLFVBQUEsV0FFQW5NLEdBQUFuWSxLQUFBOHBCLElBQUE5cEIsS0FBQTZ5QixTQUVBLElBQ0E1WixFQURBalosS0FBQTZwQixPQUNBNVEsT0FDQWpaLEtBQUFpWixPQUFBQSxHQUFBalosS0FBQWt1QixRQUFBLFNBQUE5aUIsR0FBQTZOLEVBQUFqWixLQUFBOHBCLEtBQUEsQ0FDQXhqQixPQUFBdEcsS0FBQThwQixJQUNBMkksS0FBQXp5QixLQUFBeXlCLE9BR0F6eUIsS0FBQWlaLFFBQUFoSSxHQUFBalIsS0FBQThwQixJQUFBLGVBSUF0RixhQUFBLFdBQ0F4a0IsS0FBQSt5QixhQUNBdEMsR0FBQSxPQUlBdE0sT0FBQSxDQUVBLENBRUEvYSxLQUFBLFFBRUFvSCxTQUFBLFdBQ0EsTUFBQSxJQUFBeFEsS0FBQSxRQUFBLFVBR0FpcUIsUUFBQSxTQUFBamQsR0FDQUEsRUFBQWdrQixpQkFDQWh4QixLQUFBK3dCLE1BQUEsS0FLQSxDQUVBM25CLEtBQUEsUUFFQW9ILFNBQUEsV0FDQSxNQUFBLGdCQUdBeVosUUFBQSxTQUFBbGpCLEdBQ0EsSUFBQWlzQixFQUFBanNCLEVBQUFpc0IsaUJBQ0FDLEVBQUFsc0IsRUFBQXVKLFFBQUEyaUIsS0FFQUQsSUFBQUMsR0FBQTNqQixHQUFBMmpCLEVBQUFqekIsS0FBQThwQixNQUNBOXBCLEtBQUErd0IsTUFBQSxLQU1BLENBRUEzbkIsS0FBQSxlQUVBNmdCLFFBQUEsV0FDQWpxQixLQUFBK3dCLE1BQUEsS0FLQSxDQUVBM25CLEtBQUEsU0FFQXRKLE1BQUEsRUFFQW1xQixRQUFBLFNBQUFqZCxFQUFBaU0sR0FFQWpNLEVBQUFna0IsaUJBRUFoeEIsS0FBQTB2QixZQUNBMXZCLEtBQUErd0IsTUFBQSxHQUVBL3dCLEtBQUF3dkIsS0FBQXZXLEdBQUEsS0FNQSxDQUVBN1AsS0FBQSxhQUVBdEosTUFBQSxFQUVBbXFCLFFBQUEsU0FBQWpkLEVBQUFpTSxHQUNBak0sRUFBQWdrQixpQkFDQWh4QixLQUFBd3ZCLEtBQUF2VyxLQUtBLENBRUE3UCxLQUFBLGFBRUF0SixNQUFBLEVBRUFtcUIsUUFBQSxTQUFBamQsR0FDQUEsRUFBQWdrQixpQkFDQWh4QixLQUFBK3dCLFNBS0EsQ0FFQTNuQixLQUFBNkIsR0FFQS9GLE9BQUEsV0FDQSxPQUFBMUMsRUFBQXhDLEtBQUF5eUIsS0FBQSxVQUdBeEksUUFBQSxTQUFBamQsR0FDQStFLEdBQUEvRSxJQUNBaE4sS0FBQWt6QixnQkFNQSxDQUVBOXBCLEtBQUE4QixHQUVBaEcsT0FBQSxXQUNBLE9BQUExQyxFQUFBeEMsS0FBQXl5QixLQUFBLFVBR0F4SSxRQUFBLFNBQUFqZCxHQUNBK0UsR0FBQS9FLElBQ0FoTixLQUFBK3dCLFNBTUEsQ0FFQTNuQixLQUFBLFVBRUF0SixNQUFBLEVBRUFtcUIsUUFBQSxXQUVBanFCLEtBQUEwdkIsY0FJQTF2QixLQUFBa3pCLGNBQ0FyVyxHQUFBUixPQUFBcmMsS0FBQThwQixLQUNBOXBCLEtBQUE4ZCxjQUtBLENBRUExVSxLQUFBLE9BRUF0SixNQUFBLEVBRUFtcUIsUUFBQSxXQUNBLElBQUFoaEIsRUFBQWpKLE1BR0F5d0IsR0FBQXp3QixNQUVBOHlCLFFBQUFyUixPQUNBeFEsR0FBQWpSLEtBQUE4cEIsSUFBQSxjQUVBaFosR0FBQTlRLEtBQUE4cEIsSUFBQSxPQUFBbmEsR0FBQXJGLFNBQUFRLEdBQUEsU0FBQS9ELEdBQ0EsSUFBQVQsRUFBQVMsRUFBQVQsT0FFQSxPQUFBZ0osR0FBQWhKLEVBQUEyQyxFQUFBNmdCLE1BQUFoWixHQUFBeEcsU0FBQVUsR0FBQSxJQUFBRyxHQUFBLFVBQUEsU0FBQXBFLEdBQ0EsSUFBQWlzQixFQUFBanNCLEVBQUFpc0IsaUJBQ0FqakIsRUFBQWhKLEVBQUFnSixLQUNBb2pCLEVBQUFwc0IsRUFBQVQsT0FFQTBzQixHQUFBampCLElBQUEvRSxJQUFBMUUsSUFBQTZzQixHQUFBbHFCLEVBQUFnUSxRQUFBM0osR0FBQWhKLEVBQUEyQyxFQUFBZ1EsT0FBQTZRLE1BQ0E3Z0IsRUFBQThuQixNQUFBLEtBRUEsS0FFQSxDQUFBanhCLE1BQUEsSUFFQWdSLEdBQUE5USxLQUFBOHBCLElBQUEsT0FBQW5hLEdBQUFyRixTQUFBLFVBQUEsU0FBQTBDLEdBQ0EsS0FBQUEsRUFBQW9tQixVQUNBcG1CLEVBQUFna0IsaUJBQ0EvbkIsRUFBQThuQixNQUFBLE1BRUEsQ0FBQWp4QixNQUFBLE1BTUEsQ0FFQXNKLEtBQUEsYUFFQXRKLE1BQUEsRUFFQW1xQixRQUFBLFdBQ0FqcUIsS0FBQWt6QixnQkFLQSxDQUVBOXBCLEtBQUEsT0FFQTZnQixRQUFBLFNBQUFsakIsR0FDQSxJQUFBVCxFQUFBUyxFQUFBVCxPQUdBdEcsS0FBQThwQixNQUFBeGpCLEdBS0FtcUIsR0FBQXp3QixLQUFBK3lCLFdBQUEsS0FBQXRDLEdBQ0F4ZixHQUFBalIsS0FBQThwQixJQUFBLGNBQ0E5cEIsS0FBQTh5QixRQUFBelcsVUFOQW9VLEdBQUEsT0FBQUEsSUFBQW5oQixHQUFBaEosRUFBQXRHLEtBQUE4cEIsTUFBQTlwQixLQUFBMHZCLFlBQUExdkIsS0FBQXl3QixLQVdBLENBRUFybkIsS0FBQSxhQUVBdEosTUFBQSxFQUVBbXFCLFFBQUEsU0FBQWpkLEVBQUFpTSxHQUVBak0sRUFBQWdrQixpQkFFQWh4QixLQUFBMnZCLFdBQUEzdkIsS0FBQThwQixNQUVBN1EsR0FBQWpaLEtBQUFpWixVQUNBOVAsSUFBQThQLEdBQUFqWixLQUFBaVosUUFBQTZRLElBQUEsZ0JBQUE5cEIsS0FBQTB2QixhQUNBL1csR0FBQTNZLEtBQUFpWixPQUFBNlEsSUFBQTlwQixLQUFBdVksSUFBQXZZLEtBQUEwdkIsaUJBT0FoTCxPQUFBLENBRUE5RCxNQUFBLFdBRUE1Z0IsS0FBQTB2QixjQUFBN1MsR0FBQVAsV0FBQXRjLEtBQUE4cEIsTUFDQTlwQixLQUFBOGQsWUFLQXFHLE9BQUEsQ0FBQSxXQUlBUSxRQUFBLENBRUE2SyxLQUFBLFNBQUF2VyxFQUFBb2EsR0FDQSxJQUFBcHFCLEVBQUFqSixLQWFBLFFBWkEsSUFBQWlaLElBQUFBLEVBQUFqWixLQUFBaVosYUFDQSxJQUFBb2EsSUFBQUEsR0FBQSxHQUdBcnpCLEtBQUEwdkIsYUFBQXpXLEdBQUFqWixLQUFBaVosUUFBQUEsRUFBQTZRLE1BQUE5cEIsS0FBQWlaLE9BQUE2USxLQUNBOXBCLEtBQUErd0IsTUFBQSxHQUdBL3dCLEtBQUFpWixPQUFBQSxFQUVBalosS0FBQWt6QixlQUVBbHpCLEtBQUEreUIsV0FBQSxDQUlBLEdBQUF0QyxHQUFBLENBRUEsR0FBQTRDLEdBQUE1QyxHQUFBNkMsV0FFQSxZQURBdHpCLEtBQUF1ekIsVUFBQXhnQixXQUFBL1MsS0FBQXd2QixLQUFBLEtBSUEsS0FBQWlCLEtBQUFuaEIsR0FBQXRQLEtBQUE4cEIsSUFBQTJHLEdBQUEzRyxNQUNBMkcsR0FBQU0sTUFBQSxHQUlBL3dCLEtBQUF1ekIsVUFBQXhnQixXQUFBLFdBQUEsT0FBQTlKLEVBQUF5bUIsYUFBQXptQixFQUFBc21CLGNBQUF0bUIsRUFBQTZnQixLQUFBLElBQUF1SixHQUFBcnpCLEtBQUEyeUIsV0FBQSxLQUlBNUIsS0FBQSxTQUFBc0MsR0FDQSxJQUFBcHFCLEVBQUFqSixVQUNBLElBQUFxekIsSUFBQUEsR0FBQSxHQUdBLFNBQUF0QyxJQUFBLE9BQUE5bkIsRUFBQXNtQixjQUFBdG1CLEVBQUE2Z0IsS0FBQSxHQUFBLEdBQUEsSUFrREFwTCxFQUNBMU4sRUFqREFoUixLQUFBa3pCLGNBRUFsekIsS0FBQXN6QixZQThDQTVVLEVBOUNBMWUsS0FBQThwQixJQStDQTlZLEVBQUEsR0FDQWIsR0FBQXVPLEVBQUEsU0FBQUEsR0FBQSxNQUFBLFdBQUE3USxHQUFBNlEsRUFBQSxhQUFBMU4sRUFBQWxFLEtBQUE0UixLQUNBMU4sRUFqREF0SCxLQUFBLFNBQUFnVixHQUFBLE9BQUF6VixFQUFBNnBCLFFBQUFqUixRQUFBbkQsTUFFQTJVLEdBQUFyekIsS0FBQXN6QixXQUNBdHpCLEtBQUF3ekIsVUFBQXpnQixXQUFBL1MsS0FBQSt3QixLQUFBLElBQ0FzQyxHQUFBcnpCLEtBQUE0eUIsVUFDQTV5QixLQUFBd3pCLFVBQUF6Z0IsV0FBQWdlLEVBQUEvd0IsS0FBQTR5QixXQUVBN0IsS0FJQW1DLFlBQUEsV0FDQXBYLGFBQUE5YixLQUFBdXpCLFdBQ0F6WCxhQUFBOWIsS0FBQXd6QixXQUNBeHpCLEtBQUF1ekIsVUFBQSxLQUNBdnpCLEtBQUF3ekIsVUFBQSxLQUNBeHpCLEtBQUFzekIsWUFBQSxHQUdBUCxTQUFBLFdBQ0EsT0FBQXRDLEtBQUF6d0IsTUFHQThkLFNBQUEsV0FFQXhGLEdBQUF0WSxLQUFBOHBCLElBQUE5cEIsS0FBQSxRQUFBLHFCQUNBMlksR0FBQTNZLEtBQUE4cEIsSUFBQTlwQixLQUFBLFFBQUEsWUFBQUEsS0FBQTB5QixlQUVBLElBQUFsVixFQUFBbUIsR0FBQTNlLEtBQUF3ZCxVQUNBaVcsRUFBQXp6QixLQUFBMHlCLGNBQUFsVixFQUFBbUIsR0FBQTNlLEtBQUFpWixPQUFBNlEsS0FFQSxHQUFBLFlBQUE5cEIsS0FBQW9lLE1BQUEsQ0FDQSxJQUFBdlgsRUFBQSxNQUFBN0csS0FBQXV5QixVQUFBLFFBQUEsU0FDQTFrQixHQUFBN04sS0FBQThwQixJQUFBampCLEVBQUE0c0IsRUFBQTVzQixTQUNBN0csS0FBQThwQixJQUFBN2EsWUFBQXJILEtBQUFELElBQUE2VixFQUFBdFYsTUFBQXVyQixFQUFBeHJCLEtBQUF3ckIsRUFBQXZyQixNQUFBc1YsRUFBQXZWLE9BQ0FrUSxHQUFBblksS0FBQThwQixJQUFBOXBCLEtBQUEsUUFBQSxVQUdBQSxLQUFBa2QsV0FBQWxkLEtBQUE4cEIsSUFBQTlwQixLQUFBMHlCLGNBQUExeUIsS0FBQXdkLFNBQUF4ZCxLQUFBaVosT0FBQTZRLElBQUE5cEIsS0FBQXdkLGFBY0EsSUFBQWtXLEdBQUEsQ0FFQS9QLE9BQUEsQ0FBQWlMLElBRUFyb0IsS0FBQSxTQUVBdVUsTUFBQSxDQUNBeFUsT0FBQW5CLFNBR0EwRSxLQUFBLENBQ0F2RCxRQUFBLEdBR0FnZCxTQUFBLENBRUFoVixNQUFBLFNBQUFwTixFQUFBNG9CLEdBQ0EsT0FBQW5VLEdBQUF2RyxHQUFBMGEsSUFHQTdXLE1BQUEsV0FDQSxPQUFBalQsS0FBQXNPLE1BQUEwSixvQkFHQTFSLE9BQUEsU0FBQVMsRUFBQStpQixHQUNBLElBQUF4akIsRUFBQVMsRUFBQVQsT0FFQSxPQUFBQSxLQUFBLElBQUFBLEdBQ0F0RyxLQUFBc08sTUFBQVosYUFBQW9jLEdBQ0E5cEIsS0FBQXNPLE1BQUEwSixvQkFDQTVNLEdBQUE5RSxFQUFBd2pCLE1BS0FwRixPQUFBLFdBRUEsSUFDQXBlLEVBREF0RyxLQUNBc0csT0FDQWdJLEVBRkF0TyxLQUVBc08sTUFFQSxHQUFBaEksRUFBQSxDQUlBLElBQUE0ZCxFQUNBcmQsRUFBQXdJLEdBQUEvSSxHQUFBLFFBQUEsY0FDQWtHLEVBQUFsRyxFQUFBTyxHQUNBNUMsRUFBQXFLLEVBQUFxbEIsT0FBQXJsQixFQUFBcWxCLE1BQUEsR0FDQXJsQixFQUFBcWxCLE1BQUEsR0FBQXZxQixLQUNBc0QsR0FBQTRCLEVBQUEsWUFBQTRWLEVBQUFoTSxHQUFBLFNBQUE1SixHQUFBcEosT0FBQSxTQUFBd1osR0FBQSxPQUFBQSxFQUFBa1YsV0FBQSxJQUNBMVAsRUFBQXRNLFlBQ0F0SixFQUFBckssTUFFQXVJLElBQUF2SSxJQUNBcUMsRUFBQU8sR0FBQTVDLEtBS0FrZ0IsT0FBQSxDQUVBLENBQ0EvYSxLQUFBLFNBRUE2Z0IsUUFBQSxXQUNBanFCLEtBQUFxdUIsWUFJQSxDQUNBamxCLEtBQUEsUUFFQXNWLEdBQUEsV0FDQSxPQUFBdFMsR0FBQXBNLEtBQUE4cEIsSUFBQSxTQUdBRyxRQUFBLFdBQ0FqcUIsS0FBQXF1QixjQVNBd0YsR0FBQSxDQUVBblAsT0FBQSxDQUVBakUsS0FBQSxTQUFBNVcsR0FFQSxJQUFBaXFCLEVBQUE1TyxHQUFBbGxCLEtBQUE4cEIsS0FFQSxJQUFBZ0ssR0FBQWpxQixFQUFBcWIsV0FBQTRPLEVBQ0EsT0FBQSxFQUdBanFCLEVBQUFxYixTQUFBNE8sR0FHQWxULE1BQUEsV0FDQTVnQixLQUFBOHBCLElBQUFqVixJQUFBN1UsS0FBQThwQixJQUFBalYsS0FHQXNQLE9BQUEsQ0FBQSxTQUFBLFlBS0E0UCxHQUFBLENBRUFqWixNQUFBLENBQ0FrWixPQUFBdHlCLE9BQ0F1eUIsWUFBQTl1QixTQUdBMEUsS0FBQSxDQUNBbXFCLE9BQUEsc0JBQ0FDLFlBQUEsbUJBR0F2UCxPQUFBLENBRUFqRSxLQUFBLFdBQ0EsTUFBQSxDQUNBeVQsU0EyQkFwRCxFQTNCQTl3QixLQUFBOHBCLElBQUFwYSxTQTRCQXdrQixFQUFBQyxHQUFBckQsRUFBQSxPQUFBLFNBQ0F6bUIsR0FDQTZwQixFQUFBempCLFVBQ0F5akIsR0E5QkFFLEtBQUFDLEdBQUFyMEIsS0FBQThwQixJQUFBcGEsV0EwQkEsSUFBQW9oQixFQUNBb0QsR0F2QkF0VCxNQUFBLFNBQUE3WixHQUNBLElBQUFrQyxFQUFBakosS0FDQWswQixFQUFBbnRCLEVBQUFtdEIsUUFDQW50QixFQUFBcXRCLEtBRUE5cUIsUUFBQSxTQUFBZ3JCLEVBQUFueUIsR0FBQSxPQUFBbXlCLEVBQUFockIsUUFBQSxTQUFBb1YsR0FDQS9GLEdBQUErRixFQUFBelYsRUFBQStxQixPQUFBLElBQUE3eEIsR0FDQXdXLEdBQUErRixFQUFBelYsRUFBQWdyQixZQUFBenhCLEVBQUEweEIsRUFBQSxHQUFBeFYsU0FLQXlGLE9BQUEsQ0FBQSxZQU1BLFNBQUFrUSxHQUFBdkQsR0FDQSxPQUFBcUQsR0FBQXJELEVBQUEsTUFBQSxVQVVBLFNBQUFxRCxHQUFBckQsRUFBQXlELEVBQUFDLEdBSUEsSUFGQSxJQUFBQyxFQUFBLENBQUEsSUFFQXR5QixFQUFBLEVBQUFBLEVBQUEydUIsRUFBQXh2QixPQUFBYSxJQUFBLENBRUEsSUFBQXVjLEVBQUFvUyxFQUFBM3VCLEdBRUEsR0FBQTZNLEdBQUEwUCxHQU1BLElBRkEsSUFBQWYsRUFBQStXLEdBQUFoVyxHQUVBaVcsRUFBQUYsRUFBQW56QixPQUFBLEVBQUEsR0FBQXF6QixFQUFBQSxJQUFBLENBRUEsSUFBQXJrQixFQUFBbWtCLEVBQUFFLEdBRUEsSUFBQXJrQixFQUFBLEdBQUEsQ0FDQUEsRUFBQXhELEtBQUE0UixHQUNBLE1BR0EsSUFBQWtXLE9BQUEsRUFRQSxHQU5BQSxFQURBdGtCLEVBQUEsR0FBQStPLGVBQUFYLEVBQUFXLGFBQ0FxVixHQUFBcGtCLEVBQUEsS0FFQXFOLEVBQUErVyxHQUFBaFcsR0FBQSxHQUNBZ1csR0FBQXBrQixFQUFBLElBQUEsSUFHQXFOLEVBQUE0VyxJQUFBSyxFQUFBSixHQUFBLEdBQUE3VyxFQUFBNFcsS0FBQUssRUFBQUwsR0FBQSxDQUNBRSxFQUFBM25CLEtBQUEsQ0FBQTRSLElBQ0EsTUFHQSxHQUFBZixFQUFBNlcsR0FBQSxFQUFBSSxFQUFBTCxJQUFBNVcsRUFBQTRXLEtBQUFLLEVBQUFMLEdBQUEsQ0FDQWprQixFQUFBeEQsS0FBQTRSLEdBQ0EsTUFHQSxHQUFBLElBQUFpVyxFQUFBLENBQ0FGLEVBQUF2VyxRQUFBLENBQUFRLElBQ0EsUUFPQSxPQUFBK1YsRUFHQSxTQUFBQyxHQUFBM3ZCLEVBQUE0WixHQUNBLElBQUF0WSxPQUVBLElBQUFzWSxJQUFBQSxHQUFBLEdBRUEsSUFBQWMsRUFBQTFhLEVBQUEwYSxVQUNBQyxFQUFBM2EsRUFBQTJhLFdBQ0F4USxFQUFBbkssRUFBQW1LLGFBQ0FELEVBQUFsSyxFQUFBa0ssWUFNQSxPQUpBMFAsSUFDQWMsR0FBQXBaLEVBQUFtWixHQUFBemEsSUFBQSxHQUFBMmEsRUFBQXJaLEVBQUEsSUFHQSxDQUNBOEIsSUFBQXNYLEVBQ0F4WCxLQUFBeVgsRUFDQXRYLE9BQUFxWCxFQUFBdlEsRUFDQWhILE1BQUF3WCxFQUFBelEsR0FJQSxJQUFBNGxCLEdBQUEsQ0FFQW5SLFFBQUFxUSxHQUVBcFEsT0FBQSxDQUFBaUwsSUFFQXhsQixLQUFBLE9BRUEwUixNQUFBLENBQ0FnYSxRQUFBM3ZCLFFBQ0E0dkIsU0FBQW53QixRQUdBaUYsS0FBQSxDQUNBbXFCLE9BQUEsaUJBQ0FnQixTQUFBLGdCQUNBRixTQUFBLEVBQ0FDLFNBQUEsR0FHQXpRLFVBQUEsV0FDQXRrQixLQUFBODBCLFNBQUEzYyxHQUFBblksS0FBQThwQixJQUFBLGlDQUdBcEYsT0FBQSxDQUVBLENBRUE5RCxNQUFBLFNBQUE3WixHQUNBLElBQUFtdEIsRUFBQW50QixFQUFBbXRCLFFBRUF2YixHQUFBM1ksS0FBQThwQixJQUFBOXBCLEtBQUFnMUIsU0FBQWQsRUFBQTV5QixPQUFBLElBR0E2aUIsT0FBQSxDQUFBLFdBSUEsQ0FFQTFELEtBQUEsU0FBQTFaLEdBQ0EsSUFBQW10QixFQUFBbnRCLEVBQUFtdEIsUUFDQUUsRUFBQXJ0QixFQUFBcXRCLEtBR0Exb0IsRUFBQWdFLEdBQUExUCxLQUFBOHBCLEtBRUEsSUFBQXBlLEVBQUFwSyxTQUFBdEIsS0FBQTgwQixVQUFBOTBCLEtBQUErMEIsU0FDQSxPQUFBLEVBR0EsSUE0RUFiLEVBRUFlLEVBWUF2cEIsRUFBQTZNLEVBR0FWLEVBN0ZBcWQsRUFBQXhwQixFQUFBaEMsS0FBQXdTLEdBQUFJLFlBQ0E2WSxHQUFBLEVBQ0FDLEVBQUEsR0FDQUMsRUFBQXp0QixLQUFBb2UsSUFBQWhtQixLQUFBKzBCLFVBRUEsR0FBQS8wQixLQUFBODBCLFFBQUEsQ0FFQVosRUFBQUEsRUFBQWp2QixJQUFBLFNBQUFxd0IsR0FBQSxPQUFBMXVCLEVBQUEwdUIsRUFBQSxlQUVBLElBQUFDLEVBQUFyQixFQTRGQWp2QixJQUFBLFNBQUFxd0IsR0FBQSxPQUFBQSxFQUFBbmtCLE9BQUEsU0FBQXFrQixFQUFBOVcsR0FBQSxPQUFBOFcsRUFBQTlXLEVBQUF4UCxjQUFBLEtBM0ZBOGtCLEdBZ0ZBdG9CLEVBaEZBQSxFQWdGQTZNLEVBaEZBdlksS0FBQWcwQixPQXFGQW52QixHQUZBZ1QsRUFEQW5NLEVBQUF4RyxPQUFBLFNBQUF3WixHQUFBLE9BQUFqRyxHQUFBaUcsRUFBQW5HLEtBQ0EsSUFHQTFLLEdBQUFnSyxFQUFBLGFBQ0FoSyxHQUFBbkMsRUFBQSxHQUFBLGlCQXZGQTBvQixFQUFBOXlCLE9BQUEsSUFrRUE0eUIsRUFoRUFBLEVBa0VBZSxFQWxFQWIsRUFrRUFudkIsSUFBQSxTQUFBcXZCLEdBQUEsT0FBQTFzQixLQUFBRCxJQUFBd0ksTUFBQXZJLEtBQUEwc0IsRUFBQXJ2QixJQUFBLFNBQUF5WixHQUFBLE9BQUFBLEVBQUF4UCxrQkFsRUFpbUIsRUFxRUFqQixFQUFBanZCLElBQUEsU0FBQXdLLEdBQ0EsSUFBQWpELEVBQUEsRUFDQSxPQUFBaUQsRUFBQXhLLElBQUEsU0FBQUYsRUFBQXV2QixHQUFBLE9BQUE5bkIsR0FBQThuQixFQUNBVyxFQUFBWCxFQUFBLEdBQUE3a0IsRUFBQTZrQixFQUFBLEdBQUFwbEIsYUFDQSxNQXhFQWttQixFQUFBeHRCLEtBQUFELElBQUF3SSxNQUFBdkksS0FBQTJ0QixHQUFBdkIsRUFHQXFCLEVBREFBLEdBQ0FFLEVBQUFwa0IsT0FBQSxTQUFBc2tCLEVBQUFDLEVBQUF2ekIsR0FBQSxPQUFBeUYsS0FBQUQsSUFBQTh0QixFQUFBQyxFQUFBMUIsR0FBQTd4QixFQUFBLEVBQUFrekIsRUFBQUEsRUFBQSxHQUFBRCxJQUNBLEdBS0EsTUFBQSxDQUFBQyxRQUFBQSxFQUFBbkIsUUFBQUEsRUFBQWlCLFdBQUFBLEVBQUFsWSxRQUFBaVksR0FBQUUsSUFJQXhVLE1BQUEsU0FBQTdaLEdBQ0EsSUFBQWtXLEVBQUFsVyxFQUFBa1csT0FDQW9ZLEVBQUF0dUIsRUFBQXN1QixRQUdBeG5CLEdBQUE3TixLQUFBOHBCLElBQUEsZ0JBQUF1TCxHQUFBLEtBQ0EsSUFBQXBZLEdBQUFwUCxHQUFBN04sS0FBQThwQixJQUFBLFNBQUE3TSxJQUlBa0gsT0FBQSxDQUFBLFdBSUEsQ0FFQTFELEtBQUEsU0FBQTFaLEdBQ0EsSUFBQTR1QixFQUFBNXVCLEVBQUFrVyxPQUVBLE1BQUEsQ0FDQTJZLFdBQUE1MUIsS0FBQSswQixVQUNBek8sR0FBQXRtQixLQUFBOHBCLElBQUE2TCxFQUFBQSxFQUFBMVksR0FBQWpkLEtBQUE4cEIsS0FBQSxHQUFBbGlCLEtBQUFvZSxJQUFBaG1CLEtBQUErMEIsWUFLQW5VLE1BQUEsU0FBQTdaLEdBQ0EsSUFBQW10QixFQUFBbnRCLEVBQUFtdEIsUUFDQTBCLEVBQUE3dUIsRUFBQTZ1QixTQUNBVCxFQUFBcHVCLEVBQUFvdUIsWUFHQSxJQUFBUyxJQUFBVCxHQUlBakIsRUFBQTVxQixRQUFBLFNBQUFnc0IsRUFBQW56QixHQUFBLE9BQUFtekIsRUFBQWhzQixRQUFBLFNBQUFvVixFQUFBaVcsR0FBQSxPQUFBOW1CLEdBQUE2USxFQUFBLFlBQUFrWCxHQUFBVCxFQUFBLGdCQUFBQSxJQUFBQSxFQUFBaHpCLEdBQUF3eUIsS0FBQWlCLEVBQUF6ekIsRUFBQSxFQUFBeXpCLEVBQUFBLEVBQUEsRUFBQSxJQUFBLE1BQUEsU0FNQXpSLE9BQUEsQ0FBQSxTQUFBLGFBc0NBLElBQUEwUixHQUFBNXJCLEdBQUEsQ0FFQTZRLE1BQUEsQ0FDQWdiLGFBQUFwMEIsUUFHQW1JLEtBQUEsQ0FDQWlzQixjQUFBLEVBQ0FDLGFBQUEsR0FHQXpTLFNBQUEsQ0FFQTdULFNBQUEsU0FBQTFJLEVBQUEraUIsR0FDQSxJQUFBZ00sRUFBQS91QixFQUFBK3VCLGFBRUEsT0FBQUEsRUFBQTVkLEdBQUE0ZCxFQUFBaE0sR0FBQSxDQUFBQSxLQUtBcEYsT0FBQSxDQUVBLENBRUFqRSxLQUFBLFdBQ0E1UyxHQUFBN04sS0FBQXlQLFNBQUEsU0FBQSxLQUdBdUssT0FBQSxFQUVBbUssT0FBQSxDQUFBLFdBSUEsQ0FFQXZELE1BQUEsV0FDQSxJQUFBM1gsRUFBQWpKLEtBRUFBLEtBQUF5UCxTQUFBbkcsUUFBQSxTQUFBb1YsR0FDQSxJQUFBekIsRUFBQXBZLEVBQUFnSixHQUFBNlEsRUFBQSxjQUNBekIsSUFBQWhVLEVBQUE4c0IsYUFBQW51QixLQUFBa0IsTUFBQW1VLEVBQUE2QyxHQUFBcEIsRUFBQSxTQUFBLGlCQUFBQSxFQUFBeFAsZUFDQXJCLEdBQUE2USxFQUFBLFNBQUF6QixNQUtBakQsTUFBQSxFQUVBbUssT0FBQSxDQUFBLGFBTUEsR0FFQTZSLEdBQUEsQ0FFQXJTLE9BQUEsQ0FBQWtTLElBRUF0dkIsS0FBQSxTQUVBdVUsTUFBQSxDQUNBeFUsT0FBQTVFLE9BQ0E0eUIsSUFBQW52QixTQUdBMEUsS0FBQSxDQUNBdkQsT0FBQSxNQUNBZ3VCLEtBQUEsRUFDQXlCLGFBQUEsR0FHQXpTLFNBQUEsQ0FFQTdULFNBQUEsU0FBQTFJLEVBQUEraUIsR0FHQSxPQUFBNVIsR0FGQW5SLEVBQUFULE9BRUF3akIsS0FLQXBGLE9BQUEsQ0FFQWpFLEtBQUEsV0FDQSxNQUFBLENBQ0EyVCxNQUFBcDBCLEtBQUFzMEIsSUFBQUQsR0FBQXIwQixLQUFBeVAsVUFBQSxDQUFBelAsS0FBQXlQLFdBQUF4SyxJQUFBbEIsTUFJQTZjLE1BQUEsU0FBQTdaLEdBQ0FBLEVBQUFxdEIsS0FFQTlxQixRQUFBLFNBQUF2QyxHQUNBLElBQUFrdkIsRUFBQWx2QixFQUFBa3ZCLFFBR0EsT0FGQWx2QixFQUFBMEksU0FFQW5HLFFBQUEsU0FBQW9WLEVBQUF2YyxHQUFBLE9BQUEwTCxHQUFBNlEsRUFBQSxZQUFBdVgsRUFBQTl6QixTQU1BZ2lCLE9BQUEsQ0FBQSxZQU1BLFNBQUFwZ0IsR0FBQTBMLEdBQ0EsSUFBQXBKLEVBR0EsR0FBQW9KLEVBQUFuTyxPQUFBLEVBQ0EsTUFBQSxDQUFBMjBCLFFBQUEsQ0FBQSxJQUFBeG1CLFNBQUFBLEdBR0EsSUFBQTFJLEVBQUFtdkIsR0FBQXptQixHQUNBd21CLEVBQUFsdkIsRUFBQWt2QixRQUNBdHVCLEVBQUFaLEVBQUFZLElBQ0F3dUIsRUFBQTFtQixFQUFBL0YsS0FBQSxTQUFBZ1YsR0FBQSxPQUFBQSxFQUFBaEUsTUFBQTBiLFlBQ0FDLEVBQUE1bUIsRUFBQS9GLEtBQUEsU0FBQWdWLEVBQUF2YyxHQUFBLE9BQUF1YyxFQUFBaEUsTUFBQTBiLFdBQUFILEVBQUE5ekIsR0FBQXdGLElBVUEsT0FSQXd1QixHQUFBRSxJQUNBeG9CLEdBQUE0QixFQUFBLFlBQUEsSUFDQXBKLEVBQUE2dkIsR0FBQXptQixHQUFBd21CLEVBQUE1dkIsRUFBQTR2QixRQUFBdHVCLEVBQUF0QixFQUFBc0IsS0FNQSxDQUFBc3VCLFFBSEFBLEVBQUF4bUIsRUFBQXhLLElBQUEsU0FBQXlaLEVBQUF2YyxHQUFBLE9BQUE4ekIsRUFBQTl6QixLQUFBd0YsR0FBQTlDLEVBQUE2WixFQUFBaEUsTUFBQTBiLFdBQUFFLFFBQUEsS0FBQTN1QixFQUFBMnVCLFFBQUEsR0FBQSxHQUFBM3VCLElBR0E4SCxTQUFBQSxHQUdBLFNBQUF5bUIsR0FBQXptQixHQUNBLElBQUF3bUIsRUFBQXhtQixFQUFBeEssSUFBQSxTQUFBeVosR0FBQSxPQUFBQyxHQUFBRCxHQUFBekIsT0FBQTZDLEdBQUFwQixFQUFBLFNBQUEsaUJBR0EsTUFBQSxDQUFBdVgsUUFBQUEsRUFBQXR1QixJQUZBQyxLQUFBRCxJQUFBd0ksTUFBQSxLQUFBOGxCLElBS0EsSUFBQU0sR0FBQSxDQUVBNVMsT0FBQSxDQUFBa1MsSUFFQS9hLE1BQUEsQ0FDQTBiLE9BQUFyeEIsUUFDQXNhLFVBQUF0YSxRQUNBc3hCLGFBQUF0eEIsUUFDQWl4QixVQUFBeHhCLFFBR0FpRixLQUFBLENBQ0Eyc0IsUUFBQSxFQUNBL1csV0FBQSxFQUNBZ1gsY0FBQSxFQUNBTCxVQUFBLEdBR0ExUixPQUFBLENBRUFqRSxLQUFBLFNBQUExWixHQUNBLElBQUF5RixFQUFBekYsRUFBQXF2QixVQUdBLElBQUFwbkIsR0FBQWhQLEtBQUE4cEIsS0FDQSxPQUFBLEVBR0EsSUFBQXNNLEVBQUEsR0FDQU0sRUFBQTVXLEdBQUE5ZixLQUFBOHBCLElBQUEsU0FBQSxlQUVBLEdBQUE5cEIsS0FBQXcyQixPQUFBLENBSUEsR0FGQXgyQixLQUFBOHBCLElBQUE2TSxRQUFBQyxhQUFBLEdBRUFqaEIsR0FBQSwwQkFBQTNWLEtBQUE4cEIsSUFDQSxPQUFBLEVBR0FzTSxFQUFBblosR0FBQTFaLFNBQUEyTCxHQUFBNUUsU0FBQUMsaUJBQUEyRSxHQUFBbFAsS0FBQThwQixNQUFBNE0sR0FBQSxPQUVBLENBS0EsR0FGQU4sRUFBQSxhQUVBcDJCLEtBQUF5ZixVQUFBLENBRUEsSUFDQXRYLEVBREF3VyxHQUFBM2UsS0FBQThwQixLQUNBM2hCLElBQ0FpdUIsR0FBQSxFQUFBanVCLEdBQUFBLEVBQUE4VSxHQUFBMVosUUFBQSxFQUFBLE1BQUE0RSxFQUFBLEtBQUEsSUFJQSxJQUFBbkksS0FBQXkyQixhQUVBTCxHQUFBLE1BQUFsbkIsR0FBQWxQLEtBQUE4cEIsSUFBQTlSLG9CQUFBLEtBRUE3VCxFQUFBbkUsS0FBQXkyQixjQUVBTCxHQUFBLE1BQUFwMkIsS0FBQSxhQUFBLEtBRUFBLEtBQUF5MkIsY0FBQXowQixFQUFBaEMsS0FBQXkyQixhQUFBLE1BRUFMLEdBQUEsTUFBQXZ4QixFQUFBN0UsS0FBQXkyQixjQUFBLEtBRUEvekIsRUFBQTFDLEtBQUF5MkIsZ0JBRUFMLEdBQUEsTUFBQWxuQixHQUFBOUQsR0FBQXBMLEtBQUF5MkIsYUFBQXoyQixLQUFBOHBCLE1BQUEsTUFJQXNNLElBQUFNLEVBQUEsTUFBQUEsRUFBQSxLQUFBLElBQUEsSUFJQSxNQUFBLENBQUFOLFVBQUFBLEVBQUE1cEIsS0FBQUEsSUFHQW9VLE1BQUEsU0FBQTdaLEdBQ0EsSUFBQXF2QixFQUFBcnZCLEVBQUFxdkIsVUFDQTVwQixFQUFBekYsRUFBQXlGLEtBR0FxQixHQUFBN04sS0FBQThwQixJQUFBLENBQUFzTSxVQUFBQSxJQUVBQSxJQUFBNXBCLEdBQ0F4TSxLQUFBcXVCLFFBQUFydUIsS0FBQThwQixJQUFBLFVBR0E5cEIsS0FBQW8yQixXQUFBdnhCLEVBQUFnSixHQUFBN04sS0FBQThwQixJQUFBLGNBQUE5cEIsS0FBQW8yQixXQUNBdm9CLEdBQUE3TixLQUFBOHBCLElBQUEsWUFBQTlwQixLQUFBbzJCLFlBS0FqUyxPQUFBLENBQUEsWUFNQSxTQUFBalYsR0FBQXdQLEdBQ0EsT0FBQUEsR0FBQUMsR0FBQUQsR0FBQXpCLFFBQUEsRUFHQSxJQUFBNFosR0FBQSxDQUVBdHdCLEtBQUEsTUFFQXVVLE1BQUEsQ0FDQW5PLEdBQUF4SCxRQUNBMnhCLEtBQUFwMUIsT0FDQW1ULElBQUFuVCxPQUNBZ1osTUFBQWhaLE9BQ0FzYixNQUFBcFksT0FDQXFZLE9BQUFyWSxPQUNBK0QsTUFBQS9ELE9BQ0FteUIsTUFBQXIxQixPQUNBczFCLGdCQUFBN3hCLFFBQ0E4eEIsVUFBQTl4QixRQUNBa29CLFdBQUEsUUFHQXhqQixLQUFBLENBQ0FsQixNQUFBLEVBQ0F1dUIsUUFBQSxDQUFBLFFBQUEsUUFBQSxhQUNBSCxNQUFBLEdBQ0FDLGlCQUFBLEdBR0EzUyxjQUFBLFdBQ0Fya0IsS0FBQSsyQixPQUFBLFdBR0F6UyxVQUFBLFdBQ0EsSUFDQWplLEVBREE0QyxFQUFBakosTUFJQUEsS0FBQTgyQixNQUFBdDBCLEVBQUF4QyxLQUFBNlUsSUFBQSxPQUNBeE8sRUFBQXJHLEtBQUE2VSxJQUFBcFAsTUFBQSxLQUFBekYsS0FBQTZVLElBQUF4TyxFQUFBLEdBQUFyRyxLQUFBODJCLEtBQUF6d0IsRUFBQSxJQUdBckcsS0FBQW0zQixJQUFBbjNCLEtBQUFvM0IsU0FBQTNqQixLQUFBLFNBQUFpTCxHQUVBLE9BREF6VixFQUFBb3VCLGdCQUFBM1ksR0FDQXpWLEVBQUFxdUIsTUE4S0EsU0FBQTVZLEVBQUE2WSxHQUVBLEdBQUF6b0IsR0FBQXlvQixJQUFBLFdBQUFBLEVBQUF4b0IsUUFBQSxDQUVBNUYsR0FBQW91QixFQUFBLFVBQUEsR0FFQSxJQUFBeGYsRUFBQXdmLEVBQUF2ZixtQkFDQSxPQUFBd2YsR0FBQTlZLEVBQUEzRyxHQUNBQSxFQUNBM0IsR0FBQW1oQixFQUFBN1ksR0FJQSxJQUFBaFksRUFBQTZ3QixFQUFBbEgsaUJBQ0EsT0FBQW1ILEdBQUE5WSxFQUFBaFksR0FDQUEsRUFDQW9QLEdBQUF5aEIsRUFBQTdZLEdBOUxBK1ksQ0FBQS9ZLEVBQUF6VixFQUFBNmdCLE1BQ0FqaUIsS0FJQTJjLGFBQUEsV0FDQSxJQUFBdmIsRUFBQWpKLEtBR0E4TyxHQUFBOU8sS0FBQThwQixNQUNBM2dCLEdBQUFuSixLQUFBOHBCLElBQUEsU0FBQSxNQUdBOXBCLEtBQUFtM0IsS0FDQW4zQixLQUFBbTNCLElBQUExakIsS0FBQSxTQUFBMGpCLEdBQUEsUUFBQWx1QixFQUFBZ2dCLFlBQUFrTyxJQUFBbHVCLEVBQUFxdUIsUUFBQXJxQixHQUFBa3FCLElBQUF0dkIsSUFHQTdILEtBQUFtM0IsSUFBQW4zQixLQUFBczNCLE1BQUEsTUFJQTVTLE9BQUEsQ0FFQWpFLEtBQUEsV0FDQSxTQUFBemdCLEtBQUFnM0IsaUJBQUFoM0IsS0FBQXMzQixPQUFBdG9CLEdBQUFoUCxLQUFBczNCLFNBR0ExVyxNQUFBLFdBK0hBLElBQUFsQyxFQUVBcGQsRUFGQW9kLEVBOUhBMWUsS0FBQXMzQixPQWdJQWgyQixFQUFBbzJCLEdBQUFoWixLQUdBQSxFQUFBaEUsTUFBQWlkLFlBQUEsd0JBQUFyMkIsSUFoSUF5TyxLQUFBLENBQUEsV0FJQTRVLFFBQUEsQ0FFQXlTLE9BQUEsV0FDQSxJQUFBbnVCLEVBQUFqSixLQUVBLE9Bd0RBLFNBQUE2VSxHQUVBLEdBQUEraUIsR0FBQS9pQixHQUNBLE9BQUEraUIsR0FBQS9pQixHQUdBLE9BQUEraUIsR0FBQS9pQixHQUFBLElBQUFyQyxHQUFBLFNBQUFDLEVBQUFDLEdBRUFtQyxFQUtBalQsRUFBQWlULEVBQUEsU0FDQXBDLEVBQUFvbEIsbUJBQUFoakIsRUFBQXBQLE1BQUEsS0FBQSxLQUdBbU8sR0FBQWlCLEdBQUFwQixLQUNBLFNBQUFRLEdBQUEsT0FBQXhCLEVBQUF3QixFQUFBNmpCLFdBQ0EsV0FBQSxPQUFBcGxCLEVBQUEsb0JBVkFBLE1BakVBcWxCLENBQUEvM0IsS0FBQTZVLEtBQUFwQixLQUFBLFNBQUEwakIsR0FBQSxPQW1GQSxTQUFBQSxFQUFBTCxHQUVBQSxHQUFBdDBCLEVBQUEyMEIsRUFBQSxhQUNBQSxFQVVBLFNBQUFBLEVBQUFMLEdBRUEsSUFBQWtCLEdBQUFiLEdBQUEsQ0FNQSxJQUFBcHpCLEVBQ0EsSUFMQWkwQixHQUFBYixHQUFBLEdBRUFjLEdBQUFDLFVBQUEsRUFHQW4wQixFQUFBazBCLEdBQUF6Z0IsS0FBQTJmLElBQ0FhLEdBQUFiLEdBQUFwekIsRUFBQSxJQUFBLDBDQUFBQSxFQUFBLEdBQUEsT0FLQSxPQUFBaTBCLEdBQUFiLEdBQUFMLEdBekJBcUIsQ0FBQWhCLEVBQUFMLElBQUFLLEdBSUEsT0FEQUEsRUFBQXhoQixHQUFBd2hCLEVBQUFsMUIsT0FBQWsxQixFQUFBLzBCLFFBQUEsWUFDQSswQixFQUFBcGhCLGlCQUFBb2hCLEVBMUZBaUIsQ0FBQWpCLEVBQUFsdUIsRUFBQTZ0QixPQUFBdGtCLEdBQUFFLE9BQUEscUJBSUEya0IsZ0JBQUEsU0FBQTNZLEdBQ0EsSUFBQXpWLEVBQUFqSixLQUdBLElBQUEsSUFBQTZHLEtBQUE3RyxLQUFBeXJCLFNBQUEzUSxNQUNBOWEsS0FBQTZHLElBQUFyRSxFQUFBeEMsS0FBQWszQixRQUFBcndCLElBQ0FzQyxHQUFBdVYsRUFBQTdYLEVBQUE3RyxLQUFBNkcsSUFJQSxJQUFBLElBQUFpRCxLQUFBOUosS0FBQXF0QixXQUFBLENBQ0EsSUFBQXRtQixFQUFBL0csS0FBQXF0QixXQUFBdmpCLEdBQUFyRSxNQUFBLElBQUEsR0FDQThqQixFQUFBeGlCLEVBQUEsR0FDQTlDLEVBQUE4QyxFQUFBLEdBQ0FvQyxHQUFBdVYsRUFBQTZLLEVBQUF0bEIsR0FHQWpFLEtBQUEyTSxJQUNBcEQsR0FBQW1WLEVBQUEsTUFHQSxJQUFBNUQsRUFBQSxDQUFBLFFBQUEsVUFDQWxTLEVBQUEsQ0FBQTVJLEtBQUFnZCxNQUFBaGQsS0FBQWlkLFFBRUFyVSxFQUFBYyxLQUFBLFNBQUExRCxHQUFBLE9BQUFBLE1BQ0E0QyxFQUFBa1MsRUFBQTdWLElBQUEsU0FBQTRCLEdBQUEsT0FBQXNDLEdBQUF1VixFQUFBN1gsTUFHQSxJQUFBd3hCLEVBQUFsdkIsR0FBQXVWLEVBQUEsV0FDQTJaLElBQUF6dkIsRUFBQWMsS0FBQSxTQUFBMUQsR0FBQSxPQUFBQSxNQUNBNEMsRUFBQXl2QixFQUFBNXlCLE1BQUEsS0FBQWpFLE1BQUEsSUFHQW9ILEVBQUFVLFFBQUEsU0FBQXRELEVBQUE3RCxJQUNBNkQsR0FBQSxFQUFBQSxHQUFBaUQsRUFBQU4sUUFDQVEsR0FBQXVWLEVBQUE1RCxFQUFBM1ksR0FBQTZELEdBRUFBLElBQUE0QyxFQUFBLEVBQUF6RyxJQUNBb0gsR0FBQW1WLEVBQUE1RCxFQUFBLEVBQUEzWSxNQUlBZ0gsR0FBQXVWLEVBQUEsV0FBQTFlLEtBQUE4MkIsTUFBQTkyQixLQUFBNlUsUUFRQStpQixHQUFBLEdBdUNBLElBQUFLLEdBQUEsaURBQ0FELEdBQUEsR0E4QkEsU0FBQU4sR0FBQWhaLEdBQ0EsT0FBQTlXLEtBQUFtZSxLQUFBbmUsS0FBQUQsSUFBQXdJLE1BQUF2SSxLQUFBLENBQUEsR0FBQXdJLE9BQUE4SCxHQUFBLFdBQUF3RyxHQUFBelosSUFBQSxTQUFBcXpCLEdBQ0EsSUFDQSxPQUFBQSxFQUFBQyxpQkFDQSxNQUFBdnJCLEdBQ0EsT0FBQSxRQXdCQSxTQUFBd3FCLEdBQUE5WSxFQUFBNVksR0FDQSxPQUFBcUQsR0FBQXVWLEVBQUEsY0FBQXZWLEdBQUFyRCxFQUFBLFlBR0EsSUFnQ0EweUIsR0FBQSxDQUNBQyxRQUxBLHNKQU1BQyxNQUpBLDJLQUtBQyxPQS9CQSw4S0FnQ0FDLGFBcENBLGdRQXFDQUMsY0FuQ0EsZ1FBb0NBQyxxQkFoQ0Esc01BaUNBQyxlQS9CQSxnTEFnQ0FDLGtCQTlCQSx3S0ErQkFDLHNCQTdCQSx3S0E4QkFDLGNBNUJBLHFQQTZCQUMsZUEzQkEsbVFBNEJBQyxnQkExQkEsa1FBMkJBQyxnQkF6QkEsNkxBMEJBQyxzQkF4QkEsaU1BeUJBQyxvQkF2QkEsOExBd0JBQywwQkF0QkEsbU1BeUJBQyxHQUFBLENBRUE1TCxRQXdIQSxTQUFBOXRCLEdBQ0FBLEVBQUErMkIsS0FBQXR2QixJQUFBLFNBQUE0QixFQUFBK3RCLEdBQ0EsSUFBQTcyQixFQUdBbzVCLEVBQUFoM0IsRUFBQTBHLEtBQUE5SSxFQUFBLElBQUE4SSxHQUFBK3RCLEVBQUE3MkIsR0FBQThJLEVBQ0FyRCxFQUFBMnpCLEVBQUEsU0FBQXZDLEVBQUEvdEIsR0FDQW92QixHQUFBcHZCLEdBQUErdEIsU0FDQXdDLEdBQUF2d0IsS0FHQXJKLEVBQUErdEIsY0FDQTNkLEdBQUE3RixTQUFBK2dCLEtBQUEsU0FBQTNNLEdBQUEsT0FBQTNZLEVBQUFoRyxFQUFBZ3VCLGNBQUFyUCxHQUFBLFNBQUFrUixHQUNBQSxFQUFBbkUsU0FBQW1PLFFBQUFoSyxFQUFBa0gsUUFBQTRDLEdBQUE5SixFQUFBeEMsZUFuSUExSixRQUFBbVQsR0FFQXR3QixLQUFBLE9BRUF1VSxNQUFBLENBQUEsUUFFQWpSLEtBQUEsQ0FDQXF0QixRQUFBLENBQUEsY0FHQTBDLFFBQUEsRUFFQXZWLGNBQUEsV0FDQWxNLEdBQUFuWSxLQUFBOHBCLElBQUEsWUFHQW5GLFFBQUEsQ0FFQXlTLE9BQUEsV0FFQSxJQUFBTixFQXNIQSxTQUFBQSxHQUVBLElBQUEwQixHQUFBMUIsR0FDQSxPQUFBLEtBR0E2QyxHQUFBN0MsS0FDQTZDLEdBQUE3QyxHQUFBbmhCLElBQUE2aUIsR0FNQSxTQUFBMUIsR0FDQSxPQUFBenNCLEdBQUFwRSxFQUFBQSxFQUFBNndCLEVBQUEsT0FBQSxTQUFBLFdBQUEsUUFBQUEsRUFQQStDLENBQUEvQyxLQUFBMEIsR0FBQTFCLElBQUFweEIsU0FHQSxPQUFBaTBCLEdBQUE3QyxHQUFBZ0QsV0FBQSxHQWhJQUMsQ0FBQS81QixLQUFBODJCLE1BRUEsT0FBQUEsRUFJQXRrQixHQUFBQyxRQUFBcWtCLEdBSEF0a0IsR0FBQUUsT0FBQSxzQkFVQXNuQixHQUFBLENBRUF6ekIsTUFBQSxFQUVBbWQsUUFBQStWLEdBRUE1dkIsS0FBQSxTQUFBd1osR0FBQSxNQUFBLENBQ0F5VCxLQUFBbjJCLEVBQUEwaUIsRUFBQThILFlBQUF4WixRQUFBdkksUUFHQWliLGNBQUEsV0FDQWxNLEdBQUFuWSxLQUFBOHBCLElBQUE5cEIsS0FBQWd0QixTQUtBaU4sR0FBQSxDQUVBdlcsUUFBQXNXLEdBRUEzVixjQUFBLFdBQ0FsTSxHQUFBblksS0FBQThwQixJQUFBLGdCQUdBeEcsU0FBQSxDQUVBd1QsS0FBQSxTQUFBL3ZCLEVBQUEraUIsR0FDQSxJQUFBZ04sRUFBQS92QixFQUFBK3ZCLEtBRUEsT0FBQXJlLEdBQUFxUixFQUFBLHFCQUNBZ04sRUFBQSxTQUNBQSxLQU9Bb0QsR0FBQSxDQUVBeFcsUUFBQXNXLEdBRUExVyxTQUFBLENBRUF3VCxLQUFBLFNBQUEvdkIsRUFBQStpQixHQUNBLElBQUFnTixFQUFBL3ZCLEVBQUErdkIsS0FFQSxPQUFBcmUsR0FBQXFSLEVBQUEsbUJBQUF0YSxHQUFBc2EsRUFBQSxvQkFBQXhvQixPQUNBLGVBQ0FrTyxHQUFBc2EsRUFBQSxxQkFBQXhvQixPQUNBLGdCQUNBdzFCLEtBT0FxRCxHQUFBLENBRUF6VyxRQUFBc1csR0FFQTFXLFNBQUEsQ0FFQXdULEtBQUEsV0FDQSxNQUFBLFVBQUFyZSxHQUFBelksS0FBQThwQixJQUFBLGtCQUFBLFFBQUEsV0FPQXNRLEdBQUEsQ0FFQTFXLFFBQUFzVyxHQUVBMVYsVUFBQSxXQUNBLElBQUFyYixFQUFBakosS0FFQUEsS0FBQW0zQixJQUFBMWpCLEtBQUEsU0FBQTBqQixHQUFBLE9BQUEsSUFBQWx1QixFQUFBTixPQUFBa0YsR0FBQThILEdBQUEsU0FBQXdoQixHQUFBLGNBQUEsRUFBQWx1QixFQUFBTixRQUFBZCxNQUtBOHhCLEdBQUEsR0FzQ0EsSUFBQXRyQixHQUFBLENBRUE5SCxLQUFBLFVBRUF1VSxNQUFBLENBQ0F1ZixRQUFBMzRCLE9BQ0E0NEIsV0FBQW4xQixRQUNBNFAsTUFBQXJULE9BQ0FzYixNQUFBcFksT0FDQXFZLE9BQUFyWSxPQUNBNmEsVUFBQS9kLE9BQ0FnZSxXQUFBaGUsT0FDQTRFLE9BQUE1RSxRQUdBbUksS0FBQSxDQUNBd3dCLFFBQUEsR0FDQUMsWUFBQSxFQUNBdmxCLE9BQUEsRUFDQWlJLE9BQUEsRUFDQUMsUUFBQSxFQUNBd0MsVUFBQSxPQUNBQyxXQUFBLEVBQ0FwWixRQUFBLEdBR0FnZCxTQUFBLENBRUFpWCxTQUFBLFNBQUF4ekIsR0FDQSxJQUFBc3pCLEVBQUF0ekIsRUFBQXN6QixRQUVBLE9BQUFyNkIsS0FBQSxNQUFBLElBQUFxNkIsR0FHQXJkLE1BQUEsU0FBQWpXLEdBQ0EsSUFBQWlXLEVBQUFqVyxFQUFBaVcsTUFDQXdkLEVBQUF6ekIsRUFBQXl6QixVQUVBLE9BQUF4ZCxHQUFBd2QsR0FHQXZkLE9BQUEsU0FBQWxXLEdBQ0EsSUFBQWtXLEVBQUFsVyxFQUFBa1csT0FDQXdkLEVBQUExekIsRUFBQTB6QixXQUVBLE9BQUF4ZCxHQUFBd2QsR0FHQTFsQixNQUFBLFNBQUFoTyxHQUNBLElBQUFnTyxFQUFBaE8sRUFBQWdPLE1BQ0EybEIsRUFBQTN6QixFQUFBMnpCLFVBRUEsT0FBQTNsQixHQUFBMmxCLEdBR0FDLE1BQUEsU0FBQXo1QixFQUFBNG9CLEdBQ0EsT0FBQTZRLEdBQUE3USxJQUdBeGpCLE9BQUEsQ0FFQThTLElBQUEsU0FBQXJTLEdBQ0EsSUFBQVQsRUFBQVMsRUFBQVQsT0FFQSxNQUFBLENBQUF0RyxLQUFBOHBCLEtBQUExWixPQUFBM0UsR0FBQW5GLEVBQUF0RyxLQUFBOHBCLE9BR0EwQyxNQUFBLFdBQ0F4c0IsS0FBQTBvQixZQUtBakosVUFBQSxTQUFBMVksR0FHQSxPQUFBcVosR0FGQXJaLEVBQUEwWSxVQUVBLFdBR0FDLFdBQUEsU0FBQTNZLEdBR0EsT0FBQXFaLEdBRkFyWixFQUFBMlksV0FFQSxXQUtBNEUsVUFBQSxXQUVBc1csR0FBQTU2QixLQUFBdTZCLFVBQ0FNLEdBQUE3NkIsS0FBQThwQixJQUFBOFEsR0FBQTU2QixLQUFBdTZCLFdBQUF2NkIsS0FBQXE2QixRQUFBcjZCLEtBQUFzNkIsV0FBQXQ2QixLQUFBK1UsT0FDQS9VLEtBQUEyNkIsT0FBQTM2QixLQUFBZ2QsT0FBQWhkLEtBQUFpZCxRQUNBNGQsR0FBQTc2QixLQUFBOHBCLElBd0dBLFNBQUE5TSxFQUFBQyxFQUFBbEksR0FDQSxJQUFBMU8sRUFHQTBPLElBQ0ExTyxFQUFBcUMsR0FBQUMsTUFBQSxDQUFBcVUsTUFBQUEsRUFBQUMsT0FBQUEsR0FBQSxRQUFBbUQsR0FBQTBhLEdBQUEvbEIsS0FBQWlJLEVBQUEzVyxFQUFBMlcsTUFBQUMsRUFBQTVXLEVBQUE0VyxRQUdBLE1BQUEsMEVBQUFELEVBQUEsYUFBQUMsRUFBQSxXQWhIQThkLENBQUEvNkIsS0FBQWdkLE1BQUFoZCxLQUFBaWQsT0FBQWpkLEtBQUErVSxRQUdBL1UsS0FBQWc3QixTQUFBLElBQUFqVCxHQUFBL25CLEtBQUFpN0IsS0FBQSxDQUNBL1MsV0FBQWxvQixLQUFBLFVBQUEsTUFBQUEsS0FBQSxXQUFBLE9BR0FvaEIsc0JBQUFwaEIsS0FBQTBvQixVQUlBbEUsYUFBQSxXQUNBeGtCLEtBQUFnN0IsU0FBQXJTLGNBR0FqRSxPQUFBLENBRUFqRSxLQUFBLFNBQUExWixHQUNBLElBQUFrQyxFQUFBakosS0FDQWs3QixFQUFBbjBCLEVBQUFtMEIsTUFPQSxHQUpBQSxHQUFBLGFBQUE1d0IsU0FBQStLLFlBQ0FyVixLQUFBaTdCLEtBQUFqN0IsS0FBQWc3QixTQUFBM1MsZUFHQXJvQixLQUFBMjZCLE1BQ0EsT0FBQSxFQUdBTyxHQUFBQSxFQUFBem5CLEtBQUEsU0FBQXBGLEdBQUEsT0FBQUEsR0FBQSxLQUFBQSxFQUFBOHNCLFlBQUFOLEdBQUE1eEIsRUFBQTZnQixJQUFBcVIsR0FBQTlzQixPQUlBdVMsTUFBQSxTQUFBL1csR0FFQSxHQUFBN0osS0FBQXM2QixZQUFBLElBQUEvMkIsT0FBQTYzQixpQkFBQSxDQUVBLElBQUFDLEVBQUF4dEIsR0FBQTdOLEtBQUE4cEIsSUFBQSxtQkFDQXVSLEVBQUF0M0IsTUFBQSxpQkFBQWMsRUFBQXcyQixLQUFBeHhCLEVBQUF3eEIsU0FDQXh4QixFQUFBd3hCLFFBeUdBdm1CLEVBekdBOVUsS0FBQXM2QixXQXlHQXZsQixFQXpHQS9VLEtBQUErVSxNQTBHQXVtQixFQUFBbGIsR0FBQTBhLEdBQUEvbEIsS0FDQXdtQixHQUFBem1CLEVBQUEvUSxNQUFBeTNCLEtBQUEsSUFBQXYyQixJQUFBSixHQUFBaUMsS0FBQSxTQUFBWixFQUFBQyxHQUFBLE9BQUFELEVBQUFDLEtBRUFqQixPQUFBLFNBQUF1MkIsR0FBQSxPQUFBSCxHQUFBRyxJQUFBLElBQUFGLEVBQUF6aUIsT0FBQSxJQTVHQWpMLEdBQUE3TixLQUFBOHBCLElBQUEsaUJBQUFqZ0IsRUFBQSxPQUFBLE9Bd0dBLElBQUFpTCxFQUFBQyxFQUNBdW1CLEVBQ0FDLEdBbkdBcFgsT0FBQSxDQUFBLFdBSUFRLFFBQUEsQ0FFQXNXLEtBQUEsU0FBQVMsR0FDQSxJQUFBenlCLEVBQUFqSixLQUlBMDdCLEVBQUFoeUIsS0FBQSxTQUFBNmUsR0FBQSxPQUFBL2pCLEVBQUErakIsRUFBQUUsaUJBQUFGLEVBQUFFLG1CQUlBem9CLEtBQUEyckIsTUFBQXVQLE1BQUF0bUIsR0FBQTVVLEtBQUFxNkIsUUFBQXI2QixLQUFBczZCLFdBQUF0NkIsS0FBQStVLE9BQUF0QixLQUFBLFNBQUFwRixHQUlBLE9BRkF3c0IsR0FBQTV4QixFQUFBNmdCLElBQUFxUixHQUFBOXNCLEdBQUFBLEVBQUF5RyxPQUFBekcsRUFBQTBHLE9BQ0E2bEIsR0FBQTN4QixFQUFBc3hCLFVBQUFZLEdBQUE5c0IsR0FDQUEsR0FFQXhHLElBRUE3SCxLQUFBZzdCLFNBQUFyUyxlQUdBRCxRQUFBLFdBQ0EsSUFBQXpmLEVBQUFqSixLQUVBQSxLQUFBaXBCLGFBQUFqcEIsS0FBQTJyQixNQUFBdVAsT0FDQWw3QixLQUFBc0csT0FBQWdELFFBQUEsU0FBQW9WLEdBQUEsT0FBQXpWLEVBQUEreEIsU0FBQXRTLFFBQUFoSyxRQVFBLFNBQUFtYyxHQUFBbmMsRUFBQTdKLEVBQUFDLEVBQUFDLEdBRUEsR0FBQTRsQixHQUFBamMsR0FDQTNKLElBQUEySixFQUFBM0osTUFBQUEsR0FDQUQsSUFBQTRKLEVBQUE1SixPQUFBQSxHQUNBRCxJQUFBNkosRUFBQTdKLElBQUFBLFFBQ0EsR0FBQUEsRUFBQSxFQUVBclMsRUFBQWtjLEVBQUFoRSxNQUFBaWhCLGdCQUFBOW1CLEtBRUFoSCxHQUFBNlEsRUFBQSxrQkFBQSxPQUFBM1IsR0FBQThILEdBQUEsS0FDQTVELEdBQUF5TixFQUFBcE4sR0FBQSxRQUFBLE1Ba0JBLElBQUFzcUIsR0FBQSwwQ0FDQSxTQUFBZCxHQUFBL2xCLEdBQ0EsSUFBQXJJLEVBZ0JBK3VCLEVBWkEsSUFGQUcsR0FBQTFELFVBQUEsRUFFQXhyQixFQUFBa3ZCLEdBQUFwa0IsS0FBQXpDLElBQ0EsSUFBQXJJLEVBQUEsSUFBQW5KLE9BQUFzNEIsV0FBQW52QixFQUFBLElBQUFBLFFBQUEsQ0FDQUEsRUFXQTlLLEVBREE2NUIsRUFWQS91QixFQUFBLEdBV0EsUUFDQSt1QixFQUNBSyxVQUFBLEVBQUFMLEVBQUFuNkIsT0FBQSxHQUNBVCxRQUFBazdCLEdBQUEsU0FBQU4sR0FBQSxPQUFBcmIsR0FBQXFiLEtBQ0E1NkIsUUFBQSxLQUFBLElBQ0FrRCxNQUFBaTRCLElBQ0E3cUIsT0FBQSxTQUFBakwsRUFBQUMsR0FBQSxPQUFBRCxJQUFBQyxHQUFBLEdBQ0FzMUIsRUFqQkEsTUFJQSxPQUFBL3VCLEdBQUEsUUFHQSxJQUFBcXZCLEdBQUEsZ0JBQ0FDLEdBQUEsY0FZQSxJQUFBUixHQUFBLHFCQVFBLFNBQUFiLEdBQUFqYyxHQUNBLE1BQUEsUUFBQUEsRUFBQTNQLFFBR0EsU0FBQW9zQixHQUFBemMsR0FDQSxPQUFBQSxFQUFBeWMsWUFBQXpjLEVBQUE3SixJQUdBLElBQ0ErbEIsR0FEQXI2QixHQUFBLFdBSUEsS0FDQXE2QixHQUFBcjNCLE9BQUEwNEIsZ0JBQUEsSUFDQTE3QixJQUFBLFNBQ0FxNkIsR0FBQXI2QixJQUNBLE1BQUF5TSxHQUNBNHRCLEdBQUEsR0FHQSxJQUFBc0IsR0FBQSxDQUVBcGhCLE1BQUEsQ0FDQXFoQixNQUFBaDNCLFNBR0EwRSxLQUFBLENBQ0FzeUIsT0FBQSxHQUdBN1ksU0FBQSxDQUVBdVksV0FBQSxXQUNBLElBQUFNLEVBUUEsU0FBQWw0QixHQUVBLEdBQUF2QixFQUFBdUIsR0FBQSxDQUNBLEdBQUEsTUFBQUEsRUFBQSxHQUVBQSxFQUFBWSxFQUFBcVcsR0FEQSxjQUFBalgsRUFBQWhDLE9BQUEsVUFFQSxHQUFBbUMsTUFBQUgsR0FDQSxPQUFBQSxFQUlBLFNBQUFBLEdBQUFHLE1BQUFILEtBQUEsZUFBQUEsRUFBQSxNQW5CQW00QixDQUFBcDhCLEtBQUFtOEIsT0FDQSxPQUFBQSxHQUFBNTRCLE9BQUFzNEIsV0FBQU0sR0FBQXp2QixXQXFCQSxJQUFBMnZCLEdBQUEsQ0FFQTFZLE9BQUEsQ0FBQWlMLEdBQUFzTixJQUVBcGhCLE1BQUEsQ0FDQXdoQixLQUFBNTZCLFFBR0FtSSxLQUFBLENBQ0F5eUIsS0FBQSxHQUNBQyxXQUFBLGlCQUNBQyxRQUFBLGlCQUNBQyxTQUFBLGFBR0FuWixTQUFBLENBRUFnWixLQUFBLFNBQUF2MUIsR0FHQSxPQUZBQSxFQUFBdTFCLE1BRUFwaEIsR0FBQSx5QkFLQW9KLFVBQUEsV0FDQSxJQUFBamUsRUFFQUEsRUFBQXNRLEdBQUEzVyxLQUFBOHBCLElBQUEsZ0JBQUE5cEIsS0FBQSxXQUFBLE1BQUFBLEtBQUEwOEIsUUFBQXIyQixFQUFBLElBR0FtZSxhQUFBLFdBQ0EzTixHQUFBN1csS0FBQTA4QixRQUFBOWxCLGFBR0E4TixPQUFBLENBRUFqRSxLQUFBLFNBQUExWixHQUNBLElBQUFrcEIsRUFBQWxwQixFQUFBa3BCLFFBQ0FqVCxFQUFBalcsRUFBQWlXLE1BR0F4USxFQUFBd1EsRUFJQSxNQUFBLENBQ0FBLE1BSEFBLEVBQUFwVixLQUFBKzBCLE1BQUEzOEIsS0FBQThwQixJQUFBN2EsWUFBQSxHQUlBcXRCLEtBQUF0OEIsS0FBQXM4QixLQUNBck0sUUFBQUEsR0FBQXpqQixJQUFBd1EsRUFDQStULE1BQUEvd0IsS0FBQTY3QixhQUlBamIsTUFBQSxTQUFBL1csR0FFQThPLEdBQUEzWSxLQUFBMDhCLFFBQUExOEIsS0FBQXc4QixRQUFBM3lCLEVBQUFrbkIsTUFFQWxuQixFQUFBb21CLFVBQ0FwbUIsRUFBQW9tQixTQUFBLEVBQ0E5bUIsR0FBQW5KLEtBQUEwOEIsUUFBQTE4QixLQUFBeThCLFNBQUEsSUFBQW42QixNQUFBdUgsRUFBQW1ULE9BQUExUSxLQUFBekMsRUFBQXl5QixTQUtBblksT0FBQSxDQUFBLFlBTUF5WSxHQUFBLENBRUE5aEIsTUFBQSxDQUNBcEQsVUFBQXZTLFNBR0EwRSxLQUFBLENBQ0E2TixXQUFBLEdBR0E0TCxTQUFBLENBRUE1TCxVQUFBLFNBQUEzUSxHQUNBLElBQUEyUSxFQUFBM1EsRUFBQTJRLFVBRUEsT0FBQSxJQUFBQSxHQUFBMVgsS0FBQXl1QixZQUFBL1csR0FBQS9CLEdBQUErQixNQU9BbWxCLEdBQUEsR0FFQUMsR0FBQSxDQUVBblosT0FBQSxDQUFBaUwsR0FBQWdPLEdBQUEvTixJQUVBL1QsTUFBQSxDQUNBaWlCLFNBQUFyN0IsT0FDQTJ2QixTQUFBM3ZCLE9BQ0FzN0IsU0FBQTczQixRQUNBODNCLFFBQUE5M0IsUUFDQSszQixNQUFBLzNCLFNBR0EwRSxLQUFBLENBQ0EwTyxJQUFBLFVBQ0F5a0IsVUFBQSxFQUNBQyxTQUFBLEVBQ0FFLFNBQUEsRUFDQUQsT0FBQSxHQUdBNVosU0FBQSxDQUVBOFosTUFBQSxTQUFBcjJCLEVBQUEraUIsR0FHQSxPQUFBblUsR0FGQTVPLEVBQUFnMkIsU0FFQWpULElBR0F1VCxrQkFBQSxXQUNBLE9BQUFyOUIsS0FBQW85QixPQUdBSCxRQUFBLFNBQUFsMkIsR0FHQSxPQUZBQSxFQUFBazJCLFNBRUFqOUIsS0FBQW85QixRQUtBN1ksaUJBQUEsV0FDQXZrQixLQUFBMHZCLGFBQ0ExdkIsS0FBQXV2QixjQUFBdnZCLEtBQUE4cEIsS0FBQSxHQUFBLElBSUEzRixPQUFBLENBRUEsQ0FFQS9hLEtBQUEsUUFFQW9ILFNBQUEsV0FDQSxPQUFBeFEsS0FBQXF4QixVQUdBcEgsUUFBQSxTQUFBamQsR0FDQUEsRUFBQWdrQixpQkFDQWh4QixLQUFBK3dCLFNBS0EsQ0FFQTNuQixLQUFBLFNBRUF0SixNQUFBLEVBRUFtcUIsUUFBQSxTQUFBamQsR0FFQUEsRUFBQWdtQixtQkFJQWhtQixFQUFBZ2tCLGlCQUVBaHhCLEtBQUEwdkIsY0FBQWx0QixFQUFBcTZCLEdBQUE3OEIsT0FDQUEsS0FBQWlaLFlBTUEsQ0FDQTdQLEtBQUEsYUFFQXRKLE1BQUEsRUFFQW1xQixRQUFBLFNBQUFqZCxHQUVBLEdBQUF4SyxFQUFBcTZCLEdBQUE3OEIsTUFDQSxPQUFBLEdBR0FBLEtBQUFrOUIsT0FBQUwsR0FBQXY3QixRQUNBa1IsR0FBQWEsSUFBQXdwQixHQUFBNTNCLElBQUEsU0FBQXE0QixHQUFBLE9BQUFBLEVBQUF2TSxVQUFBdGQsS0FBQXpULEtBQUF3dkIsTUFDQXhpQixFQUFBZ2tCLGtCQUVBNkwsR0FBQS92QixLQUFBOU0sUUFNQSxDQUVBb0osS0FBQSxPQUVBdEosTUFBQSxFQUVBbXFCLFFBQUEsV0FDQSxJQUFBaGhCLEVBQUFqSixLQUdBZ2QsR0FBQXpaLFFBQUF5WixHQUFBMVMsV0FBQXRLLEtBQUFtOUIsU0FDQXR2QixHQUFBdkQsU0FBQStnQixLQUFBLFlBQUEsVUFHQXJyQixLQUFBazlCLE9BQUFydkIsR0FBQTdOLEtBQUE4cEIsSUFBQSxTQUFBamMsR0FBQTdOLEtBQUE4cEIsSUFBQSxVQUFBK1MsR0FBQXY3QixRQUVBNlcsR0FBQTdOLFNBQUFDLGdCQUFBdkssS0FBQXU5QixTQUVBdjlCLEtBQUFpOUIsU0FDQW5zQixHQUFBOVEsS0FBQThwQixJQUFBLE9BQUFuYSxHQUFBckYsU0FBQVEsR0FBQSxTQUFBL0QsR0FDQSxJQUFBVCxFQUFBUyxFQUFBVCxPQUdBSSxFQUFBbTJCLE1BQUE1ekIsR0FBQUEsRUFBQWswQixVQUFBN3RCLEdBQUFoSixFQUFBMkMsRUFBQTZnQixNQUFBeGEsR0FBQWhKLEVBQUEyQyxFQUFBbTBCLFFBSUF0c0IsR0FBQXhHLFNBQUFVLEdBQUEsSUFBQUcsR0FBQSxVQUFBLFNBQUFwRSxHQUNBLElBQUFpc0IsRUFBQWpzQixFQUFBaXNCLGlCQUNBampCLEVBQUFoSixFQUFBZ0osS0FDQW9qQixFQUFBcHNCLEVBQUFULE9BRUEwc0IsR0FBQWpqQixJQUFBL0UsSUFBQTFFLElBQUE2c0IsR0FDQWxxQixFQUFBOG5CLFNBRUEsS0FFQSxDQUFBanhCLE1BQUEsSUFHQUUsS0FBQWc5QixVQUNBbHNCLEdBQUE5USxLQUFBOHBCLElBQUEsT0FBQW5hLEdBQUFyRixTQUFBLFVBQUEsU0FBQTBDLEdBQ0EsS0FBQUEsRUFBQW9tQixTQUFBMXNCLEVBQUFtMkIsTUFBQTV6QixJQUNBK0QsRUFBQWdrQixpQkFDQS9uQixFQUFBOG5CLFVBRUEsQ0FBQWp4QixNQUFBLE1BTUEsQ0FFQXNKLEtBQUEsU0FFQXRKLE1BQUEsRUFFQW1xQixRQUFBLFdBQ0EsSUFBQWhoQixFQUFBakosS0FHQTY4QixHQUFBbnJCLE9BQUFtckIsR0FBQXo2QixRQUFBcEMsTUFBQSxHQUVBNjhCLEdBQUF2N0IsUUFDQXVNLEdBQUF2RCxTQUFBK2dCLEtBQUEsWUFBQSxJQUdBeGQsR0FBQTdOLEtBQUE4cEIsSUFBQSxTQUFBLElBRUErUyxHQUFBbnpCLEtBQUEsU0FBQTR6QixHQUFBLE9BQUFBLEVBQUFDLFVBQUF0MEIsRUFBQXMwQixXQUNBbGxCLEdBQUEvTixTQUFBQyxnQkFBQXZLLEtBQUF1OUIsWUFTQTVZLFFBQUEsQ0FFQTFMLE9BQUEsV0FDQSxPQUFBalosS0FBQTB2QixZQUFBMXZCLEtBQUErd0IsT0FBQS93QixLQUFBd3ZCLFFBR0FBLEtBQUEsV0FDQSxJQUFBdm1CLEVBQUFqSixLQUdBLE9BQUFBLEtBQUEwWCxXQUFBMVgsS0FBQThwQixJQUFBcGMsYUFBQTFOLEtBQUEwWCxXQUNBNUIsR0FBQTlWLEtBQUEwWCxVQUFBMVgsS0FBQThwQixLQUNBLElBQUF0WCxHQUFBLFNBQUFDLEdBQUEsT0FBQTJPLHNCQUFBLFdBQUEsT0FBQW5ZLEVBQUF1bUIsT0FBQS9iLEtBQUFoQixRQUtBelMsS0FBQXV2QixjQUFBdnZCLEtBQUE4cEIsS0FBQSxFQUFBMFQsR0FBQXg5QixRQUdBK3dCLEtBQUEsV0FDQSxPQUFBL3dCLEtBQUF1dkIsY0FBQXZ2QixLQUFBOHBCLEtBQUEsRUFBQTBULEdBQUF4OUIsVUFPQSxTQUFBdzlCLEdBQUF6MkIsR0FDQSxJQUFBczJCLEVBQUF0MkIsRUFBQXMyQixrQkFDQXZOLEVBQUEvb0IsRUFBQStvQixRQUVBLE9BQUEsU0FBQXBSLEVBQUE4USxHQUFBLE9BQUEsSUFBQWhkLEdBQUEsU0FBQUMsRUFBQUMsR0FBQSxPQUFBNUIsR0FBQTROLEVBQUEsWUFBQSxXQUNBQSxFQUFBK2UsU0FBQS9lLEVBQUErZSxVQUNBL2UsRUFBQStlLFFBQUEvcUIsRUFFQW9kLEVBQUFwUixFQUFBOFEsR0FFQSxJQUFBNWUsRUFBQUUsR0FBQXVzQixFQUFBLGtCQUFBLFdBQ0F2c0IsR0FBQXVzQixFQUFBLGlDQUFBNXFCLEVBQUEsQ0FBQTNTLE1BQUEsSUFDQWdjLGFBQUFELElBQ0EsQ0FBQS9iLE1BQUEsSUFFQStiLEVBQUE5SSxXQUFBLFdBQ0FuQyxJQUNBNkIsS0FDQTlNLEVBQUFrSSxHQUFBd3ZCLEVBQUEsNkJBTUEsSUFBQUMsR0FBQSxDQUVBelAsUUE4Q0EsU0FBQTltQixHQUNBLElBQUF1MkIsRUFBQXYyQixFQUFBdTJCLE1BNkRBLFNBQUFJLEVBQUFDLEVBQUFoc0IsRUFBQWlzQixFQUFBQyxHQUVBbHNCLEVBQUF0TCxFQUFBLENBQUE0MkIsU0FBQSxFQUFBRCxVQUFBLEVBQUFjLE9BQUFSLEVBQUFRLFFBQUFuc0IsR0FFQSxJQUFBb3NCLEVBQUFULEVBQUFTLE9BQUFKLEVBQUFoc0IsR0FBQUEsR0FDQXdCLEVBQUEsSUFBQWIsR0FFQTByQixHQUFBLEVBYUEsT0FYQXJ1QixHQUFBb3VCLEVBQUFqVSxJQUFBLFNBQUEsT0FBQSxTQUFBOWMsR0FDQUEsRUFBQWdrQixpQkFDQTdkLEVBQUFWLFFBQUFvckIsR0FBQUEsRUFBQUUsSUFDQUMsR0FBQSxFQUNBRCxFQUFBaE4sU0FHQXBoQixHQUFBb3VCLEVBQUFqVSxJQUFBLE9BQUEsV0FBQSxPQUFBa1UsR0FBQUosRUFBQXpxQixLQUVBQSxFQUFBWixRQUFBd3JCLE9BQUFBLEVBRUE1cUIsRUFBQVosUUE5RUErcUIsRUFBQVMsT0FBQSxTQUFBbk4sRUFBQWpmLEdBRUEsSUFBQW9zQixFQUFBVCxFQUNBLHVEQUFBMU0sRUFBQSxnQkFDQWpmLEdBU0EsT0FOQW9zQixFQUFBdk8sT0FFQTdmLEdBQUFvdUIsRUFBQWpVLElBQUEsU0FBQSxXQUFBLE9BQUF0WCxHQUFBQyxVQUFBZ0IsS0FBQSxXQUFBLE9BQUFzcUIsRUFBQXBRLFVBQUEsTUFDQSxDQUFBN3RCLE1BQUEsSUFHQWkrQixHQUdBVCxFQUFBbk0sTUFBQSxTQUFBOE0sRUFBQXRzQixHQUNBLE9BQUErckIsRUFDQSxTQUFBMzJCLEdBQ0EsSUFBQSsyQixFQUFBLzJCLEVBQUErMkIsT0FFQSxNQUFBLCtCQUFBcDdCLEVBQUF1N0IsR0FBQUEsRUFBQXBvQixHQUFBb29CLElBQUEsMkhBQUFILEVBQUEsR0FBQSxvQkFFQW5zQixFQUNBLFNBQUF3QixHQUFBLE9BQUFBLEVBQUFWLGFBSUE2cUIsRUFBQVksUUFBQSxTQUFBRCxFQUFBdHNCLEdBQ0EsT0FBQStyQixFQUNBLFNBQUEzMkIsR0FDQSxJQUFBKzJCLEVBQUEvMkIsRUFBQSsyQixPQUVBLE1BQUEsc0NBQUFwN0IsRUFBQXU3QixHQUFBQSxFQUFBcG9CLEdBQUFvb0IsSUFBQSwrSEFBQUgsRUFBQSxPQUFBLG1FQUFBQSxFQUFBLEdBQUEsNEJBRUFuc0IsRUFDQSxTQUFBd0IsR0FBQSxPQUFBQSxFQUFBVCxZQUlBNHFCLEVBQUFhLE9BQUEsU0FBQUYsRUFBQWg2QixFQUFBME4sR0FDQSxPQUFBK3JCLEVBQ0EsU0FBQTMyQixHQUNBLElBQUErMkIsRUFBQS8yQixFQUFBKzJCLE9BRUEsTUFBQSxzRUFBQXA3QixFQUFBdTdCLEdBQUFBLEVBQUFwb0IsR0FBQW9vQixJQUFBLDRDQUFBaDZCLEdBQUEsSUFBQSw0SUFBQTY1QixFQUFBLE9BQUEseURBQUFBLEVBQUEsR0FBQSw0QkFFQW5zQixFQUNBLFNBQUF3QixHQUFBLE9BQUFBLEVBQUFWLFFBQUEsT0FDQSxTQUFBc3JCLEdBQUEsT0FBQXBvQixHQUFBLFFBQUFvb0IsRUFBQWpVLEtBQUE3bEIsU0FJQXE1QixFQUFBUSxPQUFBLENBQ0FNLEdBQUEsS0FDQS9oQixPQUFBLFdBdkdBc0gsT0FBQSxDQUFBbVosSUFFQWp6QixLQUFBLENBQ0EwekIsUUFBQSxnQkFDQVIsU0FBQSxtQkFDQTFMLFNBQUEsMkZBR0FsTixPQUFBLENBRUEsQ0FDQS9hLEtBQUEsT0FFQXRKLE1BQUEsRUFFQW1xQixRQUFBLFdBRUF4UixHQUFBelksS0FBQW85QixNQUFBLDJCQUNBamxCLEdBQUFuWSxLQUFBOHBCLElBQUEsV0FFQWpjLEdBQUE3TixLQUFBOHBCLElBQUEsVUFBQSxTQUdBN00sR0FBQWpkLEtBQUE4cEIsT0FJQSxDQUNBMWdCLEtBQUEsU0FFQXRKLE1BQUEsRUFFQW1xQixRQUFBLFdBRUFwYyxHQUFBN04sS0FBQThwQixJQUFBLFVBQUEsSUFDQXpSLEdBQUFyWSxLQUFBOHBCLElBQUEsZUFnR0EsSUFBQXVVLEdBQUEsQ0FFQTNhLFFBQUE4TSxHQUVBM21CLEtBQUEsQ0FDQWlHLFFBQUEsZUFDQW1KLE9BQUEsTUFDQTJYLFFBQUEsU0FLQTBOLEdBQUEsQ0FFQTNhLE9BQUEsQ0FBQWlMLEdBQUFpSCxJQUVBL2EsTUFBQSxDQUNBeWpCLFNBQUE3OEIsT0FDQSt3QixLQUFBLE9BQ0FyVSxNQUFBMWMsT0FDQWlkLE9BQUEvWixPQUNBNFksU0FBQXJZLFFBQ0F1dEIsY0FBQXZ0QixRQUNBMHRCLFFBQUFueEIsT0FDQWl4QixVQUFBL3RCLE9BQ0FndUIsVUFBQWh1QixPQUNBNDVCLFFBQUFyNUIsUUFDQXM1QixZQUFBLzhCLE9BQ0FnOUIsY0FBQXY1QixRQUNBd1csU0FBQS9XLFFBR0FpRixLQUFBLENBQ0EwMEIsU0FBQSxzQkFDQW5nQixNQUFBL1QsR0FBQSxRQUFBLE9BQ0F3b0IsUUFBQSxxQkFDQUosVUFBQXZmLEVBQ0F5TCxZQUFBekwsRUFDQXlmLGVBQUF6ZixFQUNBMGYsZUFBQTFmLEVBQ0F3ZixtQkFBQXhmLEVBQ0FxSyxLQUFBLElBQ0FDLFVBQUEsRUFDQWdoQixTQUFBLEVBQ0FDLFlBQUEsUUFDQUMsZUFBQSxFQUNBL2lCLFNBQUEsSUFDQW9hLGFBQUEsRUFDQUQsYUFBQSwrREFHQXhTLFNBQUEsQ0FFQTlGLFNBQUEsU0FBQXpXLEVBQUEraUIsR0FDQSxJQUFBdE0sRUFBQXpXLEVBQUF5VyxTQUNBa1YsRUFBQTNyQixFQUFBMnJCLGNBRUEsT0FBQSxJQUFBbFYsR0FBQWtWLEVBQUE1SSxFQUFBdE0sR0FHQWtoQixjQUFBLFNBQUEzM0IsRUFBQStpQixHQUdBLE9BQUExZSxHQUZBckUsRUFBQTIzQixjQUVBNVUsSUFHQWhMLElBQUEsU0FBQS9YLEdBR0EsTUFBQSxVQUZBQSxFQUFBcVgsT0FLQW9nQixRQUFBLENBRUFwbEIsSUFBQSxTQUFBclMsR0FDQSxJQUFBeTNCLEVBQUF6M0IsRUFBQXkzQixRQUdBLE9BQUFBLEdBSUFBLEVBQUF4K0IsS0FBQTIrQixVQUFBdnpCLEdBQUFvekIsRUFBQXgrQixLQUFBOHBCLE1BQUFuVSxHQUFBLHVCQUFBM1YsS0FBQThwQixRQUVBOXBCLEtBQUEyK0IsU0FBQWhwQixHQUFBLGdCQUxBLE1BU0E2VyxNQUFBLFNBQUFnUyxHQUNBcm1CLEdBQUFxbUIsRUFBQSxzQkFHQS9SLFdBQUEsR0FJQW1TLFVBQUEsQ0FFQXhsQixJQUFBLFNBQUFyUyxFQUFBK2lCLEdBSUEsT0FBQTVSLEdBSEFuUixFQUFBdzNCLFNBR0EsS0FGQXgzQixFQUFBOHJCLFFBRUEvSSxJQUdBMEMsTUFBQSxTQUFBb1MsR0FDQSxJQUFBMzFCLEVBQUFqSixLQUVBQSxLQUFBa3VCLFFBQ0EsT0FDQTBRLEVBQUExNUIsT0FBQSxTQUFBd1osR0FBQSxPQUFBelYsRUFBQTQxQixZQUFBbmdCLEtBQ0FyWSxFQUFBLEdBQUFyRyxLQUFBNnBCLE9BQUEsQ0FBQXJNLFNBQUF4ZCxLQUFBd2QsU0FBQXNCLElBQUE5ZSxLQUFBOGUsSUFBQUgsT0FBQTNlLEtBQUF3K0IsU0FBQXgrQixLQUFBMmUsV0FJQThOLFdBQUEsSUFNQWpJLGFBQUEsV0FDQXhrQixLQUFBdytCLFNBQUF2eEIsR0FBQWpOLEtBQUF3K0IsZ0JBQ0F4K0IsS0FBQTIrQixVQUdBeGEsT0FBQSxDQUVBLENBQ0EvYSxLQUFBLFlBRUFvSCxTQUFBLFdBQ0EsT0FBQXhRLEtBQUF1K0IsVUFHQXRVLFFBQUEsU0FBQWxqQixHQUNBLElBQUF1SixFQUFBdkosRUFBQXVKLFFBRUFtZ0IsRUFBQXp3QixLQUFBOCtCLFlBQ0FyTyxHQUFBQSxFQUFBeFgsU0FBQTNKLEdBQUFtaEIsRUFBQXhYLE9BQUE2USxJQUFBeFosS0FBQW1nQixFQUFBcUMsUUFBQWpSLFFBQUE0TyxFQUFBM0csTUFDQTJHLEVBQUFNLE1BQUEsS0FNQSxDQUNBM25CLEtBQUEsYUFFQXNWLEdBQUEsV0FDQSxPQUFBMWUsS0FBQXcrQixTQUdBdlUsUUFBQSxXQUNBLElBQUF3RyxFQUFBendCLEtBQUE4K0IsWUFFQXJPLElBQUF6d0IsS0FBQTQrQixVQUFBbDFCLEtBQUEsU0FBQWdWLEdBQUEsT0FBQWhTLEdBQUFnUyxFQUFBLGFBQ0ErUixFQUFBTSxTQUtBLENBQ0EzbkIsS0FBQSxhQUVBd0ksU0FBQSxFQUVBMU0sT0FBQSxXQUNBLE9BQUFsRixLQUFBdytCLFNBR0F2VSxRQUFBLFdBRUFqcUIsS0FBQXcrQixRQUFBOXdCLFlBQ0EwSSxHQUFBcFcsS0FBQTArQixlQUFBMStCLEtBQUE4cEIsSUFBQTlwQixLQUFBdytCLFdBTUEsQ0FDQXAxQixLQUFBLE9BRUF3SSxTQUFBLEVBRUExTSxPQUFBLFdBQ0EsT0FBQWxGLEtBQUF3K0IsU0FHQXZVLFFBQUEsU0FBQS9vQixFQUFBc3hCLEdBRUEsSUFBQTFJLEVBQUEwSSxFQUFBMUksSUFDQTNMLEVBQUFxVSxFQUFBclUsSUFFQXhGLEdBQUEzWSxLQUFBdytCLFFBQUEsMEJBQUEsVUFBQXgrQixLQUFBeStCLGFBQUFqdkIsR0FBQXhQLEtBQUE4cEIsS0FBQXBnQixLQUFBLFNBQUFnVixHQUFBLE1BQUEsV0FBQTdRLEdBQUE2USxFQUFBLGVBRUExZSxLQUFBNnlCLFNBQUExYSxHQUFBMlIsRUFBQTlwQixLQUFBLFFBQUEsWUFFQSxXQUFBbWUsR0FDQW5lLEtBQUErK0IsYUFBQWpWLEVBQUE1YSxhQUFBckssRUFBQWdKLEdBQUFpYyxFQUFBLGNBQUFqbEIsRUFBQWdKLEdBQUFpYyxFQUFBLGlCQUFBQSxLQUtBLENBQ0ExZ0IsS0FBQSxhQUVBbEUsT0FBQSxXQUNBLE9BQUFsRixLQUFBdytCLFNBR0F2VSxRQUFBLFNBQUFqZCxFQUFBakcsR0FDQSxJQUFBK2lCLEVBQUEvaUIsRUFBQStpQixJQUdBMkcsRUFBQXp3QixLQUFBOCtCLFlBRUFweUIsR0FBQTFNLEtBQUF3K0IsUUFBQSxXQUFBL04sR0FBQUEsRUFBQTNHLE1BQUFBLEdBQ0E5YyxFQUFBZ2tCLG1CQUtBLENBQ0E1bkIsS0FBQSxPQUVBbEUsT0FBQSxXQUNBLE9BQUFsRixLQUFBdytCLFNBR0F2VSxRQUFBLFNBQUEvb0IsRUFBQTZGLEdBQ0EsSUFBQStpQixFQUFBL2lCLEVBQUEraUIsSUFHQTJHLEVBQUF6d0IsS0FBQTgrQixjQUVBck8sR0FBQUEsR0FBQUEsRUFBQTNHLE1BQUFBLElBQ0E5cEIsS0FBQSsrQixhQUFBLE1BT0FwYSxRQUFBLENBRUFtYSxVQUFBLFdBQ0EsSUFDQXJPLEVBREF6d0IsS0FBQTQrQixVQUFBMzVCLElBQUFqRixLQUFBNitCLGFBQUEzNUIsT0FBQSxTQUFBc3RCLEdBQUEsT0FBQUEsR0FBQUEsRUFBQU8sYUFDQSxHQUNBLE9BQUF0QyxHQUFBanVCLEVBQUFpdUIsRUFBQWdDLEtBQUEsVUFBQW5qQixHQUFBbWhCLEVBQUF4WCxPQUFBNlEsSUFBQTlwQixLQUFBOHBCLE1BQUEyRyxHQUdBc08sYUFBQSxTQUFBQyxFQUFBdGdCLEdBQ0EsSUFBQXpWLEVBQUFqSixLQUlBdytCLEVBREF4K0IsS0FDQXcrQixRQUNBUyxFQUFBandCLEdBQUF3dkIsR0FBQXZoQixHQUFBdWhCLEdBQUEsRUFTQSxPQUxBM3dCLEdBRkE2USxFQUFBdWdCLEVBQUFELEdBQUF0Z0IsRUFFQSxPQUFBLFVBQUFBLEVBQUEsWUFBQSxNQUFBdWdCLEVBQUEsU0FFQWhpQixHQUFBdWhCLEVBQUFTLEdBRUEvaUIsR0FBQUcsT0FBQSxDQUFBcUMsRUFBQThmLElBQ0Foc0IsR0FBQWEsSUFBQSxDQUNBNkksR0FBQUMsTUFBQXFpQixFQUFBLENBQUF2aEIsT0FBQStoQixHQUFBaC9CLEtBQUEyYixVQUNBTyxHQUFBQyxNQUFBdUMsRUFBQSxDQUFBd2dCLEtBQUEsVUFBQXhnQixFQUFBLFlBQUEsTUFBQXNnQixFQUFBLFNBQUFoL0IsS0FBQTJiLFlBRUF0RSxNQUFBeFAsSUFDQTRMLEtBQUEsV0FDQTVGLEdBQUE2USxFQUFBLENBQUF3Z0IsS0FBQSxLQUNBajJCLEVBQUFvbEIsUUFBQW1RLE1BSUFLLFlBQUEsU0FBQW5nQixHQUNBLE9BQUExZSxLQUFBc3VCLGNBQUE1UCxFQUFBLFNBQUExZSxLQUFBc3VCLGNBQUE1UCxFQUFBLGVBT0F5Z0IsR0FBQSxDQUVBeGIsT0FBQSxDQUFBbVosSUFFQXYyQixLQUFBLE9BRUF1VSxNQUFBLENBQ0EyWCxLQUFBL3dCLE9BQ0E2YixLQUFBcFksUUFDQWc0QixRQUFBaDRCLFNBR0EwRSxLQUFBLENBQ0E0b0IsS0FBQSxRQUNBbFYsTUFBQSxFQUNBNGYsU0FBQSxFQUNBSSxRQUFBLG9CQUNBNkIsYUFBQSx5QkFDQXJDLFNBQUEsb0JBQ0FzQyxRQUFBLG9CQUNBQyxzQkFBQSxtQ0FDQUMsb0JBQUEsNkJBQ0FDLFFBQUEsZUFDQUMsV0FBQSx1QkFDQXBPLFNBQUEsc0JBQ0EzWixXQUFBLEdBR0E0TCxTQUFBLENBRUErYixRQUFBLFNBQUF0NEIsR0FDQSxJQUFBd1csRUFBQXhXLEVBQUF3VyxLQUNBOGhCLEVBQUF0NEIsRUFBQXM0QixRQUVBLE9BQUE5aEIsRUFBQThoQixFQUFBLElBR0FJLFdBQUEsU0FBQTE0QixHQUNBLElBQUFvMkIsRUFBQXAyQixFQUFBbzJCLFFBQ0FzQyxFQUFBMTRCLEVBQUEwNEIsV0FFQSxPQUFBdEMsRUFBQXNDLEVBQUEsSUFHQUQsUUFBQSxTQUFBejRCLEdBQ0EsSUFBQTByQixFQUFBMXJCLEVBQUEwckIsS0FHQSxPQUZBMXJCLEVBQUF5NEIsUUFFQSxJQUFBL00sR0FHQThNLG9CQUFBLFNBQUF4NEIsR0FDQSxJQUFBMHJCLEVBQUExckIsRUFBQTByQixLQUNBOE0sRUFBQXg0QixFQUFBdzRCLG9CQUVBLE1BQUEsU0FBQTlNLEdBQUEsV0FBQUEsRUFBQSxHQUFBOE0sR0FHQUQsc0JBQUEsU0FBQXY0QixHQUNBLElBQUEwckIsRUFBQTFyQixFQUFBMHJCLEtBQ0E2TSxFQUFBdjRCLEVBQUF1NEIsc0JBRUEsTUFBQSxTQUFBN00sR0FBQSxXQUFBQSxFQUFBLEdBQUE2TSxHQUdBakMsa0JBQUEsU0FBQXQyQixHQUdBLE1BQUEsV0FGQUEsRUFBQTByQixLQUVBenlCLEtBQUFvOUIsTUFBQTF2QixXQUFBMU4sS0FBQW85QixRQUtBalosT0FBQSxDQUVBLENBRUEvYSxLQUFBLFFBRUFvSCxTQUFBLFdBQ0EsTUFBQSxnQkFHQXlaLFFBQUEsU0FBQWxqQixHQUNBLElBQUFrc0IsRUFBQWxzQixFQUFBdUosUUFBQTJpQixNQUNBbHNCLEVBQUFpc0Isa0JBRUFDLEdBQUF0ZCxHQUFBc2QsRUFBQTNvQixTQUFBK2dCLE9BQ0FyckIsS0FBQSt3QixTQU1BLENBQ0EzbkIsS0FBQSxhQUVBa2YsU0FBQSxFQUVBNUosR0FBQSxXQUNBLE9BQUExZSxLQUFBbzlCLE9BR0FuVCxRQUFBLFNBQUFsakIsR0FDQSxJQUFBMjRCLEVBQUEzNEIsRUFBQTI0QixjQUdBLElBQUFBLEVBQUFwK0IsU0FDQXRCLEtBQUFxUyxRQUFBcXRCLEVBQUEsR0FBQXJ0QixXQU9BLENBQ0FqSixLQUFBLFlBRUF0SixNQUFBLEVBQ0F3b0IsU0FBQSxFQUVBcGpCLE9BQUEsV0FDQSxPQUFBbEYsS0FBQW05QixTQUdBbFQsUUFBQSxTQUFBamQsR0FDQUEsRUFBQXdFLFlBQUF4RSxFQUFBZ2tCLG1CQUtBLENBQ0E1bkIsS0FBQSxZQUVBa2YsU0FBQSxFQUVBNUosR0FBQSxXQUNBLE9BQUExZSxLQUFBbzlCLE9BR0FuVCxRQUFBLFNBQUFqZCxHQUVBLEdBQUEsSUFBQUEsRUFBQTB5QixjQUFBcCtCLE9BQUEsQ0FJQSxJQUFBK1EsRUFBQW5CLE1BQUF3dUIsY0FBQSxHQUFBcnRCLFFBQUFyUyxLQUFBcVMsUUFDQXRMLEVBQUEvRyxLQUFBbzlCLE1BQ0E3WCxFQUFBeGUsRUFBQXdlLFVBQ0FrQixFQUFBMWYsRUFBQTBmLGFBQ0F5TCxFQUFBbnJCLEVBQUFtckIsY0FFQXpMLEdBQUF5TCxHQUNBLElBQUEzTSxHQUFBLEVBQUFsVCxHQUNBb1UsRUFBQWxCLEdBQUEyTSxHQUFBN2YsRUFBQSxJQUVBckYsRUFBQXdFLFlBQUF4RSxFQUFBZ2tCLG9CQU9BLENBQ0E1bkIsS0FBQSxPQUVBdEosTUFBQSxFQUVBbXFCLFFBQUEsV0FFQSxXQUFBanFCLEtBQUF5eUIsTUFBQWhhLEdBQUF6WSxLQUFBbzlCLE1BQUExdkIsV0FBQTFOLEtBQUF3L0IsV0FDQWhwQixHQUFBeFcsS0FBQW85QixNQUFBLFNBQ0FqbEIsR0FBQW5ZLEtBQUFvOUIsTUFBQTF2QixXQUFBMU4sS0FBQXcvQixVQUdBM3hCLEdBQUF2RCxTQUFBQyxnQkFBQSxZQUFBdkssS0FBQW05QixRQUFBLFNBQUEsSUFDQWhsQixHQUFBN04sU0FBQStnQixLQUFBcnJCLEtBQUFvL0IsYUFBQXAvQixLQUFBcS9CLFNBQ0F4eEIsR0FBQXZELFNBQUErZ0IsS0FBQSxlQUFBLG9CQUNBeGQsR0FBQTdOLEtBQUE4cEIsSUFBQSxVQUFBLFNBQ0EzUixHQUFBblksS0FBQThwQixJQUFBOXBCLEtBQUF5L0IsWUFDQXRuQixHQUFBblksS0FBQW85QixNQUFBcDlCLEtBQUF1L0Isb0JBQUEsV0FBQXYvQixLQUFBeXlCLEtBQUF6eUIsS0FBQXcvQixRQUFBLElBRUF2aUIsR0FBQTNTLFNBQUErZ0IsTUFDQWxULEdBQUE3TixTQUFBK2dCLEtBQUFyckIsS0FBQXMvQix1QkFFQXQvQixLQUFBcy9CLHdCQTBEQUssS0FBQS9PLFNBQUEsc0JBcERBLENBQ0F4bkIsS0FBQSxPQUVBdEosTUFBQSxFQUVBbXFCLFFBQUEsV0FDQTVSLEdBQUEvTixTQUFBK2dCLEtBQUFyckIsS0FBQXMvQix1QkFDQXp4QixHQUFBdkQsU0FBQStnQixLQUFBLGVBQUEsTUFJQSxDQUNBamlCLEtBQUEsU0FFQXRKLE1BQUEsRUFFQW1xQixRQUFBLFdBdUNBLElBQ0EyVixFQXRDQTUvQixLQUFBcy9CLHlCQXNDQU0sRUFBQUQsTUFDQS9PLFFBQUFnUCxFQUFBaFAsUUFBQS92QixRQUFBLG9CQUFBLEtBckNBLFdBQUFiLEtBQUF5eUIsTUFDQTViLEdBQUE3VyxLQUFBbzlCLE9BR0Eva0IsR0FBQXJZLEtBQUFvOUIsTUFBQXA5QixLQUFBdS9CLG9CQUFBdi9CLEtBQUF3L0IsU0FDQW5uQixHQUFBclksS0FBQThwQixJQUFBOXBCLEtBQUF5L0IsWUFDQTV4QixHQUFBN04sS0FBQThwQixJQUFBLFVBQUEsSUFDQXpSLEdBQUEvTixTQUFBK2dCLEtBQUFyckIsS0FBQW8vQixhQUFBcC9CLEtBQUFxL0IsU0FFQXh4QixHQUFBdkQsU0FBQUMsZ0JBQUEsWUFBQSxNQUtBLENBQ0FuQixLQUFBLHVCQUVBNmdCLFFBQUEsU0FBQWpkLEdBRUFoTixLQUFBMHZCLGFBQUExdEIsRUFBQWdMLEVBQUErQyxLQUFBLFFBQUEvUCxLQUFBdWQsTUFDQXZkLEtBQUErd0IsV0FvQkEsU0FBQTRPLEtBQ0EsT0FBQWhxQixHQUFBLHdCQUFBckwsU0FBQXUxQixPQUFBL3BCLEdBQUF4TCxTQUFBdTFCLEtBQUEsMEJBR0EsSUFBQUMsR0FBQSxDQUVBbmMsT0FBQSxDQUFBaUwsSUFFQTlULE1BQUEsQ0FDQWlsQixhQUFBcitCLE9BQ0FzK0IsV0FBQXQrQixRQUdBbUksS0FBQSxDQUNBazJCLGFBQUEsWUFDQUMsV0FBQSxvQkFHQTFjLFNBQUEsQ0FFQTVMLFVBQUEsU0FBQTNRLEVBQUEraUIsR0FHQSxPQUFBMWQsR0FBQTBkLEVBRkEvaUIsRUFBQWc1QixlQUtBblAsUUFBQSxTQUFBN3BCLEVBQUEraUIsR0FHQSxPQUFBMWQsR0FBQTBkLEVBRkEvaUIsRUFBQWk1QixjQU9BMWIsVUFBQSxXQUNBelcsR0FBQTdOLEtBQUE4cEIsSUFBQSxZQUFBLE1BR0FwRixPQUFBLENBRUFqRSxLQUFBLFdBRUEsU0FBQXpnQixLQUFBNHdCLFVBQUE1d0IsS0FBQTBYLFlBSUEsQ0FDQXBILFFBQUF6TCxFQUFBZ0osR0FBQTdOLEtBQUE4cEIsSUFBQSxjQUNBbmlCLElBQUFDLEtBQUFELElBQUEsSUFBQXNWLEdBQUFqZCxLQUFBMFgsWUFBQWlILEdBQUEzZSxLQUFBNHdCLFNBQUEzVCxPQUFBQSxHQUFBamQsS0FBQThwQixTQUlBbEosTUFBQSxTQUFBN1osR0FDQSxJQUFBdUosRUFBQXZKLEVBQUF1SixRQUNBM0ksRUFBQVosRUFBQVksSUFFQWtHLEdBQUE3TixLQUFBOHBCLElBQUEsWUFBQW5pQixHQUNBQyxLQUFBa0IsTUFBQXdILEtBQUExSSxLQUFBa0IsTUFBQW5CLElBQ0FzSixHQUFBalIsS0FBQThwQixJQUFBLFdBSUEzRixPQUFBLENBQUEsWUFNQThiLEdBQUEsQ0FFQW5sQixNQUFBLENBQUEsUUFBQSxVQUVBd0osVUFBQSxXQUNBbk0sR0FBQW5ZLEtBQUE4cEIsSUFBQSx3QkFHQXBGLE9BQUEsQ0FFQWpFLEtBQUEsV0FDQSxTQUFBelIsR0FBQWhQLEtBQUE4cEIsTUFBQTlwQixLQUFBZ2QsT0FBQWhkLEtBQUFpZCxTQUNBLENBQUFELE1BQUFBLEdBQUFoZCxLQUFBOHBCLElBQUFwYyxZQUFBdVAsT0FBQWpkLEtBQUFpZCxTQUlBMkQsTUFBQSxTQUFBakQsR0FDQVYsR0FBQWpkLEtBQUE4cEIsSUFBQXBoQixHQUFBSyxRQUFBLENBQ0FrVSxPQUFBamQsS0FBQWlkLE9BQ0FELE1BQUFoZCxLQUFBZ2QsT0FDQVcsR0FBQVYsU0FHQWtILE9BQUEsQ0FBQSxZQU1BMkIsR0FBQSxDQUVBaEwsTUFBQSxDQUNBNkQsT0FBQS9aLFFBR0FpRixLQUFBLENBQ0E4VSxPQUFBLEdBR0FnRyxRQUFBLENBRUF1YixTQUFBLFNBQUF4aEIsR0FDQSxJQUFBelYsRUFBQWpKLEtBR0EwZSxFQUFBQSxHQUFBL0ksR0FBQStJLElBQUFwVSxTQUFBK2dCLEtBRUFwYSxHQUFBalIsS0FBQThwQixJQUFBLGVBQUEsQ0FBQTlwQixLQUFBMGUsS0FDQStHLEdBQUEvRyxFQUFBLENBQUFDLE9BQUEzZSxLQUFBMmUsU0FBQWxMLEtBQUEsV0FBQSxPQUFBeEMsR0FBQWhJLEVBQUE2Z0IsSUFBQSxXQUFBLENBQUE3Z0IsRUFBQXlWLFFBUUF5RixPQUFBLENBRUFnYyxNQUFBLFNBQUFuekIsR0FFQUEsRUFBQWdtQixtQkFJQWhtQixFQUFBZ2tCLGlCQUNBaHhCLEtBQUFrZ0MsU0FBQW56QixHQUFBOHFCLG1CQUFBNzNCLEtBQUE4cEIsSUFBQW1KLE9BQUFoeEIsT0FBQSxRQU9BbStCLEdBQUEsQ0FFQTc1QixLQUFBLE1BRUF1VSxNQUFBLENBQ0F2QyxJQUFBN1csT0FDQTRFLE9BQUE1RSxPQUNBcWQsT0FBQTVaLFFBQ0FzYSxVQUFBN2EsT0FDQThhLFdBQUE5YSxPQUNBeTdCLE9BQUFsN0IsUUFDQWt1QixNQUFBenVCLFFBR0FpRixLQUFBLFdBQUEsTUFBQSxDQUNBME8sS0FBQSxFQUNBalMsUUFBQSxFQUNBeVksUUFBQSxFQUNBVSxVQUFBLEVBQ0FDLFdBQUEsRUFDQTJnQixRQUFBLEVBQ0FoTixNQUFBLEVBQ0FpTixZQUFBLHdCQUdBaGQsU0FBQSxDQUVBN1QsU0FBQSxDQUVBMkosSUFBQSxTQUFBclMsRUFBQStpQixHQUNBLElBQUF4akIsRUFBQVMsRUFBQVQsT0FFQSxPQUFBQSxFQUFBNFIsR0FBQTVSLEVBQUF3akIsR0FBQSxDQUFBQSxJQUdBMEMsTUFBQSxTQUFBL2MsR0FDQXpQLEtBQUErZSxRQUNBbFIsR0FBQTNJLEdBQUF1SyxFQUFBLFNBQUF6UCxLQUFBLFlBQUEsS0FBQSxhQUFBLFdBSUF5c0IsV0FBQSxJQU1BL0gsT0FBQSxDQUVBLENBRUFqRSxLQUFBLFNBQUExWixHQUNBLElBQUFrQyxFQUFBakosS0FDQStHLEVBQUEyZCxRQU9BMWtCLEtBQUF5UCxTQUFBbkcsUUFBQSxTQUFBb1YsR0FFQSxJQUFBekwsRUFBQXlMLEVBQUE2aEIsbUJBR0F0dEIsRUFEQUEsR0FDQSxDQUFBc0YsSUFBQTFPLEdBQUE2VSxFQUFBLHVCQUFBelYsRUFBQXNQLE1BR0FpWCxLQUFBdEssR0FBQXhHLEVBQUF6VixFQUFBd1csVUFBQXhXLEVBQUF5VyxZQUNBaEIsRUFBQTZoQixrQkFBQXR0QixLQU1BMk4sTUFBQSxTQUFBL1csR0FDQSxJQUFBWixFQUFBakosS0FJQSxJQUFBNkosRUFBQTZhLE9BRUEsT0FEQTFrQixLQUFBb3VCLFFBQ0F2a0IsRUFBQTZhLFFBQUEsRUFHQTFrQixLQUFBeVAsU0FBQW5HLFFBQUEsU0FBQW9WLEdBR0EsU0FBQXpGLEVBQUE2YSxHQUVBam1CLEdBQUE2USxFQUFBLGNBQUFvVixHQUFBN3FCLEVBQUE4VixPQUFBLFNBQUEsSUFFQXBHLEdBQUErRixFQUFBelYsRUFBQXEzQixZQUFBeE0sR0FDQW5iLEdBQUErRixFQUFBekwsRUFBQXNGLEtBRUF0SCxHQUFBeU4sRUFBQW9WLEVBQUEsU0FBQSxXQUVBN2dCLEVBQUE2Z0IsT0FBQUEsRUFFQTdxQixFQUFBb2xCLFFBQUEzUCxHQVpBLElBQUF6TCxFQUFBeUwsRUFBQTZoQixtQkFnQkF0dEIsRUFBQXVjLE1BQUF2YyxFQUFBNmdCLFFBQUE3Z0IsRUFBQXV0QixRQWNBdnRCLEVBQUF1YyxNQUFBdmMsRUFBQTZnQixTQUFBN2dCLEVBQUF1dEIsUUFBQXYzQixFQUFBbzNCLFFBRUFwbkIsR0FBQSxJQWRBaEcsRUFBQXV0QixRQUFBLEVBRUEzMkIsRUFBQTBJLFNBQUExSSxFQUFBMEksU0FBQUMsR0FBQUMsV0FBQWdCLEtBQUEsV0FBQSxPQUFBLElBQUFqQixHQUFBLFNBQUFDLEdBQUEsT0FBQU0sV0FBQU4sRUFBQXhKLEVBQUFvcUIsV0FFQTVmLEtBQUEsV0FDQXdGLEdBQUEsR0FDQWxHLFdBQUEsV0FDQUUsRUFBQXV0QixRQUFBLEVBQ0F2M0IsRUFBQW1sQixTQUNBLFdBYUFqSyxPQUFBLENBQUEsU0FBQSxhQVFBc2MsR0FBQSxDQUVBM2xCLE1BQUEsQ0FDQXZDLElBQUE3VyxPQUNBMEssUUFBQTFLLE9BQ0Fva0IsT0FBQTNnQixRQUNBNHBCLFNBQUE1cEIsUUFDQXdaLE9BQUEvWixRQUdBaUYsS0FBQSxDQUNBME8sSUFBQSxZQUNBbk0sU0FBQSxFQUNBMFosUUFBQSxFQUNBaUosVUFBQSxFQUNBcFEsT0FBQSxHQUdBMkUsU0FBQSxDQUVBb2QsTUFBQSxDQUVBdG5CLElBQUEsU0FBQWxZLEVBQUE0b0IsR0FDQSxPQUFBNVIsR0FBQSxlQUFBNFIsR0FBQTVrQixPQUFBLFNBQUF3WixHQUFBLE9BQUFBLEVBQUF1VSxRQUdBekcsTUFBQSxTQUFBa1UsR0FDQTFnQyxLQUFBOGxCLFFBQ0E5bEIsS0FBQWt1QixRQUFBLFNBQUF3UyxFQUFBLENBQUEvaEIsT0FBQTNlLEtBQUEyZSxRQUFBLEtBSUE4TixXQUFBLEdBSUEzYyxRQUFBLFdBQ0EsT0FBQW9JLEdBQUFsWSxLQUFBMGdDLE1BQUF6N0IsSUFBQSxTQUFBeVosR0FBQSxPQUFBM1IsR0FBQTJSLEVBQUF1VSxNQUFBaHhCLE9BQUEsS0FBQXFLLEtBQUEsT0FHQW1ELFNBQUEsU0FBQTFJLEdBQ0EsSUFBQXNFLEVBQUF0RSxFQUFBcUYsUUFFQSxPQUFBQSxHQUFBcE0sS0FBQTBnQyxNQUFBcjFCLEdBQUEsT0FLQXFaLE9BQUEsQ0FFQSxDQUVBakUsS0FBQSxXQUNBLElBQUF4WCxFQUFBakosS0FJQXNCLEVBREF0QixLQUFBOFAsUUFDQXhPLE9BRUEsSUFBQUEsSUFBQTBOLEdBQUFoUCxLQUFBOHBCLEtBQ0EsT0FBQSxFQUdBLElBQUFqRSxFQUFBbmYsRUFBQThmLEdBQUF4bUIsS0FBQThQLFFBQUEsS0FDQXlWLEVBQUFNLEVBQUFOLFVBQ0FrQixFQUFBWixFQUFBWSxhQUNBbVosRUFBQXRhLEdBQUFPLEdBQ0FsZSxFQUFBOGUsRUFBQTlILEdBQUFpaEIsR0FBQTNpQixPQUNBd1QsR0FBQSxFQWtCQSxPQWhCQWxMLElBQUE1ZCxFQUNBOG9CLEVBQUFudkIsRUFBQSxHQUdBdEIsS0FBQThQLFFBQUFzVixNQUFBLFNBQUExRyxFQUFBdmMsR0FDQSxHQUFBMmIsR0FBQVksRUFBQWtoQixHQUFBejNCLElBQUFjLEVBQUEwVixRQUFBLEVBRUEsT0FEQThSLEVBQUF0dUIsR0FDQSxLQUlBLElBQUFzdUIsR0FBQXp3QixLQUFBK3VCLFdBQ0EwQixFQUFBLElBSUEsQ0FBQUEsT0FBQUEsSUFHQTdQLE1BQUEsU0FBQTdaLEdBQ0EsSUFBQTBwQixFQUFBMXBCLEVBQUEwcEIsT0FHQXp3QixLQUFBMGdDLE1BQUFwM0IsUUFBQSxTQUFBb1YsR0FBQSxPQUFBQSxFQUFBeVIsU0FDQTlYLEdBQUFyWSxLQUFBeVAsU0FBQXpQLEtBQUF1WSxNQUVBLElBQUFrWSxHQUNBeGYsR0FBQWpSLEtBQUE4cEIsSUFBQSxTQUFBLENBQUEyRyxFQUFBdFksR0FBQW5ZLEtBQUF5UCxTQUFBZ2hCLEdBQUF6d0IsS0FBQXVZLFFBS0E0TCxPQUFBLENBQUEsU0FBQSxhQVFBd2MsR0FBQSxDQUVBaGQsT0FBQSxDQUFBaUwsR0FBQXNOLElBRUFwaEIsTUFBQSxDQUNBM1MsSUFBQSxLQUNBQyxPQUFBakQsUUFDQXdaLE9BQUFqZCxPQUNBK2EsVUFBQS9hLE9BQ0FrL0IsVUFBQWwvQixPQUNBbS9CLFlBQUFuL0IsT0FDQW8vQixTQUFBcC9CLE9BQ0FxL0IsU0FBQXIvQixPQUNBcy9CLFVBQUF0L0IsT0FDQXUvQixhQUFBOTdCLFFBQ0ErN0IsU0FBQS83QixRQUNBbVksYUFBQTFZLFFBR0FpRixLQUFBLENBQ0ExQixJQUFBLEVBQ0FDLFFBQUEsRUFDQXVXLE9BQUEsRUFDQWxDLFVBQUEsR0FDQW1rQixVQUFBLFlBQ0FDLFlBQUEsR0FDQUMsU0FBQSxrQkFDQUMsU0FBQSxrQkFDQUMsVUFBQSxHQUNBQyxjQUFBLEVBQ0FDLFVBQUEsRUFDQTVqQixjQUFBLEdBR0FnRyxTQUFBLENBRUEzRSxPQUFBLFNBQUE1WCxHQUdBLE9BQUFxWixHQUZBclosRUFBQTRYLFNBS0FxaUIsVUFBQSxTQUFBajZCLEVBQUEraUIsR0FDQSxJQUFBa1gsRUFBQWo2QixFQUFBaTZCLFVBRUEsT0FBQUEsR0FBQXJyQixHQUFBcXJCLEVBQUFsWCxJQUFBQSxHQUdBbVgsYUFBQSxTQUFBbDZCLEVBQUEraUIsR0FHQSxPQUFBMWUsR0FGQXJFLEVBQUFrNkIsYUFFQW5YLElBQUE5cEIsS0FBQW1oQyxhQUdBcE8sU0FBQSxDQUVBM1osSUFBQSxXQUNBLE9BQUFYLEdBQUF6WSxLQUFBZ2hDLFVBQUFoaEMsS0FBQTRnQyxZQUdBN1csSUFBQSxTQUFBOWxCLEdBQ0FBLElBQUFqRSxLQUFBK3lCLFVBQ0F2YSxHQUFBeFksS0FBQWdoQyxVQUFBaGhDLEtBQUE2Z0MsWUFBQTdnQyxLQUFBNGdDLFdBQ0EzdkIsR0FBQWpSLEtBQUE4cEIsSUFBQSxXQUNBN2xCLEdBQUF3VSxHQUFBelksS0FBQWdoQyxVQUFBaGhDLEtBQUE2Z0MsZUFDQXJvQixHQUFBeFksS0FBQWdoQyxVQUFBaGhDLEtBQUE0Z0MsVUFBQTVnQyxLQUFBNmdDLGFBQ0E1dkIsR0FBQWpSLEtBQUE4cEIsSUFBQSxnQkFRQXhGLFVBQUEsV0FDQXRrQixLQUFBbWhDLFlBQUF4ckIsR0FBQSwyQkFBQTNWLEtBQUE4cEIsTUFBQW5VLEdBQUEsNkNBQ0EzVixLQUFBb2hDLFNBQUEsRUFDQXBoQyxLQUFBK3lCLFVBQUEsR0FHQXZPLGFBQUEsV0FFQXhrQixLQUFBb2hDLFVBQ0FwaEMsS0FBQSt3QixPQUNBMVksR0FBQXJZLEtBQUFnaEMsVUFBQWhoQyxLQUFBNmdDLGNBR0E1ekIsR0FBQWpOLEtBQUFtaEMsYUFDQW5oQyxLQUFBbWhDLFlBQUEsS0FDQW5oQyxLQUFBaWhDLGFBQUEsTUFHQTljLE9BQUEsQ0FFQSxDQUVBL2EsS0FBQSwyQkFFQXNWLEdBQUExVSxJQUFBekcsT0FFQTBtQixRQUFBLFdBQ0EsSUFBQWhoQixFQUFBakosS0FHQSxJQUFBLElBQUFBLEtBQUFzZCxjQUFBK2pCLFNBQUFwTyxNQUFBLEVBQUExdkIsT0FBQXliLFlBQUEsQ0FJQSxJQUFBMVksRUFBQXFQLEdBQUEwckIsU0FBQXBPLE1BRUEzc0IsR0FDQWdhLEdBQUFHLEtBQUEsV0FFQSxJQUNBdFksRUFEQXdXLEdBQUFyWSxHQUNBNkIsSUFDQW01QixFQUFBM2lCLEdBQUExVixFQUFBNmdCLEtBQUEzaEIsSUFDQWl0QixFQUFBbnNCLEVBQUE2Z0IsSUFBQTVhLGFBRUFqRyxFQUFBbTRCLFNBQUFqNUIsR0FBQW01QixFQUFBbE0sR0FBQWtNLEdBQUFuNUIsRUFBQTdCLEVBQUE0SSxjQUNBcVcsR0FBQWhpQixPQUFBNEUsRUFBQWl0QixHQUFBanhCLEVBQUE4RSxFQUFBcVUsY0FBQXJVLEVBQUFxVSxhQUFBLEdBQUFyVSxFQUFBMFYsY0FZQStGLE9BQUEsQ0FFQSxDQUVBakUsS0FBQSxTQUFBMVosRUFBQWdKLEdBQ0EsSUFBQWtOLEVBQUFsVyxFQUFBa1csT0FHQWpkLEtBQUEreUIsVUFBQSxXQUFBaGpCLElBQ0EvUCxLQUFBK3dCLE9BQ0E5VCxFQUFBamQsS0FBQThwQixJQUFBNWEsYUFDQWxQLEtBQUF3dkIsUUFHQXZTLEVBQUFqZCxLQUFBK3lCLFNBQUE5VixFQUFBamQsS0FBQThwQixJQUFBNWEsYUFFQWxQLEtBQUF1aEMsVUFBQTVpQixHQUFBM2UsS0FBQW9oQyxRQUFBcGhDLEtBQUFtaEMsWUFBQW5oQyxLQUFBOHBCLEtBQUEzaEIsSUFDQW5JLEtBQUF3aEMsYUFBQXhoQyxLQUFBdWhDLFVBQUF0a0IsRUFFQSxJQUFBN1UsRUFBQXE1QixHQUFBLFNBQUF6aEMsTUFNQSxPQUpBQSxLQUFBbUksSUFBQVAsS0FBQUQsSUFBQTlDLEVBQUE0OEIsR0FBQSxNQUFBemhDLE9BQUFBLEtBQUF1aEMsV0FBQXZoQyxLQUFBMmUsT0FDQTNlLEtBQUFvSSxPQUFBQSxHQUFBQSxFQUFBcEksS0FBQThwQixJQUFBNWEsYUFDQWxQLEtBQUEwaEMsVUFBQTFoQyxLQUFBNjdCLFdBRUEsQ0FDQThGLFlBQUEsRUFDQTFrQixPQUFBQSxFQUNBMmtCLFFBQUEvekIsR0FBQTdOLEtBQUE4cEIsSUFBQSxDQUFBLFlBQUEsZUFBQSxhQUFBLGtCQUlBbEosTUFBQSxTQUFBN1osR0FDQSxJQUFBa1csRUFBQWxXLEVBQUFrVyxPQUNBMmtCLEVBQUE3NkIsRUFBQTY2QixRQUlBVCxFQURBbmhDLEtBQ0FtaEMsWUFFQXR6QixHQUFBc3pCLEVBQUE5NkIsRUFBQSxDQUFBNFcsT0FBQUEsR0FBQTJrQixJQUVBdHlCLEdBQUE2eEIsRUFBQTcyQixZQUNBOEwsR0FBQXBXLEtBQUE4cEIsSUFBQXFYLEdBQ0FoNEIsR0FBQWc0QixFQUFBLFNBQUEsS0FJQW5oQyxLQUFBK3lCLFNBQUEveUIsS0FBQSt5QixVQUlBNU8sT0FBQSxDQUFBLFdBSUEsQ0FFQTFELEtBQUEsU0FBQTFaLEdBQ0EsSUFBQStlLEVBQUEvZSxFQUFBK2UsT0FPQSxZQVBBLElBQUFBLElBQUFBLEVBQUEsR0FHQTlsQixLQUFBZ2QsTUFBQTJCLEdBQUEzUCxHQUFBaFAsS0FBQWloQyxjQUFBamhDLEtBQUFpaEMsYUFBQWpoQyxLQUFBOHBCLEtBQUE5TSxNQUVBaGQsS0FBQThsQixPQUFBdmlCLE9BQUF5YixZQUVBLENBQ0FiLElBQUEySCxHQUFBOWxCLEtBQUE4bEIsT0FBQSxPQUFBLEtBQ0FBLE9BQUE5bEIsS0FBQThsQixPQUNBNkwsUUFBQTNpQixHQUFBaFAsS0FBQThwQixLQUNBM2hCLElBQUFxWCxHQUFBeGYsS0FBQW1oQyxhQUFBLEtBSUF2Z0IsTUFBQSxTQUFBL1csRUFBQWtHLEdBQ0EsSUFBQTlHLEVBQUFqSixLQUdBNmhDLEVBQUFoNEIsRUFBQWc0QixtQkFBQSxJQUFBQSxJQUFBQSxFQUFBLEdBQ0EsSUFBQTFqQixFQUFBdFUsRUFBQXNVLElBQ0EyakIsRUFBQWo0QixFQUFBaTRCLFFBQ0FILEVBQUE5M0IsRUFBQTgzQixXQUNBN2IsRUFBQWpjLEVBQUFpYyxPQUNBM2QsRUFBQTBCLEVBQUExQixJQUNBd3BCLEVBQUE5bkIsRUFBQThuQixRQUNBOWtCLEVBQUFrMUIsWUFBQWwxQixNQUlBLE1BRkFoRCxFQUFBODNCLFdBQUE3YixHQUVBLEdBQUFBLElBQUE2YixJQUFBaFEsR0FBQTN4QixLQUFBZ2lDLFVBQUFoaUMsS0FBQWtoQyxVQUFBLFdBQUFueEIsS0FJQSxJQUFBbEQsRUFBQWcxQixHQUFBMWpCLElBQUEyakIsS0FDQWo0QixFQUFBbzRCLFdBQUFuYyxFQUNBamMsRUFBQWc0QixjQUFBaDFCLEdBR0FoRCxFQUFBaTRCLFFBQUEzakIsRUFFQW5lLEtBQUFraEMsV0FBQWxoQyxLQUFBb2hDLFNBQUF4NUIsS0FBQW9lLElBQUFuYyxFQUFBbzRCLFdBQUFuYyxJQUFBLElBQUFsZSxLQUFBb2UsSUFBQTJiLEVBQUE3YixJQUFBLEtBSUEsR0FBQTlsQixLQUFBMGhDLFVBQ0E1YixFQUFBOWxCLEtBQUFtSSxLQUNBbkksS0FBQWtoQyxXQUFBcGIsR0FBQTlsQixLQUFBbUksS0FBQSxTQUFBZ1csR0FBQSxPQUFBQSxJQUFBbmUsS0FBQW9oQyxTQUFBdGIsR0FBQTlsQixLQUFBd2hDLGNBQ0EsQ0FFQSxJQUFBeGhDLEtBQUFvaEMsUUFPQSxZQUxBdmtCLEdBQUFQLFdBQUF0YyxLQUFBOHBCLE1BQUFoRSxFQUFBM2QsSUFDQTBVLEdBQUFSLE9BQUFyYyxLQUFBOHBCLEtBQ0E5cEIsS0FBQSt3QixTQU1BL3dCLEtBQUFvaEMsU0FBQSxFQUVBcGhDLEtBQUF5YyxXQUFBcUosRUFBQTlsQixLQUFBdWhDLFdBQ0Exa0IsR0FBQVIsT0FBQXJjLEtBQUE4cEIsS0FDQWpOLEdBQUFGLElBQUEzYyxLQUFBOHBCLElBQUE5cEIsS0FBQXljLFdBQUFoSixLQUFBLFdBQUEsT0FBQXhLLEVBQUE4bkIsUUFBQWxwQixLQUVBN0gsS0FBQSt3QixZQUdBL3dCLEtBQUFvaEMsUUFFQXBoQyxLQUFBMGtCLFNBRUExa0IsS0FBQXljLFdBRUFJLEdBQUFSLE9BQUFyYyxLQUFBOHBCLEtBQ0E5cEIsS0FBQXd2QixPQUNBM1MsR0FBQUMsR0FBQTljLEtBQUE4cEIsSUFBQTlwQixLQUFBeWMsV0FBQXBGLE1BQUF4UCxLQUdBN0gsS0FBQXd2QixRQUtBckwsT0FBQSxDQUFBLFNBQUEsWUFNQVEsUUFBQSxDQUVBNkssS0FBQSxXQUVBeHZCLEtBQUFvaEMsU0FBQSxFQUNBcGhDLEtBQUEwa0IsU0FDQXZiLEdBQUFuSixLQUFBbWhDLFlBQUEsU0FBQSxPQUlBcFEsS0FBQSxXQUVBL3dCLEtBQUEreUIsVUFBQSxFQUNBMWEsR0FBQXJZLEtBQUE4cEIsSUFBQTlwQixLQUFBOGdDLFNBQUE5Z0MsS0FBQStnQyxVQUNBbHpCLEdBQUE3TixLQUFBOHBCLElBQUEsQ0FBQWhNLFNBQUEsR0FBQTNWLElBQUEsR0FBQTZVLE1BQUEsS0FDQTdULEdBQUFuSixLQUFBbWhDLFlBQUEsU0FBQSxLQUlBemMsT0FBQSxXQUVBLElBQUErTCxFQUFBLElBQUF6d0IsS0FBQW1JLEtBQUFuSSxLQUFBOGxCLE9BQUE5bEIsS0FBQW1JLElBQ0FBLEVBQUFQLEtBQUFELElBQUEsRUFBQTNILEtBQUEyZSxRQUVBeGEsRUFBQW5FLEtBQUFvSSxTQUFBcEksS0FBQThsQixPQUFBOWxCLEtBQUFvSSxPQUFBcEksS0FBQTJlLFNBQ0F4VyxFQUFBbkksS0FBQW9JLE9BQUFwSSxLQUFBOGxCLFFBR0FqWSxHQUFBN04sS0FBQThwQixJQUFBLENBQ0FoTSxTQUFBLFFBQ0EzVixJQUFBQSxFQUFBLEtBQ0E2VSxNQUFBaGQsS0FBQWdkLFFBR0FoZCxLQUFBK3lCLFNBQUF0QyxFQUNBOVgsR0FBQTNZLEtBQUE4cEIsSUFBQTlwQixLQUFBK2dDLFNBQUEvZ0MsS0FBQThsQixPQUFBOWxCLEtBQUF3aEMsY0FDQXJwQixHQUFBblksS0FBQThwQixJQUFBOXBCLEtBQUE4Z0MsYUFRQSxTQUFBVyxHQUFBNTZCLEVBQUFFLEdBQ0EsSUFBQThpQixFQUFBOWlCLEVBQUE4aUIsT0FDQUMsRUFBQS9pQixFQUFBK2lCLElBQ0FvWSxFQUFBbjdCLEVBQUFGLEVBQUEsVUFHQTVDLEVBQUE0bEIsRUFBQWhqQixHQUVBLEdBQUE1QyxFQUlBLE9BQUF2QixFQUFBdUIsSUFBQUEsRUFBQUYsTUFBQSxTQUVBbStCLEVBQUE5aEIsR0FBQW5jLEdBSUEwYSxJQUFBLElBQUExYSxFQUFBNmxCLEVBQUFwYyxXQUFBdEMsR0FBQW5ILEVBQUE2bEIsSUFBQTFoQixPQUtBLElBbHBJQXJJLEdBRUFpdUIsR0FDQXJGLEdBK29JQXdaLEdBQUEsQ0FFQXhlLE9BQUEsQ0FBQWtMLElBRUF0b0IsS0FBQSxVQUVBdVUsTUFBQSxDQUNBa1QsUUFBQXRzQixPQUNBdVgsT0FBQXZYLE9BQ0ErdUIsT0FBQTdyQixPQUNBdzlCLFFBQUFqOUIsU0FHQTBFLEtBQUEsQ0FDQW1rQixRQUFBLGdCQUNBL1UsT0FBQSxxQkFDQXdYLE9BQUEsRUFDQTJSLFNBQUEsRUFDQTdwQixJQUFBLFlBQ0E2bUIsYUFBQSxjQUNBaUQsU0FBQSxvQkFHQS9lLFNBQUEsQ0FFQWdmLFNBQUEsQ0FFQWxwQixJQUFBLFNBQUFyUyxFQUFBK2lCLEdBR0EsT0FBQXJlLEdBRkExRSxFQUFBaW5CLFFBRUFsRSxJQUdBMEMsTUFBQSxTQUFBOFYsR0FDQSxJQUFBcjVCLEVBQUFqSixLQUdBc2lDLEVBQUFoNUIsUUFBQSxTQUFBaTVCLEdBQUEsT0FBQXQ1QixFQUFBMG1CLFdBQUE0UyxFQUFBN3lCLFlBRUExUCxLQUFBb2lDLFNBQ0F2MEIsR0FBQXkwQixFQUFBLGVBQUEscUJBS0E3VixXQUFBLEdBSUErVixRQUFBLENBRUFwcEIsSUFBQSxTQUFBclMsRUFBQStpQixHQUdBLE9BQUE1UixHQUZBblIsRUFBQWtTLE9BRUE2USxHQUFBNWtCLE9BQUEsU0FBQXdaLEdBQUEsT0FBQWhTLEdBQUFnUyxFQUFBLCtDQUdBOE4sTUFBQSxTQUFBZ1csR0FDQSxJQUFBL1IsRUFBQXp3QixLQUFBdVYsUUFDQXZWLEtBQUF3dkIsTUFBQWlCLEdBQUFBLEdBQUErUixFQUFBeGlDLEtBQUF5d0IsU0FBQStSLEVBQUEsS0FHQS9WLFdBQUEsR0FJQS9jLFNBQUEsV0FDQSxJQUFBekcsRUFBQWpKLEtBRUEsT0FBQTBQLEdBQUExUCxLQUFBOHBCLEtBQUE1a0IsT0FBQSxTQUFBdWUsR0FBQSxPQUFBeGEsRUFBQXU1QixRQUFBOTRCLEtBQUEsU0FBQXVQLEdBQUEsT0FBQTNKLEdBQUEySixFQUFBd0ssU0FLQVUsT0FBQSxDQUVBLENBRUEvYSxLQUFBLFFBRUFvSCxTQUFBLFdBQ0EsT0FBQXhRLEtBQUFpWixRQUdBZ1IsUUFBQSxTQUFBamQsR0FDQXhLLEVBQUF4QyxLQUFBd2lDLFFBQUF4MUIsRUFBQXNELFdBR0F0RCxFQUFBZ2tCLGlCQUNBaHhCLEtBQUF3dkIsS0FBQXhpQixFQUFBc0QsWUFLQSxDQUNBbEgsS0FBQSxRQUVBc1YsR0FBQSxXQUNBLE9BQUExZSxLQUFBc2lDLFVBR0E5eEIsU0FBQSxXQUNBLE1BQUEsSUFBQXhRLEtBQUEsU0FBQSxXQUFBQSxLQUFBLFNBQUEsS0FHQWlxQixRQUFBLFNBQUFqZCxHQUNBQSxFQUFBZ2tCLGlCQUNBaHhCLEtBQUF3dkIsS0FBQTNsQixHQUFBbUQsRUFBQXNELFFBQUF0USxLQUFBcWlDLGFBSUEsQ0FDQWo1QixLQUFBLHVCQUVBbEUsT0FBQSxXQUNBLE9BQUFsRixLQUFBb2lDLFNBR0ExakIsR0FBQSxXQUNBLE9BQUExZSxLQUFBc2lDLFVBR0FyWSxRQUFBLFNBQUFsakIsR0FDQSxJQUFBZ0osRUFBQWhKLEVBQUFnSixLQUVBL1AsS0FBQXd2QixLQUFBeHRCLEVBQUErTixFQUFBLFFBQUEsT0FBQSxlQU1BNFUsUUFBQSxDQUVBcFAsTUFBQSxXQUNBLElBQUF0TSxFQUFBakosS0FFQSxPQUFBNEMsRUFBQTVDLEtBQUEwUCxTQUFBLFNBQUFnUCxHQUFBLE9BQUFqRyxHQUFBaUcsRUFBQXpWLEVBQUFzUCxRQUdBaVgsS0FBQSxTQUFBbE8sR0FDQSxJQUFBclksRUFBQWpKLEtBR0F3TSxFQUFBeE0sS0FBQXVWLFFBQ0F3QyxFQUFBdkMsR0FBQThMLEVBQUF0aEIsS0FBQXdpQyxRQUFBaDJCLEdBRUF4TSxLQUFBMFAsU0FBQXBHLFFBQUEsU0FBQW1hLEVBQUF0aEIsR0FDQXdXLEdBQUE4SyxFQUFBeGEsRUFBQXNQLElBQUFSLElBQUE1VixHQUNBZ0gsR0FBQUYsRUFBQXU1QixRQUFBcmdDLEdBQUEsZ0JBQUE0VixJQUFBNVYsS0FHQW5DLEtBQUFzaUMsU0FBQWg1QixRQUFBLFNBQUF2QyxHQUNBLElBQUEySSxFQUFBM0ksRUFBQTJJLFNBRUEsT0FBQXpHLEVBQUFzbUIsY0FBQXZxQixFQUFBMEssR0FBQXhLLE9BQUEsU0FBQXVlLEVBQUF0aEIsR0FBQSxPQUFBQSxJQUFBNFYsR0FBQTlPLEVBQUF5bUIsVUFBQWpNLE1BQ0EsRUFBQSxHQUFBalgsR0FBQWlILEtBQUEsV0FBQSxPQUFBeEssRUFBQXNtQixjQUFBN2YsRUFBQXFJLElBQUEsRUFBQSxHQUFBdkwsVUFVQWkyQixHQUFBLENBRUE5ZSxPQUFBLENBQUFpTCxJQUVBbEwsUUFBQXllLEdBRUFybkIsTUFBQSxDQUNBcWhCLE1BQUFoM0IsU0FHQTBFLEtBQUEsQ0FDQXN5QixNQUFBLElBQ0FrRyxTQUFBLGVBR0EvZCxVQUFBLFdBRUEsSUFBQS9MLEVBQUFFLEdBQUF6WSxLQUFBOHBCLElBQUEsZUFDQSxnQkFDQXJSLEdBQUF6WSxLQUFBOHBCLElBQUEsaUJBQ0EsZUFHQXZSLEdBQ0F2WSxLQUFBa3VCLFFBQUEsU0FBQWx1QixLQUFBOHBCLElBQUEsQ0FBQXZSLElBQUFBLEVBQUFrYSxLQUFBLFFBQUEwSixNQUFBbjhCLEtBQUFtOEIsVUFNQWxqQixHQUFBLENBRUEwSyxPQUFBLENBQUF1WSxHQUFBck4sSUFFQXRvQixLQUFBLFNBRUF1VSxNQUFBLENBQ0E0bkIsS0FBQWhoQyxPQUNBNEUsT0FBQSxLQUNBbXNCLEtBQUEsT0FDQStOLE9BQUFyN0IsU0FHQTBFLEtBQUEsQ0FDQTY0QixNQUFBLEVBQ0FwOEIsUUFBQSxFQUNBbXNCLEtBQUEsUUFDQStOLFFBQUEsR0FHQWxkLFNBQUEsQ0FFQWhkLE9BQUEsQ0FFQThTLElBQUEsU0FBQXJTLEVBQUEraUIsR0FDQSxJQUFBNFksRUFBQTM3QixFQUFBMjdCLEtBQ0FwOEIsRUFBQVMsRUFBQVQsT0FHQSxPQURBQSxFQUFBbUYsR0FBQW5GLEdBQUFvOEIsRUFBQTVZLElBQ0F4b0IsUUFBQWdGLEdBQUEsQ0FBQXdqQixJQUdBMEMsTUFBQSxXQUNBdmIsR0FBQWpSLEtBQUFzRyxPQUFBLGFBQUEsQ0FBQXRHLFFBR0F5c0IsV0FBQSxJQU1BdEksT0FBQSxDQUVBLENBRUEvYSxLQUFBNkIsR0FBQSxJQUFBQyxHQUVBaEcsT0FBQSxXQUNBLE9BQUExQyxFQUFBeEMsS0FBQXl5QixLQUFBLFVBR0F4SSxRQUFBLFNBQUFqZCxHQUNBK0UsR0FBQS9FLElBQ0FoTixLQUFBaVosT0FBQSxVQUFBak0sRUFBQStDLE9BQUE5RSxHQUFBLE9BQUEsV0FNQSxDQUVBN0IsS0FBQSxRQUVBbEUsT0FBQSxXQUNBLE9BQUExQyxFQUFBeEMsS0FBQXl5QixLQUFBLFVBQUE5bkIsSUFBQW5JLEVBQUF4QyxLQUFBeXlCLEtBQUEsVUFHQXhJLFFBQUEsU0FBQWpkLEdBR0EsSUFBQXdCLEdBQ0FwQyxHQUFBWSxFQUFBMUcsT0FBQSw2QkFDQWtJLEVBQUFwQyxHQUFBWSxFQUFBMUcsT0FBQSxjQUNBdEcsS0FBQXVZLE1BQUFFLEdBQUF6WSxLQUFBc0csT0FBQXRHLEtBQUF1WSxJQUFBOVMsTUFBQSxLQUFBLE1BQ0F1SixHQUFBaFAsS0FBQXNHLFNBQ0FrSSxFQUFBeWtCLE1BQUF2bUIsR0FBQTFNLEtBQUFzRyxPQUFBa0ksRUFBQXlrQixTQUdBam1CLEVBQUFna0IsaUJBR0FoeEIsS0FBQWlaLFlBT0F5TCxPQUFBLENBRUFqRSxLQUFBLFdBQ0EsU0FBQWplLEVBQUF4QyxLQUFBeXlCLEtBQUEsV0FBQXp5QixLQUFBbThCLFFBQ0EsQ0FBQXA0QixNQUFBL0QsS0FBQTY3QixhQUlBamIsTUFBQSxTQUFBN1osR0FDQSxJQUFBaEQsRUFBQWdELEVBQUFoRCxNQUdBaXNCLEVBQUFod0IsS0FBQTB2QixVQUFBMXZCLEtBQUFzRyxTQUNBdkMsR0FBQWlzQixFQUFBQSxJQUNBaHdCLEtBQUFpWixVQUtBa0wsT0FBQSxDQUFBLFdBSUFRLFFBQUEsQ0FFQTFMLE9BQUEsU0FBQWxKLEdBQ0EsSUFBQTlHLEVBQUFqSixLQUdBLEdBQUFpUixHQUFBalIsS0FBQXNHLE9BQUF5SixHQUFBLFNBQUEsQ0FBQS9QLE9BSUEsR0FBQUEsS0FBQXdnQyxPQUFBLENBRUEsSUFBQXhRLEVBQUFod0IsS0FBQXNHLE9BQUFwQixPQUFBbEYsS0FBQTB2QixXQUNBMXZCLEtBQUF1dkIsY0FBQVMsR0FBQSxHQUFBdmMsS0FBQSxXQUFBLE9BQUF4SyxFQUFBc21CLGNBQUF0bUIsRUFBQTNDLE9BQUFwQixPQUFBLFNBQUF3WixHQUFBLE9BQUFsYyxFQUFBd3RCLEVBQUF0UixNQUNBLFVBSUExZSxLQUFBdXZCLGNBQUF2dkIsS0FBQXNHLFdBcURBUCxFQTdDQTdGLE9BQUFxcUIsT0FBQSxDQUNBQyxVQUFBLEtBQ0FnRyxVQUFBQSxHQUNBbVMsTUFBQXhSLEdBQ0F5UixNQUFBMTVCLEdBQ0EyNUIsS0FBQXJRLEdBQ0FzUSxTQUFBdFEsR0FDQXVRLFdBQUFyUCxHQUNBc1AsSUFBQW5QLEdBQ0FvUCxLQUFBcE8sR0FDQXFPLFlBQUFsTixHQUNBbU4sZUFBQTVNLEdBQ0FrRCxLQUFBQSxHQUNBMkosSUFBQS8wQixHQUNBZzFCLE9BQUFoSCxHQUNBdEksT0FBQUEsR0FDQStJLE1BQUFRLEdBQ0FnRyxJQUFBakYsR0FDQWtGLE9BQUFqRixHQUNBa0YsVUFBQXJFLEdBQ0FzRSxhQUFBM0QsR0FDQTRELFdBQUF6RCxHQUNBMEQsT0FBQTdkLEdBQ0E4ZCxVQUFBeEQsR0FDQXlELGFBQUFwRCxHQUNBcUQsT0FBQW5ELEdBQ0FvRCxJQUFBbE4sR0FDQXNMLFNBQUFBLEdBQ0E2QixJQUFBdkIsR0FDQXdCLE9BQUFockIsR0FDQXFZLE1BQUFBLEdBQ0E2SSxNQUFBQSxHQUNBQyxRQUFBQSxHQUNBOEosYUFBQWpLLEdBQ0FrSyxpQkFBQWxLLEdBQ0FtSyxXQUFBbEssR0FDQW1LLE9BQUFySyxHQUNBc0ssaUJBQUF0SyxHQUNBdUssWUFBQXZLLEdBQ0F3SyxlQUFBeEssR0FDQXlLLG1CQUFBekssR0FDQTBLLE1BQUExSyxLQUlBLFNBQUF2USxFQUFBcmdCLEdBQUEsT0FBQXJKLEdBQUEwcEIsVUFBQXJnQixFQUFBcWdCLEtBSUExcEIsR0FBQTZxQixJQXhtSkEsU0FBQTdxQixHQUVBaUssSUFBQW1MLEdBQUEsV0FXQSxJQUFBZ1QsRUFUQXBvQixFQUFBMmtCLFNBQ0EvVSxHQUFBcE0sT0FBQSxjQUFBLFdBQUEsT0FBQXhELEVBQUEya0IsT0FBQSxLQUFBLFlBQ0EvVSxHQUFBckYsU0FBQSxzQkFBQSxTQUFBdkQsR0FDQSxJQUFBVCxFQUFBUyxFQUFBVCxPQUVBLE9BQUF2RyxFQUFBMmtCLE9BQUFwZSxFQUFBLFlBQ0EsR0FJQXFKLEdBQUFwTSxPQUFBLFNBQUEsU0FBQXlKLEdBRUFtYixJQUdBQSxHQUFBLEVBQ0E3SCxHQUFBTSxNQUFBLFdBQUEsT0FBQXVILEdBQUEsSUFFQXBvQixFQUFBMmtCLE9BQUEsS0FBQTFYLEVBQUErQyxRQUVBLENBQUF1WSxTQUFBLEVBQUExVyxTQUFBLElBRUEsSUFnQkFoQixFQWhCQSt6QixFQUFBLEVBQ0FoMUIsR0FBQXJGLFNBQUEsaUJBQUEsU0FBQXZELEdBQ0EsSUFBQVQsRUFBQVMsRUFBQVQsUUFFQXVILEdBQUF2SCxFQUFBLGtCQUFBLElBQUF2QyxNQUFBLHdCQUVBNGdDLElBQ0E5MkIsR0FBQXZELFNBQUErZ0IsS0FBQSxZQUFBLFVBQ0F0WSxXQUFBLGFBQ0E0eEIsR0FDQTkyQixHQUFBdkQsU0FBQStnQixLQUFBLFlBQUEsS0FFQTFsQixFQUFBa0ksR0FBQXZILEVBQUEsc0JBQUEsUUFFQSxHQUdBcUosR0FBQXJGLFNBQUFRLEdBQUEsU0FBQWtDLEdBSUEsR0FGQTRELEdBQUFBLElBRUFtQixHQUFBL0UsR0FBQSxDQUtBLElBQUE4UixFQUFBNU0sR0FBQWxGLEdBQ0ExRyxFQUFBLFlBQUEwRyxFQUFBMUcsT0FBQTBHLEVBQUExRyxPQUFBMEcsRUFBQTFHLE9BQUFvSCxXQUNBa0QsRUFBQUUsR0FBQXhHLFNBQUFVLEdBQUEsSUFBQUcsR0FBQSxTQUFBNkIsR0FFQSxJQUFBakcsRUFBQW1MLEdBQUFsRixHQUNBeEUsRUFBQXpCLEVBQUF5QixFQUNBQyxFQUFBMUIsRUFBQTBCLEdBR0FuQyxHQUFBa0MsR0FBQSxJQUFBWixLQUFBb2UsSUFBQWxILEVBQUF0VyxFQUFBQSxJQUFBQyxHQUFBLElBQUFiLEtBQUFvZSxJQUFBbEgsRUFBQXJXLEVBQUFBLEtBRUFzSyxXQUFBLFdBZUEsSUFBQW9QLEVBQUFDLEVBQUFFLEVBQUFDLEVBZEF0UixHQUFBM0ssRUFBQSxTQUNBMkssR0FBQTNLLEVBQUEsU0FhQTZiLEVBYkFyRCxFQUFBdFcsRUFhQTRaLEVBYkF0RCxFQUFBclcsRUFhQTZaLEVBYkE5WixFQWFBK1osRUFiQTlaLEVBY0FiLEtBQUFvZSxJQUFBN0QsRUFBQUcsSUFBQTFhLEtBQUFvZSxJQUFBNUQsRUFBQUcsR0FDQSxFQUFBSixFQUFBRyxFQUNBLE9BQ0EsUUFDQSxFQUFBRixFQUFBRyxFQUNBLEtBQ0EsZUFiQSxDQUFBK0YsU0FBQSxRQWtCQTBGLElBRkFqdUIsR0FraEpBQSxJQWhoSkFpdUIsUUFDQXJGLEdBQUE1b0IsR0FBQTRvQixXQUVBM2UsSUFBQXpHLE9BQUEycEIsa0JBSUE1TSxHQUFBRyxLQUVBLFdBRUFuVyxTQUFBK2dCLE1BQ0FsYixHQUFBN0YsU0FBQStnQixLQUFBMkMsSUFHQSxJQUFBZCxpQkFBQSxTQUFBMFgsR0FDQSxJQUFBeFksRUFBQSxHQUNBd1ksRUFBQXQ3QixRQUFBLFNBQUF1N0IsR0FBQSxPQVlBelksRUFaQUEsRUFjQTlsQixHQUZBdStCLEVBWkFBLEdBY0F2K0IsYUFHQSxlQUZBdStCLEVBQUE5MEIsS0F5Q0EsU0FBQWhKLEdBS0EsSUFKQSxJQUFBKzlCLEVBQUEvOUIsRUFBQSs5QixXQUNBQyxFQUFBaCtCLEVBQUFnK0IsYUFHQTVpQyxFQUFBLEVBQUFBLEVBQUEyaUMsRUFBQXhqQyxPQUFBYSxJQUNBZ08sR0FBQTIwQixFQUFBM2lDLEdBQUE2ckIsSUFHQSxJQUFBLElBQUFnWCxFQUFBLEVBQUFBLEVBQUFELEVBQUF6akMsT0FBQTBqQyxJQUNBNzBCLEdBQUE0MEIsRUFBQUMsR0FBQXJjLElBR0EsT0FBQSxHQTFDQSxTQUFBNWhCLEdBQ0EsSUFBQVQsRUFBQVMsRUFBQVQsT0FDQTZtQixFQUFBcG1CLEVBQUFvbUIsY0FHQSxHQUFBLFNBQUFBLEVBQ0EsT0FBQSxFQUdBLElBQUEvakIsRUFBQXdmLEdBQUF1RSxHQUVBLEtBQUEvakIsR0FBQUEsS0FBQXJKLElBQ0EsT0FHQSxHQUFBMEosR0FBQW5ELEVBQUE2bUIsR0FFQSxPQURBcHRCLEdBQUFxSixHQUFBOUMsSUFDQSxFQUdBLElBQUFtakIsRUFBQTFwQixHQUFBMnRCLGFBQUFwbkIsRUFBQThDLEdBRUEsR0FBQXFnQixFQUVBLE9BREFBLEVBQUFrRSxZQUNBLElBakNBa1gsS0FHQXpZLEVBQUExaUIsS0FBQSxTQUFBM0UsR0FBQSxPQUFBQSxFQUFBd0ssU0FBQWpKLE1BQ0E4bEIsRUFBQXRmLEtBQUF4RyxFQUFBaUosU0FBQWpKLEVBQUFBLEVBQUFvSCxhQVZBLElBQUFtM0IsRUFBQXpZLEVBRUE5bEIsSUFiQThsQixFQUFBOWlCLFFBQUEsU0FBQW9WLEdBQUEsT0FBQTNlLEdBQUEya0IsT0FBQWhHLE9BQ0FnSyxRQUFBcGUsU0FBQSxDQUNBMjZCLFdBQUEsRUFDQUMsU0FBQSxFQUNBQyxlQUFBLEVBQ0E5WCxZQUFBLElBR0F0dEIsR0FBQSt0QixjQUFBLElBdy9JQSxJQUFBc1gsR0FBQSxDQUVBemhCLE9BQUEsQ0FBQWlMLElBRUE5VCxNQUFBLENBQ0F1cUIsS0FBQTNqQyxPQUNBNjZCLFdBQUE3NkIsUUFHQW1JLEtBQUEsQ0FDQXc3QixLQUFBLEdBQ0E5SSxXQUFBLHdCQUdBalosU0FBQSxDQUVBK2hCLEtBQUEsU0FBQXQrQixHQUNBLElBQUFzK0IsRUFBQXQrQixFQUFBcytCLEtBRUEsT0FBQXo0QixLQUFBcVgsTUFBQW9oQixJQUdBQyxLQUFBLFNBQUF2K0IsRUFBQStpQixHQUdBLE9BQUFuVSxHQUZBNU8sRUFBQXcxQixXQUVBMTdCLFFBQUEsU0FBQSxRQUFBaXBCLElBR0F5YixNQUFBLFNBQUF4K0IsRUFBQStpQixHQUdBLE9BQUFuVSxHQUZBNU8sRUFBQXcxQixXQUVBMTdCLFFBQUEsU0FBQSxTQUFBaXBCLElBR0EwYixRQUFBLFNBQUF6K0IsRUFBQStpQixHQUdBLE9BQUFuVSxHQUZBNU8sRUFBQXcxQixXQUVBMTdCLFFBQUEsU0FBQSxXQUFBaXBCLElBR0EyYixRQUFBLFNBQUExK0IsRUFBQStpQixHQUdBLE9BQUFuVSxHQUZBNU8sRUFBQXcxQixXQUVBMTdCLFFBQUEsU0FBQSxXQUFBaXBCLElBR0E0YixNQUFBLFdBQ0EsSUFBQXo4QixFQUFBakosS0FFQSxNQUFBLENBQUEsT0FBQSxRQUFBLFVBQUEsV0FBQWtGLE9BQUEsU0FBQXlnQyxHQUFBLE9BQUExOEIsRUFBQTA4QixPQUtBcmhCLFVBQUEsV0FDQXRrQixLQUFBbWMsU0FHQXFJLGFBQUEsV0FDQSxJQUFBdmIsRUFBQWpKLEtBRUFBLEtBQUFvYyxPQUNBcGMsS0FBQTBsQyxNQUFBcDhCLFFBQUEsU0FBQXE4QixHQUFBLE9BQUFqd0IsR0FBQXpNLEVBQUEwOEIsT0FHQXhoQixPQUFBLENBRUEsQ0FFQS9hLEtBQUEsbUJBRUFzVixHQUFBMVUsSUFBQU0sU0FFQTJmLFFBQUEsV0FDQTNmLFNBQUF5VSxPQUNBL2UsS0FBQW9jLE9BRUFwYyxLQUFBbWMsV0FRQXVJLE9BQUEsQ0FFQTlELE1BQUEsV0FDQSxJQWlFQXlrQixFQUVBTyxFQW5FQTM4QixFQUFBakosS0FHQTZsQyxHQThEQVIsRUE5REFybEMsS0FBQXFsQyxLQWtFQSxDQUNBTyxNQUhBQSxFQUFBUCxFQUFBejRCLEtBQUFDLE1BSUE0NEIsUUFBQUcsRUFBQSxJQUFBLEdBQ0FKLFFBQUFJLEVBQUEsSUFBQSxHQUFBLEdBQ0FMLE1BQUFLLEVBQUEsSUFBQSxHQUFBLEdBQUEsR0FDQU4sS0FBQU0sRUFBQSxJQUFBLEdBQUEsR0FBQSxLQXJFQUMsRUFBQUQsT0FBQSxJQUVBNWxDLEtBQUFvYyxPQUVBeXBCLEVBQUFQLEtBQ0FPLEVBQUFOLE1BQ0FNLEVBQUFMLFFBQ0FLLEVBQUFKLFFBQ0EsR0FHQXpsQyxLQUFBMGxDLE1BQUFwOEIsUUFBQSxTQUFBcThCLEdBRUEsSUFBQUcsRUFBQXBrQyxPQUFBa0csS0FBQSswQixNQUFBa0osRUFBQUYsS0FFQUcsRUFBQUEsRUFBQXhrQyxPQUFBLEVBQUEsSUFBQXdrQyxFQUFBQSxFQUVBLElBQUFwbkIsRUFBQXpWLEVBQUEwOEIsR0FDQWpuQixFQUFBOUcsY0FBQWt1QixLQUNBQSxFQUFBQSxFQUFBcmdDLE1BQUEsS0FFQW5FLFNBQUFvZCxFQUFBaFAsU0FBQXBPLFFBQ0F1VSxHQUFBNkksRUFBQW9uQixFQUFBN2dDLElBQUEsV0FBQSxNQUFBLGtCQUFBcUgsS0FBQSxLQUdBdzVCLEVBQUF4OEIsUUFBQSxTQUFBeThCLEVBQUE1akMsR0FBQSxPQUFBdWMsRUFBQWhQLFNBQUF2TixHQUFBeVYsWUFBQW11QixTQVNBcGhCLFFBQUEsQ0FFQXhJLE1BQUEsV0FFQW5jLEtBQUFvYyxPQUVBcGMsS0FBQXFsQyxNQUFBcmxDLEtBQUEwbEMsTUFBQXBrQyxTQUNBdEIsS0FBQXF1QixVQUNBcnVCLEtBQUE2YixNQUFBOEYsWUFBQTNoQixLQUFBcXVCLFFBQUEsT0FLQWpTLEtBQUEsV0FFQXBjLEtBQUE2YixRQUNBK0YsY0FBQTVoQixLQUFBNmIsT0FDQTdiLEtBQUE2YixNQUFBLFNBc0JBLElBMElBbkIsR0ExSUFzckIsR0FBQSxzQkFFQUMsR0FBQSxDQUVBbnJCLE1BQUEsQ0FDQTJCLFVBQUE3WCxRQUdBaUYsS0FBQSxDQUNBNFMsVUFBQSxLQUdBNkcsU0FBQSxDQUVBaGQsT0FBQSxXQUNBLE9BQUF0RyxLQUFBOHBCLE1BS0FuRixRQUFBLENBRUFuSSxRQUFBLFNBQUEwcEIsR0FDQSxJQUFBajlCLEVBQUFqSixNQXFIQSxXQUNBLEdBQUEwYSxHQUNBLFFBRUFBLEdBQUE1RSxHQUFBeEwsU0FBQXUxQixLQUFBLFdBQUFzRyxPQUNBQyxXQUNBLElBQUFKLEdBQUEsb0dBQUEsR0F4SEFLLEdBRUEsSUFBQUMsRUFBQTUyQixHQUFBMVAsS0FBQXNHLFFBQ0FpZ0MsRUFBQUQsRUFBQXJoQyxJQUFBLFNBQUF5WixHQUFBLE9BQUF5SyxHQUFBekssR0FBQSxLQUVBdWdCLEVBQUFoaUIsR0FBQWpkLEtBQUFzRyxRQUNBa2dDLEVBQUFqakMsT0FBQXliLFlBRUFrbkIsSUFFQWhxQixHQUFBRyxPQUFBcmMsS0FBQXNHLFFBQ0FnZ0MsRUFBQWg5QixRQUFBNFMsR0FBQUcsUUFFQU8sR0FBQTVjLEtBQUFzRyxRQUNBdEcsS0FBQXF1QixRQUFBcnVCLEtBQUFzRyxPQUFBLFVBQ0FnYSxHQUFBUyxRQUVBLElBQUFpZSxFQUFBL2hCLEdBQUFqZCxLQUFBc0csUUFJQW1nQyxHQUZBSCxFQUFBQSxFQUFBbDJCLE9BQUFWLEdBQUExUCxLQUFBc0csUUFBQXBCLE9BQUEsU0FBQXdaLEdBQUEsT0FBQWxjLEVBQUE4akMsRUFBQTVuQixPQUVBelosSUFBQSxTQUFBeVosRUFBQXZjLEdBQUEsU0FBQXVjLEVBQUFoUixZQUFBdkwsS0FBQW9rQyxLQUNBQSxFQUFBcGtDLEdBQ0E2TSxHQUFBMFAsR0FDQWdvQixHQUFBaG9CLEdBQ0EsQ0FBQTNFLFFBQUEsR0FDQSxDQUFBQSxRQUFBL0ssR0FBQTBQLEdBQUEsRUFBQSxNQStCQSxPQTNCQTZuQixFQUFBRSxFQUFBeGhDLElBQUEsU0FBQTZWLEVBQUEzWSxHQUNBLElBQUF3a0MsRUFBQUwsRUFBQW5rQyxHQUFBdUwsYUFBQXpFLEVBQUEzQyxTQUNBaWdDLEVBQUFwa0MsSUFBQWduQixHQUFBbWQsRUFBQW5rQyxLQUdBLEdBQUF3a0MsRUFDQSxHQUFBN3JCLEdBRUEsS0FBQSxZQUFBQSxHQUFBLENBQ0E2ckIsRUFBQTVzQixRQUVBLEVBQ0FlLEVBQUFmLFFBQUEsU0FFQTRzQixFQUFBNXNCLHFCQVBBNHNCLEVBQUE1c0IsUUFZQSxPQUFBNHNCLElBR0F4dUIsR0FBQW5ZLEtBQUFzRyxPQUFBMC9CLElBQ0FNLEVBQUFoOUIsUUFBQSxTQUFBb1YsRUFBQXZjLEdBQUEsT0FBQW9rQyxFQUFBcGtDLElBQUEwTCxHQUFBNlEsRUFBQTZuQixFQUFBcGtDLE1BQ0EwTCxHQUFBN04sS0FBQXNHLE9BQUEsQ0FBQTJXLE9BQUFnaUIsRUFBQTJILFFBQUEsVUFDQXJoQixHQUFBaGlCLE9BQUFpakMsR0FFQWgwQixHQUFBYSxJQUNBaXpCLEVBQUFyaEMsSUFBQSxTQUFBeVosRUFBQXZjLEdBQUEsTUFBQSxDQUFBLE1BQUEsT0FBQSxTQUFBLFNBQUF1SCxLQUFBLFNBQUE3QyxHQUFBLE9BQUEwL0IsRUFBQXBrQyxHQUFBMEUsS0FBQTQvQixFQUFBdGtDLEdBQUEwRSxNQUNBcVYsR0FBQUMsTUFBQXVDLEVBQUErbkIsRUFBQXRrQyxHQUFBOEcsRUFBQXdULFVBQUEsVUFDQXJNLE9BQUE2dUIsSUFBQUQsR0FBQTlpQixHQUFBQyxNQUFBbmMsS0FBQXNHLE9BQUEsQ0FBQTJXLE9BQUEraEIsR0FBQWgvQixLQUFBeWMsVUFBQSxVQUNBaEosS0FBQSxXQUNBNnlCLEVBQUFoOUIsUUFBQSxTQUFBb1YsRUFBQXZjLEdBQUEsT0FBQTBMLEdBQUE2USxFQUFBLENBQUFrb0IsUUFBQSxJQUFBSCxFQUFBdGtDLEdBQUE0WCxRQUFBLE9BQUEsR0FBQThzQixPQUFBLE9BQ0FqcUIsR0FBQTNULEVBQUEzQyxRQUNBMkMsRUFBQW9sQixRQUFBcGxCLEVBQUEzQyxPQUFBLFVBQ0FnYSxHQUFBUyxTQUNBbFosT0FNQSxTQUFBc2hCLEdBQUF6SyxFQUFBM0UsR0FFQSxJQUFBOHNCLEVBQUFoNUIsR0FBQTZRLEVBQUEsVUFFQSxRQUFBMVAsR0FBQTBQLElBQ0FyWSxFQUFBLENBQ0F1Z0MsUUFBQSxHQUNBN3NCLFFBQUFBLEVBQUFsTSxHQUFBNlEsRUFBQSxXQUFBLElBQ0Fvb0IsY0FBQSxPQUNBaHBCLFNBQUEsV0FDQStvQixPQUFBLFNBQUFBLEVBQUF0eEIsR0FBQW1KLEdBQUFtb0IsR0FDQUgsR0FBQWhvQixJQUlBLFNBQUE5QixHQUFBOEIsR0FDQTdRLEdBQUE2USxFQUFBaFAsU0FBQSxDQUNBdU4sT0FBQSxHQUNBaFYsS0FBQSxHQUNBOFIsUUFBQSxHQUNBK3NCLGNBQUEsR0FDQWhwQixTQUFBLEdBQ0EzVixJQUFBLEdBQ0E2VSxNQUFBLEtBRUEzRSxHQUFBcUcsRUFBQXNuQixJQUNBbjRCLEdBQUE2USxFQUFBLENBQUF6QixPQUFBLEdBQUEycEIsUUFBQSxLQUdBLFNBQUFGLEdBQUFob0IsR0FDQSxJQUFBM1gsRUFBQTRYLEdBQUFELEdBQ0F6QixFQUFBbFcsRUFBQWtXLE9BQ0FELEVBQUFqVyxFQUFBaVcsTUFDQWhXLEVBQUE4VyxHQUFBWSxHQUlBLE1BQUEsQ0FBQXZXLElBSEFuQixFQUFBbUIsSUFHQUYsS0FGQWpCLEVBQUFpQixLQUVBZ1YsT0FBQUEsRUFBQUQsTUFBQUEsR0FlQSxJQUFBK3BCLEdBQUEsQ0FFQXBqQixPQUFBLENBQUFzaUIsSUFFQTEvQixLQUFBLFNBRUF1VSxNQUFBLENBQ0F4VSxPQUFBbkIsUUFDQTZoQyxVQUFBN2hDLFNBR0EwRSxLQUFBLENBQ0F2RCxPQUFBLEtBQ0EwZ0MsV0FBQSxFQUNBM0UsU0FBQSxvQkFDQTlwQixJQUFBLFlBQ0FrRSxVQUFBLEtBR0E2RyxTQUFBLENBRUFrZixRQUFBLENBRUFwcEIsSUFBQSxTQUFBclMsRUFBQStpQixHQUNBL2lCLEVBQUFzN0IsU0FFQSxPQUFBbnFCLEdBQUEsSUFBQWxZLEtBQUEsU0FBQSxXQUFBQSxLQUFBLFNBQUEsSUFBQThwQixJQUdBMEMsTUFBQSxXQUNBLElBQUF2akIsRUFBQWpKLEtBS0EsR0FGQUEsS0FBQWluQyxlQUVBLElBQUFqbkMsS0FBQWduQyxVQUFBLENBQ0EsSUFBQUUsRUFBQWh2QixHQUFBbFksS0FBQWduQyxVQUFBaG5DLEtBQUE4cEIsS0FDQTlwQixLQUFBd2lDLFFBQUFsNUIsUUFBQSxTQUFBb1YsR0FBQSxPQUFBL0YsR0FBQStGLEVBQUF6VixFQUFBc1AsSUFBQS9WLEVBQUEwa0MsRUFBQXhvQixRQUtBK04sV0FBQSxHQUlBbm1CLE9BQUEsU0FBQVMsRUFBQStpQixHQUdBLE9BQUFuVSxHQUZBNU8sRUFBQVQsT0FFQXdqQixJQUdBcGEsU0FBQSxDQUVBMEosSUFBQSxXQUNBLE9BQUExSixHQUFBMVAsS0FBQXNHLFNBR0FrbUIsTUFBQSxTQUFBK1YsRUFBQTRFLEdBNEpBLElBQUFDLEVBQUFDLEVBQUFBLEVBM0pBRixHQTJKQUMsRUEzSkE3RSxHQTRKQWpoQyxTQUFBK2xDLEVBQUEvbEMsUUFDQThsQyxFQUFBaGlCLE1BQUEsU0FBQTFHLEdBQUEsT0FBQTJvQixFQUFBamxDLFFBQUFzYyxNQTVKQTFlLEtBQUFpbkMsaUJBT0E5aUIsT0FBQSxDQUVBLENBRUEvYSxLQUFBLFFBRUFvSCxTQUFBLFdBQ0EsTUFBQSxJQUFBeFEsS0FBQSxTQUFBLFdBQUFBLEtBQUEsU0FBQSxLQUdBaXFCLFFBQUEsU0FBQWpkLEdBRUFBLEVBQUFna0IsaUJBQ0FoeEIsS0FBQW1RLE1BQUFuRCxFQUFBc0QsWUFRQXFVLFFBQUEsQ0FFQXhVLE1BQUEsU0FBQXVPLEdBQ0ExZSxLQUFBc25DLFNBQUFDLEdBQUE3b0IsRUFBQTFlLEtBQUFxaUMsU0FBQXJpQyxLQUFBd25DLGNBR0FBLFNBQUEsV0FDQSxJQUFBditCLEVBQUFqSixLQUVBLE9BQUFBLEtBQUF3aUMsUUFDQXQ5QixPQUFBLFNBQUFvYyxHQUFBLE9BQUE3SSxHQUFBNkksRUFBQXJZLEVBQUFzUCxPQUNBcEgsT0FBQSxTQUFBOEIsRUFBQXlMLEdBQUEsT0FBQTZvQixHQUFBN29CLEVBQUF6VixFQUFBbzVCLFNBQUFwdkIsSUFBQSxDQUFBL04sT0FBQSxDQUFBdWlDLEdBQUEsSUFBQTNnQyxLQUFBLE1BR0F3Z0MsU0FBQSxTQUFBcjBCLEVBQUF1SixHQUNBLElBQUF2VCxFQUFBakosVUFDQSxJQUFBd2MsSUFBQUEsR0FBQSxHQUdBdkosRUFBQTVNLEVBQUEsQ0FBQW5CLE9BQUEsQ0FBQXVpQyxHQUFBLElBQUEzZ0MsS0FBQSxJQUFBbU0sR0FFQWhDLEdBQUFqUixLQUFBOHBCLElBQUEsZUFBQSxDQUFBOXBCLEtBQUFpVCxJQUVBLElBQ0F2RCxFQURBMVAsS0FDQTBQLFNBRUExUCxLQUFBd2lDLFFBQUFsNUIsUUFBQSxTQUFBb1YsR0FBQSxPQUFBL0YsR0FBQStGLEVBQUF6VixFQUFBc1AsTUFpRkEsU0FBQW1HLEVBQUF2VixFQUFBcEMsR0FDQSxJQUFBMmdDLEVBQUEzZ0MsRUFBQTdCLFlBQUEsSUFBQXdpQyxJQUFBQSxFQUFBLENBQUFELEdBQUEsS0FDQSxJQUFBRSxFQUFBNWdDLEVBQUFELEtBQ0E4Z0MsRUFBQUQsRUFBQSxHQUNBRSxFQUFBRixFQUFBLEdBR0EzZ0MsRUFBQThnQyxHQUFBcHBCLEVBQUF2VixHQUNBakUsRUFBQThCLEVBQUE5QixZQUFBLElBQUFBLElBQUFBLEVBQUEsSUFDQSxJQUFBNmlDLEVBQUEvZ0MsRUFBQStnQyxXQUFBLElBQUFBLElBQUFBLEVBQUEsSUFDQSxJQUFBamhDLEVBQUFFLEVBQUFGLEtBQ0FrVCxFQUFBaFQsRUFBQWdULFdBQUEsSUFBQUEsSUFBQUEsRUFBQSxPQUVBLE9BQUF4VixFQUFBc0MsR0FDQWloQyxLQUFBTCxHQUFBeGlDLElBQUF3aUMsRUFBQUssS0FDQTdpQyxHQUFBNmlDLEtBQUFBLEtBQUFMLEtBQUFBLEVBQUEsSUFDQUUsSUFBQTlnQyxHQUFBK2dDLElBQUE3dEIsRUFqR0FndUIsQ0FBQXRwQixFQUFBelYsRUFBQW81QixTQUFBcHZCLE1BRUEsU0FBQTlDLElBRUEsSUFzR0FqTCxFQUVBbUcsRUF4R0FBLEdBc0dBbkcsRUF0R0ErTixFQXNHQS9OLE9BRUFtRyxFQUFBLEdBQ0F0RixFQUFBYixFQUFBLFNBQUFqQixHQUFBLE9BQUFvSCxHQUFBcEgsR0FBQSxLQUNBb0gsR0F4R0FxRSxFQUFBcEcsUUFBQSxTQUFBb1YsR0FBQSxPQUFBN1EsR0FBQTZRLEVBQUEsVUFBQXJULElBQUFxQixHQUFBZ1MsRUFBQXJULEdBQUEsT0FBQSxNQUVBLElBeUdBdkUsRUFBQWtULEVBekdBalQsRUFBQWtNLEVBQUFuTSxLQUNBQSxFQUFBQyxFQUFBLEdBQ0FpVCxFQUFBalQsRUFBQSxHQUVBLEdBQUFELEVBQUEsQ0FDQSxJQUFBMnRCLEdBb0dBM3RCLEVBcEdBQSxFQW9HQWtULEVBcEdBQSxFQXFHQTNULEVBQUEsR0FyR0FxSixHQXFHQTVJLEtBQUEsU0FBQVosRUFBQUMsR0FBQSxPQUFBMEQsR0FBQTNELEVBQUFZLEdBQUFtaEMsY0FBQXArQixHQUFBMUQsRUFBQVcsUUFBQW9NLEVBQUEsQ0FBQWcxQixTQUFBLEtBQUEsUUFBQWx1QixJQUFBLE1BcEdBblUsRUFBQTR1QixFQUFBL2tCLElBQ0Era0IsRUFBQW5yQixRQUFBLFNBQUFvVixHQUFBLE9BQUE1SSxHQUFBN00sRUFBQTNDLE9BQUFvWSxNQU1BbEMsRUFDQXhjLEtBQUF3YyxRQUFBck0sR0FBQXNELEtBQUEsV0FBQSxPQUFBeEMsR0FBQWhJLEVBQUE2Z0IsSUFBQSxjQUFBLENBQUE3Z0IsT0FFQWtILElBQ0FjLEdBQUFqUixLQUFBOHBCLElBQUEsY0FBQSxDQUFBOXBCLFNBS0FpbkMsWUFBQSxXQUNBLElBQUFoK0IsRUFBQWpKLEtBRUFzZ0IsR0FBQU0sTUFBQSxXQUFBLE9BQUEzWCxFQUFBcStCLFNBQUFyK0IsRUFBQXUrQixZQUFBLFFBT0EsU0FBQU0sR0FBQXBwQixFQUFBdlYsR0FDQSxPQUFBNGEsR0FBQWxhLEdBQUE2VSxFQUFBdlYsR0FBQSxDQUFBLFdBR0EsU0FBQW8rQixHQUFBN29CLEVBQUF2VixFQUFBOEosR0FFQSxJQUFBazFCLEVBQUFMLEdBQUFwcEIsRUFBQXZWLEdBQ0FqRSxFQUFBaWpDLEVBQUFqakMsT0FDQTZpQyxFQUFBSSxFQUFBSixNQUNBamhDLEVBQUFxaEMsRUFBQXJoQyxLQUNBa1QsRUFBQW11QixFQUFBbnVCLE1BNEJBLFlBNUJBLElBQUFBLElBQUFBLEVBQUEsUUFFQTlVLEdBQUFWLEVBQUFzQyxNQUVBaWhDLEVBRUE3aUMsVUFDQStOLEVBQUEvTixPQUFBLElBQ0ErTixFQUFBL04sT0FBQTZpQyxHQUFBN2lDLFdBRUErTixFQUFBL04sT0FBQTZpQyxJQUVBempDLEVBQUEyTyxFQUFBL04sU0FBQSxLQUFBK04sRUFBQS9OLFVBQ0ErTixFQUFBL04sT0FBQSxDQUFBdWlDLEdBQUF2aUMsR0FBQSxNQU1BK04sRUFBQS9OLE9BQUEsQ0FBQXVpQyxHQUFBdmlDLEdBQUEsS0FLQVYsRUFBQXNDLEtBQ0FtTSxFQUFBbk0sS0FBQSxDQUFBQSxFQUFBa1QsSUFHQS9HLEVBdUNBLElBQUFtMUIsR0FBQSxDQUVBQyxNQUFBLENBRUE3WSxLQUFBLFNBQUFyUixHQUNBLE1BQUEsQ0FDQSxDQUFBbXFCLFVBQUFDLElBQUEsSUFBQXBxQixJQUNBLENBQUFtcUIsVUFBQUMsUUFJQWxvQixRQUFBLFNBQUEvUCxHQUNBLE9BQUFrNEIsR0FBQWw0QixJQUdBaTRCLFVBQUEsU0FBQWxvQixFQUFBbEMsR0FDQSxNQUFBLENBQ0EsQ0FBQW1xQixVQUFBQyxJQUFBLElBQUFwcUIsRUFBQWtDLElBQ0EsQ0FBQWlvQixVQUFBQyxHQUFBLElBQUFwcUIsR0FBQSxFQUFBa0MsU0FRQSxTQUFBbW9CLEdBQUE5cEIsR0FDQSxPQUFBOVcsS0FBQW9lLElBQUFuWSxHQUFBNlEsRUFBQSxhQUFBalosTUFBQSxLQUFBLEdBQUFpWixFQUFBelAsY0FBQSxFQUdBLFNBQUFzNUIsR0FBQXRrQyxFQUFBMGhDLEdBS0EsWUFKQSxJQUFBMWhDLElBQUFBLEVBQUEsUUFDQSxJQUFBMGhDLElBQUFBLEVBQUEsS0FFQTFoQyxHQUFBQSxFQUFBMGhDLEVBQUEsR0FDQTE3QixHQUFBLGNBQUFoRyxFQUFBLElBQUEsZUFBQUEsRUFBQSxVQUdBLFNBQUF3a0MsR0FBQXhrQyxHQUNBLE1BQUEsV0FBQUEsRUFBQSxLQUFBQSxFQUFBLE9BR0EsSUFBQXlrQyxHQUFBcmlDLEVBQUEsR0FBQStoQyxHQUFBLENBRUFPLEtBQUEsQ0FFQW5aLEtBQUEsV0FDQSxNQUFBLENBQ0EsQ0FBQXpWLFFBQUEsR0FDQSxDQUFBQSxRQUFBLEtBSUFzRyxRQUFBLFNBQUEvUCxHQUNBLE9BQUEsRUFBQXpDLEdBQUF5QyxFQUFBLFlBR0FpNEIsVUFBQSxTQUFBbG9CLEdBQ0EsTUFBQSxDQUNBLENBQUF0RyxRQUFBLEVBQUFzRyxHQUNBLENBQUF0RyxRQUFBc0csTUFNQXVvQixNQUFBLENBRUFwWixLQUFBLFdBQ0EsTUFBQSxDQUNBLENBQUF6VixRQUFBLEVBQUF1dUIsVUFBQUcsR0FBQSxLQUNBLENBQUExdUIsUUFBQSxFQUFBdXVCLFVBQUFHLEdBQUEsTUFJQXBvQixRQUFBLFNBQUEvUCxHQUNBLE9BQUEsRUFBQXpDLEdBQUF5QyxFQUFBLFlBR0FpNEIsVUFBQSxTQUFBbG9CLEdBQ0EsTUFBQSxDQUNBLENBQUF0RyxRQUFBLEVBQUFzRyxFQUFBaW9CLFVBQUFHLEdBQUEsRUFBQSxHQUFBcG9CLElBQ0EsQ0FBQXRHLFFBQUFzRyxFQUFBaW9CLFVBQUFHLEdBQUEsR0FBQSxHQUFBcG9CLFNBNkZBLFNBQUF3b0IsR0FBQW5xQixFQUFBM08sRUFBQWxHLEdBQ0FvSCxHQUFBeU4sRUFBQXBOLEdBQUF2QixHQUFBLEdBQUEsRUFBQWxHLElBMFVBLElBNkZBaS9CLEdBQUEsQ0FFQW5sQixPQUFBLENBdGFBLENBRUE3SSxNQUFBLENBQ0EwVyxTQUFBcnNCLFFBQ0E0akMsaUJBQUFua0MsT0FDQW9rQyxhQUFBN2pDLFNBR0EwRSxLQUFBLENBQ0EybkIsVUFBQSxFQUNBdVgsaUJBQUEsSUFDQUMsY0FBQSxHQUdBMWtCLFVBQUEsV0FDQXRrQixLQUFBd3hCLFVBQUF4eEIsS0FBQWlwQyxpQkFHQXprQixhQUFBLFdBQ0F4a0IsS0FBQWtwQyxnQkFHQXhrQixPQUFBLFdBQ0F2YixHQUFBbkosS0FBQW1wQyxPQUFBLFdBQUEsT0FHQWhsQixPQUFBLENBRUEsQ0FFQS9hLEtBQUEsbUJBRUFzVixHQUFBMVUsSUFBQU0sU0FFQXBGLE9BQUEsV0FDQSxPQUFBbEYsS0FBQXd4QixVQUdBdkgsUUFBQSxXQUNBM2YsU0FBQXlVLE9BQ0EvZSxLQUFBa3BDLGVBRUFscEMsS0FBQWlwQyxtQkFRQXRrQixRQUFBLENBRUFza0IsY0FBQSxXQUNBLElBQUFoZ0MsRUFBQWpKLEtBR0FBLEtBQUFrcEMsZUFFQWxwQyxLQUFBMGhCLFNBQUFDLFlBQ0EsV0FBQSxRQUFBMVksRUFBQW1nQyxZQUFBenpCLEdBQUEsU0FBQTFNLEVBQUE2Z0IsU0FDQTdnQixFQUFBKy9CLGVBQUF0OEIsR0FBQXpELEVBQUE2Z0IsSUFBQSxhQUNBN2dCLEVBQUFpMEIsTUFBQTU3QixRQUNBMkgsRUFBQXVtQixLQUFBLFNBQ0F4dkIsS0FBQStvQyxtQkFLQUcsYUFBQSxXQUNBbHBDLEtBQUEwaEIsVUFBQUUsY0FBQTVoQixLQUFBMGhCLGFBT0EsQ0FFQTVHLE1BQUEsQ0FDQXN1QixVQUFBamtDLFNBR0EwRSxLQUFBLENBQ0F1L0IsV0FBQSxFQUNBQyxVQUFBLElBR0FqbEIsUUFBQSxXQUNBLElBQUFuYixFQUFBakosS0FHQSxDQUFBLFFBQUEsT0FBQSxPQUFBc0osUUFBQSxTQUFBL0ksR0FFQSxJQUFBNlUsRUFBQW5NLEVBQUExSSxHQUNBMEksRUFBQTFJLEdBQUEsU0FBQXlNLEdBRUEsSUFBQThSLEVBQUE1TSxHQUFBbEYsR0FBQXhFLEdBQUE2QixJQUFBLEVBQUEsR0FFQXBCLEVBQUFxZ0MsUUFBQXhxQixJQUFBN1YsRUFBQTZWLElBQUE3VixFQUFBNlYsSUFBQTdWLEVBQUFxZ0MsUUFDQXJnQyxFQUFBNlYsSUFBQUEsRUFFQTFKLEVBQUFwSSxPQU9BbVgsT0FBQSxDQUVBLENBRUEvYSxLQUFBMEIsR0FFQTBGLFNBQUEsV0FDQSxPQUFBeFEsS0FBQXVwQyxXQUdBdGYsUUFBQSxTQUFBamQsR0E2TUEsSUFBQTBSLEdBM01BMWUsS0FBQW9wQyxZQUNBcjNCLEdBQUEvRSxPQTBNQTBSLEVBMU1BMVIsRUFBQTFHLFFBMk1Bb0osU0FBQXBPLFFBQUFvZCxFQUFBOUgsV0FBQXRWLFNBMU1BOEssR0FBQVksRUFBQTFHLE9BQUE4SSxLQUNBLEVBQUFwQyxFQUFBdzhCLFFBQ0F4cEMsS0FBQXNCLE9BQUEsR0FLQXRCLEtBQUFtYyxNQUFBblAsS0FLQSxDQUlBNUQsS0FBQSxZQUNBa2YsU0FBQSxFQUNBMkIsUUFBQSxPQUNBL2tCLE9BQUEsV0FDQSxNQUFBLGFBQUE2RixJQUVBeUYsU0FBQSxXQUNBLE9BQUF4USxLQUFBdXBDLFlBS0EsQ0FDQW5nQyxLQUFBLFlBRUE2Z0IsUUFBQSxTQUFBamQsR0FDQUEsRUFBQWdrQixvQkFNQXJNLFFBQUEsQ0FFQXhJLE1BQUEsV0FDQSxJQUFBbFQsRUFBQWpKLEtBR0FBLEtBQUF5cEMsS0FBQXpwQyxLQUFBOGUsSUFFQTllLEtBQUEwcEMsZUFFQTFwQyxLQUFBcWdCLFFBQUFyZ0IsS0FBQTBwQyxjQUFBcnBCLFVBQ0FyZ0IsS0FBQXlwQyxNQUFBenBDLEtBQUEwcEMsY0FBQUMsY0FBQTNwQyxLQUFBcWdCLFFBQUFyZ0IsS0FBQW1lLElBRUFuZSxLQUFBMHBDLGNBQUFydEIsU0FDQXJjLEtBQUEwcEMsY0FBQW5CLFVBQUF2b0MsS0FBQXFnQixTQUVBcmdCLEtBQUE0cEMsVUFBQSxFQUVBNXBDLEtBQUFrOUIsTUFBQSxJQUdBbDlCLEtBQUE2cEMsVUFBQTdwQyxLQUFBdVYsTUFJQSxJQUFBM0UsRUFBQSxhQUFBN0YsR0FDQTRFLEdBQUFyRixTQUFBUyxHQUFBL0ssS0FBQThwQyxLQUFBLENBQUF4aEIsU0FBQSxJQUNBemdCLEdBQ0E3SCxLQUFBK3BDLFdBQUEsV0FDQW41QixJQUNBM0gsRUFBQThnQyxXQUFBLE1BRUFwNkIsR0FBQXBNLE9BQUEsU0FBQXZELEtBQUErcEMsWUFDQXA2QixHQUFBcE0sT0FBQXltQyxlQUFBLFNBQUFocUMsS0FBQStwQyxZQUNBcDZCLEdBQUFyRixTQUFBVSxHQUFBLElBQUFHLEdBQUFuTCxLQUFBaXFDLEtBQUEsR0FFQXA4QixHQUFBN04sS0FBQXVpQyxLQUFBLGFBQUEsU0FJQXVILEtBQUEsU0FBQTk4QixHQUNBLElBQUEvRCxFQUFBakosS0FJQSxHQUFBQSxLQUFBK3BDLFdBQUEsQ0FJQSxJQUFBRyxFQUFBbHFDLEtBQUE4ZSxJQUFBOWUsS0FBQXlwQyxLQUVBLEtBQUEsR0FBQVMsR0FBQWxxQyxLQUFBc3BDLFVBQUF0cEMsS0FBQThlLE1BQUE5ZSxLQUFBNHBDLFVBQUFoaUMsS0FBQW9lLElBQUFra0IsR0FBQWxxQyxLQUFBcXBDLFdBQUEsQ0FJQXg3QixHQUFBN04sS0FBQXVpQyxLQUFBLGdCQUFBLFFBRUF2MUIsRUFBQXdFLFlBQUF4RSxFQUFBZ2tCLGlCQUVBaHhCLEtBQUE0cEMsVUFBQSxFQUNBNXBDLEtBQUFtZSxJQUFBK3JCLEVBQUEsRUFBQSxHQUFBLEVBVUEsSUFSQSxJQUNBZixFQURBbnBDLEtBQ0FtcEMsT0FFQVUsRUFEQTdwQyxLQUNBNnBDLFVBQ0FNLEVBQUF2aUMsS0FBQW9lLElBQUFra0IsR0FDQUUsRUFBQXBxQyxLQUFBd1YsU0FBQXEwQixFQUFBN3BDLEtBQUFtZSxJQUFBMHJCLEdBQ0E3c0IsRUFBQWhkLEtBQUFxcUMsYUFBQVIsRUFBQU8sSUFBQWpCLEVBQUFVLEdBQUE1NkIsWUFFQW03QixJQUFBUCxHQUFBN3NCLEVBQUFtdEIsR0FFQW5xQyxLQUFBeXBDLE1BQUF6c0IsRUFBQWhkLEtBQUFtZSxJQUVBMHJCLEVBQUFPLEVBQ0FELEdBQUFudEIsRUFDQW90QixFQUFBcHFDLEtBQUF3VixTQUFBcTBCLEVBQUE3cEMsS0FBQW1lLElBQUEwckIsR0FDQTdzQixFQUFBaGQsS0FBQXFxQyxhQUFBUixFQUFBTyxJQUFBakIsRUFBQVUsR0FBQTU2QixZQUlBalAsS0FBQXFnQixRQUFBOHBCLEVBQUFudEIsRUFFQSxJQUtBc3RCLEVBTEE5OUIsRUFBQTI4QixFQUFBVSxHQUNBOXhCLEVBQUFveEIsRUFBQWlCLEdBQ0FuYSxFQUFBandCLEtBQUF1VixRQUFBNjBCLEVBQ0FHLEVBQUFWLElBQUFPLEVBSUEsQ0FBQXBxQyxLQUFBdVYsTUFBQXZWLEtBQUE2cEMsV0FBQTNrQyxPQUFBLFNBQUEvQyxHQUFBLE9BQUFLLEVBQUEsQ0FBQTRuQyxFQUFBUCxHQUFBMW5DLEtBQUFtSCxRQUFBLFNBQUFuSCxHQUNBOE8sR0FBQWs0QixFQUFBaG5DLEdBQUEsYUFBQSxDQUFBOEcsSUFFQXNoQyxJQUNBRCxHQUFBLEVBQ0FyaEMsRUFBQTRnQyxVQUFBQSxNQUtBN3BDLEtBQUF1VixRQUFBczBCLEdBQUE3cEMsS0FBQTZwQyxZQUFBQSxHQUFBUyxJQUNBcjVCLEdBQUFrNEIsRUFBQW5wQyxLQUFBdVYsT0FBQSxZQUFBLENBQUF2VixPQUdBaXdCLElBQ0Fqd0IsS0FBQTZwQyxVQUFBQSxFQUNBN3BDLEtBQUF1VixNQUFBNjBCLEVBRUFHLEdBQUF0NUIsR0FBQXpFLEVBQUEsaUJBQUEsQ0FBQXhNLE9BQ0FpUixHQUFBOEcsRUFBQSxpQkFBQSxDQUFBL1gsUUFHQUEsS0FBQTBwQyxjQUFBMXBDLEtBQUF3cUMsV0FBQTVpQyxLQUFBb2UsSUFBQWhtQixLQUFBcWdCLFNBQUE3VCxHQUFBKzlCLEdBQUF4eUIsR0FFQWtZLElBQ0FzYSxHQUFBdDVCLEdBQUF6RSxFQUFBLFdBQUEsQ0FBQXhNLE9BQ0FpUixHQUFBOEcsRUFBQSxXQUFBLENBQUEvWCxXQUtBaXFDLElBQUEsV0FPQSxHQUxBcjVCLEdBQUFyTixPQUFBLFNBQUF2RCxLQUFBK3BDLFlBQ0FuNUIsR0FBQXJOLE9BQUF5bUMsZUFBQSxTQUFBaHFDLEtBQUErcEMsWUFDQS9wQyxLQUFBK3BDLFlBQUEvcEMsS0FBQStwQyxhQUNBbjVCLEdBQUF0RyxTQUFBVSxHQUFBaEwsS0FBQWlxQyxLQUFBLEdBRUFqcUMsS0FBQTRwQyxTQUlBLEdBRkE1cEMsS0FBQTRwQyxTQUFBLEtBRUE1cEMsS0FBQXVWLFFBQUF2VixLQUFBNnBDLFVBQ0E3cEMsS0FBQXFnQixRQUFBLEVBQUFyZ0IsS0FBQXFnQixRQUNBcmdCLEtBQUFtZSxNQUFBLEVBQ0FuZSxLQUFBeXFDLE9BQUEsRUFBQXpxQyxLQUFBdVYsT0FBQSxHQUNBdlYsS0FBQTBwQyxjQUFBLFNBQ0EsQ0FFQSxJQUFBZ0IsR0FBQXJnQyxHQUFBckssS0FBQW1lLEtBQUE5VCxHQUFBLEdBQUEsR0FBQXJLLEtBQUFtZSxLQUFBLEdBQUFuZSxLQUFBc3BDLFFBQUF0cEMsS0FBQThlLElBQ0E5ZSxLQUFBdVYsTUFBQW0xQixFQUFBMXFDLEtBQUF1VixNQUFBdlYsS0FBQTZwQyxVQUVBYSxJQUNBMXFDLEtBQUFxZ0IsUUFBQSxFQUFBcmdCLEtBQUFxZ0IsU0FHQXJnQixLQUFBd3ZCLEtBQUEsRUFBQXh2QixLQUFBbWUsTUFBQXVzQixHQUFBMXFDLEtBQUFtZSxJQUFBLEdBQUF1c0IsRUFBQSxPQUFBLFlBQUEsR0FLQTc4QixHQUFBN04sS0FBQXVpQyxLQUFBLENBQUFvSSxXQUFBLEdBQUE3RCxjQUFBLEtBRUE5bUMsS0FBQXlwQyxLQUNBenBDLEtBQUFxZ0IsUUFDQSxRQVlBLENBRUF4VyxLQUFBLENBQ0ErZ0MsUUFBQSxHQUdBdG5CLFNBQUEsQ0FFQSthLElBQUEsU0FBQXQzQixFQUFBK2lCLEdBR0EsT0FBQW5VLEdBRkE1TyxFQUFBNmpDLE9BRUE5Z0IsSUFHQStnQixXQUFBLFNBQUE5akMsR0FDQSxJQUFBczdCLEVBQUF0N0IsRUFBQXM3QixTQUVBLE1BQUEsSUFBQUEsRUFBQSxXQUFBQSxFQUFBLEtBR0F5SSxTQUFBLFNBQUE1cEMsRUFBQTRvQixHQUNBLE9BQUE1UixHQUFBbFksS0FBQTZxQyxXQUFBL2dCLEtBS0FwRixPQUFBLENBRUE5RCxNQUFBLFdBQ0EsSUFBQTNYLEVBQUFqSixLQUdBQSxLQUFBcStCLEtBQUFyK0IsS0FBQXNCLFNBQUF0QixLQUFBcStCLElBQUEzdUIsU0FBQXBPLFFBQ0F1VSxHQUFBN1YsS0FBQXErQixJQUFBcitCLEtBQUFtcEMsT0FBQWxrQyxJQUFBLFNBQUEvRCxFQUFBaUIsR0FBQSxNQUFBLE9BQUE4RyxFQUFBLFNBQUEsS0FBQTlHLEVBQUEsd0JBQUFtSyxLQUFBLEtBR0FxTSxHQUFBVCxHQUFBbFksS0FBQTZxQyxXQUFBN3FDLEtBQUE4cEIsS0FBQTFaLE9BQUFwUSxLQUFBcStCLEtBQUEsYUFBQXIrQixLQUFBK3FDLFVBRUEvcUMsS0FBQWdyQyxhQUlBN21CLE9BQUEsQ0FBQSxXQUlBQSxPQUFBLENBRUEsQ0FFQS9hLEtBQUEsUUFFQW9ILFNBQUEsV0FDQSxPQUFBeFEsS0FBQTZxQyxZQUdBNWdCLFFBQUEsU0FBQWpkLEdBQ0FBLEVBQUFna0IsaUJBQ0FoeEIsS0FBQXd2QixLQUFBM2xCLEdBQUFtRCxFQUFBc0QsUUFBQXRRLEtBQUFxaUMsYUFLQSxDQUVBajVCLEtBQUEsV0FDQTZnQixRQUFBLGNBTUF0RixRQUFBLENBRUFxbUIsVUFBQSxXQUNBLElBQUEvaEMsRUFBQWpKLEtBR0FtQyxFQUFBbkMsS0FBQWlyQyxnQkFDQWpyQyxLQUFBOHFDLFNBQUF4aEMsUUFBQSxTQUFBb1YsR0FFQSxJQUFBb0csRUFBQWpiLEdBQUE2VSxFQUFBelYsRUFBQW81QixVQUVBMXBCLEdBQUErRixFQUFBelYsRUFBQTIzQixVQUFBbDhCLEVBQUFvZ0IsS0FBQTNpQixHQUNBd1csR0FBQStGLEVBQUEsZUFBQXpWLEVBQUF3TSxTQUFBLGFBQUFxUCxHQUFBLElBQUEzaUIsR0FBQSxTQUFBMmlCLEdBQUEzaUIsR0FBQThHLEVBQUE4aEMsaUJBYUFqd0IsTUFBQSxDQUNBb3dCLGFBQUEvbEMsUUFDQWdtQyxPQUFBenBDLE9BQ0E2VCxNQUFBM1EsT0FDQTZRLE9BQUF0USxRQUNBaW1DLFNBQUF4bUMsT0FDQTJrQyxVQUFBN25DLFFBR0FtSSxLQUFBLFdBQUEsTUFBQSxDQUNBc2hDLE9BQUEsT0FDQTExQixRQUFBLEVBQ0EyMUIsU0FBQSxFQUNBNzFCLE1BQUEsRUFDQXMwQixXQUFBLEVBQ0EzTSxNQUFBLEdBQ0E3YyxRQUFBLEVBQ0F1Z0IsVUFBQSxZQUNBc0ssY0FBQSxFQUNBRyxjQUFBLEVBQ0FDLGtCQUFBLEtBR0FobkIsVUFBQSxXQUNBdGtCLEtBQUE2cEMsV0FBQSxFQUNBN3BDLEtBQUF1VixNQUFBdlYsS0FBQWlyQyxjQUFBanJDLEtBQUF1VixPQUNBdlYsS0FBQWs5QixNQUFBLElBR0ExWSxhQUFBLFdBQ0FuTSxHQUFBclksS0FBQW1wQyxPQUFBbnBDLEtBQUE0Z0MsWUFHQXRkLFNBQUEsQ0FFQTNILFNBQUEsU0FBQTVVLEVBQUEraUIsR0FDQSxJQUFBc2hCLEVBQUFya0MsRUFBQXFrQyxTQUVBLE9BQUFHLEdBQUF6aEIsRUFBQTdhLFlBQUFtOEIsSUFHQTdJLEtBQUEsU0FBQXg3QixFQUFBK2lCLEdBR0EsT0FBQW5VLEdBRkE1TyxFQUFBeWtDLFFBRUExaEIsSUFHQWloQixTQUFBLFdBQ0EsT0FBQS9xQyxLQUFBc0IsT0FBQSxHQUdBaW9DLFVBQUEsU0FBQXhpQyxHQUlBLE9BSEFBLEVBQUF5a0MsUUFHQSxLQUZBemtDLEVBQUF3aUMsV0FFQSxRQUdBSixPQUFBLENBRUEvdkIsSUFBQSxXQUNBLE9BQUFsQixHQUFBbFksS0FBQXVwQyxVQUFBdnBDLEtBQUE4cEIsTUFHQTBDLE1BQUEsV0FDQXhzQixLQUFBb3RCLFdBS0E5ckIsT0FBQSxXQUNBLE9BQUF0QixLQUFBbXBDLE9BQUE3bkMsU0FLQTZpQixPQUFBLENBRUFzbkIsVUFBQSxXQUNBenJDLEtBQUFxdUIsUUFBQXJ1QixLQUFBdWlDLFFBS0E1ZCxRQUFBLENBRUE2SyxLQUFBLFNBQUFqYSxFQUFBcUQsR0FDQSxJQUFBM1AsRUFBQWpKLEtBSUEsUUFIQSxJQUFBNFksSUFBQUEsR0FBQSxJQUdBNVksS0FBQTRwQyxVQUFBNXBDLEtBQUFzQixPQUFBLENBSUEsSUFDQTQ3QixFQURBbDlCLEtBQ0FrOUIsTUFDQXdPLEVBQUE5eUIsRUFBQSxFQUFBc2tCLEVBQUE1N0IsT0FDQXNiLEVBQUEsV0FDQXNnQixFQUFBeHJCLE9BQUFnNkIsRUFBQSxHQUVBeE8sRUFBQTU3QixRQUNBMkgsRUFBQXVtQixLQUFBME4sRUFBQWhtQixTQUFBLElBTUEsR0FGQWdtQixFQUFBdGtCLEVBQUEsVUFBQSxRQUFBckQsSUFFQXFELEdBQUEsRUFBQXNrQixFQUFBNTdCLE9BRUEsSUFBQTQ3QixFQUFBNTdCLFFBQ0F0QixLQUFBMHBDLGNBQUFpQyxRQUFBL2pDLEtBQUFGLElBQUExSCxLQUFBMmIsU0FBQSxVQUhBLENBU0EsSUFBQWt1QixFQUFBN3BDLEtBQUF3VixTQUFBeFYsS0FBQXVWLE9BQ0EvSSxFQUFBaU0sR0FBQXpZLEtBQUFtcEMsT0FBQW5wQyxLQUFBNGdDLFlBQUE1Z0MsS0FBQW1wQyxPQUFBVSxHQUNBTyxFQUFBcHFDLEtBQUF3VixTQUFBRCxFQUFBdlYsS0FBQXVWLE9BQ0F3QyxFQUFBL1gsS0FBQW1wQyxPQUFBaUIsR0FFQSxHQUFBNTlCLElBQUF1TCxFQUFBLENBa0hBLElBQUF4QyxFQUFBczBCLEVBekdBLEdBSkE3cEMsS0FBQW1lLEtBNkdBMHJCLEVBN0dBQSxFQThHQSxVQURBdDBCLEVBN0dBQSxLQWdIQSxhQUFBQSxHQUVBQSxFQUFBczBCLElBREEsRUFGQSxHQTlHQTdwQyxLQUFBNnBDLFVBQUFBLEVBQ0E3cEMsS0FBQXVWLE1BQUE2MEIsRUFFQTU5QixJQUFBeUUsR0FBQXpFLEVBQUEsaUJBQUEsQ0FBQXhNLFNBQ0FpUixHQUFBOEcsRUFBQSxpQkFBQSxDQUFBL1gsS0FBQXdNLElBSUEsT0FGQXhNLEtBQUF1VixNQUFBdlYsS0FBQTZwQyxlQUNBanRCLElBSUEsSUFBQXJLLEVBQUF2UyxLQUFBeXFDLE1BQUFqK0IsRUFBQXVMLEVBQUFhLEdBQUFuRixLQUFBLFdBS0EsT0FIQWpILEdBQUF5RSxHQUFBekUsRUFBQSxhQUFBLENBQUF2RCxJQUNBZ0ksR0FBQThHLEVBQUEsWUFBQSxDQUFBOU8sSUFFQSxJQUFBdUosR0FBQSxTQUFBQyxHQUNBNk4sR0FBQU0sTUFBQSxXQUNBc2MsRUFBQWhtQixRQUNBZ21CLEVBQUE1N0IsT0FDQTJILEVBQUF1bUIsS0FBQTBOLEVBQUFobUIsU0FBQSxHQUVBak8sRUFBQXlnQyxjQUFBLEtBRUFqM0IsVUFTQSxPQUhBakcsR0FBQXlFLEdBQUF6RSxFQUFBLFdBQUEsQ0FBQXhNLE9BQ0FpUixHQUFBOEcsRUFBQSxXQUFBLENBQUEvWCxPQUVBdVMsRUF0Q0FxSyxPQTBDQXBILFNBQUEsU0FBQUQsRUFBQS9JLEdBSUEsWUFIQSxJQUFBK0ksSUFBQUEsRUFBQXZWLEtBQUF1VixZQUNBLElBQUEvSSxJQUFBQSxFQUFBeE0sS0FBQXVWLE9BRUE5TixHQUFBK04sR0FBQUQsRUFBQXZWLEtBQUFtcEMsT0FBQTM4QixFQUFBeE0sS0FBQXlWLFFBQUEsRUFBQXpWLEtBQUErcUMsV0FHQUUsY0FBQSxTQUFBMTFCLEVBQUFzMEIsR0FJQSxZQUhBLElBQUF0MEIsSUFBQUEsRUFBQXZWLEtBQUF1VixZQUNBLElBQUFzMEIsSUFBQUEsRUFBQTdwQyxLQUFBNnBDLFdBRUE3cEMsS0FBQXdWLFNBQUFELEVBQUFzMEIsSUFHQVksTUFBQSxTQUFBaitCLEVBQUF1TCxFQUFBYSxHQWVBLEdBYkE1WSxLQUFBMHBDLGNBQUExcEMsS0FBQTRyQyxpQkFDQXAvQixFQUNBdUwsRUFDQS9YLEtBQUFtZSxJQUNBOVgsRUFBQSxDQUNBOGtDLE9BQUF2eUIsRUFDQWIsRUFBQTlJLFlBQUEsSUFDQSx1Q0FDQSxxQ0FDQWpQLEtBQUFtckMsUUFDQW5yQyxLQUFBc3JDLHFCQUdBMXlCLElBQUFwTSxFQUVBLE9BREF4TSxLQUFBd3FDLFdBQUEsR0FDQWg0QixHQUFBQyxVQUdBLElBQ0FuUixFQURBdEIsS0FBQWs5QixNQUNBNTdCLE9BQ0EsT0FBQXRCLEtBQUEwcEMsY0FBQSxFQUFBcG9DLEVBQUEsVUFBQSxRQUFBLEVBQUFBLEVBQUFzRyxLQUFBRixJQUFBMUgsS0FBQTJiLFNBQUEsR0FBQSxJQUFBcmEsRUFBQSxJQUFBdEIsS0FBQTJiLFNBQUEzYixLQUFBcWdCLFVBSUFncUIsYUFBQSxTQUFBNzlCLEVBQUF1TCxHQUNBLE9BQUEvWCxLQUFBNHJDLGlCQUFBcC9CLEVBQUFBLElBQUF1TCxHQUFBQSxHQUFBNHhCLGVBR0FhLFdBQUEsU0FBQW5xQixFQUFBN1QsRUFBQXVMLFFBQ0EsSUFBQXZMLElBQUFBLEVBQUF4TSxLQUFBNnBDLGdCQUNBLElBQUE5eEIsSUFBQUEsRUFBQS9YLEtBQUF1VixPQUVBLElBQUFzMkIsRUFBQTdyQyxLQUFBNHJDLGlCQUFBcC9CLElBQUF1TCxHQUFBdkwsRUFBQXVMLEdBRUEsT0FEQTh6QixFQUFBdEQsVUFBQWxvQixHQUNBd3JCLEdBR0FELGlCQUFBLFNBQUFwL0IsRUFBQXVMLEVBQUFvRyxFQUFBeE0sR0FNQSxZQUxBLElBQUFuRixJQUFBQSxFQUFBeE0sS0FBQTZwQyxnQkFDQSxJQUFBOXhCLElBQUFBLEVBQUEvWCxLQUFBdVYsWUFDQSxJQUFBNEksSUFBQUEsRUFBQW5lLEtBQUFtZSxLQUFBLFFBQ0EsSUFBQXhNLElBQUFBLEVBQUEzUixLQUFBc3JDLG1CQUVBLElBQUF0ckMsS0FBQXFyQyxhQUNBbm5DLEVBQUFzSSxHQUFBeE0sS0FBQW1wQyxPQUFBMzhCLEdBQUFBLEVBQ0F0SSxFQUFBNlQsR0FBQS9YLEtBQUFtcEMsT0FBQXB4QixHQUFBQSxFQUNBb0csR0FBQTlULElBQUEsRUFBQSxHQUNBc0gsTUFrQkEsU0FBQTQ1QixHQUFBL2lDLEdBQ0EsTUFBQSxHQUFBQSxFQUFBLElBR0EsSUFBQXNqQyxHQUFBLENBRUFub0IsT0FBQSxDQUFBbWxCLElBRUFodUIsTUFBQSxDQUNBMkIsVUFBQS9hLFFBR0FtSSxLQUFBLENBQ0E0UyxVQUFBLFFBQ0F5dUIsYUFBQSx1QkFDQTlDLFdBQUFBLEdBQ0FpRCxhQXZ3QkEsU0FBQTcrQixFQUFBdUwsRUFBQW9HLEVBQUFwWCxHQUNBLElBQUEwVixFQUFBMVYsRUFBQTBWLFVBQ0EwdUIsRUFBQXBrQyxFQUFBb2tDLE9BR0E5cUIsRUFBQTVELEVBQUE0RCxRQUNBa29CLEVBQUE5ckIsRUFBQThyQixVQUNBL1ksRUFBQS9TLEVBQUErUyxVQUFBLElBQUFBLElBQUFBLEVBQUEzbkIsSUFDQSxJQUFBaVQsRUFBQTBVLEVBQUFyUixHQUNBaEwsRUFBQSxJQUFBYixHQUVBLE1BQUEsQ0FFQTZMLElBQUFBLEVBRUFxUixLQUFBLFNBQUE3VCxFQUFBMEUsRUFBQTByQixHQUNBLElBQUE5aUMsRUFBQWpKLFVBQ0EsSUFBQXFnQixJQUFBQSxFQUFBLEdBR0EsSUFBQXpFLEVBQUFtd0IsRUFBQSxTQUFBWixFQWdCQSxPQWZBeHZCLEdBQUEvVCxLQUFBa0IsTUFBQTZTLEVBQUFsVSxHQUFBNFksR0FBQSxFQUFBLElBRUFyZ0IsS0FBQXVvQyxVQUFBbG9CLEdBRUF3b0IsR0FBQTl3QixFQUFBLFNBQUEsQ0FBQXNJLFFBQUFBLEVBQUExRSxTQUFBQSxFQUFBQyxPQUFBQSxFQUFBdUMsSUFBQUEsSUFDQTBxQixHQUFBcjhCLEVBQUEsVUFBQSxDQUFBNlQsUUFBQSxFQUFBQSxFQUFBMUUsU0FBQUEsRUFBQUMsT0FBQUEsRUFBQXVDLElBQUFBLElBRUEzTCxHQUFBYSxJQUFBLENBQ0E2SSxHQUFBQyxNQUFBcEUsRUFBQStDLEVBQUEsR0FBQWEsRUFBQUMsR0FDQU0sR0FBQUMsTUFBQTNQLEVBQUFzTyxFQUFBLEdBQUFhLEVBQUFDLEtBQ0FuSSxLQUFBLFdBQ0F4SyxFQUFBMlQsUUFDQXpKLEVBQUFWLFdBQ0E1SyxJQUVBc0wsRUFBQVosU0FHQTZKLEtBQUEsV0FDQSxPQUFBRixHQUFBRSxLQUFBLENBQUFyRSxFQUFBdkwsS0FHQTZQLE9BQUEsV0FDQUgsR0FBQUcsT0FBQSxDQUFBdEUsRUFBQXZMLEtBR0FvUSxNQUFBLFdBQ0EsSUFBQSxJQUFBL1YsS0FBQWlVLEVBQUEsR0FDQWpOLEdBQUEsQ0FBQWtLLEVBQUF2TCxHQUFBM0YsRUFBQSxLQUlBOGtDLFFBQUEsU0FBQWh3QixFQUFBMEUsR0FJQSxZQUhBLElBQUFBLElBQUFBLEVBQUFyZ0IsS0FBQXFnQixXQUVBbkUsR0FBQUcsT0FBQSxDQUFBdEUsRUFBQXZMLElBQ0F4TSxLQUFBd3ZCLEtBQUE3VCxFQUFBMEUsR0FBQSxJQUlBa29CLFVBQUEsU0FBQWxvQixHQUVBcmdCLEtBQUE0YyxRQUVBLElBQUE5QixFQUFBeXRCLEVBQUFsb0IsRUFBQWxDLEdBQ0F0USxHQUFBa0ssRUFBQStDLEVBQUEsSUFDQWpOLEdBQUFyQixFQUFBc08sRUFBQSxJQUNBK3RCLEdBQUE5d0IsRUFBQSxrQkFBQSxDQUFBc0ksUUFBQUEsRUFBQWxDLElBQUFBLElBQ0EwcUIsR0FBQXI4QixFQUFBLG1CQUFBLENBQUE2VCxRQUFBLEVBQUFBLEVBQUFsQyxJQUFBQSxLQUlBa0MsUUFBQSxXQUNBLE9BQUFBLEVBQUE3VCxHQUFBdUwsRUFBQUEsRUFBQW9HLElBR0F3ckIsWUFBQSxXQUNBLE9BQUFuOUIsR0FBQUEsRUFBQXlDLGdCQTRyQkFxVSxTQUFBLENBRUE3RyxVQUFBLFNBQUExVixHQUNBLElBQUEwVixFQUFBMVYsRUFBQTBWLFVBQ0EyckIsRUFBQXJoQyxFQUFBcWhDLFdBRUEsT0FBQS9oQyxFQUFBK2hDLEVBQUEzckIsSUFBQTJyQixFQUFBQyxNQUFBLENBQUFqL0IsS0FBQXFULEtBR0E2dUIsa0JBQUEsV0FDQSxNQUFBLENBQUE3dUIsVUFBQXpjLEtBQUF5YyxhQUtBMEgsT0FBQSxDQUVBNm5CLHlDQUFBLFNBQUFqbEMsR0FDQSxJQUFBVCxFQUFBUyxFQUFBVCxPQUVBdEcsS0FBQXF1QixRQUFBL25CLElBR0EybEMsZUFBQSxTQUFBbGxDLEdBR0FvUixHQUZBcFIsRUFBQVQsT0FFQXRHLEtBQUE0Z0MsWUFHQTZLLFVBQUEsU0FBQTFrQyxHQUdBb1IsR0FGQXBSLEVBQUFULE9BRUF0RyxLQUFBa3JDLGVBR0FnQixXQUFBLFNBQUFubEMsR0FHQXNSLEdBRkF0UixFQUFBVCxPQUVBdEcsS0FBQTRnQyxVQUFBNWdDLEtBQUFrckMsaUJBT0FpQixHQUFBLENBRUF4b0IsT0FBQSxDQUFBaVosR0FBQUUsR0FBQWpPLEdBQUFpZCxJQUVBdGUsWUFBQSxFQUVBMVMsTUFBQSxDQUNBc3hCLGNBQUF4bkMsT0FDQTZzQixRQUFBN3NCLE9BQ0F5bkMsY0FBQWxuQyxRQUNBbW5DLFNBQUE1cUMsUUFHQW1JLEtBQUEsV0FBQSxNQUFBLENBQ0E0bkIsUUFBQSxFQUNBNGEsZUFBQSxFQUNBRCxjQUFBLElBQ0F0YixNQUFBLEdBQ0F2WSxJQUFBLFVBQ0FnbEIsUUFBQSxtQkFDQWlPLFFBQUEscUJBQ0FuSixTQUFBLG1CQUNBaFIsU0FBQSxrQkFDQWtiLFdBQUEsdUJBQ0F2RCxjQUFBLEVBQ0FvQyxTQUFBLEVBQ0FoRCxXQUFBTSxHQUNBNEQsU0FBQSw4dEJBR0Fsb0IsUUFBQSxXQUVBLElBQUEwRixFQUFBblUsR0FBQTNWLEtBQUFzc0MsVUFDQS9KLEVBQUE1c0IsR0FBQTNWLEtBQUF3ckMsUUFBQTFoQixHQUNBOXBCLEtBQUE4d0IsTUFBQXhuQixRQUFBLFdBQUEsT0FBQXdNLEdBQUF5c0IsRUFBQSxVQUVBdmlDLEtBQUErc0IsT0FBQWpYLEdBQUE5VixLQUFBMFgsVUFBQW9TLEtBSUF4RyxTQUFBLENBRUFrcEIsUUFBQSxTQUFBemxDLEVBQUEraUIsR0FDQS9pQixFQUFBd2xDLFdBRUEsT0FBQTUyQixHQUFBLHVCQUFBbVUsS0FLQTNGLE9BQUEsQ0FFQSxDQUVBL2EsS0FBQTJCLEdBQUEsSUFBQUQsR0FBQSxXQUVBbWYsUUFBQSxnQkFJQSxDQUVBN2dCLEtBQUEsUUFFQXRKLE1BQUEsRUFFQTBRLFNBQUEsV0FDQSxPQUFBeFEsS0FBQXVwQyxXQUdBdGYsUUFBQSxTQUFBamQsR0FFQUEsRUFBQWdtQixrQkFJQWh6QixLQUFBK3dCLFNBS0EsQ0FFQTNuQixLQUFBLFFBRUF0SixNQUFBLEVBRUFtcUIsUUFBQSxXQUNBanFCLEtBQUF5c0MsaUJBS0EsQ0FFQXJqQyxLQUFBLE9BRUF0SixNQUFBLEVBRUFtcUIsUUFBQSxXQUVBanFCLEtBQUEwc0MsZUFFQXIwQixHQUFBclksS0FBQW1wQyxPQUFBbnBDLEtBQUE0Z0MsV0FDQTFrQixHQUFBRSxLQUFBcGMsS0FBQW1wQyxVQUtBLENBRUEvL0IsS0FBQSxTQUVBdEosTUFBQSxFQUVBbXFCLFFBQUEsV0FDQWpxQixLQUFBMnRCLFVBQUEsS0FLQSxDQUVBdmtCLEtBQUEsUUFFQXNWLEdBQUExVSxJQUFBTSxTQUVBMmYsUUFBQSxTQUFBamQsR0FFQSxHQUFBaE4sS0FBQTB2QixVQUFBMXZCLEtBQUE4cEIsTUFBQTlwQixLQUFBb3BDLFVBSUEsT0FBQXA4QixFQUFBb21CLFNBQ0EsS0FBQSxHQUNBcHpCLEtBQUF3dkIsS0FBQSxZQUNBLE1BQ0EsS0FBQSxHQUNBeHZCLEtBQUF3dkIsS0FBQSxXQU1BLENBRUFwbUIsS0FBQSxpQkFFQTZnQixRQUFBLFNBQUFqZCxHQUVBaE4sS0FBQTB2QixjQUlBMXZCLEtBQUFvcEMsV0FBQSxFQUVBcDhCLEVBQUFna0IsaUJBRUFoeEIsS0FBQXV2QixjQUFBdnZCLEtBQUE4cEIsS0FBQSxHQUFBLEdBRUE5cEIsS0FBQXljLFVBQUFpc0IsR0FBQSxNQUNBcndCLEdBQUFyTCxFQUFBMUcsT0FBQXRHLEtBQUE0Z0MsV0FDQTVnQyxLQUFBazlCLE1BQUF4ckIsT0FBQSxFQUFBLEVBQUExUixLQUFBdVYsVUFNQSxDQUVBbk0sS0FBQSxXQUVBNmdCLFFBQUEsV0FFQXBVLEdBQUE3VixLQUFBd3NDLFFBQUF4c0MsS0FBQTJzQyxVQUFBSCxTQUFBLElBRUEsSUFBQSxJQUFBN1gsR0FBQTMwQixLQUFBeXhCLFFBQUFrRCxHQUFBMzBCLEtBQUF5eEIsUUFBQWtELElBQ0EzMEIsS0FBQTRzQyxTQUFBNXNDLEtBQUF1VixNQUFBb2YsS0FPQSxDQUVBdnJCLEtBQUEsWUFFQTZnQixRQUFBLFdBQ0FqcUIsS0FBQW9wQyxVQUFBcHBDLEtBQUE2cEIsT0FBQXVmLFlBS0EsQ0FFQWhnQyxLQUFBLFdBRUE2Z0IsUUFBQSxTQUFBL29CLEVBQUFvZ0IsR0FDQSxJQUFBclksRUFBQWpKLEtBR0E2VSxFQUFBeU0sRUFBQTdhLE9BQ0FzSixFQUFBdVIsRUFBQXZSLEtBQ0E4OEIsRUFBQXZyQixFQUFBdXJCLFNBQUEsSUFBQUEsSUFBQUEsRUFBQSxJQUNBLElBQUFDLEVBQUF4ckIsRUFBQXdyQixPQUNBL2lDLEVBQUF1WCxFQUFBdlgsTUFJQSxRQUpBLElBQUFBLElBQUFBLEVBQUEsSUFFQS9KLEtBQUErc0MsUUFBQXpyQixFQUFBLDRCQUVBek0sRUFBQSxDQUlBLElBQUFuSSxFQUNBc2dDLEVBQUEsQ0FDQUMsWUFBQSxJQUNBQyxNQUFBLFdBQ0FDLGdCQUFBLEdBQ0F6eUIsTUFBQSwyQ0FDQTB5QixnQkFBQSxHQUNBQyxXQUFBLEdBQUFydEMsS0FBQSxlQUlBLEdBQUEsVUFBQStQLEdBQUE4RSxFQUFBOVEsTUFBQSxxQ0FFQTZRLEdBQUFDLEVBQUE5SyxFQUFBK0ssT0FBQS9LLEVBQUEweEIsTUFBQWhvQixLQUNBLFNBQUExTSxHQUNBLElBQUFpVyxFQUFBalcsRUFBQWlXLE1BQ0FDLEVBQUFsVyxFQUFBa1csT0FFQSxPQUFBaFUsRUFBQThqQyxRQUFBenJCLEVBQUFnc0IsR0FBQSxNQUFBam5DLEVBQUEsQ0FBQXdPLElBQUFBLEVBQUFtSSxNQUFBQSxFQUFBQyxPQUFBQSxFQUFBNHZCLElBQUFBLEdBQUE5aUMsTUFFQSxXQUFBLE9BQUFkLEVBQUFza0MsU0FBQWpzQixVQUlBLEdBQUEsVUFBQXZSLEdBQUE4RSxFQUFBOVEsTUFBQSwyQkFBQSxDQUVBLElBQUF5cEMsRUFBQUYsR0FBQSxRQUFBam5DLEVBQUEsQ0FDQXdPLElBQUFBLEVBQ0FpNEIsT0FBQUEsRUFDQVcsU0FBQSxHQUNBQyxZQUFBLEdBQ0FMLFdBQUEsR0FBQXJ0QyxLQUFBLGVBQ0ErSixJQUVBNEYsR0FBQTY5QixFQUFBLGlCQUFBLFdBQ0Fya0MsR0FBQXFrQyxFQUFBLENBQUF4d0IsTUFBQXd3QixFQUFBMWIsV0FBQTdVLE9BQUF1d0IsRUFBQXZiLGNBQ0FocEIsRUFBQThqQyxRQUFBenJCLEVBQUFrc0IsS0FFQTc5QixHQUFBNjlCLEVBQUEsUUFBQSxXQUFBLE9BQUF2a0MsRUFBQXNrQyxTQUFBanNCLFNBR0EsV0FBQXZSLEdBQUE4RSxFQUFBOVEsTUFBQSx1QkFFQS9ELEtBQUErc0MsUUFBQXpyQixFQUFBZ3NCLEdBQUEsU0FBQWpuQyxFQUFBLENBQ0F3TyxJQUFBQSxFQUNBbzRCLFlBQUEsSUFDQUUsZ0JBQUEsR0FDQXBXLE1BQUEsc0JBQ0FodEIsTUFHQTJDLEVBQUFtSSxFQUFBOVEsTUFBQSwrRUFFQS9ELEtBQUErc0MsUUFBQXpyQixFQUFBZ3NCLEdBQUEsU0FBQWpuQyxFQUFBLENBQ0F3TyxJQUFBLHVCQUFBbkksRUFBQSxJQUFBLElBQUEsY0FBQUEsRUFBQSxJQUFBQSxFQUFBLEdBQUEsSUFBQUEsRUFBQSxHQUFBLElBQ0FzUSxNQUFBLEtBQ0FDLE9BQUEsTUFDQSt2QixFQUFBampDLE1BR0EyQyxFQUFBbUksRUFBQTlRLE1BQUEsMkNBRUE2UCxHQUFBLHVEQUFBKzVCLFVBQUE5NEIsR0FBQSxDQUNBVCxhQUFBLE9BQ0F3NUIsaUJBQUEsSUFDQW42QixLQUNBLFNBQUExTSxHQUNBLElBQUE4bUMsRUFBQTltQyxFQUFBK3dCLFNBQ0E3YSxFQUFBNHdCLEVBQUE1d0IsT0FDQUQsRUFBQTZ3QixFQUFBN3dCLE1BRUEsT0FBQS9ULEVBQUE4akMsUUFBQXpyQixFQUFBZ3NCLEdBQUEsU0FBQWpuQyxFQUFBLENBQ0F3TyxJQUFBLGtDQUFBbkksRUFBQSxJQUFBQSxFQUFBLEdBQUEsSUFBQUEsRUFBQSxHQUFBLElBQ0FzUSxNQUFBQSxFQUNBQyxPQUFBQSxHQUNBK3ZCLEVBQUFqakMsTUFFQSxXQUFBLE9BQUFkLEVBQUFza0MsU0FBQWpzQixTQVdBcUQsUUFBQSxDQUVBaW9CLFNBQUEsU0FBQXIzQixRQUNBLElBQUFBLElBQUFBLEVBQUF2VixLQUFBdVYsT0FHQSxJQUFBK0wsRUFBQXRoQixLQUFBMnNDLFFBQUFwM0IsR0FFQXZWLEtBQUE4dEMsU0FBQXhzQixHQUFBeXNCLG1CQUNBOThCLEdBQUFqUixLQUFBOHBCLElBQUEsV0FBQSxDQUFBeEksS0FJQXFyQixRQUFBLFNBQUFwM0IsR0FHQSxZQUZBLElBQUFBLElBQUFBLEVBQUF2VixLQUFBdVYsT0FFQXZWLEtBQUE4d0IsTUFBQXRiLEdBQUFELEVBQUF2VixLQUFBbXBDLFVBR0E0RCxRQUFBLFNBQUF6ckIsRUFBQXNQLEdBQ0EzZixHQUFBalIsS0FBQThwQixJQUFBLGFBQUEsQ0FBQTlwQixLQUFBNlYsR0FBQTdWLEtBQUE4dEMsU0FBQXhzQixHQUFBc1AsTUFHQWtkLFNBQUEsU0FBQXhzQixHQUNBLE9BQUF0aEIsS0FBQW1wQyxPQUFBbnBDLEtBQUE4d0IsTUFBQTF1QixRQUFBa2YsS0FHQWlzQixTQUFBLFNBQUFqc0IsR0FDQXRoQixLQUFBK3NDLFFBQUF6ckIsRUFBQSxpREFHQW1yQixhQUFBLFdBRUEzd0IsYUFBQTliLEtBQUFndUMsZUFDQWh1QyxLQUFBZ3VDLGNBQUFqN0IsV0FBQS9TLEtBQUEwc0MsYUFBQTFzQyxLQUFBb3NDLGVBRUFqMEIsR0FBQW5ZLEtBQUE4cEIsSUFBQSxZQUFBLHlCQUlBNGlCLGFBQUEsV0FDQXIwQixHQUFBclksS0FBQThwQixJQUFBLFlBQUEsMkJBT0EsU0FBQXdqQixHQUFBVyxFQUFBbGtDLEdBQ0EsSUFBQTJVLEVBQUFwSSxHQUFBLElBQUEyM0IsRUFBQSxLQUVBLE9BREE5a0MsR0FBQXVWLEVBQUEzVSxHQUNBMlUsRUFHQSxJQStHQXBlLEdBL0dBNHRDLEdBQUEsQ0FFQXJnQixRQW1GQSxTQUFBOXRCLEVBQUFvdUMsR0FFQXB1QyxFQUFBcXVDLGVBQ0FydUMsRUFBQTBwQixVQUFBLGdCQUFBMGlCLElBR0E5bEMsRUFDQThuQyxFQUFBcnpCLE1BQ0EvYSxFQUFBMHBCLFVBQUEsaUJBQUE5WCxRQUFBbUosUUF6RkFBLE1BQUEsQ0FBQTdCLE9BQUF2WCxRQUVBbUksS0FBQSxDQUFBb1AsT0FBQSxLQUVBcUssU0FBQSxDQUVBa2YsUUFBQSxDQUVBcHBCLElBQUEsU0FBQXJTLEVBQUEraUIsR0FHQSxPQUFBNVIsR0FGQW5SLEVBQUFrUyxPQUVBNlEsSUFHQTBDLE1BQUEsV0FDQXhzQixLQUFBK3dCLFVBT0F2TSxhQUFBLFdBQ0F4a0IsS0FBQSt3QixRQUdBNU0sT0FBQSxDQUVBLENBRUEvYSxLQUFBLFFBRUFvSCxTQUFBLFdBQ0EsT0FBQXhRLEtBQUEsT0FBQSxzQkFHQWlxQixRQUFBLFNBQUFqZCxHQUNBQSxFQUFBZ2tCLGlCQUNBaHhCLEtBQUF3dkIsS0FBQXhpQixFQUFBc0QsWUFPQXFVLFFBQUEsQ0FFQTZLLEtBQUEsU0FBQWphLEdBQ0EsSUFBQXRNLEVBQUFqSixLQUdBOHdCLEVBQUEzcEIsRUFBQW5ILEtBQUF3aUMsUUFBQXY5QixJQUFBb3BDLElBQUEsVUFFQSxHQUFBeHFDLEVBQUEwUixHQUFBLENBQ0EsSUFDQTlPLEVBREE0bkMsR0FBQTk0QixHQUNBOU8sT0FDQThPLEVBQUEzUyxFQUFBa3VCLEVBQUEsU0FBQS9wQixHQUNBLElBQUE4TixFQUFBOU4sRUFBQU4sT0FFQSxPQUFBQSxJQUFBb08sSUFRQSxPQUpBN1UsS0FBQW85QixNQUFBcDlCLEtBQUFvOUIsT0FBQXA5QixLQUFBa3VCLFFBQUEsZ0JBQUE3bkIsRUFBQSxHQUFBckcsS0FBQTZwQixPQUFBLENBQUFpSCxNQUFBQSxLQUVBbmhCLEdBQUEzUCxLQUFBbzlCLE1BQUF0VCxJQUFBLFNBQUEsV0FBQSxPQUFBN2dCLEVBQUFtMEIsT0FBQSxJQUVBcDlCLEtBQUFvOUIsTUFBQTVOLEtBQUFqYSxJQUlBd2IsS0FBQSxXQUVBLE9BQUEvd0IsS0FBQW85QixPQUFBcDlCLEtBQUFvOUIsTUFBQXJNLFVBcUJBLFNBQUFzZCxHQUFBM3ZCLEdBRUEsSUFBQTRDLEVBQUEsR0FRQSxNQU5BLENBQUEsT0FBQSxVQUFBLE9BQUEsU0FBQSxNQUFBLFNBQUFoWSxRQUFBLFNBQUFILEdBQ0FtWSxFQUFBLFNBQUFuWSxFQUFBLFNBQUFBLEdBQUFVLEdBQUE2VSxFQUFBdlYsS0FHQW1ZLEVBQUF2WCxNQUFBZ2EsR0FBQXpDLEVBQUF2WCxPQUVBdVgsRUFLQSxJQUFBZ3RCLEdBQUEsQ0FFQTlnQixZQUFBLEVBRUFqbkIsS0FBQSxDQUFBLFVBQUEsVUFFQXNELEtBQUEsQ0FDQW8wQixRQUFBLEdBQ0F6cEIsT0FBQSxHQUNBKzVCLFFBQUEsSUFDQXhHLE1BQUEsS0FDQWpwQixJQUFBLGFBQ0FzZ0IsYUFBQSxrQkFDQW9QLFNBQUEsd0JBQ0FDLE9BQUEsMkJBR0E1Z0IsUUFtR0EsU0FBQTl0QixHQUNBQSxFQUFBdXVDLGFBQUFJLFNBQUEsU0FBQTNHLEVBQUF0YixHQUNBdGMsR0FBQTdGLFNBQUErZ0IsS0FBQSxTQUFBM00sR0FDQSxJQUFBNHZCLEVBQUF2dUMsRUFBQTJ0QixhQUFBaFAsRUFBQSxpQkFDQTR2QixHQUFBdkcsR0FBQUEsSUFBQXVHLEVBQUF2RyxPQUNBdUcsRUFBQWxkLE1BQUEzRSxPQXRHQW5KLFNBQUEsQ0FFQXFyQixXQUFBLFNBQUE1bkMsR0FHQSxNQUFBLFVBQUFuRixFQUZBbUYsRUFBQStYLElBRUEsT0FBQSxNQUFBLFdBR0E4dkIsV0FBQSxXQUNBLElBQUF0dUMsRUFFQSxPQUFBQSxFQUFBLENBQUF5WixRQUFBLElBQUEvWixLQUFBMnVDLGFBQUEzdUMsS0FBQThwQixJQUFBNWEsYUFBQTVPLElBS0E4akIsUUFBQSxXQUVBLElBQUExTSxFQUFBL0IsR0FBQSxJQUFBM1YsS0FBQSxhQUFBLElBQUFBLEtBQUEsSUFBQUEsS0FBQXl1QixhQUNBM1ksR0FBQTlWLEtBQUF5dUIsV0FBQSxlQUFBenVCLEtBQUEsYUFBQSxJQUFBQSxLQUFBLGFBQUEsSUFBQUEsS0FBQSxJQUFBLG1DQUVBQSxLQUFBK3NCLE9BQUFqWCxHQUFBNEIsRUFDQSxlQUFBMVgsS0FBQSxRQUFBQSxLQUFBd1UsT0FBQSxJQUFBeFUsS0FBQSxPQUFBLElBQUFBLEtBQUEsT0FBQSxJQUFBLHFCQUFBQSxLQUFBLFNBQUEsNkJBQUFBLEtBQUEsUUFBQSxtQkFLQXNrQixVQUFBLFdBQ0EsSUFDQWhrQixFQURBMkksRUFBQWpKLEtBSUFnMEIsRUFBQW52QixFQUFBZ0osR0FBQTdOLEtBQUE4cEIsSUFBQTlwQixLQUFBMnVDLGFBQ0F6eUIsR0FBQUMsTUFDQXRPLEdBQUE3TixLQUFBOHBCLElBQUE5cEIsS0FBQTR1QyxjQUNBdHVDLEVBQUEsQ0FBQXlaLFFBQUEsSUFBQS9aLEtBQUEydUMsWUFBQTNhLEVBQUExekIsSUFDQW1ULEtBQUEsV0FDQXhLLEVBQUFzbEMsVUFDQXRsQyxFQUFBNFMsTUFBQTlJLFdBQUE5SixFQUFBbW9CLE1BQUFub0IsRUFBQXNsQyxhQU1BcHFCLFNBQUE3akIsR0FBQSxDQUVBNi9CLE1BQUEsU0FBQW56QixHQUNBWixHQUFBWSxFQUFBMUcsT0FBQSwyQkFDQTBHLEVBQUFna0IsaUJBRUFoeEIsS0FBQW94QixXQUdBbm1CLElBQUEsV0FDQWpMLEtBQUE2YixPQUNBQyxhQUFBOWIsS0FBQTZiLFFBRUF2YixHQUFBNEssSUFBQSxXQUNBbEwsS0FBQXV1QyxVQUNBdnVDLEtBQUE2YixNQUFBOUksV0FBQS9TLEtBQUFveEIsTUFBQXB4QixLQUFBdXVDLFdBRUFqdUMsSUFFQXFrQixRQUFBLENBRUF5TSxNQUFBLFNBQUEzRSxHQUlBLFNBQUFvaUIsSUFFQSxJQUFBbjNCLEVBQUF6TyxFQUFBNmdCLElBQUFwYyxXQUVBdUQsR0FBQWhJLEVBQUE2Z0IsSUFBQSxRQUFBLENBQUE3Z0IsSUFDQWdFLEdBQUFoRSxFQUFBNmdCLEtBRUFwUyxJQUFBQSxFQUFBM0IsaUJBQ0E5SSxHQUFBeUssR0FYQSxJQUFBek8sRUFBQWpKLEtBZ0JBQSxLQUFBNmIsT0FDQUMsYUFBQTliLEtBQUE2YixPQUdBNFEsRUFDQW9pQixJQUVBM3lCLEdBQUFDLE1BQUFuYyxLQUFBOHBCLElBQUE5cEIsS0FBQTR1QyxZQUFBbjdCLEtBQUFvN0IsTUFtQkEsSUFBQS96QixHQUFBLENBQUEsSUFBQSxJQUFBLE1BQUEsTUFBQSxTQUFBLFFBQUEsUUFBQSxrQkFBQSxjQUFBLFVBQUEsT0FBQSxNQUFBLFlBQUEsU0FBQSxXQUFBLFFBQUEsV0FBQSxVQUVBZzBCLEdBQUEsQ0FFQW5yQixPQUFBLENBQUF1WSxJQUVBcGhCLE1BQUFBLEdBQUEzSixPQUFBLFNBQUEySixFQUFBalUsR0FFQSxPQURBaVUsRUFBQWpVLEdBQUEsT0FDQWlVLEdBQ0EsSUFFQWpSLEtBQUFpUixHQUFBM0osT0FBQSxTQUFBdEgsRUFBQWhELEdBRUEsT0FEQWdELEVBQUFoRCxRQUFBcU0sRUFDQXJKLEdBQ0EsSUFFQXlaLFNBQUEsQ0FFQXhJLE1BQUEsU0FBQWkwQixFQUFBamxCLEdBQ0EsSUFBQTdnQixFQUFBakosS0FHQSxPQUFBOGEsR0FBQTNKLE9BQUEsU0FBQTJKLEVBQUFqVSxHQUVBLEdBQUFyQyxFQUFBdXFDLEVBQUFsb0MsSUFDQSxPQUFBaVUsRUFHQSxJQUdBZ0UsRUFBQWt3QixFQUFBQyxFQUhBQyxFQUFBcm9DLEVBQUE5QyxNQUFBLFVBQ0FvckMsRUFBQUQsR0FBQSxZQUFBcm9DLEVBR0F1b0MsRUFBQUwsRUFBQWxvQyxHQUFBckYsTUFBQSxHQUVBMnRDLEdBQ0F0aEMsR0FBQWljLEVBQUFqakIsRUFBQSxJQUdBdW9DLEVBQUE5dEMsT0FBQSxHQUNBOHRDLEVBQUFseEIsU0FBQSxVQUFBclgsRUFDQSxFQUNBc29DLEVBQ0F0aEMsR0FBQWljLEVBQUFqakIsR0FDQSxJQUFBLEdBR0EsSUFBQTgrQixFQUFBeUosRUEyU0FqK0IsT0FBQSxTQUFBdzBCLEVBQUF6ZixHQUFBLE9BQUF4akIsRUFBQXdqQixJQUFBQSxFQUFBcmxCLFFBQUEsUUFBQSxJQUFBNkUsUUFBQWlnQyxHQUFBLElBelNBLEdBQUF1SixFQUFBLENBRUEsSUFDQUcsRUFEQXZsQixFQUFBcFAsTUFDQTIwQixNQUNBRCxFQUFBQSxFQUFBbnFDLElBQUEsU0FBQWloQixHQUFBLE9BcVFBclksR0FBQUEsR0FyUUFpYyxFQXFRQSxRQXJRQTVELEdBcVFBLFNBQ0F6Z0IsTUFBQSxVQUNBakUsTUFBQSxHQUFBLEdBQ0E0TyxPQUFBLEdBQ0E1TyxNQUFBLEVBQUEsR0FDQXlELElBQUFKLEtBelFBaWxCLEVBQUFwUCxNQUFBMjBCLE1BQUFBLE9BRUEsR0FBQXp0QyxFQUFBaUYsRUFBQSxNQUFBLENBRUEsSUFBQXNDLEVBQUEsUUFBQXRDLEVBQUEsU0FBQSxRQU1BLEdBTEF1b0MsRUFBQUEsRUFBQW5xQyxJQUFBLFNBQUFpaEIsR0FBQSxPQUFBOUYsR0FBQThGLEVBQUEvYyxFQUFBRixFQUFBNmdCLE9BRUFqYyxHQUFBaWMsRUFBQSx1QkFBQWpqQixFQUFBLEdBQUEsSUFDQW1vQyxFQUFBbmhDLEdBQUFpYyxFQUFBLHNCQUFBcmtCLE1BQUEsS0FBQSxNQUFBb0IsRUFBQSxHQUFBLEVBQUEsR0FFQW9DLEVBQUFxbUMsT0FBQSxDQUVBLElBQUE1bkMsRUFBQUUsS0FBQUYsSUFBQXlJLE1BQUF2SSxLQUFBd25DLEdBQ0F6bkMsRUFBQUMsS0FBQUQsSUFBQXdJLE1BQUF2SSxLQUFBd25DLEdBQ0FHLEVBQUFILEVBQUFodEMsUUFBQXNGLEdBQUEwbkMsRUFBQWh0QyxRQUFBdUYsR0FFQXNuQyxFQUFBdG5DLEVBQUFELEVBRUEwbkMsRUFBQUEsRUFBQW5xQyxJQUFBLFNBQUFpaEIsR0FBQSxPQUFBQSxHQUFBcXBCLEVBQUE3bkMsRUFBQUMsS0FDQW1YLEdBQUF5d0IsR0FBQU4sRUFBQSxHQUFBLFVBSUFud0IsRUFBQWt3QixPQU1BSSxFQUFBQSxFQUFBbnFDLElBQUFKLEdBSUEsR0FBQSxXQUFBZ0MsRUFBQSxDQUVBLElBQUF1b0MsRUFBQTFsQyxLQUFBLFNBQUF3YyxHQUFBLE9BQUFBLElBQ0EsT0FBQXBMLEVBR0EsSUFBQXhaLEVBQUFvMkIsR0FBQXp1QixFQUFBNmdCLEtBQ0FqYyxHQUFBaWMsRUFBQSxrQkFBQXhvQixHQUVBLE1BQUFxa0MsSUFDQXlKLEVBQUFBLEVBQUFucUMsSUFBQSxTQUFBaWhCLEdBQUEsT0FBQUEsRUFBQTVrQixFQUFBLE9BR0E4dEMsRUFBQUEsRUFBQTMrQixVQUVBNUosRUFBQSxtQkFLQSxPQUZBaVUsRUFBQWpVLEdBQUEsQ0FBQXVvQyxNQUFBQSxFQUFBekosS0FBQUEsRUFBQTdtQixJQUFBQSxFQUFBa3dCLE1BQUFBLEVBQUFDLEtBQUFBLEdBRUFuMEIsR0FFQSxLQUlBMDBCLFFBQUEsV0FDQSxJQUFBdm1DLEVBQUFqSixLQUVBLE1BQUEsQ0FBQSxNQUFBLE9BQUFrRixPQUFBLFNBQUF1cUMsR0FBQSxPQUFBQSxLQUFBeG1DLEVBQUE2UixTQUdBdzBCLE9BQUEsU0FBQXB1QyxFQUFBNG9CLEdBQ0EsT0F1T0E0bEIsR0FGQWh4QixFQXJPQW9MLEdBc09BcFAsTUFDQWcxQixlQUNBSixFQUFBLFVBQUF6aEMsR0FBQUEsR0FBQTZRLEVBQUEsaUJBQUEsSUFBQSxrQkFDQUEsRUFBQWhFLE1BQUFnMUIsZUFBQUEsRUFDQUosRUFMQSxJQUFBNXdCLEVBRUFneEIsRUFDQUosSUFuT0E5cUIsYUFBQSxrQkFDQXhrQixLQUFBMnZDLFFBR0FqckIsT0FBQSxDQUVBakUsS0FBQSxTQUFBNVcsR0FDQSxJQUFBWixFQUFBakosS0FLQSxHQUZBNkosRUFBQTRtQixPQUFBendCLEtBQUE2N0IsV0FFQWh5QixFQUFBNG1CLE9BQUEsQ0FJQSxJQUFBNW1CLEVBQUFxeEIsT0FBQWw3QixLQUFBc3ZDLFFBQUF0dkMsS0FBQXd2QyxRQUFBbHVDLE9BQUEsQ0FDQSxJQUFBdVQsRUFBQWhILEdBQUE3TixLQUFBOHBCLElBQUEsbUJBQUFqcEIsUUFBQSxnQ0FBQSxNQUVBLEdBQUFnVSxFQUFBLENBQ0EsSUFBQXhHLEVBQUEsSUFBQTJHLE1BQ0EzRyxFQUFBd0csSUFBQUEsR0FDQWhMLEVBQUFxeEIsTUFBQTdzQixHQUVBd2pCLGVBQ0F4akIsRUFBQTZHLE9BQUEsV0FBQSxPQUFBak0sRUFBQW9sQixhQU1BLElBQUE2TSxFQUFBcnhCLEVBQUFxeEIsTUFFQSxHQUFBQSxHQUFBQSxFQUFBckosYUFBQSxDQUlBLElBQUErZCxFQUFBLENBQ0E1eUIsTUFBQWhkLEtBQUE4cEIsSUFBQTdhLFlBQ0FnTyxPQUFBamQsS0FBQThwQixJQUFBNWEsY0FFQTJnQyxFQUFBLENBQ0E3eUIsTUFBQWtlLEVBQUFySixhQUNBNVUsT0FBQWllLEVBQUFsSixlQUdBclUsRUFBQWpWLEdBQUFRLE1BQUEybUMsRUFBQUQsR0FFQTV2QyxLQUFBd3ZDLFFBQUFsbUMsUUFBQSxTQUFBekMsR0FFQSxJQUFBRSxFQUFBa0MsRUFBQTZSLE1BQUFqVSxHQUNBb29DLEVBQUFsb0MsRUFBQWtvQyxLQUNBRCxFQUFBam9DLEVBQUFpb0MsTUFDQUksRUFBQXJvQyxFQUFBcW9DLE1BQ0FqbUMsRUFBQSxRQUFBdEMsRUFBQSxTQUFBLFFBQ0FpcEMsRUFBQW55QixFQUFBeFUsR0FBQXltQyxFQUFBem1DLEdBRUEsR0FBQTJtQyxFQUFBYixFQUNBVyxFQUFBem1DLEdBQUF3VSxFQUFBeFUsR0FBQThsQyxFQUFBYSxPQUNBLEdBQUFiLEVBQUFhLEVBQUEsQ0FFQSxJQUFBQyxFQUFBSCxFQUFBem1DLEdBQUFpWCxHQUFBNHVCLEVBQUE3bEMsRUFBQUYsRUFBQTZnQixLQUVBaW1CLElBQ0E5bUMsRUFBQTZSLE1BQUFqVSxHQUFBdW9DLE1BQUFBLEVBQUFucUMsSUFBQSxTQUFBaWhCLEdBQUEsT0FBQUEsR0FBQTRwQixFQUFBYixHQUFBYyxLQUlBcHlCLEVBQUFqVixHQUFBUSxNQUFBMm1DLEVBQUFELEtBR0EvbEMsRUFBQThULElBQUFBLEtBR0FpRCxNQUFBLFNBQUE3WixHQUNBLElBQUE0VyxFQUFBNVcsRUFBQTRXLElBQ0E1VyxFQUFBMHBCLE9BUUE5UyxHQUFBOVAsR0FBQTdOLEtBQUE4cEIsSUFBQSxDQUNBNGxCLGVBQUEveEIsRUFBQSxNQUFBLE1BQUFBLEVBQUEsT0FBQSxLQUNBcXlCLGlCQUFBLGNBTkFuaUMsR0FBQTdOLEtBQUE4cEIsSUFBQSxDQUFBNGxCLGVBQUEsR0FBQU0saUJBQUEsTUFXQTdyQixPQUFBLENBQUEsV0FJQVEsUUFBQSxDQUVBL0gsTUFBQSxXQUNBLElBQUEzVCxFQUFBakosS0FFQStGLEVBQUEvRixLQUFBaXdDLE9BQUEsR0FBQSxTQUFBL3VDLEVBQUEyRixHQUFBLE9BQUFnSCxHQUFBNUUsRUFBQTZnQixJQUFBampCLEVBQUEsT0FHQW9wQyxPQUFBLFNBQUE1dkIsR0FFQSxJQUNBdkYsRUFEQTlhLEtBQ0E4YSxNQUNBLE9BQUE1YSxPQUFBcUUsS0FBQXVXLEdBQUEzSixPQUFBLFNBQUF0RCxFQUFBaEgsR0FFQSxJQUFBRSxFQUFBK1QsRUFBQWpVLEdBQ0F1b0MsRUFBQXJvQyxFQUFBcW9DLE1BQ0F6SixFQUFBNStCLEVBQUE0K0IsS0FDQTdtQixFQUFBL1gsRUFBQStYLElBQ0E3YSxFQThGQSxTQUFBbXJDLEVBQUEvdUIsRUFBQXlsQixRQUNBLElBQUFBLElBQUFBLEVBQUEsR0FFQSxJQUFBLytCLEVBQUFtcEMsR0FBQWQsRUFBQS91QixHQUNBbEUsRUFBQXBWLEVBQUEsR0FDQWtqQyxFQUFBbGpDLEVBQUEsR0FDQTRNLEVBQUE1TSxFQUFBLEdBQ0EsT0FBQTdDLEVBQUFpWSxHQUNBQSxFQUFBdlUsS0FBQW9lLElBQUE3SixFQUFBOHRCLEdBQUF0MkIsR0FBQXdJLEVBQUE4dEIsRUFBQSxHQUFBLElBQ0FBLEdBQ0EzVCxRQUFBd1AsR0F4R0FxSyxDQUFBZixFQUFBL3VCLEdBRUEsT0FBQXhaLEdBR0EsSUFBQSxJQUNBLElBQUEsSUFDQTgrQixFQUFBQSxHQUFBLEtBQ0E5M0IsRUFBQXk2QixXQUFBLGFBQUFqbkMsRUFBQXdGLEdBQUEsSUFBQWhDLEVBQUFaLEdBQUFxeUIsUUFBQSxPQUFBcVAsRUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFDQSxNQUVBLElBQUEsU0FDQUEsRUFBQUEsR0FBQSxNQUNBOTNCLEVBQUF5NkIsV0FBQSxZQUFBcmtDLEVBQUEwaEMsR0FBQSxJQUNBLE1BQ0EsSUFBQSxRQUNBOTNCLEVBQUF5NkIsV0FBQSxVQUFBcmtDLEVBQUEsSUFDQSxNQUdBLElBQUEsTUFDQSxJQUFBLE1BQ0E0SixFQUFBLHVCQUFBaEgsRUFBQSxJQUFBLFFBQUFpWSxFQUFBLE1BQUE3YSxFQUFBLE1BQ0EsTUFHQSxJQUFBLFFBQ0EsSUFBQSxrQkFDQSxJQUFBLGNBRUEsSUFBQStDLEVBQUFrcEMsR0FBQWQsRUFBQS91QixHQUNBbEUsRUFBQW5WLEVBQUEsR0FDQWlqQyxFQUFBampDLEVBQUEsR0FDQTJNLEVBQUEzTSxFQUFBLEdBRUE2RyxFQUFBaEgsR0FBQSxRQUFBc1YsRUFBQWxYLElBQUEsU0FBQWhCLEVBQUE5QixHQUVBLE9BREE4QixHQUFBMFAsR0FBQXMyQixFQUFBOW5DLEdBQUE4QixHQUNBLElBQUE5QixFQUFBMEMsRUFBQVosR0FBQW1zQyxTQUFBbnNDLEVBQUEsTUFDQXFJLEtBQUEsS0FBQSxJQUNBLE1BR0EsSUFBQSxPQUNBcTVCLEVBQUFBLEdBQUEsS0FDQTkzQixFQUFBM0ksUUFBQSxVQUFBakIsRUFBQTBoQyxHQUFBLElBQ0EsTUFDQSxJQUFBLE1BQ0FBLEVBQUFBLEdBQUEsTUFDQTkzQixFQUFBM0ksUUFBQSxnQkFBQWpCLEVBQUEwaEMsR0FBQSxJQUNBLE1BQ0EsSUFBQSxXQUNBQSxFQUFBQSxHQUFBLElBQ0E5M0IsRUFBQTNJLFFBQUEsYUFBQWpCLEVBQUEwaEMsR0FBQSxJQUNBLE1BQ0EsSUFBQSxZQUNBLElBQUEsU0FDQSxJQUFBLFdBQ0EsSUFBQSxRQUNBQSxFQUFBQSxHQUFBLElBQ0E5M0IsRUFBQTNJLFFBQUEsSUFBQTJCLEVBQUEsS0FBQTVDLEVBQUEwaEMsR0FBQSxJQUNBLE1BQ0EsUUFDQTkzQixFQUFBaEgsR0FBQTVDLEVBR0EsT0FBQTRKLEdBRUEsQ0FBQXk2QixVQUFBLEdBQUFwakMsT0FBQSxRQWlCQSxTQUFBZ3JDLEdBQUFkLEVBQUEvdUIsR0FDQSxJQUFBOU0sRUFBQTY3QixFQUFBOXRDLE9BQUEsRUFDQWlVLEVBQUEzTixLQUFBRixJQUFBRSxLQUFBKzBCLE1BQUFwcEIsRUFBQThNLEdBQUE5TSxFQUFBLEdBQ0EyUyxFQUFBa3BCLEVBQUE1dEMsTUFBQStULEVBQUFBLEVBQUEsR0FJQSxPQUZBMlEsRUFBQXBaLEtBQUEsSUFBQXVULEVBQUEsRUFBQUEsR0FBQSxFQUFBOU0sR0FBQUEsR0FFQTJTLEVBNEJBLElBQUE2TyxHQUFBLENBRUFwUixPQUFBLENBQUFtckIsSUFFQWgwQixNQUFBLENBQ0F4VSxPQUFBNUUsT0FDQWsrQixTQUFBaDdCLE9BQ0F1bUMsT0FBQXZtQyxRQUdBaUYsS0FBQSxDQUNBdkQsUUFBQSxFQUNBczVCLFNBQUEsRUFDQXVMLE9BQUEsR0FHQTduQixTQUFBLENBRUFoZCxPQUFBLFNBQUFTLEVBQUEraUIsR0FDQSxJQUFBeGpCLEVBQUFTLEVBQUFULE9BRUEsT0FxREEsU0FBQStwQyxFQUFBM3hCLEdBQ0EsT0FBQUEsRUFDQSxjQUFBQSxFQUNBQSxFQUNBMnhCLEVBQUEzeEIsRUFBQWhSLFlBQ0FwRCxTQUFBK2dCLEtBMURBZ2xCLENBQUEvcEMsR0FBQThFLEdBQUE5RSxFQUFBd2pCLElBQUFBLEtBS0FwRixPQUFBLENBRUFqRSxLQUFBLFNBQUExWixFQUFBZ0osR0FDQSxJQUFBc1EsRUFBQXRaLEVBQUFzWixRQVFBLEdBSkEsV0FBQXRRLElBQ0FzUSxHQUFBLEdBSkF0WixFQUFBMHBCLE9BT0EsQ0FJQSxJQTRCQXBRLEVBQUE4cUIsRUE1QkEzK0IsRUFBQTZULEVBR0EsT0F5QkFBLEVBM0JBaUcsR0FBQXRtQixLQUFBc0csU0FBQXRHLEtBQUE0L0IsVUFBQSxHQTJCQXVMLEVBM0JBbnJDLEtBQUFtckMsT0FFQSxDQUNBOXFCLFFBSEFBLEVBNEJBNVksR0FBQTRZLEdBQUEsR0FBQThxQixFQUFBQSxFQUFBOXFCLEtBeEJBM0YsTUFBQWxPLElBQUE2VCxHQUFBcmdCLEtBQUFpd0MsT0FBQTV2QixNQUlBTyxNQUFBLFNBQUE3WixHQUNBLElBQUEyVCxFQUFBM1QsRUFBQTJULE1BQ0EzVCxFQUFBMHBCLE9BUUEvVixHQUFBN00sR0FBQTdOLEtBQUE4cEIsSUFBQXBQLEdBSkExYSxLQUFBNGMsU0FRQXVILE9BQUEsQ0FBQSxTQUFBLFlBa0JBLElBQUFtc0IsR0FBQSxDQUVBNXJCLE9BQUEsQ0FFQTlELE1BQUEsV0FFQSxJQUFBNWdCLEtBQUFrOUIsTUFBQTU3QixTQUFBdEIsS0FBQTRwQyxTQUFBLENBSUEsSUFBQXIwQixFQUFBdlYsS0FBQWlyQyxjQUFBanJDLEtBQUF1VixRQUVBdlYsS0FBQTZwQyxXQUFBN3BDLEtBQUF1VixRQUFBQSxHQUNBdlYsS0FBQXd2QixLQUFBamEsS0FLQTRPLE9BQUEsQ0FBQSxZQXVJQSxTQUFBb3NCLEdBQUE3eEIsRUFBQTZqQixFQUFBaU8sR0FFQSxJQW9CQTl4QixFQXBCQXpXLEVBQUF3b0MsR0FBQS94QixFQUFBNmpCLEdBRUEsT0FBQWlPLEVBQ0F2b0MsR0FpQkF5VyxFQWpCQUEsRUFrQkFDLEdBbEJBNGpCLEdBa0JBdmxCLE1BQUEsRUFBQTJCLEdBQUFELEdBQUExQixNQUFBLEdBakJBcFYsS0FBQUYsSUFBQU8sRUFBQXlvQyxHQUFBbk8sSUFJQSxTQUFBbU8sR0FBQW5PLEdBQ0EsT0FBQTM2QixLQUFBRCxJQUFBLEVBQUFncEMsR0FBQXBPLEdBQUE1akIsR0FBQTRqQixHQUFBdmxCLE9BR0EsU0FBQTJ6QixHQUFBcE8sR0FDQSxPQUFBNEcsR0FBQTVHLEdBQUFweEIsT0FBQSxTQUFBakosRUFBQXdXLEdBQUEsT0FBQUMsR0FBQUQsR0FBQTFCLE1BQUE5VSxHQUFBLEdBV0EsU0FBQXVvQyxHQUFBL3hCLEVBQUE2akIsR0FDQSxPQUFBemtCLEdBQUFZLEdBQUF6VyxNQUFBb0MsR0FBQXNVLEdBQUFELEdBQUExQixNQUFBMkIsR0FBQTRqQixHQUFBdmxCLE1BQUEsS0FBQTNTLElBQUEsRUFBQSxHQUdBLFNBQUF1bUMsR0FBQWx5QixFQUFBM08sRUFBQWxHLEdBQ0FvSCxHQUFBeU4sRUFBQXBOLEdBQUF2QixHQUFBLEdBQUEsRUFBQWxHLElBR0EsU0FBQXMvQixHQUFBNUcsR0FDQSxPQUFBN3lCLEdBQUE2eUIsR0FHQSxJQUFBc08sR0FBQSxDQUVBbHRCLE9BQUEsQ0FBQWlMLEdBQUFrYSxHQUFBd0gsSUFFQXgxQixNQUFBLENBQ0EwMUIsT0FBQXJyQyxRQUNBMnJDLEtBQUEzckMsU0FHQTBFLEtBQUEsQ0FDQTJtQyxRQUFBLEVBQ0FNLE1BQUEsRUFDQXpPLFNBQUEsaUJBQ0FtSixRQUFBLG1CQUNBWixPQUFBLGlCQUNBeEwsYUFBQSxzQkFDQWlNLGFBdkxBLFNBQUE3K0IsRUFBQXVMLEVBQUFvRyxFQUFBcFgsR0FDQSxJQUFBeXBDLEVBQUF6cEMsRUFBQXlwQyxPQUNBckYsRUFBQXBrQyxFQUFBb2tDLE9BQ0E1SSxFQUFBeDdCLEVBQUF3N0IsS0FHQXB2QixFQUFBLElBQUFiLEdBRUFxMEIsRUFBQW42QixFQUNBK2pDLEdBQUEvakMsRUFBQSsxQixFQUFBaU8sR0FDQUQsR0FBQXg0QixFQUFBd3FCLEVBQUFpTyxHQUFBN3hCLEdBQUE1RyxHQUFBaUYsTUFBQW1CLEVBQ0E0eUIsRUFBQWg1QixFQUNBdzRCLEdBQUF4NEIsRUFBQXdxQixFQUFBaU8sR0FDQTdKLEVBQUFob0IsR0FBQW5TLEdBQUF3USxNQUFBbUIsR0FBQTlULElBQUEsRUFBQSxHQUVBLE1BQUEsQ0FFQThULElBQUFBLEVBRUFxUixLQUFBLFNBQUE3VCxFQUFBMEUsRUFBQTByQixRQUNBLElBQUExckIsSUFBQUEsRUFBQSxHQUdBLElBQUF6RSxFQUFBbXdCLEVBQUEsU0FBQVosRUFjQSxPQWJBeHZCLEdBQUEvVCxLQUFBa0IsTUFBQTZTLEVBQUFsVSxHQUFBNFksR0FBQSxFQUFBLElBRUFyZ0IsS0FBQXVvQyxVQUFBbG9CLEdBRUE3VCxHQUFBeE0sS0FBQWd4QyxtQkFDQTN3QixFQUFBN1QsRUFBQTZULEVBQUE1WSxHQUFBNFksRUFBQSxFQUFBLEdBQ0F1d0IsR0FBQTV3QyxLQUFBaXhDLFlBQUEsU0FBQSxDQUFBNXdCLFFBQUFBLEVBQUExRSxTQUFBQSxFQUFBQyxPQUFBQSxFQUFBdUMsSUFBQUEsSUFDQTNSLEdBQUFva0MsR0FBQTV3QyxLQUFBaXhDLFdBQUEsR0FBQSxVQUFBLENBQUE1d0IsUUFBQSxFQUFBQSxFQUFBMUUsU0FBQUEsRUFBQUMsT0FBQUEsRUFBQXVDLElBQUFBLElBRUFqQyxHQUNBQyxNQUFBb21CLEVBQUEsQ0FBQStGLFVBQUFDLElBQUF3SSxHQUFBMW1DLElBQUEsRUFBQSxHQUFBLE9BQUFzUixFQUFBQyxHQUNBbkksS0FBQU4sRUFBQVYsUUFBQTVLLElBRUFzTCxFQUFBWixTQUlBNkosS0FBQSxXQUNBLE9BQUFGLEdBQUFFLEtBQUFtbUIsSUFHQWxtQixPQUFBLFdBQ0FILEdBQUFHLE9BQUFrbUIsSUFHQTNsQixNQUFBLFdBQ0EvTyxHQUFBMDBCLEVBQUEsWUFBQSxLQUdBb0osUUFBQSxTQUFBaHdCLEVBQUEwRSxHQUlBLFlBSEEsSUFBQUEsSUFBQUEsRUFBQXJnQixLQUFBcWdCLFdBRUFuRSxHQUFBRyxPQUFBa21CLEdBQ0F2aUMsS0FBQXd2QixLQUFBN1QsRUFBQTBFLEdBQUEsSUFHQWtvQixVQUFBLFNBQUFsb0IsR0FFQSxJQUFBNnBCLEVBQUFscUMsS0FBQTJwQyxjQUFBeHJCLEdBQUE5VCxJQUFBLEVBQUEsR0FFQXdELEdBQUEwMEIsRUFBQSxZQUFBZ0csR0FBQTlnQyxHQUNBeWlDLEVBQUFBLEVBQUE3cEIsRUFBQTB3QixHQUNBSixHQUFBcE8sR0FDQTVqQixHQUFBNGpCLEdBQUF2bEIsUUFDQTNTLElBQUEsRUFBQSxHQUFBLE9BRUFySyxLQUFBZ3hDLG1CQUVBeGtDLElBQ0E2VCxFQUFBNVksR0FBQTRZLEdBQUEsRUFBQSxHQUNBdXdCLEdBQUE1d0MsS0FBQWl4QyxZQUFBLGtCQUFBLENBQUE1d0IsUUFBQUEsRUFBQWxDLElBQUFBLElBQ0F5eUIsR0FBQTV3QyxLQUFBaXhDLFdBQUEsR0FBQSxtQkFBQSxDQUFBNXdCLFFBQUEsRUFBQUEsRUFBQWxDLElBQUFBLE1BS0FrQyxRQUFBLFdBQ0EsT0FBQXpZLEtBQUFvZSxLQUFBblksR0FBQTAwQixFQUFBLGFBQUE5OEIsTUFBQSxLQUFBLElBQUE0RSxJQUFBLEVBQUEsR0FBQXM4QixJQUFBb0ssRUFBQXBLLEtBR0FnRCxZQUFBLFdBQ0EsT0FBQS9oQyxLQUFBb2UsSUFBQStxQixFQUFBcEssSUFHQXNLLFVBQUEsU0FBQXQwQixRQUNBLElBQUFBLElBQUFBLEdBQUEsR0FHQSxJQUFBdXFCLEVBQUFsbkMsS0FBQWt4QyxhQUNBNzlCLEVBQUF6TSxFQUFBdWlDLEdBQUE1RyxHQUFBLGNBQ0FwZ0MsRUFBQW9ULEdBQUFsQyxFQUFBNnpCLEVBQUEsRUFBQS9vQixHQUFBeEIsR0FBQSxFQUFBLEdBQUF1cUIsRUFBQTVsQyxPQUFBLEVBQUEsSUFFQSxPQUFBYSxHQUFBa1IsRUFBQWxSLEdBQUFxSyxJQUFBbVEsRUFBQXdCLEVBQUEsS0FJQSt5QixXQUFBLFdBRUEsSUFBQWpwQyxFQUFBc29DLEdBQUEvakMsR0FBQXVMLEVBQUF3cUIsRUFBQWlPLEdBRUEsT0FBQTVwQyxFQUFBdWlDLEdBQUE1RyxHQUFBcjlCLE9BQUEsU0FBQW1qQyxHQUNBLElBQUE4SSxFQUFBVixHQUFBcEksRUFBQTlGLEdBQ0EsT0FBQXQ2QixHQUFBa3BDLEdBQUFBLEVBQUF4eUIsR0FBQTBwQixHQUFBcnJCLE9BQUEyQixHQUFBNGpCLEdBQUF2bEIsTUFBQS9VLElBQ0EsZUFJQStvQyxpQkFBQSxXQUVBLElBQUE5SixFQUFBbG5DLEtBQUFreEMsYUFFQS9ILEdBQUE1RyxHQUFBajVCLFFBQUEsU0FBQSsrQixHQUNBLElBQUF0VixFQUFBdndCLEVBQUEwa0MsRUFBQW1CLEdBRUF1SSxHQUFBdkksRUFBQSxpQkFBQXRWLEVBQUEsS0FBQSxPQUFBLENBQ0ExUyxRQUFBMFMsRUFBQSxFQUFBLEVBQ0E1VSxJQUFBa3FCLEVBQUEzb0IsWUFBQTNILEVBQUEySCxXQUFBLEdBQUEsVUFrRUE0RCxTQUFBLENBRUE4dEIsU0FBQSxXQUNBLE9BQUFULEdBQUEzd0MsS0FBQXVpQyxNQUFBdmlDLEtBQUFzQixRQUdBbVUsT0FBQSxTQUFBMU8sR0FHQSxPQUZBQSxFQUFBME8sUUFFQTdOLEtBQUFtZSxLQUFBNHFCLEdBQUEzd0MsS0FBQXVpQyxPQUFBNWpCLEdBQUEzZSxLQUFBdWlDLE1BQUF2bEIsTUEvQ0Ftc0IsR0ErQ0FucEMsS0FBQXVpQyxNQS9DQXB4QixPQUFBLFNBQUFqSixFQUFBd1csR0FBQSxPQUFBOVcsS0FBQUQsSUFBQU8sRUFBQXlXLEdBQUFELEdBQUExQixRQUFBLEdBK0NBaGQsS0FBQXd3QyxRQUdBekYsU0FBQSxXQUVBLElBQUEvcUMsS0FBQXlWLFFBQUF6VixLQUFBd3dDLFNBQUF4d0MsS0FBQTh3QyxLQUNBLE9BQUE5d0MsS0FBQXNCLE9BQUEsRUFHQSxHQUFBdEIsS0FBQXd3QyxPQUNBLE9BQUE5cEMsRUFBQTFHLEtBQUE4d0MsTUFHQWpqQyxHQUFBN04sS0FBQW1wQyxPQUFBLFFBQUEsSUFLQSxJQUhBLElBQUF4aEMsRUFBQStvQyxHQUFBMXdDLEtBQUF1aUMsTUFDQXBnQyxFQUFBbkMsS0FBQXNCLE9BRUFhLEtBQ0EsR0FBQXN1QyxHQUFBendDLEtBQUF1aUMsS0FBQTd5QixTQUFBdk4sR0FBQW5DLEtBQUF1aUMsTUFBQTU2QixFQUNBLE9BQUFDLEtBQUFGLElBQUF2RixFQUFBLEVBQUFuQyxLQUFBc0IsT0FBQSxHQUlBLE9BQUEsR0FHQXd2QyxLQUFBLFNBQUEvcEMsR0FDQSxJQUFBa0MsRUFBQWpKLEtBQ0E4d0MsRUFBQS9wQyxFQUFBK3BDLEtBR0E5ekIsRUFBQTJCLEdBQUEzZSxLQUFBdWlDLE1BQUF2bEIsT0FBQWhkLEtBQUF3d0MsT0FBQSxFQUFBLEdBRUF2b0MsRUFBQSxFQUNBb3BDLEVBQUFyMEIsRUFDQW0wQixFQUFBLEVBa0NBLE9BQUE3c0MsRUFoQ0F3c0MsRUFBQUEsR0FBQTl3QyxLQUFBbXBDLE9BQUFoNEIsT0FBQSxTQUFBMi9CLEVBQUF6SSxFQUFBbG1DLEdBRUEsSUFDQW12QyxFQURBM3lCLEdBQUEwcEIsR0FDQXJyQixNQUdBLEdBQUEvVSxFQUZBa3BDLEVBQUFHLEtBSUFyb0MsRUFBQXVuQyxRQUFBcnVDLEVBQUE4RyxFQUFBOGhDLFdBQ0E1b0MsRUFBQThHLEVBQUE4aEMsV0FHQXZvQyxFQUFBc3VDLEVBQUEzdUMsSUFBQSxDQUVBLElBQUF5dEIsRUFBQTNtQixFQUFBa2dDLE9BQUFobkMsRUFBQSxHQUNBOEcsRUFBQXVuQyxRQUFBNWdCLEdBQUEwaEIsRUFBQUQsRUFBQTF5QixHQUFBaVIsR0FBQTVTLE1BQUEsRUFDQXEwQixHQUFBQyxHQUVBRCxFQUFBcjBCLEVBQ0E4ekIsRUFBQWhrQyxLQUFBM0ssR0FDQThGLEVBQUFrcEMsRUFBQW4wQixHQUFBL1QsRUFBQXVuQyxPQUFBYyxFQUFBLEVBQUEsSUFRQSxPQUZBSCxHQUFBRyxFQUVBUixHQUVBLE1BRUFBLEdBSUF4RixrQkFBQSxXQUNBLE1BQUEsQ0FDQWtGLE9BQUF4d0MsS0FBQXd3QyxPQUNBak8sS0FBQXZpQyxLQUFBdWlDLFFBTUFqZSxVQUFBLFdBQ0EzTCxHQUFBM1ksS0FBQThwQixJQUFBOXBCLEtBQUFvL0IsY0FBQXpwQixHQUFBLElBQUEzVixLQUFBLGFBQUFBLEtBQUE4cEIsT0FHQXBGLE9BQUEsQ0FFQTlELE1BQUEsV0FDQSxJQUFBM1gsRUFBQWpKLEtBR0FrWSxHQUFBLElBQUFsWSxLQUFBLFNBQUEsV0FBQUEsS0FBQSxTQUFBLElBQUFBLEtBQUE4cEIsS0FBQXhnQixRQUFBLFNBQUFvVixHQUNBLElBQUFuSixFQUFBMUwsR0FBQTZVLEVBQUF6VixFQUFBbzVCLFVBQ0FwNUIsRUFBQThoQyxVQUFBcHlCLEdBQUErRixFQUFBLFlBQUF2YSxFQUFBb1IsS0FBQXRNLEVBQUE2bkMsT0FBQXR1QyxFQUFBeUcsRUFBQTZuQyxLQUFBanNDLEVBQUEwUSxLQUFBQSxFQUFBdE0sRUFBQThoQyxjQUdBL3FDLEtBQUFzQixRQUFBdEIsS0FBQTRwQyxVQUFBNXBDLEtBQUFrOUIsTUFBQTU3QixTQUNBdEIsS0FBQXV4QyxVQUNBdnhDLEtBQUF3cUMsV0FBQSxJQUdBLElBQUF0RCxFQUFBbG5DLEtBQUE0ckMsaUJBQUE1ckMsS0FBQXVWLE9BQUEyN0IsYUFDQWx4QyxLQUFBbXBDLE9BQUE3L0IsUUFBQSxTQUFBKytCLEdBQUEsT0FBQTF2QixHQUFBMHZCLEVBQUFwL0IsRUFBQTIzQixVQUFBcCtCLEVBQUEwa0MsRUFBQW1CLE1BQ0Fyb0MsS0FBQTh3QyxPQUFBdHVDLEVBQUF4QyxLQUFBOHdDLEtBQUFqc0MsRUFBQTdFLEtBQUF1VixTQUFBdlYsS0FBQW1wQyxPQUFBNy9CLFFBQUEsU0FBQSsrQixHQUFBLE9BQUExdkIsR0FBQTB2QixFQUFBcC9CLEVBQUFpaUMsYUFBQTFvQyxFQUFBMGtDLEVBQUFtQixPQUlBbGtCLE9BQUEsQ0FBQSxXQUlBQSxPQUFBLENBRUE4bkIsZUFBQSxTQUFBai9CLElBRUFoTixLQUFBNHBDLFVBQUE1cEMsS0FBQTh3QyxNQUFBOXdDLEtBQUFrOUIsTUFBQTU3QixPQUFBLElBQUFrQixFQUFBeEMsS0FBQTh3QyxLQUFBOXdDLEtBQUF1VixTQUNBdlYsS0FBQXVWLE1BQUF2VixLQUFBaXJDLGlCQUdBLElBQUFnRSxFQUFBcm5DLEtBQUFvZSxJQUNBaG1CLEtBQUF1VixNQUNBdlYsS0FBQTZwQyxXQUNBLEVBQUE3cEMsS0FBQW1lLEtBQUFuZSxLQUFBdVYsTUFBQXZWLEtBQUE2cEMsV0FBQTdwQyxLQUFBbWUsSUFBQSxHQUFBbmUsS0FBQXVWLE1BQUF2VixLQUFBNnBDLFdBQUE3cEMsS0FBQStxQyxTQUFBLEdBQUEvcUMsS0FBQW1lLElBQUEsSUFHQSxJQUFBbmUsS0FBQTRwQyxVQUFBLEVBQUFxRixFQUFBLENBRUEsSUFBQSxJQUFBOXNDLEVBQUEsRUFBQUEsRUFBQThzQyxFQUFBOXNDLElBQ0FuQyxLQUFBazlCLE1BQUF4ckIsT0FBQSxFQUFBLEVBQUEsRUFBQTFSLEtBQUFtZSxJQUFBLE9BQUEsWUFHQW5SLEVBQUFna0Isc0JBSUFoeEIsS0FBQTJiLFNBQUE0dkIsR0FBQXZyQyxLQUFBb3hDLFNBQUFweEMsS0FBQW9yQyxXQUNBenNCLEdBQ0EzZSxLQUFBbWUsSUFBQSxJQUFBbmUsS0FBQW1wQyxPQUFBbnBDLEtBQUE2cEMsV0FDQTdwQyxLQUFBbXBDLE9BQUFucEMsS0FBQXVWLE9BQ0F2VixLQUFBbXBDLE9BQUFucEMsS0FBQTZwQyxZQUNBN3NCLE1BQUFoZCxLQUFBb3hDLFVBRUFweEMsS0FBQXV4QyxXQUlBQyxTQUFBLFlBQ0F4eEMsS0FBQTZwQyxXQUFBMXhCLEdBQUFuWSxLQUFBNHJDLG1CQUFBcUYsWUFBQWp4QyxLQUFBNGdDLGFBS0FqYyxRQUFBLENBRUE0c0IsUUFBQSxXQUNBLElBQUF0b0MsRUFBQWpKLEtBR0EsR0FBQUEsS0FBQXlWLE9BQ0E1SCxHQUFBN04sS0FBQW1wQyxPQUFBLFFBQUEsUUFEQSxDQUtBLElBQUE1ekIsRUFBQSxFQUFBdlYsS0FBQW1lLEtBQUFuZSxLQUFBbXBDLE9BQUFucEMsS0FBQTZwQyxXQUFBN3BDLEtBQUE2cEMsVUFBQTdwQyxLQUFBdVYsTUFVQSxHQVJBdlYsS0FBQW1wQyxPQUFBNy9CLFFBQUEsU0FBQSsrQixFQUFBbG1DLEdBQUEsT0FBQTBMLEdBQUF3NkIsRUFBQSxRQUFBLEVBQUFwL0IsRUFBQWtWLEtBQUFoYyxFQUFBb1QsRUFDQSxFQUNBdE0sRUFBQWtWLElBQUEsR0FBQWhjLEdBQUE4RyxFQUFBc00sT0FDQSxFQUNBLE1BSUF2VixLQUFBd3dDLE9BUUEsSUFKQSxJQUFBejRCLEVBQUEvWCxLQUFBbXBDLE9BQUE1ekIsR0FDQXlILEVBQUEyQixHQUFBM2UsS0FBQXVpQyxNQUFBdmxCLE1BQUEsRUFBQTJCLEdBQUE1RyxHQUFBaUYsTUFBQSxFQUNBMlgsRUFBQSxFQUVBLEVBQUEzWCxHQUFBLENBQ0EsSUFBQXkwQixFQUFBenhDLEtBQUF3VixXQUFBbWYsRUFBQXBmLEVBQUFBLEdBQ0E4eUIsRUFBQXJvQyxLQUFBbXBDLE9BQUFzSSxHQUVBNWpDLEdBQUF3NkIsRUFBQSxRQUFBOXlCLEVBQUFrOEIsR0FBQSxHQUFBLEdBQ0F6MEIsR0FBQTJCLEdBQUEwcEIsR0FBQXJyQixTQUtBaXVCLGNBQUEsU0FBQTExQixFQUFBczBCLEdBT0EsUUFOQSxJQUFBdDBCLElBQUFBLEVBQUF2VixLQUFBdVYsWUFDQSxJQUFBczBCLElBQUFBLEVBQUE3cEMsS0FBQTZwQyxXQUdBdDBCLEVBQUF2VixLQUFBd1YsU0FBQUQsRUFBQXMwQixJQUVBN3BDLEtBQUE4d0MsS0FDQSxPQUFBdjdCLEVBR0EsSUFBQS9JLEVBRUEsRUFBQSxDQUVBLEdBQUFoSyxFQUFBeEMsS0FBQTh3QyxLQUFBdjdCLEdBQ0EsT0FBQUEsRUFHQS9JLEVBQUErSSxFQUNBQSxFQUFBdlYsS0FBQXdWLFNBQUFELEVBQUF2VixLQUFBbWUsSUFBQTByQixTQUVBdDBCLElBQUEvSSxHQUVBLE9BQUErSSxLQU9BbThCLEdBQUEsQ0FFQS90QixPQUFBLENBQUFtckIsSUFFQWpsQyxLQUFBLENBQ0E4bkMsUUFBQSxPQUdBcnVCLFNBQUEsQ0FFQWhDLEtBQUEsU0FBQXZhLEVBQUEraUIsR0FHQSxPQUFBMWUsR0FGQXJFLEVBQUE0cUMsUUFFQTduQixLQUtBM0YsT0FBQSxDQUVBLENBRUEvYSxLQUFBLFlBRUF0SixNQUFBLEVBRUE0ZSxHQUFBLFdBQ0EsT0FBQTFlLEtBQUFzaEIsTUFHQTJJLFFBQUEsV0FDQXBjLEdBQUE3TixLQUFBOHBCLElBQUE5cEIsS0FBQWl3QyxPQUFBLE9BS0EsQ0FDQTdtQyxLQUFBLGlCQUVBdEosTUFBQSxFQUVBNGUsR0FBQSxXQUNBLE9BQUExZSxLQUFBc2hCLE1BR0EySSxRQUFBLFNBQUFsakIsR0FDQSxJQUFBZ0osRUFBQWhKLEVBQUFnSixLQUNBNmhDLEVBQUE3cUMsRUFBQW1KLE9BQ0FtUSxFQUFBdXhCLEVBQUF2eEIsUUFDQTFFLEVBQUFpMkIsRUFBQWoyQixTQUNBQyxFQUFBZzJCLEVBQUFoMkIsT0FDQXVDLEVBQUF5ekIsRUFBQXp6QixJQUdBakMsR0FBQUcsT0FBQXJjLEtBQUE4cEIsS0FDQWpjLEdBQUE3TixLQUFBOHBCLElBQUE5cEIsS0FBQWl3QyxPQUFBNEIsR0FBQTloQyxFQUFBb08sRUFBQWtDLEtBRUFuRSxHQUFBQyxNQUFBbmMsS0FBQThwQixJQUFBOXBCLEtBQUFpd0MsT0FBQTZCLEdBQUEvaEMsR0FDQSxHQUNBLEVBQUFvTyxFQUNBLEVBQ0EsR0FDQXhDLEVBQUFDLEdBQUF2RSxNQUFBeFAsTUFLQSxDQUNBdUIsS0FBQSxtQ0FFQXRKLE1BQUEsRUFFQTRlLEdBQUEsV0FDQSxPQUFBMWUsS0FBQXNoQixNQUdBMkksUUFBQSxXQUNBL04sR0FBQUcsT0FBQXJjLEtBQUE4cEIsT0FLQSxDQUNBMWdCLEtBQUEsbUNBRUF0SixNQUFBLEVBRUE0ZSxHQUFBLFdBQ0EsT0FBQTFlLEtBQUFzaEIsTUFHQTJJLFFBQUEsU0FBQWxqQixHQUNBLElBQUFnSixFQUFBaEosRUFBQWdKLEtBQ0E2aEMsRUFBQTdxQyxFQUFBbUosT0FDQW1RLEVBQUF1eEIsRUFBQXZ4QixRQUNBbEMsRUFBQXl6QixFQUFBenpCLElBRUFqQyxHQUFBRyxPQUFBcmMsS0FBQThwQixLQUNBamMsR0FBQTdOLEtBQUE4cEIsSUFBQTlwQixLQUFBaXdDLE9BQUE0QixHQUFBOWhDLEVBQUFvTyxFQUFBa0MsU0FRQSxTQUFBeXhCLEdBQUEvaEMsR0FDQSxPQUFBL04sRUFBQStOLEVBQUEsTUFHQSxTQUFBOGhDLEdBQUE5aEMsRUFBQW9PLEVBQUFrQyxHQUlBLE9BRkFBLEdBQUEsRUFFQXl4QixHQUFBL2hDLEdBSUFvTyxFQUFBLEVBQ0EsRUFBQWtDLEVBQ0FBLEVBTEFsQyxFQUFBLEVBQ0FrQyxFQUNBLEVBQUFBLEVBTUEsSUFpZUEweEIsR0ErREFDLEdBaGlCQUMsR0FBQTVyQyxFQUFBLEdBQUEraEMsR0FBQSxDQUVBTyxLQUFBLENBRUFuWixLQUFBLFdBQ0EsTUFBQSxDQUNBLENBQUF6VixRQUFBLEVBQUE4c0IsT0FBQSxHQUNBLENBQUFBLFFBQUEsS0FJQXhtQixRQUFBLFNBQUEvUCxHQUNBLE9BQUEsRUFBQXpDLEdBQUF5QyxFQUFBLFlBR0FpNEIsVUFBQSxTQUFBbG9CLEdBQ0EsTUFBQSxDQUNBLENBQUF0RyxRQUFBLEVBQUFzRyxFQUFBd21CLE9BQUEsR0FDQSxDQUFBQSxRQUFBLE1BTUErQixNQUFBLENBRUFwWixLQUFBLFdBQ0EsTUFBQSxDQUNBLENBQUF6VixRQUFBLEVBQUF1dUIsVUFBQUcsR0FBQSxLQUFBNUIsT0FBQSxHQUNBLENBQUFBLFFBQUEsS0FJQXhtQixRQUFBLFNBQUEvUCxHQUNBLE9BQUEsRUFBQXpDLEdBQUF5QyxFQUFBLFlBR0FpNEIsVUFBQSxTQUFBbG9CLEdBQ0EsTUFBQSxDQUNBLENBQUF0RyxRQUFBLEVBQUFzRyxFQUFBaW9CLFVBQUFHLEdBQUEsRUFBQSxHQUFBcG9CLEdBQUF3bUIsT0FBQSxHQUNBLENBQUFBLFFBQUEsTUFNQXFMLEtBQUEsQ0FFQTFpQixLQUFBLFNBQUFyUixHQUNBLE9BQUFBLEVBQUEsRUFDQSxDQUNBLENBQUFtcUIsVUFBQUMsR0FBQSxJQUFBMUIsUUFBQSxHQUNBLENBQUF5QixVQUFBQyxLQUFBMUIsT0FBQSxJQUVBLENBQ0EsQ0FBQXlCLFVBQUFDLElBQUEsS0FBQTFCLE9BQUEsR0FDQSxDQUFBeUIsVUFBQUMsS0FBQTFCLFFBQUEsS0FJQXhtQixRQUFBLFNBQUEvUCxFQUFBeUgsRUFBQW9HLEdBQ0EsT0FBQUEsRUFBQSxFQUNBLEVBQUFxcUIsR0FBQXp3QixHQUNBeXdCLEdBQUFsNEIsSUFHQWk0QixVQUFBLFNBQUFsb0IsRUFBQWxDLEdBQ0EsT0FBQUEsRUFBQSxFQUNBLENBQ0EsQ0FBQW1xQixVQUFBQyxHQUFBLEdBQUFsb0IsR0FBQXdtQixRQUFBLEdBQ0EsQ0FBQXlCLFVBQUFDLElBQUEsS0FBQSxFQUFBbG9CLElBQUF3bUIsT0FBQSxJQUVBLENBQ0EsQ0FBQXlCLFVBQUFDLEdBQUEsS0FBQWxvQixHQUFBd21CLE9BQUEsR0FDQSxDQUFBeUIsVUFBQUMsR0FBQSxJQUFBLEVBQUFsb0IsSUFBQXdtQixRQUFBLE1BTUEvNUIsS0FBQSxDQUVBMGlCLEtBQUEsU0FBQXJSLEdBQ0EsT0FBQUEsRUFBQSxFQUNBLENBQ0EsQ0FBQW1xQixVQUFBQyxHQUFBLEtBQUExQixPQUFBLEdBQ0EsQ0FBQXlCLFVBQUFDLEtBQUExQixRQUFBLElBRUEsQ0FDQSxDQUFBeUIsVUFBQUMsSUFBQSxJQUFBMUIsUUFBQSxHQUNBLENBQUF5QixVQUFBQyxLQUFBMUIsT0FBQSxLQUlBeG1CLFFBQUEsU0FBQS9QLEVBQUF5SCxFQUFBb0csR0FDQSxPQUFBLEVBQUFBLEVBQ0EsRUFBQXFxQixHQUFBendCLEdBQ0F5d0IsR0FBQWw0QixJQUdBaTRCLFVBQUEsU0FBQWxvQixFQUFBbEMsR0FDQSxPQUFBQSxFQUFBLEVBQ0EsQ0FDQSxDQUFBbXFCLFVBQUFDLEdBQUEsSUFBQWxvQixHQUFBd21CLE9BQUEsR0FDQSxDQUFBeUIsVUFBQUMsSUFBQSxJQUFBLEVBQUFsb0IsSUFBQXdtQixRQUFBLElBRUEsQ0FDQSxDQUFBeUIsVUFBQUMsSUFBQSxHQUFBbG9CLEdBQUF3bUIsUUFBQSxHQUNBLENBQUF5QixVQUFBQyxHQUFBLEtBQUEsRUFBQWxvQixJQUFBd21CLE9BQUEsUUFRQXNMLEdBQUEsQ0FFQXh1QixPQUFBLENBQUFpTCxHQUFBa2QsR0FBQXdFLElBRUF4MUIsTUFBQSxDQUNBblMsTUFBQWpILE9BQ0EwMEIsVUFBQXh4QixPQUNBd3RDLFVBQUF4dEMsUUFHQWlGLEtBQUEsQ0FDQWxCLE1BQUEsT0FDQXl0QixXQUFBLEVBQ0FnYyxXQUFBLEVBQ0E1RyxRQUFBLHNCQUNBbkosU0FBQSxvQkFDQXVJLE9BQUEsb0JBQ0F4QyxXQUFBNkosSUFHQXZ0QixPQUFBLENBRUFqRSxLQUFBLFdBRUEsSUFBQTFaLEVBQUEvRyxLQUFBMkksTUFBQWxELE1BQUEsS0FBQVIsSUFBQUwsUUFDQW9ZLEVBQUFqVyxFQUFBLEdBQ0FrVyxFQUFBbFcsRUFBQSxHQVlBLE9BVkFrVyxFQUFBQSxFQUFBamQsS0FBQXVpQyxLQUFBdHpCLFlBQUErTixHQUFBLEVBRUFoZCxLQUFBbzJCLFlBQ0FuWixFQUFBclYsS0FBQUQsSUFBQTNILEtBQUFvMkIsVUFBQW5aLElBR0FqZCxLQUFBb3lDLFlBQ0FuMUIsRUFBQXJWLEtBQUFGLElBQUExSCxLQUFBb3lDLFVBQUFuMUIsSUFHQSxDQUFBQSxPQUFBQSxFQUFBNkMsR0FBQTlmLEtBQUF1aUMsS0FBQSxTQUFBLGlCQUdBM2hCLE1BQUEsU0FBQTdaLEdBQ0EsSUFBQWtXLEVBQUFsVyxFQUFBa1csT0FFQSxFQUFBQSxHQUFBcFAsR0FBQTdOLEtBQUF1aUMsS0FBQSxZQUFBdGxCLElBR0FrSCxPQUFBLENBQUEsWUFNQWt1QixHQUFBLENBRUExdUIsT0FBQSxDQUFBaUwsR0FBQXFYLElBRUFuckIsTUFBQSxDQUNBaXRCLE1BQUFybUMsT0FDQTJuQyxVQUFBemtDLE9BQ0EwdEMsUUFBQTV3QyxPQUNBNndDLGVBQUE3d0MsT0FDQTh3QyxRQUFBOXdDLE9BQ0Erd0MsYUFBQS93QyxPQUNBZ3hDLFFBQUFoeEMsT0FDQWl4QyxVQUFBanhDLE9BQ0FreEMsU0FBQWx4QyxPQUNBbXhDLFVBQUFueEMsT0FDQW94QyxPQUFBcHhDLFFBR0FtSSxLQUFBLENBQ0FrK0IsT0FBQSxFQUNBc0IsVUFBQSxFQUNBaUosUUFBQSxtQkFDQUMsZUFBQSwwQkFDQUMsUUFBQSxtQkFDQUMsYUFBQSxVQUNBQyxRQUFBLGNBQ0FDLFVBQUEscUJBQ0FDLFNBQUEsb0JBQ0FDLFVBQUEsR0FDQUMsUUFBQSxFQUNBaDBCLElBQUEsSUFHQXNGLFFBQUEsV0FDQSxJQUFBbmIsRUFBQWpKLEtBRUEsQ0FBQSxPQUFBLFFBQUEsT0FBQSxPQUFBc0osUUFBQSxTQUFBL0ksR0FDQSxJQUFBNlUsRUFBQW5NLEVBQUExSSxHQUNBMEksRUFBQTFJLEdBQUEsU0FBQXlNLEdBQ0EzRyxFQUFBNEMsRUFBQTZWLElBQUE1TSxHQUFBbEYsSUFDQW9JLEVBQUFwSSxPQUtBbVgsT0FBQSxDQUVBL2EsS0FBQTBCLEdBQ0F3ZCxTQUFBLEVBQ0EyQixRQUFBLFFBSUEzRyxTQUFBLENBRUFoZCxPQUFBLFdBQ0EsT0FBQXRHLEtBQUE4cEIsSUFBQWlwQixTQUFBLENBQUEveUMsS0FBQThwQixNQUFBLElBR0FnSCxNQUFBLFdBQ0EsT0FBQXBoQixHQUFBMVAsS0FBQXNHLFNBR0FoQyxRQUFBLENBRUE4VSxJQUFBLFdBQ0EsT0FBQTlVLEVBQUF0RSxLQUFBOHdCLFFBR0F0RSxNQUFBLFNBQUE5VyxHQUNBaUQsR0FBQTNZLEtBQUFzRyxPQUFBdEcsS0FBQTR5QyxTQUFBbDlCLElBR0ErVyxXQUFBLEdBSUF1bUIsUUFBQSxDQUVBNTVCLElBQUEsU0FBQXJTLEVBQUEyWCxHQUNBLElBQUFvMEIsRUFBQS9yQyxFQUFBK3JDLE9BRUEsT0FBQUEsRUFBQTU2QixHQUFBNDZCLEVBQUFwMEIsR0FBQTFlLEtBQUE4d0IsT0FHQXRFLE1BQUEsU0FBQXdtQixFQUFBeG1DLEdBQ0FxQixHQUFBckIsRUFBQSxDQUFBeW1DLFlBQUEsR0FBQXRJLFdBQUEsS0FDQTk4QixHQUFBbWxDLEVBQUEsQ0FBQUMsWUFBQXRvQyxHQUFBLE9BQUEsR0FBQWdnQyxXQUFBLFVBR0FsZSxXQUFBLElBTUEvSCxPQUFBLENBRUE5RCxNQUFBLFdBRUEsR0FBQTVnQixLQUFBeXBDLE1BQUFwOUIsR0FBQXJNLEtBQUFtaEMsYUFBQSxDQUtBLElBQUFwNkIsRUFBQS9HLEtBQUE4ZSxJQUNBdFcsRUFBQXpCLEVBQUF5QixFQUNBQyxFQUFBMUIsRUFBQTBCLEVBQ0F6QixFQUFBaEgsS0FBQTBjLE9BQ0ErQyxFQUFBelksRUFBQXlZLFVBQ0FDLEVBQUExWSxFQUFBMFksV0FDQXd6QixFQUFBbHpDLEtBQUF5cEMsS0FDQXY2QixFQUFBZ2tDLEVBQUFoa0MsYUFDQUQsRUFBQWlrQyxFQUFBamtDLFlBQ0Fra0MsRUFBQXgwQixHQUFBcGIsUUFDQTJFLEVBQUFpckMsRUFBQWpyQyxNQUNBRSxFQUFBK3FDLEVBQUEvcUMsT0FDQTlCLEVBQUFnRSxTQUFBOG9DLGlCQUFBNXFDLEVBQUFDLEdBRUFvRixHQUFBN04sS0FBQXlwQyxLQUFBLENBQ0F0aEMsSUFBQVYsR0FBQWdCLEVBQUFnWCxFQUFBLEVBQUFyWCxFQUFBOEcsR0FDQWpILEtBQUFSLEdBQUFlLEVBQUFrWCxFQUFBLEVBQUF4WCxFQUFBK0csS0FHQSxJQUFBb2pDLEVBQUFyeUMsS0FBQXF6QyxZQUFBL3NDLEdBQ0FndEMsRUFBQXR6QyxLQUFBcXpDLFlBQUFyekMsS0FBQW1oQyxhQUNBMkksRUFBQXVJLElBQUFpQixFQUVBLEdBQUFqQixJQUFBL2lDLEdBQUFoSixFQUFBdEcsS0FBQW1oQyxnQkFBQTJJLEdBQUF1SSxFQUFBdEssT0FBQXNLLEVBQUF0SyxRQUFBdUwsRUFBQXZMLE9BQUEsQ0FNQSxHQUZBemhDLEVBQUErckMsRUFBQS9yQyxTQUFBQSxFQUFBb0gsWUFBQXBILEdBQUErckMsRUFBQXZoQixNQUFBNXJCLE9BQUEsU0FBQUgsR0FBQSxPQUFBdUssR0FBQWhKLEVBQUF2QixLQUFBLEdBRUEra0MsRUFDQXdKLEVBQUFybUMsT0FBQWpOLEtBQUFtaEMsa0JBQ0EsSUFBQTc2QixFQUNBLE9BR0ErckMsRUFBQWtCLE9BQUF2ekMsS0FBQW1oQyxZQUFBNzZCLEdBRUE5RCxFQUFBeEMsS0FBQXd6QyxRQUFBbkIsSUFDQXJ5QyxLQUFBd3pDLFFBQUExbUMsS0FBQXVsQyxNQUtBbHVCLE9BQUEsQ0FBQSxTQUlBUSxRQUFBLENBRUFsRCxLQUFBLFNBQUF6VSxHQUVBLElBQUExRyxFQUFBMEcsRUFBQTFHLE9BQ0FrakMsRUFBQXg4QixFQUFBdzhCLE9BQ0F4VyxFQUFBaG1CLEVBQUFnbUIsaUJBRUFtTyxFQURBbmhDLEtBQUE4d0IsTUFBQTVyQixPQUFBLFNBQUF3WixHQUFBLE9BQUFwUCxHQUFBaEosRUFBQW9ZLEtBQ0EsSUFFQXlpQixHQUNBbk8sR0FDQSxFQUFBd1csR0FDQW42QixHQUFBL0ksSUFDQWdKLEdBQUFoSixFQUFBLElBQUF0RyxLQUFBLFlBQ0FBLEtBQUE4eUMsU0FBQXhqQyxHQUFBaEosRUFBQXRHLEtBQUE4eUMsVUFLQTlsQyxFQUFBZ2tCLGlCQUVBaHhCLEtBQUF3ekMsUUFBQSxDQUFBeHpDLE1BQ0FBLEtBQUFtaEMsWUFBQUEsRUFDQW5oQyxLQUFBMGMsT0FBQXJXLEVBQUEsQ0FBQUMsT0FBQUEsRUFBQWlQLE1BQUFBLEdBQUE0ckIsSUFBQW5oQyxLQUFBOGUsS0FFQW5QLEdBQUFyRixTQUFBUyxHQUFBL0ssS0FBQThwQyxNQUNBbjZCLEdBQUFyRixTQUFBVSxHQUFBaEwsS0FBQWlxQyxLQUVBanFDLEtBQUFxcEMsV0FDQXJwQyxLQUFBbWMsTUFBQW5QLEtBS0FtUCxNQUFBLFNBQUFuUCxHQTJLQSxJQUFBMEssRUFBQTNTLEVBQ0EwdUMsRUExS0F6ekMsS0FBQXlwQyxNQXlLQS94QixFQXpLQTFYLEtBQUF5dUIsV0F5S0ExcEIsRUF6S0EvRSxLQUFBbWhDLFlBNEtBaDRCLEdBRkFzcUMsRUFBQTM5QixHQUFBNEIsRUFBQTNTLEVBQUEydUMsVUFBQTd5QyxRQUFBLGlDQUFBLFlBRUEsUUFBQXNJLEdBQUFzcUMsRUFBQSxTQUFBLHVCQUVBNWxDLEdBQUE0bEMsRUFBQXB0QyxFQUFBLENBQ0FzdEMsVUFBQSxhQUNBMzJCLE1BQUFqWSxFQUFBa0ssWUFDQWdPLE9BQUFsWSxFQUFBbUssYUFDQTZmLFNBQUEsVUFDQWxoQixHQUFBOUksRUFBQSxDQUFBLGNBQUEsZUFBQSxhQUFBLG9CQUVBa1ksR0FBQXcyQixFQUFBMzdCLGtCQUFBbUYsR0FBQWxZLEVBQUErUyxvQkFFQTI3QixHQXRMQSxJQTJIQTMwQixFQUVBcFksRUE3SEFLLEVBQUEvRyxLQUFBbWhDLFlBQUEvaEIsd0JBQ0FuWCxFQUFBbEIsRUFBQWtCLEtBQ0FFLEVBQUFwQixFQUFBb0IsSUFDQTlCLEVBQUFyRyxLQUFBMGMsT0FBQSxDQUFBZ0QsV0FBQTFmLEtBQUE4ZSxJQUFBdFcsRUFBQVAsRUFBQXdYLFVBQUF6ZixLQUFBOGUsSUFBQXJXLEVBQUFOLElBRUFnUSxHQUFBblksS0FBQXlwQyxLQUFBenBDLEtBQUF3eUMsUUFBQXh5QyxLQUFBNnlDLFdBQ0ExNkIsR0FBQW5ZLEtBQUFtaEMsWUFBQW5oQyxLQUFBdXlDLGdCQUNBcDZCLEdBQUFuWSxLQUFBOHdCLE1BQUE5d0IsS0FBQXN5QyxTQUNBbjZCLEdBQUE3TixTQUFBQyxnQkFBQXZLLEtBQUF5eUMsY0FFQXhoQyxHQUFBalIsS0FBQThwQixJQUFBLFFBQUEsQ0FBQTlwQixLQUFBQSxLQUFBbWhDLGNBaUhBcmlCLEVBL0dBOWUsS0FBQThlLElBaUhBcFksRUFBQWtHLEtBQUFDLE1BQ0FrbEMsR0FBQXB3QixZQUFBLFdBRUEsSUFBQW5aLEVBQUFzVyxFQUFBdFcsRUFDQUMsRUFBQXFXLEVBQUFyVyxFQUNBQSxHQUFBbEYsT0FBQXliLFlBRUEsSUFBQTRHLEVBQUEsSUFBQWhaLEtBQUFDLE1BQUFuRyxHQUNBQSxFQUFBa0csS0FBQUMsTUFFQTJaLEdBQUFsYyxTQUFBOG9DLGlCQUFBNXFDLEVBQUFzVyxFQUFBclcsSUFBQWlCLEtBQUEsU0FBQW9kLEdBRUEsSUFBQWhCLEVBQUFnQixFQUFBdkIsVUFDQWtCLEVBQUFLLEVBQUFMLGFBRUExZixFQUFBNFgsR0FBQTJHLEdBQUF3QixJQUNBM2UsRUFBQXBCLEVBQUFvQixJQUNBQyxFQUFBckIsRUFBQXFCLE9BQ0E2VSxFQUFBbFcsRUFBQWtXLE9BRUEsR0FBQTlVLEVBQUFNLEdBQUFBLEVBQUFOLEVBQUEsR0FDQTJkLEdBQUFGLE1BQ0EsQ0FBQSxLQUFBbmQsRUFBQUwsR0FBQUEsRUFBQSxHQUFBSyxHQUdBLE9BRkFxZCxHQUFBRixFQUtBLEdBQUEsRUFBQUUsR0FBQUEsRUFBQVcsRUFBQXhKLEVBRUEsT0FEQXNJLEdBQUF1QixFQUFBaEIsSUFDQSxLQUtBLElBbEpBOWxCLEtBQUE4cEMsS0FBQTk4QixJQUdBODhCLEtBQUEsU0FBQTk4QixHQUVBaE4sS0FBQXlwQyxLQUNBenBDLEtBQUFvdUIsTUFBQSxTQUNBeG1CLEtBQUFvZSxJQUFBaG1CLEtBQUE4ZSxJQUFBdFcsRUFBQXhJLEtBQUEwYyxPQUFBbFUsR0FBQXhJLEtBQUFxcEMsV0FBQXpoQyxLQUFBb2UsSUFBQWhtQixLQUFBOGUsSUFBQXJXLEVBQUF6SSxLQUFBMGMsT0FBQWpVLEdBQUF6SSxLQUFBcXBDLFlBQ0FycEMsS0FBQW1jLE1BQUFuUCxJQUtBaTlCLElBQUEsU0FBQWo5QixHQU1BLEdBSkE0RCxHQUFBdEcsU0FBQVMsR0FBQS9LLEtBQUE4cEMsTUFDQWw1QixHQUFBdEcsU0FBQVUsR0FBQWhMLEtBQUFpcUMsS0FDQXI1QixHQUFBck4sT0FBQSxTQUFBdkQsS0FBQThsQixRQUVBOWxCLEtBQUF5cEMsS0FBQSxDQW9JQTduQixjQUFBbXdCLElBMUhBLElBQUFNLEVBQUFyeUMsS0FBQXF6QyxZQUFBcnpDLEtBQUFtaEMsYUFFQW5oQyxPQUFBcXlDLEVBQ0FyeUMsS0FBQTBjLE9BQUFuSCxRQUFBQSxHQUFBdlYsS0FBQW1oQyxjQUNBbHdCLEdBQUFqUixLQUFBOHBCLElBQUEsUUFBQSxDQUFBOXBCLEtBQUFBLEtBQUFtaEMsZUFHQWx3QixHQUFBb2hDLEVBQUF2b0IsSUFBQSxRQUFBLENBQUF1b0IsRUFBQXJ5QyxLQUFBbWhDLGNBQ0Fsd0IsR0FBQWpSLEtBQUE4cEIsSUFBQSxVQUFBLENBQUE5cEIsS0FBQUEsS0FBQW1oQyxlQUdBbHdCLEdBQUFqUixLQUFBOHBCLElBQUEsT0FBQSxDQUFBOXBCLEtBQUFBLEtBQUFtaEMsY0FFQWwwQixHQUFBak4sS0FBQXlwQyxNQUNBenBDLEtBQUF5cEMsS0FBQSxLQUVBLElBQUFtSyxFQUFBNXpDLEtBQUF3ekMsUUFBQXZ1QyxJQUFBLFNBQUFvdEMsR0FBQSxPQUFBQSxFQUFBLGVBQUEsSUFBQUEsRUFBQSxVQUFBL2xDLEtBQUEsS0FDQXRNLEtBQUF3ekMsUUFBQWxxQyxRQUFBLFNBQUErb0MsR0FBQSxPQUFBaDZCLEdBQUFnNkIsRUFBQXZoQixNQUFBOGlCLEtBRUF2N0IsR0FBQS9OLFNBQUFDLGdCQUFBdkssS0FBQXl5QyxrQkE1QkEsYUFBQXpsQyxFQUFBK0MsTUFDQS9DLEVBQUExRyxPQUFBNjVCLFNBK0JBb1QsT0FBQSxTQUFBeHVDLEVBQUF1QixHQUNBLElBQUEyQyxFQUFBakosS0FHQW1ZLEdBQUFuWSxLQUFBOHdCLE1BQUE5d0IsS0FBQXN5QyxTQUVBLFNBQUFpQixJQThDQSxJQUFBeHVDLEVBQUF1QixFQTVDQUEsSUFFQWdKLEdBQUF2SyxFQUFBa0UsRUFBQTNDLFVBMENBQSxFQTFDQUEsR0EwQ0F2QixFQTFDQUEsR0EyQ0EySSxhQUFBcEgsRUFBQW9ILFlBQUE2SCxHQUFBeFEsR0FBQXdRLEdBQUFqUCxJQTFDQTRQLEdBRUFFLElBRkE5UCxFQUFBdkIsR0FNQStRLEdBQUE3TSxFQUFBM0MsT0FBQXZCLEdBS0EvRSxLQUFBeWMsVUFDQXpjLEtBQUF3YyxRQUFBKzJCLEdBRUFBLEtBS0F0bUMsT0FBQSxTQUFBbEksR0FFQXVLLEdBQUF2SyxFQUFBL0UsS0FBQXNHLFVBSUF0RyxLQUFBeWMsVUFDQXpjLEtBQUF3YyxRQUFBLFdBQUEsT0FBQXZQLEdBQUFsSSxLQUVBa0ksR0FBQWxJLEtBS0FzdUMsWUFBQSxTQUFBdHVDLEdBQ0EsT0FBQUEsSUFBQS9FLEtBQUFzdUIsY0FBQXZwQixFQUFBLGFBQUEvRSxLQUFBcXpDLFlBQUF0dUMsRUFBQTJJLGdCQTRFQSxJQUFBdzVCLEdBQUEsR0FFQTJNLEdBQUEsQ0FFQWx3QixPQUFBLENBQUFpWixHQUFBL04sR0FBQXNELElBRUE1ckIsS0FBQSxRQUVBdVUsTUFBQSxDQUNBdVksTUFBQXp1QixPQUNBa3ZDLE1BQUFweUMsUUFHQW1JLEtBQUEsQ0FDQWlWLElBQUEsTUFDQWcxQixNQUFBLEdBQ0F6Z0IsTUFBQSxFQUNBNVcsVUFBQSxDQUFBLHlCQUNBZCxTQUFBLElBQ0FwRCxJQUFBLFlBQ0E2WixPQUFBLGNBR0EvTixjQUFBLFdBQ0Fya0IsS0FBQSt6QyxVQUFBdHFDLEdBQUF6SixLQUFBOHBCLElBQUEsU0FDQTNnQixHQUFBbkosS0FBQThwQixJQUFBLENBQUFncUIsTUFBQSxHQUFBRSxpQkFBQSxLQUdBeHZCLGFBQUEsV0FDQXhrQixLQUFBK3dCLE9BQ0E1bkIsR0FBQW5KLEtBQUE4cEIsSUFBQSxDQUFBZ3FCLE1BQUE5ekMsS0FBQSt6QyxVQUFBL3pDLEtBQUE4ekMsTUFBQSxLQUFBRSxnQkFBQSxRQUdBcnZCLFFBQUEsQ0FFQTZLLEtBQUEsV0FDQSxJQUFBdm1CLEVBQUFqSixNQUdBQSxLQUFBK3lCLFlBQUEveUIsS0FBQTh6QyxRQUlBNU0sR0FBQTU5QixRQUFBLFNBQUFtbkIsR0FBQSxPQUFBQSxFQUFBTSxTQUNBbVcsR0FBQXA2QixLQUFBOU0sTUFFQUEsS0FBQWkwQyxRQUFBdGtDLEdBQUFyRixTQUFBVSxHQUFBLFNBQUFnQyxHQUFBLE9BQUFzQyxHQUFBdEMsRUFBQTFHLE9BQUEyQyxFQUFBNmdCLE1BQUE3Z0IsRUFBQThuQixTQUVBalYsYUFBQTliLEtBQUF1ekIsV0FDQXZ6QixLQUFBdXpCLFVBQUF4Z0IsV0FBQS9TLEtBQUF5cUMsTUFBQXpxQyxLQUFBcXpCLFNBR0F0QyxLQUFBLFdBQ0EsSUFBQTluQixFQUFBakosS0FHQUEsS0FBQSt5QixhQUFBcm1CLEdBQUExTSxLQUFBOHBCLElBQUEsZ0JBSUE5cEIsS0FBQXV2QixjQUFBdnZCLEtBQUE2ekMsU0FBQSxHQUFBLEdBQUFwZ0MsS0FBQSxXQUVBeXpCLEdBQUF4MUIsT0FBQXcxQixHQUFBOWtDLFFBQUE2RyxHQUFBLEdBRUE2UyxhQUFBN1MsRUFBQXNxQixXQUVBdHFCLEVBQUE0cUMsUUFBQTVtQyxHQUFBaEUsRUFBQTRxQyxTQUNBNXFDLEVBQUFnckMsYUFJQXhKLE1BQUEsV0FDQSxJQUFBeGhDLEVBQUFqSixLQUdBQSxLQUFBNnpDLFFBQUEvOUIsR0FBQTlWLEtBQUEwWCxVQUNBLGVBQUExWCxLQUFBLE9BQUEsa0JBQUFBLEtBQUEsT0FBQSxXQUFBQSxLQUFBLE1BQUEsaUJBR0EyUCxHQUFBM1AsS0FBQTZ6QyxRQUFBLFVBQUEsV0FFQSxJQUFBN2pCLEVBQUEvbUIsRUFBQXltQixVQUFBem1CLEVBQUE0cUMsU0FFQTFxQyxHQUFBRixFQUFBNmdCLElBQUEsZ0JBQUFrRyxHQUVBQSxJQUlBL21CLEVBQUFpVSxXQUFBalUsRUFBQTRxQyxRQUFBNXFDLEVBQUE2Z0IsS0FFQTdnQixFQUFBeVQsT0FBQSxNQUFBelQsRUFBQXNwQixVQUNBcFMsR0FBQWxYLEVBQUFrVixLQUFBLElBQUFsVixFQUFBLE1BQ0FBLEVBQUEsTUFBQSxJQUFBa1gsR0FBQWxYLEVBQUFrVixRQUdBbmUsS0FBQXV2QixjQUFBdnZCLEtBQUE2ekMsU0FBQSxJQUlBOWdCLFNBQUEsV0FDQSxPQUFBdndCLEVBQUEwa0MsR0FBQWxuQyxRQUtBbWtCLFNBQUE2dEIsR0FBQSxDQUVBOWhCLE1BQUEsT0FDQUMsS0FBQSxTQUVBbGxCLEdBQUEsSUFBQUMsSUFBQSxTQUFBOEIsR0FDQStFLEdBQUEvRSxLQUdBQSxFQUFBK0MsT0FBQTlFLEdBQ0FqTCxLQUFBd3ZCLE9BQ0F4dkIsS0FBQSt3QixTQUNBaWhCLEdBQUFsbkMsSUFBQSxTQUFBa0MsR0FDQStFLEdBQUEvRSxLQUdBaE4sS0FBQSt5QixXQUNBL3lCLEtBQUErd0IsT0FDQS93QixLQUFBd3ZCLFNBQ0F3aUIsS0FJQWtDLEdBQUEsQ0FFQXA1QixNQUFBLENBQ0FveUIsTUFBQXhyQyxPQUNBeXlDLFlBQUF6eUMsT0FDQTB5QyxXQUFBeHZDLE9BQ0F5dkMsUUFBQXp2QyxPQUNBbVAsT0FBQXJTLE9BQ0E0eUMsS0FBQTV5QyxPQUNBNnlDLGVBQUE3eUMsT0FDQTh5QyxlQUFBOXlDLE9BQ0EreUMsZUFBQS95QyxPQUNBaXZCLFNBQUF4ckIsUUFDQWlFLEtBQUExSCxPQUNBZ3pDLE9BQUF4MEMsT0FDQTZQLEtBQUFyTyxPQUNBbVMsSUFBQW5TLFFBR0FtSSxLQUFBLENBQ0FxakMsT0FBQSxFQUNBaUgsWUFBQSxjQUNBQyxXQUFBLEVBQ0FDLFFBQUEsRUFDQXRnQyxPQUFBLE9BQ0F1Z0MsTUFBQSxFQUNBQyxlQUFBLHdCQUNBQyxlQUFBLHdCQUNBQyxlQUFBLHNDQUNBOWpCLFVBQUEsRUFDQXZuQixLQUFBLFVBQ0FzckMsT0FBQSxHQUNBM2tDLEtBQUEsR0FDQThELElBQUEsR0FDQThnQyxNQUFBOXNDLEdBQ0Erc0MsVUFBQS9zQyxHQUNBc00sV0FBQXRNLEdBQ0FndEMsU0FBQWh0QyxHQUNBaXRDLFlBQUFqdEMsR0FDQWt0QyxNQUFBbHRDLEdBQ0FtdEMsS0FBQW50QyxHQUNBb3pCLEtBQUFwekIsR0FDQW90QyxRQUFBcHRDLEdBQ0FxdEMsVUFBQXJ0QyxHQUNBc3RDLFNBQUF0dEMsSUFHQXNjLE9BQUEsQ0FFQWl4QixPQUFBLFNBQUFwb0MsR0FFQU4sR0FBQU0sRUFBQTFHLE9BQUEsd0JBSUEwRyxFQUFBZ2tCLGlCQUVBaGtCLEVBQUExRyxPQUFBcXRCLE9BQ0EzekIsS0FBQWswQyxPQUFBbG5DLEVBQUExRyxPQUFBcXRCLE9BR0EzbUIsRUFBQTFHLE9BQUFyQyxNQUFBLEtBR0F1dUIsS0FBQSxTQUFBeGxCLEdBQ0FvUCxHQUFBcFAsR0FFQSxJQUFBcW9DLEVBQUFyb0MsRUFBQXNvQyxhQUVBRCxHQUFBQSxFQUFBMWhCLFFBSUF0YixHQUFBclksS0FBQThwQixJQUFBOXBCLEtBQUFtMEMsYUFFQW4wQyxLQUFBazBDLE9BQUFtQixFQUFBMWhCLFNBR0E0aEIsVUFBQSxTQUFBdm9DLEdBQ0FvUCxHQUFBcFAsSUFHQXdvQyxTQUFBLFNBQUF4b0MsR0FDQW9QLEdBQUFwUCxHQUNBbUwsR0FBQW5ZLEtBQUE4cEIsSUFBQTlwQixLQUFBbTBDLGNBR0FzQixVQUFBLFNBQUF6b0MsR0FDQW9QLEdBQUFwUCxHQUNBcUwsR0FBQXJZLEtBQUE4cEIsSUFBQTlwQixLQUFBbTBDLGVBS0F4dkIsUUFBQSxDQUVBdXZCLE9BQUEsU0FBQXZnQixHQUNBLElBQUExcUIsRUFBQWpKLEtBR0EsR0FBQTJ6QixFQUFBcnlCLE9BQUEsQ0FJQTJQLEdBQUFqUixLQUFBOHBCLElBQUEsU0FBQSxDQUFBNkosSUFFQSxJQUFBLElBQUF4eEIsRUFBQSxFQUFBQSxFQUFBd3hCLEVBQUFyeUIsT0FBQWEsSUFBQSxDQUVBLEdBQUFuQyxLQUFBcTBDLFNBQUEsSUFBQXIwQyxLQUFBcTBDLFFBQUExZ0IsRUFBQXh4QixHQUFBczVCLEtBRUEsWUFEQXo3QixLQUFBZzFDLEtBQUFoMUMsS0FBQXkwQyxlQUFBNXpDLFFBQUEsS0FBQWIsS0FBQXEwQyxVQUlBLEdBQUFyMEMsS0FBQWt0QyxRQUFBd0ksR0FBQTExQyxLQUFBa3RDLE1BQUF2WixFQUFBeHhCLEdBQUFpSCxNQUVBLFlBREFwSixLQUFBZzFDLEtBQUFoMUMsS0FBQXcwQyxlQUFBM3pDLFFBQUEsS0FBQWIsS0FBQWt0QyxRQUlBLEdBQUFsdEMsS0FBQXMwQyxPQUFBb0IsR0FBQTExQyxLQUFBczBDLEtBQUEzZ0IsRUFBQXh4QixHQUFBNE4sTUFFQSxZQURBL1AsS0FBQWcxQyxLQUFBaDFDLEtBQUF1MEMsZUFBQTF6QyxRQUFBLEtBQUFiLEtBQUFzMEMsT0FNQXQwQyxLQUFBMndCLFdBQ0FnRCxFQUFBLENBQUFBLEVBQUEsS0FHQTN6QixLQUFBNDBDLFVBQUE1MEMsS0FBQTJ6QixHQUVBLElBQUFnaUIsRUFzREEsU0FBQWhpQixFQUFBOEgsR0FFQSxJQURBLElBQUFrYSxFQUFBLEdBQ0F4ekMsRUFBQSxFQUFBQSxFQUFBd3hCLEVBQUFyeUIsT0FBQWEsR0FBQXM1QixFQUFBLENBRUEsSUFEQSxJQUFBbWEsRUFBQSxHQUNBamhCLEVBQUEsRUFBQUEsRUFBQThHLEVBQUE5RyxJQUNBaWhCLEVBQUE5b0MsS0FBQTZtQixFQUFBeHhCLEVBQUF3eUIsSUFFQWdoQixFQUFBN29DLEtBQUE4b0MsR0FFQSxPQUFBRCxFQS9EQUMsQ0FBQWppQixFQUFBM3pCLEtBQUFvMEMsWUFDQUYsRUFBQSxTQUFBdmdCLEdBRUEsSUFBQTlwQixFQUFBLElBQUFnc0MsU0FJQSxJQUFBLElBQUF0MUMsS0FGQW96QixFQUFBcnFCLFFBQUEsU0FBQXdzQyxHQUFBLE9BQUFqc0MsRUFBQWlNLE9BQUE3TSxFQUFBRyxLQUFBMHNDLEtBRUE3c0MsRUFBQXlyQyxPQUNBN3FDLEVBQUFpTSxPQUFBdlYsRUFBQTBJLEVBQUF5ckMsT0FBQW4wQyxJQUdBcVQsR0FBQTNLLEVBQUE0SyxJQUFBLENBQ0FoSyxLQUFBQSxFQUNBa0ssT0FBQTlLLEVBQUE4SyxPQUNBSyxhQUFBbkwsRUFBQThHLEtBQ0FvRSxXQUFBLFNBQUFMLEdBRUEsSUFBQUcsRUFBQUgsRUFBQUcsSUFDQUEsRUFBQWlnQyxRQUFBdmtDLEdBQUFzRSxFQUFBaWdDLE9BQUEsV0FBQWpyQyxFQUFBa3NDLFVBQ0EsQ0FBQSxZQUFBLE9BQUEsVUFBQSxTQUFBN3JDLFFBQUEsU0FBQXlHLEdBQUEsT0FBQUosR0FBQXNFLEVBQUFsRSxFQUFBalAsY0FBQW1JLEVBQUE4RyxNQUdBOUcsRUFBQWtMLFdBQUFMLE1BR0FMLEtBQ0EsU0FBQVEsR0FFQWhMLEVBQUE0ckMsU0FBQTVnQyxHQUVBMGhDLEVBQUFyMEMsT0FDQTR5QyxFQUFBeUIsRUFBQXorQixTQUVBak8sRUFBQTZyQyxZQUFBN2dDLElBSUEsU0FBQWpILEdBQUEsT0FBQS9ELEVBQUE4ckMsTUFBQS9uQyxNQUtBa25DLEVBQUF5QixFQUFBeitCLGFBUUEsU0FBQXcrQixHQUFBSyxFQUFBaDBCLEdBQ0EsT0FBQUEsRUFBQWhlLE1BQUEsSUFBQXFDLE9BQUEsSUFBQTJ2QyxFQUFBbDFDLFFBQUEsTUFBQSxPQUFBQSxRQUFBLFFBQUEsaUJBQUFBLFFBQUEsTUFBQSxXQUFBQSxRQUFBLGNBQUEsT0FBQSxJQUFBLE1BZUEsU0FBQXViLEdBQUFwUCxHQUNBQSxFQUFBZ2tCLGlCQUNBaGtCLEVBQUFncEMsa0JBdUJBLE9BSEFqd0MsRUFqQkE3RixPQUFBcXFCLE9BQUEsQ0FDQUMsVUFBQSxLQUNBeXJCLFVBQUE3USxHQUNBOFEsT0FBQW5QLEdBQ0FvSCxTQUFBRCxHQUNBL0IsY0FBQUEsR0FDQWdLLGFBQUE3SCxHQUNBUSxTQUFBL1osR0FDQStULE9BQUErSCxHQUNBdUYsZUFBQTFFLEdBQ0E1RixVQUFBcUcsR0FDQWtFLGtCQUFBM0UsR0FDQTRFLFNBQUFqRSxHQUNBa0UsUUFBQTFDLEdBQ0EyQyxPQUFBdEMsS0FHQSxTQUFBenFCLEVBQUFyZ0IsR0FBQSxPQUFBckosR0FBQTBwQixVQUFBcmdCLEVBQUFxZ0IsS0FHQTFwQixLQ3o3WEEsU0FBQVAsRUFBQUMsR0FDQSxpQkFBQUMsU0FBQSxvQkFBQUMsT0FBQUEsT0FBQUQsUUFBQUQsSUFDQSxtQkFBQUcsUUFBQUEsT0FBQUMsSUFBQUQsT0FBQSxhQUFBSCxJQUNBRCxFQUFBQSxHQUFBTSxNQUFBMjJDLFdBQUFoM0MsSUFIQSxDQUlBTyxLQUFBLFdBQUEsYUFFQSxTQUFBNnFCLEVBQUE5cUIsR0FFQThxQixFQUFBQyxXQUlBL3FCLEVBQUErMkIsS0FBQXR2QixJQUFBLENBQ0FrdkMsUUFBQSxpbEdBQ0FDLE1BQUEsc1BBQ0FDLGFBQUEsaVBBQ0FDLGFBQUEsOE5BQ0FDLGNBQUEsOE5BQ0FDLFdBQUEsOE9BQ0FDLElBQUEsOFBBQ0FDLFFBQUEsNnNCQUNBQyxLQUFBLDZpQkFDQUMsS0FBQSwyZ0JBQ0FDLEtBQUEsaVJBQ0FDLFNBQUEsdUxBQ0FDLFNBQUEsNlFBQ0FDLE9BQUEsZ2NBQ0FDLEtBQUEsMlBBQ0Fsd0MsTUFBQSw0S0FDQW13QyxzQkFBQSxpUUFDQUMsdUJBQUEsZ1FBQ0FDLGVBQUEsNktBQ0FDLGVBQUEsOEtBQ0FDLGdCQUFBLDZLQUNBQyxhQUFBLDhLQUNBQyxNQUFBLHFTQUNBM21CLE1BQUEsc09BQ0E0bUIsaUJBQUEsMmdCQUNBQyxlQUFBLGdoQkFDQUMsS0FBQSwrUEFDQUMsSUFBQSxpd0JBQ0FDLFFBQUEsMk9BQ0FDLFdBQUEsa1NBQ0FDLFNBQUEsNlRBQ0FDLEtBQUEseU9BQ0FDLGNBQUEsNk1BQ0FDLFNBQUEseWdCQUNBQyxRQUFBLGlTQUNBQyxTQUFBLDZRQUNBQyxTQUFBLDZpQkFDQUMsS0FBQSw4aUJBQ0FyaUIsT0FBQSxzVUFDQXNpQixTQUFBLG1OQUNBQyxZQUFBLDZaQUNBQyxXQUFBLGk5QkFDQUMsWUFBQSxnYkFDQW5ELEtBQUEsb0tBQ0FvRCxPQUFBLG1LQUNBQyxPQUFBLDZMQUNBeE4sUUFBQSwraEJBQ0F5TixXQUFBLDIrQkFDQUMsT0FBQSxpYkFDQUMsYUFBQSx3YkFDQUMsV0FBQSw2akJBQ0FDLGFBQUEsa29DQUNBQyxPQUFBLHM1QkFDQUMsT0FBQSwyVEFDQUMsY0FBQSw2Y0FDQUMsT0FBQSx1aEJBQ0Eva0IsS0FBQSwwY0FDQWdsQixNQUFBLDJUQUNBQyxRQUFBLDhhQUNBQyxNQUFBLHNVQUNBQyxRQUFBLHliQUNBQyxLQUFBLHlVQUNBL2UsTUFBQSxnWEFDQWdmLEtBQUEsMGhCQUNBQyxVQUFBLCtwQkFDQUMsT0FBQSxxVkFDQUMsT0FBQSxvM0JBQ0FDLE9BQUEsd01BQ0FDLFVBQUEsdWlDQUNBL3JDLEtBQUEsZ2pCQUNBZ3NDLFNBQUEsbXFCQUNBalksS0FBQSxpVkFDQWxCLFNBQUEsOFVBQ0FvWixLQUFBLDJSQUNBQyxLQUFBLHNPQUNBQyxLQUFBLHdOQUNBQyxXQUFBLHNiQUNBQyxlQUFBLDRPQUNBQyxNQUFBLHFJQUNBQyxnQkFBQSx3TEFDQUMsS0FBQSx3TEFDQWxSLEtBQUEseVlBQ0FtUixJQUFBLHVQQUNBQyxRQUFBLCtLQUNBQyxlQUFBLCtiQUNBQyxPQUFBLDRVQUNBQyxrQkFBQSxzVUFDQUMsTUFBQSwwVUFDQUMsVUFBQSxreUJBQ0FDLGNBQUEsNlBBQ0E5ekIsS0FBQSw4SkFDQSt6QixjQUFBLDhTQUNBQyxLQUFBLDhLQUNBQyxNQUFBLDJhQUNBekosS0FBQSxrVUFDQXBsQyxLQUFBLGdVQUNBOHVDLFNBQUEsK1pBQ0FDLGNBQUEscXZCQUNBQyxTQUFBLGtYQUNBQyxPQUFBLDRvQ0FDQUMsUUFBQSx1WUFDQUMsTUFBQSwwaUJBQ0FDLElBQUEsMmNBQ0FyNkMsT0FBQSxxUEFDQXM2QyxPQUFBLG1zQkFDQUMsU0FBQSwyaUJBQ0FDLE9BQUEsc1VBQ0FDLFVBQUEsOE9BQ0FDLFdBQUEsa1BBQ0FDLE9BQUEsaWdCQUNBQyxXQUFBLHVaQUNBQyxLQUFBLDJQQUNBQyxjQUFBLDRvQkFDQUMsTUFBQSxrUUFDQUMsbUJBQUEsbVVBQ0FDLE9BQUEsdVVBQ0E3TyxJQUFBLDhiQUNBOE8sV0FBQSx3WEFDQUMsTUFBQSxnWEFDQUMsZ0JBQUEsOEhBQ0FDLGdCQUFBLCtIQUNBQyxpQkFBQSw4SEFDQUMsY0FBQSwrSEFDQUMsWUFBQSw0NERBQ0FDLE9BQUEsbWZBQ0FDLEdBQUEsNE1BQ0FDLFFBQUEsMDFCQUNBQyxNQUFBLDhQQUNBQyxPQUFBLDJRQUNBeEosT0FBQSx1UUFDQXlKLEtBQUEsc1NBQ0FDLE1BQUEsNmJBQ0FDLGVBQUEsNE5BQ0FyMkIsTUFBQSxnMUJBQ0FzMkIsUUFBQSxnZUFDQUMsU0FBQSwyK0JBQ0FDLFVBQUEsdzdCQUNBQyxNQUFBLG9rQkFDQUMsS0FBQSwwd0JBQ0FDLEtBQUEsMi9DQUNBNTJCLFFBQUEsNllBU0EsTUFKQSxvQkFBQWhrQixRQUFBQSxPQUFBeEQsT0FDQXdELE9BQUF4RCxNQUFBNnFCLElBQUFDLEdBR0FBLElDN0pBLElBQUF1ekIsRUFBQSxTQUFBQyxFQUFBL3lDLEdBS0EsT0FBQXRMLGdCQUFBbytDLEVBS0FDLGFBQUFELEVBQ0FDLEdBSUEsaUJBQUFBLElBQ0FBLEVBQUFyK0MsS0FBQXMrQyxPQUFBRCxFQUFBL3lDLElBS0EreUMsR0FBQUEsRUFBQUUsV0FDQUYsRUFBQSxDQUFBQSxTQUlBcitDLEtBQUEwTCxNQUFBMUwsS0FBQXdCLE1BQUE2OEMsS0FwQkEsSUFBQUQsRUFBQUMsRUFBQS95QyxJQXdCQTh5QyxFQUFBaitDLFVBQUEsQ0FDQW1CLGFBQ0EsT0FBQXRCLEtBQUEwTCxNQUFBcEssU0FNQTg4QyxFQUFBaitDLFVBQUF1TCxNQUFBLEdBR0EweUMsRUFBQWorQyxVQUFBZ1ksU0FBQSxXQUNBLE9BQUFuWSxLQUFBdytDLFFBQUF6N0MsVUFBQSxTQUFBMmIsRUFBQXRWLEdBQ0FzVixFQUFBaEcsVUFBQWxSLElBQUE0QixNQU9BZzFDLEVBQUFqK0MsVUFBQXMrQyxTQUFBLFNBQUE1b0MsRUFBQWhNLEVBQUFvZSxHQVdBLE1BVkEsaUJBQUFwZSxJQUVBQSxFQURBLElBQUFBLEVBQ0EsR0FFQSxJQUFBdkgsTUFBQXVILEdBQUF5QyxPQUFBN0csTUFBQSxLQUFBUixJQUFBTCxPQUFBcEUsS0FBQW9FLFNBTUE1RSxLQUFBK0YsS0FBQSxTQUFBOFIsRUFBQThjLEdBQ0EsSUFBQXJlLEVBQUFoTSxTQUFBbzBDLHlCQUdBTixFQUFBdjBDLEdBQUEsSUFBQTVFLElBQUEsU0FBQXlaLEVBQUF2YyxHQUVBLElBQUF3OEMsRUFBQSxtQkFBQTlvQyxFQUFBQSxFQUFBclYsS0FBQVIsS0FBQTBlLEVBQUF2YyxFQUFBMFYsRUFBQThjLEdBQUE5ZSxFQUVBLE1BQUEsaUJBQUE4b0MsRUFDQTMrQyxLQUFBNCtDLFNBQUFELEdBR0FQLEVBQUFPLEtBQ0E1NEMsS0FBQSxTQUFBODRDLEdBQ0E3K0MsS0FBQTgrQyxTQUFBRCxHQUNBdm9DLEVBQUFMLFlBQUFtb0MsRUFBQVMsR0FBQXBMLFFBQUFzTCxTQUNBem9DLEVBQUFMLFlBQUE0b0MsS0FHQTUyQixFQUFBem5CLEtBQUFSLEtBQUE2WCxFQUFBdkIsTUFLQThuQyxFQUFBaitDLFVBQUFpVyxNQUFBLFNBQUFQLEVBQUFoTSxHQUNBLE9BQUE3SixLQUFBeStDLFNBQUE1b0MsRUFBQWhNLEVBQUEsU0FBQWdPLEVBQUF2QixHQUNBdUIsRUFBQW5LLFdBQUF5SSxhQUFBRyxFQUFBdUIsRUFBQXhCLGdCQU1BK25DLEVBQUFqK0MsVUFBQTJWLE9BQUEsU0FBQUQsRUFBQWhNLEdBQ0EsT0FBQTdKLEtBQUF5K0MsU0FBQTVvQyxFQUFBaE0sRUFBQSxTQUFBZ08sRUFBQXZCLEdBQ0F1QixFQUFBNUIsWUFBQUssTUFTQThuQyxFQUFBaitDLFVBQUFvRyxLQUFBLFNBQUFBLEVBQUFzUixFQUFBMVYsR0FZQSxNQVhBLG1CQUFBb0UsSUFDQUEsRUFBQUEsRUFBQXNSLEVBQUExVixJQUtBLGlCQUFBb0UsSUFDQUEsRUFBQXZHLEtBQUF3QixNQUFBK0UsR0FBQXRCLElBQUFqRixLQUFBWSxJQUFBaVgsRUFBQTFWLEtBSUFvRSxFQUFBbkQsV0FBQXFDLE1BQUEsVUFBQVAsT0FBQSxTQUFBOEgsR0FDQSxPQUFBQSxFQUFBMUwsVUFNQTg4QyxFQUFBaitDLFVBQUE2QyxNQUFBLFNBQUFpbEIsR0FDQUEsRUFBQUEsRUFDQSxJQUFBbm9CLEVBQUFFLEtBQ0EsT0FBQUEsS0FBQTBMLE1BQUF5RixPQUFBLFNBQUFveEIsRUFBQTFxQixFQUFBMVYsR0FDQSxJQUFBNkQsRUFTQSxPQVJBaWlCLEdBR0EsaUJBREFqaUIsR0FEQUEsRUFBQWlpQixFQUFBem5CLEtBQUFWLEVBQUErWCxFQUFBMVYsTUFDQSxLQUNBNkQsRUFBQW80QyxFQUFBcDRDLElBQ0FBLGFBQUFvNEMsSUFBQXA0QyxFQUFBQSxFQUFBMEYsUUFFQTFGLEVBQUE2UixFQUFBakMsVUFFQTJzQixFQUFBbnlCLFFBQUEsSUFBQXBLLEVBQUFBLEVBQUEsS0FDQSxLQU9BbzRDLEVBQUFqK0MsVUFBQWdKLEtBQUEsU0FBQUMsRUFBQW5GLEVBQUE0RixHQUtBLE9BSkFBLEVBQUFBLEVBQUEsUUFBQSxHQUlBN0osS0FBQWcvQyxNQUFBNTFDLEVBQUFuRixFQUFBLFNBQUE0VCxFQUFBek8sR0FDQSxPQUFBeU8sRUFBQXhPLGFBQUFRLEVBQUFULElBQ0EsU0FBQXlPLEVBQUF6TyxFQUFBbkYsR0FDQTRULEVBQUFyTyxhQUFBSyxFQUFBVCxFQUFBbkYsTUFNQW02QyxFQUFBaitDLFVBQUErVixPQUFBLFNBQUFMLEVBQUFoTSxHQUNBLE9BQUE3SixLQUFBeStDLFNBQUE1b0MsRUFBQWhNLEVBQUEsU0FBQWdPLEVBQUF2QixHQUNBdUIsRUFBQW5LLFdBQUF5SSxhQUFBRyxFQUFBdUIsTUFNQXVtQyxFQUFBaitDLFVBQUF1UCxTQUFBLFNBQUFyRSxHQUNBLE9BQUFyTCxLQUFBaUYsSUFBQSxTQUFBNFMsR0FDQSxPQUFBN1gsS0FBQXdCLE1BQUFxVyxFQUFBbkksWUFDQXhLLE9BQUFtRyxJQVFBK3lDLEVBQUFqK0MsVUFBQXN6QyxNQUFBLFdBQ0EsT0FBQXp6QyxLQUFBaUYsSUFBQSxTQUFBNFMsRUFBQTFWLEdBQ0EsSUFBQXN4QyxFQUFBNTdCLEVBQUFpaUIsV0FBQSxHQUNBbWxCLEVBQUFqL0MsS0FBQWsvQyxPQUFBekwsR0FVQSxPQVJBenpDLEtBQUFrL0MsT0FBQXJuQyxHQUFBOVIsS0FBQSxTQUFBOE8sRUFBQTFTLEdBQ0EsSUFBQSxJQUFBNUIsS0FBQVAsS0FBQW0vQyxPQUNBbi9DLEtBQUFtL0MsT0FBQTUrQyxJQUNBUCxLQUFBbS9DLE9BQUE1K0MsR0FBQXNVLEVBQUFvcUMsRUFBQXZ6QyxNQUFBdkosTUFLQXN4QyxLQVVBMkssRUFBQWorQyxVQUFBKytDLE9BQUEsU0FBQTV6QyxHQUNBLE9BQUE4eUMsRUFBQSxDQUFBOXlDLEdBQUE4RSxPQUFBZ3VDLEVBQUEsSUFBQTl5QyxHQUFBSSxTQUlBMHlDLEVBQUFqK0MsVUFBQWcvQyxPQUFBLEdBUUFmLEVBQUFqK0MsVUFBQWcvQyxPQUFBaDdCLE9BQUEsU0FBQXRQLEVBQUFvcUMsR0FDQSxHQUFBcHFDLEVBQUF1cUMsR0FFQSxJQUFBLElBQUFydkMsS0FBQThFLEVBQUF1cUMsR0FDQXZxQyxFQUFBdXFDLEdBQUFydkMsR0FBQXpHLFFBQUEsU0FBQTRILEdBQ0FrdEMsRUFBQWEsR0FBQXR2QyxHQUFBSSxFQUFBbUIsTUFXQWt0QyxFQUFBaitDLFVBQUFnL0MsT0FBQWIsT0FBQSxTQUFBenBDLEVBQUFvcUMsR0FDQWIsRUFBQXZwQyxHQUFBd3FDLEdBQUEsWUFDQUosRUFBQWg3QyxNQUFBNFEsRUFBQTVRLFFBVUFtNkMsRUFBQWorQyxVQUFBZy9DLE9BQUFHLFNBQUEsU0FBQXpxQyxFQUFBb3FDLEdBQ0FiLEVBQUF2cEMsR0FBQXdxQyxHQUFBLGNBQ0FKLEVBQUFoN0MsTUFBQTRRLEVBQUE1USxRQU1BbTZDLEVBQUFqK0MsVUFBQWlNLFFBQUEsU0FBQWYsR0FDQSxPQUFBckwsS0FBQWlGLElBQUEsU0FBQTRTLEdBRUEsR0FDQSxHQUFBdW1DLEVBQUF2bUMsR0FBQXduQyxHQUFBaDBDLEdBQ0EsT0FBQXdNLFNBRUFBLEVBQUFBLEVBQUFuSyxhQUFBbUssSUFBQXZOLGFBTUE4ekMsRUFBQWorQyxVQUFBMEosS0FBQSxTQUFBVCxFQUFBbkYsR0FDQSxPQUFBakUsS0FBQW1KLEtBQUFDLEVBQUFuRixHQUFBLElBS0FtNkMsRUFBQWorQyxVQUFBNEYsS0FBQSxTQUFBa2lCLEdBS0EsT0FGQWpvQixLQUFBMEwsTUFBQXBDLFFBQUEyZSxFQUFBa0MsS0FBQW5xQixPQUVBQSxNQU1BbytDLEVBQUFqK0MsVUFBQXErQyxRQUFBLFNBQUFqNEMsRUFBQTBoQixHQUNBLE9BQUFqb0IsS0FBQStGLEtBQUEsU0FBQThSLEVBQUExVixHQUNBbkMsS0FBQXVHLEtBQUFBLEVBQUFzUixFQUFBMVYsR0FBQW1ILFFBQUEsU0FBQTZQLEdBSUE4TyxFQUFBem5CLEtBQUFSLEtBQUE2WCxFQUFBc0IsSUFDQW5aLFNBTUFvK0MsRUFBQWorQyxVQUFBdVYsTUFBQSxXQUNBLE9BQUExVixLQUFBK0YsS0FBQSxTQUFBOFIsR0FDQSxLQUFBQSxFQUFBbkIsWUFDQW1CLEVBQUF0QixZQUFBc0IsRUFBQW5CLGVBUUEwbkMsRUFBQWorQyxVQUFBK0UsT0FBQSxTQUFBbUcsR0FHQSxJQUFBNGMsRUFBQSxTQUFBcFEsR0FLQSxPQUhBQSxFQUFBbkwsUUFBQW1MLEVBQUFuTCxTQUFBbUwsRUFBQXRLLG1CQUFBc0ssRUFBQXZLLHNCQUdBdUssRUFBQW5MLFFBQUFyQixHQUFBLE1BY0EsTUFWQSxtQkFBQUEsSUFBQTRjLEVBQUE1YyxHQUdBQSxhQUFBK3lDLElBQ0FuMkIsRUFBQSxTQUFBcFEsR0FDQSxPQUFBLElBQUF4TSxFQUFBLE1BQUFqSixRQUFBeVYsS0FLQXVtQyxFQUFBcCtDLEtBQUEwTCxNQUFBeEcsT0FBQStpQixLQUtBbTJCLEVBQUFqK0MsVUFBQW9MLEtBQUEsU0FBQUYsR0FDQSxPQUFBckwsS0FBQWlGLElBQUEsU0FBQTRTLEdBQ0EsT0FBQXVtQyxFQUFBL3lDLEdBQUEsSUFBQXdNLE1BTUF1bUMsRUFBQWorQyxVQUFBNCtDLE1BQUEsV0FDQSxPQUFBLytDLEtBQUEwTCxNQUFBLEtBQUEsR0FNQTB5QyxFQUFBaitDLFVBQUF5K0MsU0FBQSxTQUFBL29DLEdBRUEsTUFBQSxjQUFBM0wsS0FBQTJMLEdBQ0F1b0MsRUFBQTl6QyxTQUFBbU4sY0FBQSxVQUFBNUIsS0FBQUEsR0FBQW5HLFdBQUFBLFdBQUFoRSxNQUNBLGtCQUFBeEIsS0FBQTJMLEdBQ0F1b0MsRUFBQTl6QyxTQUFBbU4sY0FBQSxVQUFBNUIsS0FBQUEsR0FBQW5HLFdBQUFBLFdBQUFBLFdBQUFoRSxNQUNBLFFBQUF4QixLQUFBMkwsR0FDQXVvQyxFQUFBOXpDLFNBQUFtTixjQUFBLFFBQUE1QixLQUFBQSxHQUFBbkcsV0FBQWhFLE1BRUFwQixTQUFBaTFDLGVBQUExcEMsSUFLQXVvQyxFQUFBaitDLFVBQUEyeUMsT0FBQSxXQUNBLElBQUF2c0MsRUFBQXZHLEtBQUF3QixNQUFBdUIsV0FBQWtDLElBQUEsU0FBQWtVLEdBQ0EsTUFBQSxtQkFBQUEsRUFDQSxTQUFBbk0sR0FDQUEsRUFBQWdrQixpQkFDQTdYLEVBQUFoSixNQUFBblEsS0FBQStDLFlBR0FvVyxHQUNBblosTUFFQSxPQUFBQSxLQUFBMlAsR0FBQVEsTUFBQW5RLEtBQUF1RyxJQUtBNjNDLEVBQUFqK0MsVUFBQXNZLFNBQUEsV0FFQSxPQUFBelksS0FBQXEvQyxHQUFBLElBQUFyL0MsS0FBQXVHLEtBQUF4RCxXQUFBdUosS0FBQSxPQUtBOHhDLEVBQUFqK0MsVUFBQTBWLEtBQUEsU0FBQTJwQyxHQUVBLFlBQUF0c0MsSUFBQXNzQyxFQUNBeC9DLEtBQUErK0MsUUFBQW5wQyxXQUFBLEdBS0E1VixLQUFBK0YsS0FBQSxTQUFBOFIsR0FFQUEsRUFBQWpDLFVBQUE0cEMsS0FNQXBCLEVBQUFqK0MsVUFBQWsvQyxHQUFBLFNBQUFoMEMsR0FDQSxPQUFBLEVBQUFyTCxLQUFBa0YsT0FBQW1HLEdBQUEvSixRQVVBODhDLEVBQUFqK0MsVUFBQTIrQyxTQUFBLFNBQUFqbkMsR0FDQSxPQUFBQSxJQUFBdk4sU0FBQStnQixNQUFBL2dCLFNBQUErZ0IsS0FBQTliLFNBQUFzSSxJQUlBdW1DLEVBQUFqK0MsVUFBQXVHLEtBQUEsV0FDQSxPQUFBMUcsS0FBQTBMLE1BQUExTCxLQUFBc0IsT0FBQSxLQUFBLEdBS0E4OEMsRUFBQWorQyxVQUFBOEUsSUFBQSxTQUFBZ2pCLEdBQ0EsT0FBQUEsRUFBQW0yQixFQUFBcCtDLEtBQUFnRCxNQUFBaWxCLElBQUF3M0IsU0FBQXovQyxNQUtBbytDLEVBQUFqK0MsVUFBQXUvQyxJQUFBLFNBQUF4NkMsR0FDQSxPQUFBbEYsS0FBQWtGLE9BQUEsU0FBQTJTLEdBQ0EsT0FBQXVtQyxFQUFBdm1DLEdBQUF3bkMsR0FBQW42QyxJQUFBLE1BTUFrNUMsRUFBQWorQyxVQUFBeVEsSUFBQSxTQUFBdVQsR0FDQSxPQUFBbmtCLEtBQUF3K0MsUUFBQXI2QixFQUFBLFNBQUF0TSxFQUFBM0csR0FDQWt0QyxFQUFBdm1DLEVBQUF1bkMsR0FBQXZuQyxFQUFBdW5DLEdBQUFsdUMsR0FBQSxJQUFBbkwsS0FBQSxTQUFBWSxHQUNBa1IsRUFBQWhILG9CQUFBSyxFQUFBdkssUUFPQXkzQyxFQUFBaitDLFVBQUF3UCxHQUFBLFNBQUF3VSxFQUFBeGQsRUFBQWc1QyxHQUNBLEdBQUEsaUJBQUFoNUMsRUFBQSxDQUNBLElBQUFpNUMsRUFBQWo1QyxFQUNBQSxFQUFBLFNBQUFxRyxHQUNBLElBQUF6RyxFQUFBeEQsVUFDQXE3QyxFQUFBcHhDLEVBQUFxRCxlQUFBOUUsS0FBQXEwQyxHQUFBNzVDLEtBQUEsU0FBQU8sR0FDQSxHQUFBQSxJQUFBMEcsRUFBQTFHLFFBQUFBLEVBQUFpSixTQUFBdkMsRUFBQTFHLFFBQUEsQ0FDQSxJQUNBcEcsT0FBQXdwQixlQUFBMWMsRUFBQSxnQkFBQSxDQUNBb00sSUFBQSxXQUNBLE9BQUE5UyxLQUdBLE1BQUF1NUMsSUFDQUYsRUFBQXh2QyxNQUFBN0osRUFBQUMsT0FPQSxTQUFBMGhCLEVBQUFqYixHQUNBLE9BQUFyRyxFQUFBd0osTUFBQW5RLEtBQUEsQ0FBQWdOLEdBQUFvRCxPQUFBcEQsRUFBQWtELFFBQUEsS0FHQSxPQUFBbFEsS0FBQXcrQyxRQUFBcjZCLEVBQUEsU0FBQXRNLEVBQUEzRyxHQUNBMkcsRUFBQWxILGlCQUFBTyxFQUFBK1csR0FHQXBRLEVBQUF1bkMsR0FBQXZuQyxFQUFBdW5DLElBQUEsR0FDQXZuQyxFQUFBdW5DLEdBQUFsdUMsR0FBQTJHLEVBQUF1bkMsR0FBQWx1QyxJQUFBLEdBQ0EyRyxFQUFBdW5DLEdBQUFsdUMsR0FBQXBFLEtBQUFtYixNQVNBbTJCLEVBQUFqK0MsVUFBQTYrQyxNQUFBLFNBQUE1MUMsRUFBQW5GLEVBQUFtVixFQUFBMlEsR0FFQSxRQUFBLElBQUE5bEIsRUFBQSxDQUNBLElBQUE2N0MsRUFBQTEyQyxHQUNBQSxFQUFBLElBQ0EwMkMsR0FBQTc3QyxFQUdBLE1BQUEsaUJBQUFtRixFQUVBcEosS0FBQStGLEtBQUEsU0FBQThSLEdBQ0EsSUFBQSxJQUFBdFgsS0FBQTZJLEVBQ0EyZ0IsRUFBQWxTLEVBQUF0WCxFQUFBNkksRUFBQTdJLE1BTUFQLEtBQUFzQixPQUFBOFgsRUFBQXBaLEtBQUErK0MsUUFBQTMxQyxHQUFBLElBTUFnMUMsRUFBQWorQyxVQUFBd08sTUFBQSxTQUFBck8sR0FDQSxPQUFBSixPQUFBcUUsS0FBQWpFLEdBQUEyRSxJQUFBLFNBQUExRSxHQUNBLE9BQUFQLEtBQUErL0MsSUFBQXgvQyxHQUFBLElBQUFQLEtBQUErL0MsSUFBQXovQyxFQUFBQyxLQUNBNHBCLEtBQUFucUIsT0FBQXNNLEtBQUEsTUFJQTh4QyxFQUFBaitDLFVBQUFrTSxPQUFBLFNBQUFoQixHQUNBLE9BQUFyTCxLQUFBaUYsSUFBQSxTQUFBNFMsR0FDQSxPQUFBQSxFQUFBbkssYUFDQXhJLE9BQUFtRyxJQUtBK3lDLEVBQUFqK0MsVUFBQXNxQixRQUFBLFNBQUE1VSxFQUFBaE0sR0FDQSxPQUFBN0osS0FBQXkrQyxTQUFBNW9DLEVBQUFoTSxFQUFBLFNBQUFnTyxFQUFBdkIsR0FDQXVCLEVBQUExQixhQUFBRyxFQUFBdUIsRUFBQW5CLGVBTUEwbkMsRUFBQWorQyxVQUFBOE0sT0FBQSxXQUVBLE9BQUFqTixLQUFBK0YsS0FBQSxTQUFBOFIsR0FFQUEsRUFBQW5LLFlBQ0FtSyxFQUFBbkssV0FBQTZJLFlBQUFzQixNQU9BdW1DLEVBQUFqK0MsVUFBQWtZLFlBQUEsV0FFQSxPQUFBclksS0FBQXcrQyxRQUFBejdDLFVBQUEsU0FBQTJiLEVBQUF0VixHQUVBc1YsRUFBQWhHLFVBQUF6TCxPQUFBN0QsTUFNQWcxQyxFQUFBaitDLFVBQUFVLFFBQUEsU0FBQWdWLEVBQUFoTSxHQUNBLElBQUE2QixFQUFBLEdBS0EsT0FKQTFMLEtBQUF5K0MsU0FBQTVvQyxFQUFBaE0sRUFBQSxTQUFBZ08sRUFBQXZCLEdBQ0E1SyxFQUFBQSxFQUFBMEUsT0FBQXBRLEtBQUF3QixNQUFBOFUsRUFBQTVHLFdBQ0FtSSxFQUFBbkssV0FBQXN5QyxhQUFBMXBDLEVBQUF1QixLQUVBdW1DLEVBQUExeUMsSUFLQTB5QyxFQUFBaitDLFVBQUEybEIsT0FBQSxXQUVBLE9BREE5bEIsS0FBQSsrQyxRQUFBdDVCLGVBQUEsQ0FBQXc2QixTQUFBLFdBQ0FqZ0QsTUFNQW8rQyxFQUFBaitDLFVBQUFtK0MsT0FBQSxTQUFBRCxFQUFBL3lDLEdBSUEsT0FGQSt5QyxFQUFBQSxFQUFBeDlDLFFBQUEsT0FBQSxJQUFBQSxRQUFBLE9BQUEsSUFFQSxLQUFBcUosS0FBQW0wQyxHQUNBRCxJQUFBUSxTQUFBUCxJQUdBL3lDLEdBQUFoQixVQUFBNDFDLGlCQUFBN0IsSUFNQUQsRUFBQWorQyxVQUFBZ2dELFVBQUEsV0FDQSxJQUFBcmdELEVBQUFFLEtBR0EsT0FBQUEsS0FBQXdCLE1BQUF4QixLQUFBKytDLFFBQUF0dkMsVUFBQTBCLE9BQUEsU0FBQS9GLEVBQUFzVCxHQUVBLE9BQUFBLEVBQUF0VixNQUFBc1YsRUFBQXNqQixVQUFBLFNBQUF0akIsRUFBQTNPLE1BR0EsbUJBQUE3RixLQUFBd1UsRUFBQTNPLFFBQUEyTyxFQUFBMGhDLFFBSEFoMUMsRUFNQSxvQkFBQXNULEVBQUEzTyxNQUNBcXVDLEVBQUExL0IsRUFBQS9NLFNBQUE1TCxLQUFBLFNBQUE2bkIsR0FDQUEsRUFBQWdHLFdBQ0F4b0IsR0FBQSxJQUFBdEwsRUFBQWlnRCxJQUFBcmhDLEVBQUF0VixNQUFBLElBQUF0SixFQUFBaWdELElBQUFueUIsRUFBQTNwQixVQUdBbUgsR0FJQUEsRUFBQSxJQUFBdEwsRUFBQWlnRCxJQUFBcmhDLEVBQUF0VixNQUFBLElBQUF0SixFQUFBaWdELElBQUFyaEMsRUFBQXphLFFBQ0EsSUFBQXpDLE1BQUEsSUFLQTQ4QyxFQUFBaitDLFVBQUFrZ0QsU0FBQSxTQUFBaDFDLEdBQ0EsT0FBQXJMLEtBQUFxTSxTQUFBcUQsU0FBQXJFLEdBQUFxMEMsSUFBQTEvQyxPQUtBbytDLEVBQUFqK0MsVUFBQXM3QixLQUFBLFdBQ0EsT0FBQXo3QixLQUFBKytDLFFBQUEzL0IseUJBUUFnL0IsRUFBQWorQyxVQUFBcUIsTUFBQSxTQUFBOCtDLEdBRUEsT0FBQUEsR0FDQSxJQUFBQSxFQUFBaC9DLFFBQ0EsaUJBQUFnL0MsR0FDQSxzQkFBQUEsRUFBQWw5QyxXQUdBazlDLEVBQUFoL0MsT0FBQSxHQUFBRSxNQUFBaEIsS0FBQTgvQyxFQUFBNTBDLE9BQUE0MEMsR0FBQSxDQUFBQSxHQUhBLElBVUFsQyxFQUFBaitDLFVBQUFTLElBQUEsU0FBQWlYLEVBQUExVixHQUNBLE9BQUEsU0FBQWdYLEdBRUEsTUFBQSxtQkFBQUEsRUFDQUEsRUFBQTNZLEtBQUFSLEtBQUE2WCxFQUFBMVYsR0FJQWdYLEVBQUEvVixhQU1BZzdDLEVBQUFqK0MsVUFBQXEvQyxLQUFBLFNBQUFBLEdBRUEsWUFBQXRzQyxJQUFBc3NDLEVBQ0F4L0MsS0FBQSsrQyxRQUFBbm5DLGFBQUEsR0FLQTVYLEtBQUErRixLQUFBLFNBQUE4UixHQUVBQSxFQUFBRCxZQUFBNG5DLEtBTUFwQixFQUFBaitDLFVBQUF3WSxZQUFBLFNBQUFpN0IsRUFBQTJNLEdBR0EsUUFBQUEsSUFBQUEsRUFDQXZnRCxLQUFBdWdELEVBQUEsV0FBQSxlQUFBM00sR0FLQTV6QyxLQUFBdytDLFFBQUE1SyxFQUFBLFNBQUFsMUIsRUFBQXRWLEdBQ0FzVixFQUFBaEcsVUFBQU8sT0FBQTdQLE1BTUFnMUMsRUFBQWorQyxVQUFBOFEsUUFBQSxTQUFBa1QsR0FDQSxJQUFBdGEsRUFBQTdKLEtBQUF3QixNQUFBdUIsV0FBQXZCLE1BQUEsR0FFQSxPQUFBeEIsS0FBQXcrQyxRQUFBcjZCLEVBQUEsU0FBQXRNLEVBQUEzRyxHQUNBLElBQUFzdkMsRUFHQXAzQixFQUFBLENBQUE3WCxTQUFBLEVBQUFDLFlBQUEsRUFBQXRCLE9BQUFyRyxHQUVBLElBRUEyMkMsRUFBQSxJQUFBajlDLE9BQUFrOUMsWUFBQXZ2QyxFQUFBa1ksR0FDQSxNQUFBcGMsSUFDQXd6QyxFQUFBbDJDLFNBQUFnSCxZQUFBLGdCQUNBRyxnQkFBQVAsR0FBQSxHQUFBLEVBQUFySCxHQUdBZ08sRUFBQXhHLGNBQUFtdkMsTUFPQXBDLEVBQUFqK0MsVUFBQXMvQyxPQUFBLFdBQ0EsT0FBQXJCLEVBQUFwK0MsS0FBQTBMLE1BQUF5RixPQUFBLFNBQUF1dkMsRUFBQTdvQyxHQUVBLE9BREFBLE1BQUFBLElBQUEsSUFBQUEsSUFDQSxJQUFBNm9DLEVBQUF0K0MsUUFBQXlWLEdBQUE2b0MsRUFBQXR3QyxPQUFBeUgsR0FBQTZvQyxHQUNBLE1BTUF0QyxFQUFBaitDLFVBQUE0L0MsSUFBQSxTQUFBbi9DLEdBQ0EsT0FBQSsvQyxtQkFBQS8vQyxHQUFBQyxRQUFBLEtBQUEsT0FBQUEsUUFBQSxLQUFBLE9BQUFBLFFBQUEsTUFBQSxPQUFBQSxRQUFBLE1BQUEsT0FBQUEsUUFBQSxNQUFBLE9BQUFBLFFBQUEsT0FBQSxNQUlBdTlDLEVBQUFqK0MsVUFBQXlnRCxLQUFBLFNBQUF2MUMsR0FXQSxPQUFBckwsS0FBQWlGLElBQUEsU0FBQTRTLEdBQ0EsT0FBQXVtQyxFQUFBL3lDLEdBQUF0RixLQUFBLFNBQUE4NEMsSUFYQSxTQUFBaG5DLEdBQ0EsS0FBQUEsRUFBQUMsbUJBQ0FELEVBQUFBLEVBQUFDLGtCQUdBLE9BQUFzbUMsRUFBQXZtQyxJQU9BZ3BDLENBQUFoQyxHQUNBL29DLE9BQUErQixFQUFBaWlCLFdBQUEsSUFFQWppQixFQUNBbkssV0FDQXN5QyxhQUFBbkIsRUFBQWhuQyxRQU1BLGlCQUFBbFksUUFBQUEsT0FBQUQsVUFFQUMsT0FBQUQsUUFBQTArQyxFQUNBeitDLE9BQUFELFFBQUEwK0MsRUFBQUEsR0N6dkJBQSxFQUFBOXpDLFVBQUFxRixHQUFBLG1CQUFBLFdBQ0EsR0FBQSxJQUFBeXVDLEVBQUEsUUFBQTk4QyxPQUFBLENBQ0F3L0MsU0FBQUMsWUFBQSwrRkFHQSxJQUFBOTdDLEVBQUEsSUFBQTY3QyxTQUFBRSxJQUFBLENBQ0F0cEMsVUFBQSxNQUNBZ0QsTUFBQSxxQ0FDQXVtQyxZQUFBLEVBQ0F6USxPQUFBMFEsVUFDQTVtQyxLQUFBNm1DLFVBR0E5aUIsRUFBQSxJQUFBeWlCLFNBQUFNLGtCQUNBbjhDLEVBQUFvOEMsV0FBQWhqQixFQUFBLFlBQ0FwNUIsRUFBQW84QyxXQUFBLElBQUFQLFNBQUFRLG1CQUdBQyxXQUFBQyxTQUFBbDRDLFFBQUEsU0FBQXF2QixHQUNBLElBQUF0cUIsRUFBQS9ELFNBQUFtTixjQUFBLE9BQ0FwSixFQUFBMk8sTUFBQTJiLEVBQUFvVyxXQUFBMFMsU0FBQSxHQUNBcHpDLEVBQUE0TyxPQUFBMGIsRUFBQW9XLFdBQUEwUyxTQUFBLEdBQ0FwekMsRUFBQXcrQixJQUFBbFUsRUFBQW9XLFdBQUE5USxRQUNBNXZCLEVBQUF3RyxJQUFBNnNDLGNBRUEsSUFBQWhqQyxFQUFBcFUsU0FBQW1OLGNBQUEsT0FDQWlILEVBQUFpakMsVUFBQSxTQUNBampDLEVBQUFoRSxNQUFBa25DLE9BQUEsVUFDQWxqQyxFQUFBekksWUFBQTVILEdBRUEsSUFBQXl5QyxTQUFBemMsT0FBQTNsQixHQUNBbWpDLFVBQUFscEIsRUFBQW1wQixTQUFBbGpDLGFBQ0FtakMsU0FBQSxJQUFBakIsU0FBQWtCLE1BQUEsQ0FBQXJqQyxPQUFBLEtBQUFzakMsUUFBQSxnQkFBQXRwQixFQUFBb1csV0FBQWw3QixJQUFBLEtBQUE4a0IsRUFBQW9XLFdBQUErRSxNQUFBLGNBQ0FvTyxNQUFBajlDLEtBS0EsU0FBQWs5QyxJQUNBcGlELE1BQUErdEIsYUFDQTdvQixFQUFBbTlDLFNBRUFydkMsV0FBQW92QyxFQUFBLEtBSUFBLEdBR0FwaUQsTUFBQXVxQixLQUFBM2EsR0FBQSw2QkFBQSxRQUFBLFdBQ0ExSyxFQUFBbTlDIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgVUlraXQgMy40LjYgfCBodHRwczovL3d3dy5nZXR1aWtpdC5jb20gfCAoYykgMjAxNCAtIDIwMjAgWU9PdGhlbWUgfCBNSVQgTGljZW5zZSAqL1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoJ3Vpa2l0JywgZmFjdG9yeSkgOlxuICAgIChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLlVJa2l0ID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIG9ialByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqUHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gICAgZnVuY3Rpb24gaGFzT3duKG9iaiwga2V5KSB7XG4gICAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbiAgICB9XG5cbiAgICB2YXIgaHlwaGVuYXRlQ2FjaGUgPSB7fTtcbiAgICB2YXIgaHlwaGVuYXRlUmUgPSAvKFthLXpcXGRdKShbQS1aXSkvZztcblxuICAgIGZ1bmN0aW9uIGh5cGhlbmF0ZShzdHIpIHtcblxuICAgICAgICBpZiAoIShzdHIgaW4gaHlwaGVuYXRlQ2FjaGUpKSB7XG4gICAgICAgICAgICBoeXBoZW5hdGVDYWNoZVtzdHJdID0gc3RyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoaHlwaGVuYXRlUmUsICckMS0kMicpXG4gICAgICAgICAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaHlwaGVuYXRlQ2FjaGVbc3RyXTtcbiAgICB9XG5cbiAgICB2YXIgY2FtZWxpemVSZSA9IC8tKFxcdykvZztcblxuICAgIGZ1bmN0aW9uIGNhbWVsaXplKHN0cikge1xuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSZSwgdG9VcHBlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9VcHBlcihfLCBjKSB7XG4gICAgICAgIHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdWNmaXJzdChzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5sZW5ndGggPyB0b1VwcGVyKG51bGwsIHN0ci5jaGFyQXQoMCkpICsgc3RyLnNsaWNlKDEpIDogJyc7XG4gICAgfVxuXG4gICAgdmFyIHN0clByb3RvdHlwZSA9IFN0cmluZy5wcm90b3R5cGU7XG4gICAgdmFyIHN0YXJ0c1dpdGhGbiA9IHN0clByb3RvdHlwZS5zdGFydHNXaXRoIHx8IGZ1bmN0aW9uIChzZWFyY2gpIHsgcmV0dXJuIHRoaXMubGFzdEluZGV4T2Yoc2VhcmNoLCAwKSA9PT0gMDsgfTtcblxuICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyLCBzZWFyY2gpIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0c1dpdGhGbi5jYWxsKHN0ciwgc2VhcmNoKTtcbiAgICB9XG5cbiAgICB2YXIgZW5kc1dpdGhGbiA9IHN0clByb3RvdHlwZS5lbmRzV2l0aCB8fCBmdW5jdGlvbiAoc2VhcmNoKSB7IHJldHVybiB0aGlzLnN1YnN0cigtc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDsgfTtcblxuICAgIGZ1bmN0aW9uIGVuZHNXaXRoKHN0ciwgc2VhcmNoKSB7XG4gICAgICAgIHJldHVybiBlbmRzV2l0aEZuLmNhbGwoc3RyLCBzZWFyY2gpO1xuICAgIH1cblxuICAgIHZhciBhcnJQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbiAgICB2YXIgaW5jbHVkZXNGbiA9IGZ1bmN0aW9uIChzZWFyY2gsIGkpIHsgcmV0dXJuICEhfnRoaXMuaW5kZXhPZihzZWFyY2gsIGkpOyB9O1xuICAgIHZhciBpbmNsdWRlc1N0ciA9IHN0clByb3RvdHlwZS5pbmNsdWRlcyB8fCBpbmNsdWRlc0ZuO1xuICAgIHZhciBpbmNsdWRlc0FycmF5ID0gYXJyUHJvdG90eXBlLmluY2x1ZGVzIHx8IGluY2x1ZGVzRm47XG5cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhvYmosIHNlYXJjaCkge1xuICAgICAgICByZXR1cm4gb2JqICYmIChpc1N0cmluZyhvYmopID8gaW5jbHVkZXNTdHIgOiBpbmNsdWRlc0FycmF5KS5jYWxsKG9iaiwgc2VhcmNoKTtcbiAgICB9XG5cbiAgICB2YXIgZmluZEluZGV4Rm4gPSBhcnJQcm90b3R5cGUuZmluZEluZGV4IHx8IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgICAgICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKGFyZ3VtZW50cyQxWzFdLCB0aGlzW2ldLCBpLCB0aGlzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRJbmRleEZuLmNhbGwoYXJyYXksIHByZWRpY2F0ZSk7XG4gICAgfVxuXG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbic7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgdmFyIHRvU3RyaW5nID0gb2JqUHJvdG90eXBlLnRvU3RyaW5nO1xuICAgIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzV2luZG93KG9iaikge1xuICAgICAgICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiBvYmogPT09IG9iai53aW5kb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEb2N1bWVudChvYmopIHtcbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgb2JqLm5vZGVUeXBlID09PSA5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSlF1ZXJ5KG9iaikge1xuICAgICAgICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiAhIW9iai5qcXVlcnk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOb2RlKG9iaikge1xuICAgICAgICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiBvYmoubm9kZVR5cGUgPj0gMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQob2JqKSB7XG4gICAgICAgIHJldHVybiBpc09iamVjdChvYmopICYmIG9iai5ub2RlVHlwZSA9PT0gMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc05vZGVDb2xsZWN0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopLm1hdGNoKC9eXFxbb2JqZWN0IChOb2RlTGlzdHxIVE1MQ29sbGVjdGlvbilcXF0kLyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWVyaWModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSB8fCBpc1N0cmluZyh2YWx1ZSkgJiYgIWlzTmFOKHZhbHVlIC0gcGFyc2VGbG9hdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gICAgICAgIHJldHVybiAhKGlzQXJyYXkob2JqKVxuICAgICAgICAgICAgPyBvYmoubGVuZ3RoXG4gICAgICAgICAgICA6IGlzT2JqZWN0KG9iailcbiAgICAgICAgICAgICAgICA/IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoXG4gICAgICAgICAgICAgICAgOiBmYWxzZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdm9pZCAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvQm9vbGVhbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaXNCb29sZWFuKHZhbHVlKVxuICAgICAgICAgICAgPyB2YWx1ZVxuICAgICAgICAgICAgOiB2YWx1ZSA9PT0gJ3RydWUnIHx8IHZhbHVlID09PSAnMScgfHwgdmFsdWUgPT09ICcnXG4gICAgICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICAgICAgOiB2YWx1ZSA9PT0gJ2ZhbHNlJyB8fCB2YWx1ZSA9PT0gJzAnXG4gICAgICAgICAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgICAgICB2YXIgbnVtYmVyID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuICFpc05hTihudW1iZXIpID8gbnVtYmVyIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9GbG9hdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b05vZGUoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gaXNOb2RlKGVsZW1lbnQpXG4gICAgICAgICAgICA/IGVsZW1lbnRcbiAgICAgICAgICAgIDogaXNOb2RlQ29sbGVjdGlvbihlbGVtZW50KSB8fCBpc0pRdWVyeShlbGVtZW50KVxuICAgICAgICAgICAgICAgID8gZWxlbWVudFswXVxuICAgICAgICAgICAgICAgIDogaXNBcnJheShlbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICA/IHRvTm9kZShlbGVtZW50WzBdKVxuICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Ob2RlcyhlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBpc05vZGUoZWxlbWVudClcbiAgICAgICAgICAgID8gW2VsZW1lbnRdXG4gICAgICAgICAgICA6IGlzTm9kZUNvbGxlY3Rpb24oZWxlbWVudClcbiAgICAgICAgICAgICAgICA/IGFyclByb3RvdHlwZS5zbGljZS5jYWxsKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgOiBpc0FycmF5KGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgID8gZWxlbWVudC5tYXAodG9Ob2RlKS5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAgICAgICAgICAgOiBpc0pRdWVyeShlbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBlbGVtZW50LnRvQXJyYXkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b1dpbmRvdyhlbGVtZW50KSB7XG4gICAgICAgIGlmIChpc1dpbmRvdyhlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50ID0gdG9Ob2RlKGVsZW1lbnQpO1xuXG4gICAgICAgIHJldHVybiBlbGVtZW50XG4gICAgICAgICAgICA/IChpc0RvY3VtZW50KGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgPyBlbGVtZW50XG4gICAgICAgICAgICAgICAgOiBlbGVtZW50Lm93bmVyRG9jdW1lbnRcbiAgICAgICAgICAgICkuZGVmYXVsdFZpZXdcbiAgICAgICAgICAgIDogd2luZG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvTGlzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICAgID8gdmFsdWVcbiAgICAgICAgICAgIDogaXNTdHJpbmcodmFsdWUpXG4gICAgICAgICAgICAgICAgPyB2YWx1ZS5zcGxpdCgvLCg/IVteKF0qXFwpKS8pLm1hcChmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGlzTnVtZXJpYyh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgPyB0b051bWJlcih2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgOiB0b0Jvb2xlYW4odmFsdWUudHJpbSgpKTsgfSlcbiAgICAgICAgICAgICAgICA6IFt2YWx1ZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Ncyh0aW1lKSB7XG4gICAgICAgIHJldHVybiAhdGltZVxuICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICA6IGVuZHNXaXRoKHRpbWUsICdtcycpXG4gICAgICAgICAgICAgICAgPyB0b0Zsb2F0KHRpbWUpXG4gICAgICAgICAgICAgICAgOiB0b0Zsb2F0KHRpbWUpICogMTAwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyXG4gICAgICAgICAgICB8fCBpc09iamVjdCh2YWx1ZSlcbiAgICAgICAgICAgICYmIGlzT2JqZWN0KG90aGVyKVxuICAgICAgICAgICAgJiYgT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gT2JqZWN0LmtleXMob3RoZXIpLmxlbmd0aFxuICAgICAgICAgICAgJiYgZWFjaCh2YWx1ZSwgZnVuY3Rpb24gKHZhbCwga2V5KSB7IHJldHVybiB2YWwgPT09IG90aGVyW2tleV07IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN3YXAodmFsdWUsIGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoXG4gICAgICAgICAgICBuZXcgUmVnRXhwKChhICsgXCJ8XCIgKyBiKSwgJ2cnKSxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2ggPT09IGEgPyBiIDogYTsgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBhc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlICggbGVuLS0gPiAwICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgICAgICB0YXJnZXQgPSBPYmplY3QodGFyZ2V0KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJnc1tpXTtcbiAgICAgICAgICAgIGlmIChzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd24oc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVhY2gob2JqLCBjYikge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoZmFsc2UgPT09IGNiKG9ialtrZXldLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNvcnRCeShhcnJheSwgcHJvcCkge1xuICAgICAgICByZXR1cm4gYXJyYXkuc29ydChmdW5jdGlvbiAocmVmLCByZWYkMSkge1xuICAgICAgICAgICAgICAgIHZhciBwcm9wQSA9IHJlZltwcm9wXTsgaWYgKCBwcm9wQSA9PT0gdm9pZCAwICkgcHJvcEEgPSAwO1xuICAgICAgICAgICAgICAgIHZhciBwcm9wQiA9IHJlZiQxW3Byb3BdOyBpZiAoIHByb3BCID09PSB2b2lkIDAgKSBwcm9wQiA9IDA7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcEEgPiBwcm9wQlxuICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgIDogcHJvcEIgPiBwcm9wQVxuICAgICAgICAgICAgICAgICAgICA/IC0xXG4gICAgICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaXF1ZUJ5KGFycmF5LCBwcm9wKSB7XG4gICAgICAgIHZhciBzZWVuID0gbmV3IFNldCgpO1xuICAgICAgICByZXR1cm4gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgIHZhciBjaGVjayA9IHJlZltwcm9wXTtcblxuICAgICAgICAgICAgcmV0dXJuIHNlZW4uaGFzKGNoZWNrKVxuICAgICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgICAgOiBzZWVuLmFkZChjaGVjaykgfHwgdHJ1ZTtcbiAgICAgICAgfSAvLyBJRSAxMSBkb2VzIG5vdCByZXR1cm4gdGhlIFNldCBvYmplY3RcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGFtcChudW1iZXIsIG1pbiwgbWF4KSB7XG4gICAgICAgIGlmICggbWluID09PSB2b2lkIDAgKSBtaW4gPSAwO1xuICAgICAgICBpZiAoIG1heCA9PT0gdm9pZCAwICkgbWF4ID0gMTtcblxuICAgICAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodG9OdW1iZXIobnVtYmVyKSB8fCAwLCBtaW4pLCBtYXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vb3AoKSB7fVxuXG4gICAgZnVuY3Rpb24gaW50ZXJzZWN0UmVjdChyMSwgcjIpIHtcbiAgICAgICAgcmV0dXJuIHIxLmxlZnQgPCByMi5yaWdodCAmJlxuICAgICAgICAgICAgcjEucmlnaHQgPiByMi5sZWZ0ICYmXG4gICAgICAgICAgICByMS50b3AgPCByMi5ib3R0b20gJiZcbiAgICAgICAgICAgIHIxLmJvdHRvbSA+IHIyLnRvcDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludEluUmVjdChwb2ludCwgcmVjdCkge1xuICAgICAgICByZXR1cm4gcG9pbnQueCA8PSByZWN0LnJpZ2h0ICYmXG4gICAgICAgICAgICBwb2ludC54ID49IHJlY3QubGVmdCAmJlxuICAgICAgICAgICAgcG9pbnQueSA8PSByZWN0LmJvdHRvbSAmJlxuICAgICAgICAgICAgcG9pbnQueSA+PSByZWN0LnRvcDtcbiAgICB9XG5cbiAgICB2YXIgRGltZW5zaW9ucyA9IHtcblxuICAgICAgICByYXRpbzogZnVuY3Rpb24oZGltZW5zaW9ucywgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBvYmo7XG5cblxuICAgICAgICAgICAgdmFyIGFQcm9wID0gcHJvcCA9PT0gJ3dpZHRoJyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgICAgICAgICAgcmV0dXJuICggb2JqID0ge30sIG9ialthUHJvcF0gPSBkaW1lbnNpb25zW3Byb3BdID8gTWF0aC5yb3VuZCh2YWx1ZSAqIGRpbWVuc2lvbnNbYVByb3BdIC8gZGltZW5zaW9uc1twcm9wXSkgOiBkaW1lbnNpb25zW2FQcm9wXSwgb2JqW3Byb3BdID0gdmFsdWUsIG9iaiApO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbnRhaW46IGZ1bmN0aW9uKGRpbWVuc2lvbnMsIG1heERpbWVuc2lvbnMpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgICAgICBkaW1lbnNpb25zID0gYXNzaWduKHt9LCBkaW1lbnNpb25zKTtcblxuICAgICAgICAgICAgZWFjaChkaW1lbnNpb25zLCBmdW5jdGlvbiAoXywgcHJvcCkgeyByZXR1cm4gZGltZW5zaW9ucyA9IGRpbWVuc2lvbnNbcHJvcF0gPiBtYXhEaW1lbnNpb25zW3Byb3BdXG4gICAgICAgICAgICAgICAgPyB0aGlzJDEucmF0aW8oZGltZW5zaW9ucywgcHJvcCwgbWF4RGltZW5zaW9uc1twcm9wXSlcbiAgICAgICAgICAgICAgICA6IGRpbWVuc2lvbnM7IH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiBkaW1lbnNpb25zO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvdmVyOiBmdW5jdGlvbihkaW1lbnNpb25zLCBtYXhEaW1lbnNpb25zKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgZGltZW5zaW9ucyA9IHRoaXMuY29udGFpbihkaW1lbnNpb25zLCBtYXhEaW1lbnNpb25zKTtcblxuICAgICAgICAgICAgZWFjaChkaW1lbnNpb25zLCBmdW5jdGlvbiAoXywgcHJvcCkgeyByZXR1cm4gZGltZW5zaW9ucyA9IGRpbWVuc2lvbnNbcHJvcF0gPCBtYXhEaW1lbnNpb25zW3Byb3BdXG4gICAgICAgICAgICAgICAgPyB0aGlzJDEucmF0aW8oZGltZW5zaW9ucywgcHJvcCwgbWF4RGltZW5zaW9uc1twcm9wXSlcbiAgICAgICAgICAgICAgICA6IGRpbWVuc2lvbnM7IH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiBkaW1lbnNpb25zO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYXR0cihlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuXG4gICAgICAgIGlmIChpc09iamVjdChuYW1lKSkge1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG5hbWUpIHtcbiAgICAgICAgICAgICAgICBhdHRyKGVsZW1lbnQsIGtleSwgbmFtZVtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSB0b05vZGUoZWxlbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvTm9kZXMoZWxlbWVudCkuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuY2FsbChlbGVtZW50LCBhdHRyKGVsZW1lbnQsIG5hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQXR0cihlbGVtZW50LCBuYW1lKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0F0dHIoZWxlbWVudCwgbmFtZSkge1xuICAgICAgICByZXR1cm4gdG9Ob2RlcyhlbGVtZW50KS5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50Lmhhc0F0dHJpYnV0ZShuYW1lKTsgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlQXR0cihlbGVtZW50LCBuYW1lKSB7XG4gICAgICAgIGVsZW1lbnQgPSB0b05vZGVzKGVsZW1lbnQpO1xuICAgICAgICBuYW1lLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gZWxlbWVudC5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50Lmhhc0F0dHJpYnV0ZShuYW1lKSAmJiBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTsgfVxuICAgICAgICAgICAgKTsgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRhdGEoZWxlbWVudCwgYXR0cmlidXRlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBhdHRycyA9IFthdHRyaWJ1dGUsIChcImRhdGEtXCIgKyBhdHRyaWJ1dGUpXTsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaGFzQXR0cihlbGVtZW50LCBhdHRyc1tpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXR0cihlbGVtZW50LCBhdHRyc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBnbG9iYWwgRG9jdW1lbnRUb3VjaCAqL1xuXG4gICAgdmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuICAgIHZhciBpc0lFID0gaW5Ccm93c2VyICYmIC9tc2llfHRyaWRlbnQvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB2YXIgaXNSdGwgPSBpbkJyb3dzZXIgJiYgYXR0cihkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICdkaXInKSA9PT0gJ3J0bCc7XG5cbiAgICB2YXIgaGFzVG91Y2hFdmVudHMgPSBpbkJyb3dzZXIgJiYgJ29udG91Y2hzdGFydCcgaW4gd2luZG93O1xuICAgIHZhciBoYXNQb2ludGVyRXZlbnRzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5Qb2ludGVyRXZlbnQ7XG4gICAgdmFyIGhhc1RvdWNoID0gaW5Ccm93c2VyICYmIChoYXNUb3VjaEV2ZW50c1xuICAgICAgICB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIERvY3VtZW50VG91Y2hcbiAgICAgICAgfHwgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzKTsgLy8gSUUgPj0xMVxuXG4gICAgdmFyIHBvaW50ZXJEb3duID0gaGFzUG9pbnRlckV2ZW50cyA/ICdwb2ludGVyZG93bicgOiBoYXNUb3VjaEV2ZW50cyA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nO1xuICAgIHZhciBwb2ludGVyTW92ZSA9IGhhc1BvaW50ZXJFdmVudHMgPyAncG9pbnRlcm1vdmUnIDogaGFzVG91Y2hFdmVudHMgPyAndG91Y2htb3ZlJyA6ICdtb3VzZW1vdmUnO1xuICAgIHZhciBwb2ludGVyVXAgPSBoYXNQb2ludGVyRXZlbnRzID8gJ3BvaW50ZXJ1cCcgOiBoYXNUb3VjaEV2ZW50cyA/ICd0b3VjaGVuZCcgOiAnbW91c2V1cCc7XG4gICAgdmFyIHBvaW50ZXJFbnRlciA9IGhhc1BvaW50ZXJFdmVudHMgPyAncG9pbnRlcmVudGVyJyA6IGhhc1RvdWNoRXZlbnRzID8gJycgOiAnbW91c2VlbnRlcic7XG4gICAgdmFyIHBvaW50ZXJMZWF2ZSA9IGhhc1BvaW50ZXJFdmVudHMgPyAncG9pbnRlcmxlYXZlJyA6IGhhc1RvdWNoRXZlbnRzID8gJycgOiAnbW91c2VsZWF2ZSc7XG4gICAgdmFyIHBvaW50ZXJDYW5jZWwgPSBoYXNQb2ludGVyRXZlbnRzID8gJ3BvaW50ZXJjYW5jZWwnIDogJ3RvdWNoY2FuY2VsJztcblxuICAgIGZ1bmN0aW9uIHF1ZXJ5KHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB0b05vZGUoc2VsZWN0b3IpIHx8IGZpbmQoc2VsZWN0b3IsIGdldENvbnRleHQoc2VsZWN0b3IsIGNvbnRleHQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBxdWVyeUFsbChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgICB2YXIgbm9kZXMgPSB0b05vZGVzKHNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuIG5vZGVzLmxlbmd0aCAmJiBub2RlcyB8fCBmaW5kQWxsKHNlbGVjdG9yLCBnZXRDb250ZXh0KHNlbGVjdG9yLCBjb250ZXh0KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29udGV4dChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgICBpZiAoIGNvbnRleHQgPT09IHZvaWQgMCApIGNvbnRleHQgPSBkb2N1bWVudDtcblxuICAgICAgICByZXR1cm4gaXNDb250ZXh0U2VsZWN0b3Ioc2VsZWN0b3IpIHx8IGlzRG9jdW1lbnQoY29udGV4dClcbiAgICAgICAgICAgID8gY29udGV4dFxuICAgICAgICAgICAgOiBjb250ZXh0Lm93bmVyRG9jdW1lbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmluZChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdG9Ob2RlKF9xdWVyeShzZWxlY3RvciwgY29udGV4dCwgJ3F1ZXJ5U2VsZWN0b3InKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmluZEFsbChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdG9Ob2RlcyhfcXVlcnkoc2VsZWN0b3IsIGNvbnRleHQsICdxdWVyeVNlbGVjdG9yQWxsJykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9xdWVyeShzZWxlY3RvciwgY29udGV4dCwgcXVlcnlGbikge1xuICAgICAgICBpZiAoIGNvbnRleHQgPT09IHZvaWQgMCApIGNvbnRleHQgPSBkb2N1bWVudDtcblxuXG4gICAgICAgIGlmICghc2VsZWN0b3IgfHwgIWlzU3RyaW5nKHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UoY29udGV4dFNhbml0aXplUmUsICckMSAqJyk7XG5cbiAgICAgICAgdmFyIHJlbW92ZXM7XG5cbiAgICAgICAgaWYgKGlzQ29udGV4dFNlbGVjdG9yKHNlbGVjdG9yKSkge1xuXG4gICAgICAgICAgICByZW1vdmVzID0gW107XG5cbiAgICAgICAgICAgIHNlbGVjdG9yID0gc3BsaXRTZWxlY3RvcihzZWxlY3RvcikubWFwKGZ1bmN0aW9uIChzZWxlY3RvciwgaSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGN0eCA9IGNvbnRleHQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3JbMF0gPT09ICchJykge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvcnMgPSBzZWxlY3Rvci5zdWJzdHIoMSkudHJpbSgpLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IGNsb3Nlc3QocGFyZW50KGNvbnRleHQpLCBzZWxlY3RvcnNbMF0pO1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9ycy5zbGljZSgxKS5qb2luKCcgJykudHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yWzBdID09PSAnLScpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3JzJDEgPSBzZWxlY3Rvci5zdWJzdHIoMSkudHJpbSgpLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gKGN0eCB8fCBjb250ZXh0KS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICBjdHggPSBtYXRjaGVzKHByZXYsIHNlbGVjdG9yLnN1YnN0cigxKSkgPyBwcmV2IDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvcnMkMS5zbGljZSgxKS5qb2luKCcgJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWN0eCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWN0eC5pZCkge1xuICAgICAgICAgICAgICAgICAgICBjdHguaWQgPSBcInVrLVwiICsgKERhdGUubm93KCkpICsgaTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3Zlcy5wdXNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZUF0dHIoY3R4LCAnaWQnKTsgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcIiNcIiArIChlc2NhcGUoY3R4LmlkKSkgKyBcIiBcIiArIHNlbGVjdG9yKTtcblxuICAgICAgICAgICAgfSkuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJywnKTtcblxuICAgICAgICAgICAgY29udGV4dCA9IGRvY3VtZW50O1xuXG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dFtxdWVyeUZuXShzZWxlY3Rvcik7XG5cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICB9IGZpbmFsbHkge1xuXG4gICAgICAgICAgICByZW1vdmVzICYmIHJlbW92ZXMuZm9yRWFjaChmdW5jdGlvbiAocmVtb3ZlKSB7IHJldHVybiByZW1vdmUoKTsgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgdmFyIGNvbnRleHRTZWxlY3RvclJlID0gLyhefFteXFxcXF0sKVxccypbIT4rfi1dLztcbiAgICB2YXIgY29udGV4dFNhbml0aXplUmUgPSAvKFshPit+LV0pKD89XFxzK1shPit+LV18XFxzKiQpL2c7XG5cbiAgICBmdW5jdGlvbiBpc0NvbnRleHRTZWxlY3RvcihzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoc2VsZWN0b3IpICYmIHNlbGVjdG9yLm1hdGNoKGNvbnRleHRTZWxlY3RvclJlKTtcbiAgICB9XG5cbiAgICB2YXIgc2VsZWN0b3JSZSA9IC8uKj9bXlxcXFxdKD86LHwkKS9nO1xuXG4gICAgZnVuY3Rpb24gc3BsaXRTZWxlY3RvcihzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gc2VsZWN0b3IubWF0Y2goc2VsZWN0b3JSZSkubWFwKGZ1bmN0aW9uIChzZWxlY3RvcikgeyByZXR1cm4gc2VsZWN0b3IucmVwbGFjZSgvLCQvLCAnJykudHJpbSgpOyB9KTtcbiAgICB9XG5cbiAgICB2YXIgZWxQcm90byA9IGluQnJvd3NlciA/IEVsZW1lbnQucHJvdG90eXBlIDoge307XG4gICAgdmFyIG1hdGNoZXNGbiA9IGVsUHJvdG8ubWF0Y2hlcyB8fCBlbFByb3RvLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBlbFByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IG5vb3A7XG5cbiAgICBmdW5jdGlvbiBtYXRjaGVzKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiB0b05vZGVzKGVsZW1lbnQpLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIG1hdGNoZXNGbi5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKTsgfSk7XG4gICAgfVxuXG4gICAgdmFyIGNsb3Nlc3RGbiA9IGVsUHJvdG8uY2xvc2VzdCB8fCBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIGFuY2VzdG9yID0gdGhpcztcblxuICAgICAgICBkbyB7XG5cbiAgICAgICAgICAgIGlmIChtYXRjaGVzKGFuY2VzdG9yLCBzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5jZXN0b3I7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSB3aGlsZSAoKGFuY2VzdG9yID0gcGFyZW50KGFuY2VzdG9yKSkpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjbG9zZXN0KGVsZW1lbnQsIHNlbGVjdG9yKSB7XG5cbiAgICAgICAgaWYgKHN0YXJ0c1dpdGgoc2VsZWN0b3IsICc+JykpIHtcbiAgICAgICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXNFbGVtZW50KGVsZW1lbnQpXG4gICAgICAgICAgICA/IGNsb3Nlc3RGbi5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKVxuICAgICAgICAgICAgOiB0b05vZGVzKGVsZW1lbnQpLm1hcChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gY2xvc2VzdChlbGVtZW50LCBzZWxlY3Rvcik7IH0pLmZpbHRlcihCb29sZWFuKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJlbnQoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50ID0gdG9Ob2RlKGVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBpc0VsZW1lbnQoZWxlbWVudC5wYXJlbnROb2RlKSAmJiBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgdmFyIGVzY2FwZUZuID0gaW5Ccm93c2VyICYmIHdpbmRvdy5DU1MgJiYgQ1NTLmVzY2FwZSB8fCBmdW5jdGlvbiAoY3NzKSB7IHJldHVybiBjc3MucmVwbGFjZSgvKFteXFx4N2YtXFx1RkZGRlxcdy1dKS9nLCBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIChcIlxcXFxcIiArIG1hdGNoKTsgfSk7IH07XG4gICAgZnVuY3Rpb24gZXNjYXBlKGNzcykge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY3NzKSA/IGVzY2FwZUZuLmNhbGwobnVsbCwgY3NzKSA6ICcnO1xuICAgIH1cblxuICAgIHZhciB2b2lkRWxlbWVudHMgPSB7XG4gICAgICAgIGFyZWE6IHRydWUsXG4gICAgICAgIGJhc2U6IHRydWUsXG4gICAgICAgIGJyOiB0cnVlLFxuICAgICAgICBjb2w6IHRydWUsXG4gICAgICAgIGVtYmVkOiB0cnVlLFxuICAgICAgICBocjogdHJ1ZSxcbiAgICAgICAgaW1nOiB0cnVlLFxuICAgICAgICBpbnB1dDogdHJ1ZSxcbiAgICAgICAga2V5Z2VuOiB0cnVlLFxuICAgICAgICBsaW5rOiB0cnVlLFxuICAgICAgICBtZW51aXRlbTogdHJ1ZSxcbiAgICAgICAgbWV0YTogdHJ1ZSxcbiAgICAgICAgcGFyYW06IHRydWUsXG4gICAgICAgIHNvdXJjZTogdHJ1ZSxcbiAgICAgICAgdHJhY2s6IHRydWUsXG4gICAgICAgIHdicjogdHJ1ZVxuICAgIH07XG4gICAgZnVuY3Rpb24gaXNWb2lkRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0b05vZGVzKGVsZW1lbnQpLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIHZvaWRFbGVtZW50c1tlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKV07IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmlzaWJsZShlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0b05vZGVzKGVsZW1lbnQpLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQub2Zmc2V0V2lkdGggfHwgZWxlbWVudC5vZmZzZXRIZWlnaHQgfHwgZWxlbWVudC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aDsgfSk7XG4gICAgfVxuXG4gICAgdmFyIHNlbElucHV0ID0gJ2lucHV0LHNlbGVjdCx0ZXh0YXJlYSxidXR0b24nO1xuICAgIGZ1bmN0aW9uIGlzSW5wdXQoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdG9Ob2RlcyhlbGVtZW50KS5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBtYXRjaGVzKGVsZW1lbnQsIHNlbElucHV0KTsgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlsdGVyKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiB0b05vZGVzKGVsZW1lbnQpLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gbWF0Y2hlcyhlbGVtZW50LCBzZWxlY3Rvcik7IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdpdGhpbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gIWlzU3RyaW5nKHNlbGVjdG9yKVxuICAgICAgICAgICAgPyBlbGVtZW50ID09PSBzZWxlY3RvciB8fCAoaXNEb2N1bWVudChzZWxlY3RvcilcbiAgICAgICAgICAgICAgICA/IHNlbGVjdG9yLmRvY3VtZW50RWxlbWVudFxuICAgICAgICAgICAgICAgIDogdG9Ob2RlKHNlbGVjdG9yKSkuY29udGFpbnModG9Ob2RlKGVsZW1lbnQpKSAvLyBJRSAxMSBkb2N1bWVudCBkb2VzIG5vdCBpbXBsZW1lbnQgY29udGFpbnNcbiAgICAgICAgICAgIDogbWF0Y2hlcyhlbGVtZW50LCBzZWxlY3RvcikgfHwgY2xvc2VzdChlbGVtZW50LCBzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyZW50cyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBbXTtcblxuICAgICAgICB3aGlsZSAoKGVsZW1lbnQgPSBwYXJlbnQoZWxlbWVudCkpKSB7XG4gICAgICAgICAgICBpZiAoIXNlbGVjdG9yIHx8IG1hdGNoZXMoZWxlbWVudCwgc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGlsZHJlbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICBlbGVtZW50ID0gdG9Ob2RlKGVsZW1lbnQpO1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBlbGVtZW50ID8gdG9Ob2RlcyhlbGVtZW50LmNoaWxkcmVuKSA6IFtdO1xuICAgICAgICByZXR1cm4gc2VsZWN0b3IgPyBmaWx0ZXIoY2hpbGRyZW4sIHNlbGVjdG9yKSA6IGNoaWxkcmVuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG5cbiAgICAgICAgdmFyIHJlZiA9IGdldEFyZ3MoYXJncyk7XG4gICAgICAgIHZhciB0YXJnZXRzID0gcmVmWzBdO1xuICAgICAgICB2YXIgdHlwZSA9IHJlZlsxXTtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcmVmWzJdO1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSByZWZbM107XG4gICAgICAgIHZhciB1c2VDYXB0dXJlID0gcmVmWzRdO1xuXG4gICAgICAgIHRhcmdldHMgPSB0b0V2ZW50VGFyZ2V0cyh0YXJnZXRzKTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbGlzdGVuZXIgPSBkZXRhaWwobGlzdGVuZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZUNhcHR1cmUgJiYgdXNlQ2FwdHVyZS5zZWxmKSB7XG4gICAgICAgICAgICBsaXN0ZW5lciA9IHNlbGZGaWx0ZXIobGlzdGVuZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICBsaXN0ZW5lciA9IGRlbGVnYXRlKHRhcmdldHMsIHNlbGVjdG9yLCBsaXN0ZW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICB1c2VDYXB0dXJlID0gdXNlQ2FwdHVyZUZpbHRlcih1c2VDYXB0dXJlKTtcblxuICAgICAgICB0eXBlLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gdGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTsgfVxuICAgICAgICAgICAgKTsgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gb2ZmKHRhcmdldHMsIHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTsgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvZmYodGFyZ2V0cywgdHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpIHtcbiAgICAgICAgaWYgKCB1c2VDYXB0dXJlID09PSB2b2lkIDAgKSB1c2VDYXB0dXJlID0gZmFsc2U7XG5cbiAgICAgICAgdXNlQ2FwdHVyZSA9IHVzZUNhcHR1cmVGaWx0ZXIodXNlQ2FwdHVyZSk7XG4gICAgICAgIHRhcmdldHMgPSB0b0V2ZW50VGFyZ2V0cyh0YXJnZXRzKTtcbiAgICAgICAgdHlwZS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIHRhcmdldHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7IHJldHVybiB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSk7IH1cbiAgICAgICAgICAgICk7IH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmNlKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG5cbiAgICAgICAgdmFyIHJlZiA9IGdldEFyZ3MoYXJncyk7XG4gICAgICAgIHZhciBlbGVtZW50ID0gcmVmWzBdO1xuICAgICAgICB2YXIgdHlwZSA9IHJlZlsxXTtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcmVmWzJdO1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSByZWZbM107XG4gICAgICAgIHZhciB1c2VDYXB0dXJlID0gcmVmWzRdO1xuICAgICAgICB2YXIgY29uZGl0aW9uID0gcmVmWzVdO1xuICAgICAgICB2YXIgb2ZmID0gb24oZWxlbWVudCwgdHlwZSwgc2VsZWN0b3IsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gIWNvbmRpdGlvbiB8fCBjb25kaXRpb24oZSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgb2ZmKCk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIoZSwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdXNlQ2FwdHVyZSk7XG5cbiAgICAgICAgcmV0dXJuIG9mZjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmlnZ2VyKHRhcmdldHMsIGV2ZW50LCBkZXRhaWwpIHtcbiAgICAgICAgcmV0dXJuIHRvRXZlbnRUYXJnZXRzKHRhcmdldHMpLnJlZHVjZShmdW5jdGlvbiAobm90Q2FuY2VsZWQsIHRhcmdldCkgeyByZXR1cm4gbm90Q2FuY2VsZWQgJiYgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQoZXZlbnQsIHRydWUsIHRydWUsIGRldGFpbCkpOyB9XG4gICAgICAgICAgICAsIHRydWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUV2ZW50KGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUsIGRldGFpbCkge1xuICAgICAgICBpZiAoIGJ1YmJsZXMgPT09IHZvaWQgMCApIGJ1YmJsZXMgPSB0cnVlO1xuICAgICAgICBpZiAoIGNhbmNlbGFibGUgPT09IHZvaWQgMCApIGNhbmNlbGFibGUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoaXNTdHJpbmcoZSkpIHtcbiAgICAgICAgICAgIHZhciBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpOyAvLyBJRSAxMVxuICAgICAgICAgICAgZXZlbnQuaW5pdEN1c3RvbUV2ZW50KGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUsIGRldGFpbCk7XG4gICAgICAgICAgICBlID0gZXZlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBcmdzKGFyZ3MpIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oYXJnc1syXSkpIHtcbiAgICAgICAgICAgIGFyZ3Muc3BsaWNlKDIsIDAsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJncztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWxlZ2F0ZShkZWxlZ2F0ZXMsIHNlbGVjdG9yLCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgZGVsZWdhdGVzLmZvckVhY2goZnVuY3Rpb24gKGRlbGVnYXRlKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHNlbGVjdG9yWzBdID09PSAnPidcbiAgICAgICAgICAgICAgICAgICAgPyBmaW5kQWxsKHNlbGVjdG9yLCBkZWxlZ2F0ZSkucmV2ZXJzZSgpLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gd2l0aGluKGUudGFyZ2V0LCBlbGVtZW50KTsgfSlbMF1cbiAgICAgICAgICAgICAgICAgICAgOiBjbG9zZXN0KGUudGFyZ2V0LCBzZWxlY3Rvcik7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBlLmRlbGVnYXRlID0gZGVsZWdhdGU7XG4gICAgICAgICAgICAgICAgICAgIGUuY3VycmVudCA9IGN1cnJlbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzJDEsIGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXRhaWwobGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7IHJldHVybiBpc0FycmF5KGUuZGV0YWlsKSA/IGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgWyBlIF0uY29uY2F0KCBlLmRldGFpbCApKSA6IGxpc3RlbmVyKGUpOyB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlbGZGaWx0ZXIobGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fCBlLnRhcmdldCA9PT0gZS5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RlbmVyLmNhbGwobnVsbCwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXNlQ2FwdHVyZUZpbHRlcihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zICYmIGlzSUUgJiYgIWlzQm9vbGVhbihvcHRpb25zKVxuICAgICAgICAgICAgPyAhIW9wdGlvbnMuY2FwdHVyZVxuICAgICAgICAgICAgOiBvcHRpb25zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRXZlbnRUYXJnZXQodGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQgJiYgJ2FkZEV2ZW50TGlzdGVuZXInIGluIHRhcmdldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0V2ZW50VGFyZ2V0KHRhcmdldCkge1xuICAgICAgICByZXR1cm4gaXNFdmVudFRhcmdldCh0YXJnZXQpID8gdGFyZ2V0IDogdG9Ob2RlKHRhcmdldCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9FdmVudFRhcmdldHModGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRhcmdldClcbiAgICAgICAgICAgICAgICA/IHRhcmdldC5tYXAodG9FdmVudFRhcmdldCkuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgICAgICAgOiBpc1N0cmluZyh0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgID8gZmluZEFsbCh0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgIDogaXNFdmVudFRhcmdldCh0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFt0YXJnZXRdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRvTm9kZXModGFyZ2V0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1RvdWNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGUucG9pbnRlclR5cGUgPT09ICd0b3VjaCcgfHwgISFlLnRvdWNoZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXZlbnRQb3MoZSkge1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGUudG91Y2hlcztcbiAgICAgICAgdmFyIGNoYW5nZWRUb3VjaGVzID0gZS5jaGFuZ2VkVG91Y2hlcztcbiAgICAgICAgdmFyIHJlZiA9IHRvdWNoZXMgJiYgdG91Y2hlc1swXSB8fCBjaGFuZ2VkVG91Y2hlcyAmJiBjaGFuZ2VkVG91Y2hlc1swXSB8fCBlO1xuICAgICAgICB2YXIgeCA9IHJlZi5jbGllbnRYO1xuICAgICAgICB2YXIgeSA9IHJlZi5jbGllbnRZO1xuXG4gICAgICAgIHJldHVybiB7eDogeCwgeTogeX07XG4gICAgfVxuXG4gICAgLyogZ2xvYmFsIHNldEltbWVkaWF0ZSAqL1xuXG4gICAgdmFyIFByb21pc2UgPSBpbkJyb3dzZXIgJiYgd2luZG93LlByb21pc2UgfHwgUHJvbWlzZUZuO1xuXG4gICAgdmFyIERlZmVycmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHRoaXMkMS5yZWplY3QgPSByZWplY3Q7XG4gICAgICAgICAgICB0aGlzJDEucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQcm9taXNlcy9BKyBwb2x5ZmlsbCB2MS4xLjQgKGh0dHBzOi8vZ2l0aHViLmNvbS9icmFtc3RlaW4vcHJvbWlzKVxuICAgICAqL1xuXG4gICAgdmFyIFJFU09MVkVEID0gMDtcbiAgICB2YXIgUkVKRUNURUQgPSAxO1xuICAgIHZhciBQRU5ESU5HID0gMjtcblxuICAgIHZhciBhc3luYyA9IGluQnJvd3NlciAmJiB3aW5kb3cuc2V0SW1tZWRpYXRlIHx8IHNldFRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBQcm9taXNlRm4oZXhlY3V0b3IpIHtcblxuICAgICAgICB0aGlzLnN0YXRlID0gUEVORElORztcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5kZWZlcnJlZCA9IFtdO1xuXG4gICAgICAgIHZhciBwcm9taXNlID0gdGhpcztcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZXhlY3V0b3IoXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3Qocik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBQcm9taXNlRm4ucmVqZWN0ID0gZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlRm4oZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgcmVqZWN0KHIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgUHJvbWlzZUZuLnJlc29sdmUgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VGbihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICByZXNvbHZlKHgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgUHJvbWlzZUZuLmFsbCA9IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VGbihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgICAgICB2YXIgY291bnQgPSAwO1xuXG4gICAgICAgICAgICBpZiAoaXRlcmFibGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlcihpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IHg7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ICs9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlcmFibGUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBQcm9taXNlRm4ucmVzb2x2ZShpdGVyYWJsZVtpXSkudGhlbihyZXNvbHZlcihpKSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIFByb21pc2VGbi5yYWNlID0gZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VGbihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZXJhYmxlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgUHJvbWlzZUZuLnJlc29sdmUoaXRlcmFibGVbaV0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBwID0gUHJvbWlzZUZuLnByb3RvdHlwZTtcblxuICAgIHAucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHByb21pc2Uuc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICAgICAgICAgIGlmICh4ID09PSBwcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvbWlzZSBzZXR0bGVkIHdpdGggaXRzZWxmLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoZW4gPSB4ICYmIHgudGhlbjtcblxuICAgICAgICAgICAgICAgIGlmICh4ICE9PSBudWxsICYmIGlzT2JqZWN0KHgpICYmIGlzRnVuY3Rpb24odGhlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhlbi5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3Qocik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJvbWlzZS5zdGF0ZSA9IFJFU09MVkVEO1xuICAgICAgICAgICAgcHJvbWlzZS52YWx1ZSA9IHg7XG4gICAgICAgICAgICBwcm9taXNlLm5vdGlmeSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAucmVqZWN0ID0gZnVuY3Rpb24gcmVqZWN0KHJlYXNvbikge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHByb21pc2Uuc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICAgICAgICAgIGlmIChyZWFzb24gPT09IHByb21pc2UpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm9taXNlIHNldHRsZWQgd2l0aCBpdHNlbGYuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByb21pc2Uuc3RhdGUgPSBSRUpFQ1RFRDtcbiAgICAgICAgICAgIHByb21pc2UudmFsdWUgPSByZWFzb247XG4gICAgICAgICAgICBwcm9taXNlLm5vdGlmeSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICBhc3luYyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcyQxLnN0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMkMS5kZWZlcnJlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMkMS5kZWZlcnJlZC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb25SZXNvbHZlZCA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9uUmVqZWN0ZWQgPSByZWZbMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNvbHZlID0gcmVmWzJdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVqZWN0ID0gcmVmWzNdO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcyQxLnN0YXRlID09PSBSRVNPTFZFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9uUmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob25SZXNvbHZlZC5jYWxsKHVuZGVmaW5lZCwgdGhpcyQxLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzJDEudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcyQxLnN0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9uUmVqZWN0ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob25SZWplY3RlZC5jYWxsKHVuZGVmaW5lZCwgdGhpcyQxLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHRoaXMkMS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uUmVzb2x2ZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlRm4oZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdGhpcyQxLmRlZmVycmVkLnB1c2goW29uUmVzb2x2ZWQsIG9uUmVqZWN0ZWQsIHJlc29sdmUsIHJlamVjdF0pO1xuICAgICAgICAgICAgdGhpcyQxLm5vdGlmeSgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcC5jYXRjaCA9IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYWpheCh1cmwsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICAgICAgdmFyIGVudiA9IGFzc2lnbih7XG4gICAgICAgICAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICAgICAgICAgIHhocjogbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG4gICAgICAgICAgICAgICAgYmVmb3JlU2VuZDogbm9vcCxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6ICcnXG4gICAgICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICAgICAgZW52LmJlZm9yZVNlbmQoZW52KTtcblxuICAgICAgICAgICAgdmFyIHhociA9IGVudi54aHI7XG5cbiAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gZW52KSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3AgaW4geGhyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHhocltwcm9wXSA9IGVudltwcm9wXTtcblxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgeGhyLm9wZW4oZW52Lm1ldGhvZC50b1VwcGVyQ2FzZSgpLCB1cmwpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBoZWFkZXIgaW4gZW52LmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXIsIGVudi5oZWFkZXJzW2hlYWRlcl0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvbih4aHIsICdsb2FkJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDAgfHwgeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCB8fCB4aHIuc3RhdHVzID09PSAzMDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh4aHIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChhc3NpZ24oRXJyb3IoeGhyLnN0YXR1c1RleHQpLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4aHI6IHhocixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogeGhyLnN0YXR1c1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb24oeGhyLCAnZXJyb3InLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZWplY3QoYXNzaWduKEVycm9yKCdOZXR3b3JrIEVycm9yJyksIHt4aHI6IHhocn0pKTsgfSk7XG4gICAgICAgICAgICBvbih4aHIsICd0aW1lb3V0JywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVqZWN0KGFzc2lnbihFcnJvcignTmV0d29yayBUaW1lb3V0JyksIHt4aHI6IHhocn0pKTsgfSk7XG5cbiAgICAgICAgICAgIHhoci5zZW5kKGVudi5kYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SW1hZ2Uoc3JjLCBzcmNzZXQsIHNpemVzKSB7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcblxuICAgICAgICAgICAgaW1nLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZShpbWcpOyB9O1xuXG4gICAgICAgICAgICBzaXplcyAmJiAoaW1nLnNpemVzID0gc2l6ZXMpO1xuICAgICAgICAgICAgc3Jjc2V0ICYmIChpbWcuc3Jjc2V0ID0gc3Jjc2V0KTtcbiAgICAgICAgICAgIGltZy5zcmMgPSBzcmM7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVhZHkoZm4pIHtcblxuICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2xvYWRpbmcnKSB7XG4gICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVuYmluZCA9IG9uKGRvY3VtZW50LCAnRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHVuYmluZCgpO1xuICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5kZXgoZWxlbWVudCwgcmVmKSB7XG4gICAgICAgIHJldHVybiByZWZcbiAgICAgICAgICAgID8gdG9Ob2RlcyhlbGVtZW50KS5pbmRleE9mKHRvTm9kZShyZWYpKVxuICAgICAgICAgICAgOiBjaGlsZHJlbihwYXJlbnQoZWxlbWVudCkpLmluZGV4T2YoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SW5kZXgoaSwgZWxlbWVudHMsIGN1cnJlbnQsIGZpbml0ZSkge1xuICAgICAgICBpZiAoIGN1cnJlbnQgPT09IHZvaWQgMCApIGN1cnJlbnQgPSAwO1xuICAgICAgICBpZiAoIGZpbml0ZSA9PT0gdm9pZCAwICkgZmluaXRlID0gZmFsc2U7XG5cblxuICAgICAgICBlbGVtZW50cyA9IHRvTm9kZXMoZWxlbWVudHMpO1xuXG4gICAgICAgIHZhciBsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgICAgaSA9IGlzTnVtZXJpYyhpKVxuICAgICAgICAgICAgPyB0b051bWJlcihpKVxuICAgICAgICAgICAgOiBpID09PSAnbmV4dCdcbiAgICAgICAgICAgICAgICA/IGN1cnJlbnQgKyAxXG4gICAgICAgICAgICAgICAgOiBpID09PSAncHJldmlvdXMnXG4gICAgICAgICAgICAgICAgICAgID8gY3VycmVudCAtIDFcbiAgICAgICAgICAgICAgICAgICAgOiBpbmRleChlbGVtZW50cywgaSk7XG5cbiAgICAgICAgaWYgKGZpbml0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNsYW1wKGksIDAsIGxlbmd0aCAtIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaSAlPSBsZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIGkgPCAwID8gaSArIGxlbmd0aCA6IGk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW1wdHkoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHRtbChwYXJlbnQsIGh0bWwpIHtcbiAgICAgICAgcGFyZW50ID0gJChwYXJlbnQpO1xuICAgICAgICByZXR1cm4gaXNVbmRlZmluZWQoaHRtbClcbiAgICAgICAgICAgID8gcGFyZW50LmlubmVySFRNTFxuICAgICAgICAgICAgOiBhcHBlbmQocGFyZW50Lmhhc0NoaWxkTm9kZXMoKSA/IGVtcHR5KHBhcmVudCkgOiBwYXJlbnQsIGh0bWwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBlbmQocGFyZW50LCBlbGVtZW50KSB7XG5cbiAgICAgICAgcGFyZW50ID0gJChwYXJlbnQpO1xuXG4gICAgICAgIGlmICghcGFyZW50Lmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGVuZChwYXJlbnQsIGVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluc2VydE5vZGVzKGVsZW1lbnQsIGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBwYXJlbnQuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIHBhcmVudC5maXJzdENoaWxkKTsgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBlbmQocGFyZW50LCBlbGVtZW50KSB7XG4gICAgICAgIHBhcmVudCA9ICQocGFyZW50KTtcbiAgICAgICAgcmV0dXJuIGluc2VydE5vZGVzKGVsZW1lbnQsIGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJlZm9yZShyZWYsIGVsZW1lbnQpIHtcbiAgICAgICAgcmVmID0gJChyZWYpO1xuICAgICAgICByZXR1cm4gaW5zZXJ0Tm9kZXMoZWxlbWVudCwgZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIHJlZi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtZW50LCByZWYpOyB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZnRlcihyZWYsIGVsZW1lbnQpIHtcbiAgICAgICAgcmVmID0gJChyZWYpO1xuICAgICAgICByZXR1cm4gaW5zZXJ0Tm9kZXMoZWxlbWVudCwgZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIHJlZi5uZXh0U2libGluZ1xuICAgICAgICAgICAgPyBiZWZvcmUocmVmLm5leHRTaWJsaW5nLCBlbGVtZW50KVxuICAgICAgICAgICAgOiBhcHBlbmQocmVmLnBhcmVudE5vZGUsIGVsZW1lbnQpOyB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zZXJ0Tm9kZXMoZWxlbWVudCwgZm4pIHtcbiAgICAgICAgZWxlbWVudCA9IGlzU3RyaW5nKGVsZW1lbnQpID8gZnJhZ21lbnQoZWxlbWVudCkgOiBlbGVtZW50O1xuICAgICAgICByZXR1cm4gZWxlbWVudFxuICAgICAgICAgICAgPyAnbGVuZ3RoJyBpbiBlbGVtZW50XG4gICAgICAgICAgICAgICAgPyB0b05vZGVzKGVsZW1lbnQpLm1hcChmbilcbiAgICAgICAgICAgICAgICA6IGZuKGVsZW1lbnQpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGVsZW1lbnQpIHtcbiAgICAgICAgdG9Ob2RlcyhlbGVtZW50KS5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSAmJiBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdyYXBBbGwoZWxlbWVudCwgc3RydWN0dXJlKSB7XG5cbiAgICAgICAgc3RydWN0dXJlID0gdG9Ob2RlKGJlZm9yZShlbGVtZW50LCBzdHJ1Y3R1cmUpKTtcblxuICAgICAgICB3aGlsZSAoc3RydWN0dXJlLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIHN0cnVjdHVyZSA9IHN0cnVjdHVyZS5maXJzdENoaWxkO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBwZW5kKHN0cnVjdHVyZSwgZWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIHN0cnVjdHVyZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3cmFwSW5uZXIoZWxlbWVudCwgc3RydWN0dXJlKSB7XG4gICAgICAgIHJldHVybiB0b05vZGVzKHRvTm9kZXMoZWxlbWVudCkubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50Lmhhc0NoaWxkTm9kZXMgPyB3cmFwQWxsKHRvTm9kZXMoZWxlbWVudC5jaGlsZE5vZGVzKSwgc3RydWN0dXJlKSA6IGFwcGVuZChlbGVtZW50LCBzdHJ1Y3R1cmUpOyB9XG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVud3JhcChlbGVtZW50KSB7XG4gICAgICAgIHRvTm9kZXMoZWxlbWVudClcbiAgICAgICAgICAgIC5tYXAocGFyZW50KVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBzZWxmKSB7IHJldHVybiBzZWxmLmluZGV4T2YodmFsdWUpID09PSBpbmRleDsgfSlcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBiZWZvcmUocGFyZW50LCBwYXJlbnQuY2hpbGROb2Rlcyk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlKHBhcmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgZnJhZ21lbnRSZSA9IC9eXFxzKjwoXFx3K3whKVtePl0qPi87XG4gICAgdmFyIHNpbmdsZVRhZ1JlID0gL148KFxcdyspXFxzKlxcLz8+KD86PFxcL1xcMT4pPyQvO1xuXG4gICAgZnVuY3Rpb24gZnJhZ21lbnQoaHRtbCkge1xuXG4gICAgICAgIHZhciBtYXRjaGVzID0gc2luZ2xlVGFnUmUuZXhlYyhodG1sKTtcbiAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG1hdGNoZXNbMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBpZiAoZnJhZ21lbnRSZS50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgICBjb250YWluZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBodG1sLnRyaW0oKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250YWluZXIudGV4dENvbnRlbnQgPSBodG1sO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5jaGlsZE5vZGVzLmxlbmd0aCA+IDEgPyB0b05vZGVzKGNvbnRhaW5lci5jaGlsZE5vZGVzKSA6IGNvbnRhaW5lci5maXJzdENoaWxkO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHkobm9kZSwgZm4pIHtcblxuICAgICAgICBpZiAoIWlzRWxlbWVudChub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm4obm9kZSk7XG4gICAgICAgIG5vZGUgPSBub2RlLmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICAgICAgdmFyIG5leHQgPSBub2RlLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgIGFwcGx5KG5vZGUsIGZuKTtcbiAgICAgICAgICAgIG5vZGUgPSBuZXh0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gIWlzU3RyaW5nKHNlbGVjdG9yKVxuICAgICAgICAgICAgPyB0b05vZGUoc2VsZWN0b3IpXG4gICAgICAgICAgICA6IGlzSHRtbChzZWxlY3RvcilcbiAgICAgICAgICAgICAgICA/IHRvTm9kZShmcmFnbWVudChzZWxlY3RvcikpXG4gICAgICAgICAgICAgICAgOiBmaW5kKHNlbGVjdG9yLCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkJChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gIWlzU3RyaW5nKHNlbGVjdG9yKVxuICAgICAgICAgICAgPyB0b05vZGVzKHNlbGVjdG9yKVxuICAgICAgICAgICAgOiBpc0h0bWwoc2VsZWN0b3IpXG4gICAgICAgICAgICAgICAgPyB0b05vZGVzKGZyYWdtZW50KHNlbGVjdG9yKSlcbiAgICAgICAgICAgICAgICA6IGZpbmRBbGwoc2VsZWN0b3IsIGNvbnRleHQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSHRtbChzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0clswXSA9PT0gJzwnIHx8IHN0ci5tYXRjaCgvXlxccyo8Lyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSA+IDAgKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gICAgICAgIGFwcGx5JDEoZWxlbWVudCwgYXJncywgJ2FkZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlICggbGVuLS0gPiAwICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgICAgICBhcHBseSQxKGVsZW1lbnQsIGFyZ3MsICdyZW1vdmUnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKGVsZW1lbnQsIGNscykge1xuICAgICAgICBhdHRyKGVsZW1lbnQsICdjbGFzcycsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gKHZhbHVlIHx8ICcnKS5yZXBsYWNlKG5ldyBSZWdFeHAoKFwiXFxcXGJcIiArIGNscyArIFwiXFxcXGJcIiksICdnJyksICcnKTsgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVwbGFjZUNsYXNzKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlICggbGVuLS0gPiAwICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgICAgICBhcmdzWzBdICYmIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGFyZ3NbMF0pO1xuICAgICAgICBhcmdzWzFdICYmIGFkZENsYXNzKGVsZW1lbnQsIGFyZ3NbMV0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0NsYXNzKGVsZW1lbnQsIGNscykge1xuICAgICAgICByZXR1cm4gY2xzICYmIHRvTm9kZXMoZWxlbWVudCkuc29tZShmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xzLnNwbGl0KCcgJylbMF0pOyB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVDbGFzcyhlbGVtZW50KSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZSAoIGxlbi0tID4gMCApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cblxuICAgICAgICBpZiAoIWFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhcmdzID0gZ2V0QXJncyQxKGFyZ3MpO1xuXG4gICAgICAgIHZhciBmb3JjZSA9ICFpc1N0cmluZyhsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiBbXTsgLy8gaW4gaU9TIDkuMyBmb3JjZSA9PT0gdW5kZWZpbmVkIGV2YWx1YXRlcyB0byBmYWxzZVxuXG4gICAgICAgIGFyZ3MgPSBhcmdzLmZpbHRlcihCb29sZWFuKTtcblxuICAgICAgICB0b05vZGVzKGVsZW1lbnQpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgdmFyIGNsYXNzTGlzdCA9IHJlZi5jbGFzc0xpc3Q7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHN1cHBvcnRzLkZvcmNlXG4gICAgICAgICAgICAgICAgICAgID8gY2xhc3NMaXN0LnRvZ2dsZS5hcHBseShjbGFzc0xpc3QsIFthcmdzW2ldXS5jb25jYXQoZm9yY2UpKVxuICAgICAgICAgICAgICAgICAgICA6IChjbGFzc0xpc3RbKCFpc1VuZGVmaW5lZChmb3JjZSkgPyBmb3JjZSA6ICFjbGFzc0xpc3QuY29udGFpbnMoYXJnc1tpXSkpID8gJ2FkZCcgOiAncmVtb3ZlJ10oYXJnc1tpXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5JDEoZWxlbWVudCwgYXJncywgZm4pIHtcbiAgICAgICAgYXJncyA9IGdldEFyZ3MkMShhcmdzKS5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICAgICAgYXJncy5sZW5ndGggJiYgdG9Ob2RlcyhlbGVtZW50KS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgIHZhciBjbGFzc0xpc3QgPSByZWYuY2xhc3NMaXN0O1xuXG4gICAgICAgICAgICBzdXBwb3J0cy5NdWx0aXBsZVxuICAgICAgICAgICAgICAgID8gY2xhc3NMaXN0W2ZuXS5hcHBseShjbGFzc0xpc3QsIGFyZ3MpXG4gICAgICAgICAgICAgICAgOiBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZXR1cm4gY2xhc3NMaXN0W2ZuXShjbHMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QXJncyQxKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3MucmVkdWNlKGZ1bmN0aW9uIChhcmdzLCBhcmcpIHsgcmV0dXJuIGFyZ3MuY29uY2F0LmNhbGwoYXJncywgaXNTdHJpbmcoYXJnKSAmJiBpbmNsdWRlcyhhcmcsICcgJykgPyBhcmcudHJpbSgpLnNwbGl0KCcgJykgOiBhcmcpOyB9XG4gICAgICAgICAgICAsIFtdKTtcbiAgICB9XG5cbiAgICAvLyBJRSAxMVxuICAgIHZhciBzdXBwb3J0cyA9IHtcblxuICAgICAgICBnZXQgTXVsdGlwbGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoJ19tdWx0aXBsZScpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBGb3JjZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldCgnX2ZvcmNlJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcblxuICAgICAgICAgICAgaWYgKCFoYXNPd24odGhpcywga2V5KSkge1xuICAgICAgICAgICAgICAgIHZhciByZWYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdfJyk7XG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzTGlzdCA9IHJlZi5jbGFzc0xpc3Q7XG4gICAgICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCgnYScsICdiJyk7XG4gICAgICAgICAgICAgICAgY2xhc3NMaXN0LnRvZ2dsZSgnYycsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tdWx0aXBsZSA9IGNsYXNzTGlzdC5jb250YWlucygnYicpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZvcmNlID0gIWNsYXNzTGlzdC5jb250YWlucygnYycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpc1trZXldO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIGNzc051bWJlciA9IHtcbiAgICAgICAgJ2FuaW1hdGlvbi1pdGVyYXRpb24tY291bnQnOiB0cnVlLFxuICAgICAgICAnY29sdW1uLWNvdW50JzogdHJ1ZSxcbiAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6IHRydWUsXG4gICAgICAgICdmbGV4LWdyb3cnOiB0cnVlLFxuICAgICAgICAnZmxleC1zaHJpbmsnOiB0cnVlLFxuICAgICAgICAnZm9udC13ZWlnaHQnOiB0cnVlLFxuICAgICAgICAnbGluZS1oZWlnaHQnOiB0cnVlLFxuICAgICAgICAnb3BhY2l0eSc6IHRydWUsXG4gICAgICAgICdvcmRlcic6IHRydWUsXG4gICAgICAgICdvcnBoYW5zJzogdHJ1ZSxcbiAgICAgICAgJ3N0cm9rZS1kYXNoYXJyYXknOiB0cnVlLFxuICAgICAgICAnc3Ryb2tlLWRhc2hvZmZzZXQnOiB0cnVlLFxuICAgICAgICAnd2lkb3dzJzogdHJ1ZSxcbiAgICAgICAgJ3otaW5kZXgnOiB0cnVlLFxuICAgICAgICAnem9vbSc6IHRydWVcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY3NzKGVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZSkge1xuXG4gICAgICAgIHJldHVybiB0b05vZGVzKGVsZW1lbnQpLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xuXG4gICAgICAgICAgICBpZiAoaXNTdHJpbmcocHJvcGVydHkpKSB7XG5cbiAgICAgICAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BOYW1lKHByb3BlcnR5KTtcblxuICAgICAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFN0eWxlKGVsZW1lbnQsIHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF2YWx1ZSAmJiAhaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcGVydHldID0gaXNOdW1lcmljKHZhbHVlKSAmJiAhY3NzTnVtYmVyW3Byb3BlcnR5XSA/ICh2YWx1ZSArIFwicHhcIikgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShwcm9wZXJ0eSkpIHtcblxuICAgICAgICAgICAgICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHkucmVkdWNlKGZ1bmN0aW9uIChwcm9wcywgcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcHNbcHJvcGVydHldID0gc3R5bGVzW3Byb3BOYW1lKHByb3BlcnR5KV07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcztcbiAgICAgICAgICAgICAgICB9LCB7fSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgZWFjaChwcm9wZXJ0eSwgZnVuY3Rpb24gKHZhbHVlLCBwcm9wZXJ0eSkgeyByZXR1cm4gY3NzKGVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZSk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcblxuICAgICAgICB9KVswXTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFN0eWxlcyhlbGVtZW50LCBwc2V1ZG9FbHQpIHtcbiAgICAgICAgZWxlbWVudCA9IHRvTm9kZShlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIHBzZXVkb0VsdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3R5bGUoZWxlbWVudCwgcHJvcGVydHksIHBzZXVkb0VsdCkge1xuICAgICAgICByZXR1cm4gZ2V0U3R5bGVzKGVsZW1lbnQsIHBzZXVkb0VsdClbcHJvcGVydHldO1xuICAgIH1cblxuICAgIHZhciB2YXJzID0ge307XG5cbiAgICBmdW5jdGlvbiBnZXRDc3NWYXIobmFtZSkge1xuXG4gICAgICAgIHZhciBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgICBpZiAoIWlzSUUpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRTdHlsZXMoZG9jRWwpLmdldFByb3BlcnR5VmFsdWUoKFwiLS11ay1cIiArIG5hbWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghKG5hbWUgaW4gdmFycykpIHtcblxuICAgICAgICAgICAgLyogdXNhZ2UgaW4gY3NzOiAudWstbmFtZTpiZWZvcmUgeyBjb250ZW50OlwieHl6XCIgfSAqL1xuXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGFwcGVuZChkb2NFbCwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuXG4gICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCAoXCJ1ay1cIiArIG5hbWUpKTtcblxuICAgICAgICAgICAgdmFyc1tuYW1lXSA9IGdldFN0eWxlKGVsZW1lbnQsICdjb250ZW50JywgJzpiZWZvcmUnKS5yZXBsYWNlKC9eW1wiJ10oLiopW1wiJ10kLywgJyQxJyk7XG5cbiAgICAgICAgICAgIHJlbW92ZShlbGVtZW50KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhcnNbbmFtZV07XG5cbiAgICB9XG5cbiAgICB2YXIgY3NzUHJvcHMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIHByb3BOYW1lKG5hbWUpIHtcblxuICAgICAgICB2YXIgcmV0ID0gY3NzUHJvcHNbbmFtZV07XG4gICAgICAgIGlmICghcmV0KSB7XG4gICAgICAgICAgICByZXQgPSBjc3NQcm9wc1tuYW1lXSA9IHZlbmRvclByb3BOYW1lKG5hbWUpIHx8IG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICB2YXIgY3NzUHJlZml4ZXMgPSBbJ3dlYmtpdCcsICdtb3onLCAnbXMnXTtcblxuICAgIGZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKG5hbWUpIHtcblxuICAgICAgICBuYW1lID0gaHlwaGVuYXRlKG5hbWUpO1xuXG4gICAgICAgIHZhciByZWYgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBzdHlsZSA9IHJlZi5zdHlsZTtcblxuICAgICAgICBpZiAobmFtZSBpbiBzdHlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IGNzc1ByZWZpeGVzLmxlbmd0aCwgcHJlZml4ZWROYW1lO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIHByZWZpeGVkTmFtZSA9IFwiLVwiICsgKGNzc1ByZWZpeGVzW2ldKSArIFwiLVwiICsgbmFtZTtcbiAgICAgICAgICAgIGlmIChwcmVmaXhlZE5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJlZml4ZWROYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNpdGlvbihlbGVtZW50LCBwcm9wcywgZHVyYXRpb24sIHRpbWluZykge1xuICAgICAgICBpZiAoIGR1cmF0aW9uID09PSB2b2lkIDAgKSBkdXJhdGlvbiA9IDQwMDtcbiAgICAgICAgaWYgKCB0aW1pbmcgPT09IHZvaWQgMCApIHRpbWluZyA9ICdsaW5lYXInO1xuXG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHRvTm9kZXMoZWxlbWVudCkubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIHByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNzcyhlbGVtZW50LCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzKGVsZW1lbnQsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJpZ2dlcihlbGVtZW50LCAndHJhbnNpdGlvbmVuZCcpOyB9LCBkdXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICBvbmNlKGVsZW1lbnQsICd0cmFuc2l0aW9uZW5kIHRyYW5zaXRpb25jYW5jZWxlZCcsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSByZWYudHlwZTtcblxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LCAndWstdHJhbnNpdGlvbicpO1xuICAgICAgICAgICAgICAgICAgICBjc3MoZWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvblByb3BlcnR5OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246ICcnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0eXBlID09PSAndHJhbnNpdGlvbmNhbmNlbGVkJyA/IHJlamVjdCgpIDogcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0sIHtzZWxmOiB0cnVlfSk7XG5cbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCAndWstdHJhbnNpdGlvbicpO1xuICAgICAgICAgICAgICAgIGNzcyhlbGVtZW50LCBhc3NpZ24oe1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uUHJvcGVydHk6IE9iamVjdC5rZXlzKHByb3BzKS5tYXAocHJvcE5hbWUpLmpvaW4oJywnKSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiAoZHVyYXRpb24gKyBcIm1zXCIpLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246IHRpbWluZ1xuICAgICAgICAgICAgICAgIH0sIHByb3BzKSk7XG5cbiAgICAgICAgICAgIH0pOyB9XG4gICAgICAgICkpO1xuXG4gICAgfVxuXG4gICAgdmFyIFRyYW5zaXRpb24gPSB7XG5cbiAgICAgICAgc3RhcnQ6IHRyYW5zaXRpb24sXG5cbiAgICAgICAgc3RvcDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgdHJpZ2dlcihlbGVtZW50LCAndHJhbnNpdGlvbmVuZCcpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNhbmNlbDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgdHJpZ2dlcihlbGVtZW50LCAndHJhbnNpdGlvbmNhbmNlbGVkJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5Qcm9ncmVzczogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhc0NsYXNzKGVsZW1lbnQsICd1ay10cmFuc2l0aW9uJyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgYW5pbWF0aW9uUHJlZml4ID0gJ3VrLWFuaW1hdGlvbi0nO1xuXG4gICAgZnVuY3Rpb24gYW5pbWF0ZShlbGVtZW50LCBhbmltYXRpb24sIGR1cmF0aW9uLCBvcmlnaW4sIG91dCkge1xuICAgICAgICBpZiAoIGR1cmF0aW9uID09PSB2b2lkIDAgKSBkdXJhdGlvbiA9IDIwMDtcblxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbCh0b05vZGVzKGVsZW1lbnQpLm1hcChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgcmVzZXQoKTtcblxuICAgICAgICAgICAgICAgIG9uY2UoZWxlbWVudCwgJ2FuaW1hdGlvbmVuZCBhbmltYXRpb25jYW5jZWwnLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gcmVmLnR5cGU7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2FuaW1hdGlvbmNhbmNlbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzZXQoKTtcblxuICAgICAgICAgICAgICAgIH0sIHtzZWxmOiB0cnVlfSk7XG5cbiAgICAgICAgICAgICAgICBjc3MoZWxlbWVudCwgJ2FuaW1hdGlvbkR1cmF0aW9uJywgKGR1cmF0aW9uICsgXCJtc1wiKSk7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgYW5pbWF0aW9uLCBhbmltYXRpb25QcmVmaXggKyAob3V0ID8gJ2xlYXZlJyA6ICdlbnRlcicpKTtcblxuICAgICAgICAgICAgICAgIGlmIChzdGFydHNXaXRoKGFuaW1hdGlvbiwgYW5pbWF0aW9uUHJlZml4KSkge1xuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCBvcmlnaW4gJiYgKFwidWstdHJhbnNmb3JtLW9yaWdpbi1cIiArIG9yaWdpbiksIG91dCAmJiAoYW5pbWF0aW9uUHJlZml4ICsgXCJyZXZlcnNlXCIpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKGVsZW1lbnQsICdhbmltYXRpb25EdXJhdGlvbicsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NlcyhlbGVtZW50LCAoYW5pbWF0aW9uUHJlZml4ICsgXCJcXFxcUypcIikpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7IH1cbiAgICAgICAgKSk7XG5cbiAgICB9XG5cbiAgICB2YXIgaW5Qcm9ncmVzcyA9IG5ldyBSZWdFeHAoKGFuaW1hdGlvblByZWZpeCArIFwiKGVudGVyfGxlYXZlKVwiKSk7XG4gICAgdmFyIEFuaW1hdGlvbiA9IHtcblxuICAgICAgICBpbjogZnVuY3Rpb24oZWxlbWVudCwgYW5pbWF0aW9uLCBkdXJhdGlvbiwgb3JpZ2luKSB7XG4gICAgICAgICAgICByZXR1cm4gYW5pbWF0ZShlbGVtZW50LCBhbmltYXRpb24sIGR1cmF0aW9uLCBvcmlnaW4sIGZhbHNlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBvdXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgZHVyYXRpb24sIG9yaWdpbikge1xuICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGUoZWxlbWVudCwgYW5pbWF0aW9uLCBkdXJhdGlvbiwgb3JpZ2luLCB0cnVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpblByb2dyZXNzOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5Qcm9ncmVzcy50ZXN0KGF0dHIoZWxlbWVudCwgJ2NsYXNzJykpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNhbmNlbDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgdHJpZ2dlcihlbGVtZW50LCAnYW5pbWF0aW9uY2FuY2VsJyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgZGlycyA9IHtcbiAgICAgICAgd2lkdGg6IFsneCcsICdsZWZ0JywgJ3JpZ2h0J10sXG4gICAgICAgIGhlaWdodDogWyd5JywgJ3RvcCcsICdib3R0b20nXVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb3NpdGlvbkF0KGVsZW1lbnQsIHRhcmdldCwgZWxBdHRhY2gsIHRhcmdldEF0dGFjaCwgZWxPZmZzZXQsIHRhcmdldE9mZnNldCwgZmxpcCwgYm91bmRhcnkpIHtcblxuICAgICAgICBlbEF0dGFjaCA9IGdldFBvcyhlbEF0dGFjaCk7XG4gICAgICAgIHRhcmdldEF0dGFjaCA9IGdldFBvcyh0YXJnZXRBdHRhY2gpO1xuXG4gICAgICAgIHZhciBmbGlwcGVkID0ge2VsZW1lbnQ6IGVsQXR0YWNoLCB0YXJnZXQ6IHRhcmdldEF0dGFjaH07XG5cbiAgICAgICAgaWYgKCFlbGVtZW50IHx8ICF0YXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBmbGlwcGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRpbSA9IGdldERpbWVuc2lvbnMoZWxlbWVudCk7XG4gICAgICAgIHZhciB0YXJnZXREaW0gPSBnZXREaW1lbnNpb25zKHRhcmdldCk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHRhcmdldERpbTtcblxuICAgICAgICBtb3ZlVG8ocG9zaXRpb24sIGVsQXR0YWNoLCBkaW0sIC0xKTtcbiAgICAgICAgbW92ZVRvKHBvc2l0aW9uLCB0YXJnZXRBdHRhY2gsIHRhcmdldERpbSwgMSk7XG5cbiAgICAgICAgZWxPZmZzZXQgPSBnZXRPZmZzZXRzKGVsT2Zmc2V0LCBkaW0ud2lkdGgsIGRpbS5oZWlnaHQpO1xuICAgICAgICB0YXJnZXRPZmZzZXQgPSBnZXRPZmZzZXRzKHRhcmdldE9mZnNldCwgdGFyZ2V0RGltLndpZHRoLCB0YXJnZXREaW0uaGVpZ2h0KTtcblxuICAgICAgICBlbE9mZnNldFsneCddICs9IHRhcmdldE9mZnNldFsneCddO1xuICAgICAgICBlbE9mZnNldFsneSddICs9IHRhcmdldE9mZnNldFsneSddO1xuXG4gICAgICAgIHBvc2l0aW9uLmxlZnQgKz0gZWxPZmZzZXRbJ3gnXTtcbiAgICAgICAgcG9zaXRpb24udG9wICs9IGVsT2Zmc2V0Wyd5J107XG5cbiAgICAgICAgaWYgKGZsaXApIHtcblxuICAgICAgICAgICAgdmFyIGJvdW5kYXJpZXMgPSBbZ2V0RGltZW5zaW9ucyh0b1dpbmRvdyhlbGVtZW50KSldO1xuXG4gICAgICAgICAgICBpZiAoYm91bmRhcnkpIHtcbiAgICAgICAgICAgICAgICBib3VuZGFyaWVzLnVuc2hpZnQoZ2V0RGltZW5zaW9ucyhib3VuZGFyeSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlYWNoKGRpcnMsIGZ1bmN0aW9uIChyZWYsIHByb3ApIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlyID0gcmVmWzBdO1xuICAgICAgICAgICAgICAgIHZhciBhbGlnbiA9IHJlZlsxXTtcbiAgICAgICAgICAgICAgICB2YXIgYWxpZ25GbGlwID0gcmVmWzJdO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAoIShmbGlwID09PSB0cnVlIHx8IGluY2x1ZGVzKGZsaXAsIGRpcikpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBib3VuZGFyaWVzLnNvbWUoZnVuY3Rpb24gKGJvdW5kYXJ5KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1PZmZzZXQgPSBlbEF0dGFjaFtkaXJdID09PSBhbGlnblxuICAgICAgICAgICAgICAgICAgICAgICAgPyAtZGltW3Byb3BdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGVsQXR0YWNoW2Rpcl0gPT09IGFsaWduRmxpcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZGltW3Byb3BdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRPZmZzZXQgPSB0YXJnZXRBdHRhY2hbZGlyXSA9PT0gYWxpZ25cbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGFyZ2V0RGltW3Byb3BdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRhcmdldEF0dGFjaFtkaXJdID09PSBhbGlnbkZsaXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IC10YXJnZXREaW1bcHJvcF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uW2FsaWduXSA8IGJvdW5kYXJ5W2FsaWduXSB8fCBwb3NpdGlvblthbGlnbl0gKyBkaW1bcHJvcF0gPiBib3VuZGFyeVthbGlnbkZsaXBdKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjZW50ZXJPZmZzZXQgPSBkaW1bcHJvcF0gLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNlbnRlclRhcmdldE9mZnNldCA9IHRhcmdldEF0dGFjaFtkaXJdID09PSAnY2VudGVyJyA/IC10YXJnZXREaW1bcHJvcF0gLyAyIDogMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsQXR0YWNoW2Rpcl0gPT09ICdjZW50ZXInICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBseShjZW50ZXJPZmZzZXQsIGNlbnRlclRhcmdldE9mZnNldClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBhcHBseSgtY2VudGVyT2Zmc2V0LCAtY2VudGVyVGFyZ2V0T2Zmc2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB8fCBhcHBseShlbGVtT2Zmc2V0LCB0YXJnZXRPZmZzZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBhcHBseShlbGVtT2Zmc2V0LCB0YXJnZXRPZmZzZXQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1ZhbCA9IHBvc2l0aW9uW2FsaWduXSArIGVsZW1PZmZzZXQgKyB0YXJnZXRPZmZzZXQgLSBlbE9mZnNldFtkaXJdICogMjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbCA+PSBib3VuZGFyeVthbGlnbl0gJiYgbmV3VmFsICsgZGltW3Byb3BdIDw9IGJvdW5kYXJ5W2FsaWduRmxpcF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblthbGlnbl0gPSBuZXdWYWw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ2VsZW1lbnQnLCAndGFyZ2V0J10uZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxpcHBlZFtlbF1bZGlyXSA9ICFlbGVtT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZsaXBwZWRbZWxdW2Rpcl1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZmxpcHBlZFtlbF1bZGlyXSA9PT0gZGlyc1twcm9wXVsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZGlyc1twcm9wXVsyXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZGlyc1twcm9wXVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9mZnNldChlbGVtZW50LCBwb3NpdGlvbik7XG5cbiAgICAgICAgcmV0dXJuIGZsaXBwZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb2Zmc2V0KGVsZW1lbnQsIGNvb3JkaW5hdGVzKSB7XG5cbiAgICAgICAgaWYgKCFjb29yZGluYXRlcykge1xuICAgICAgICAgICAgcmV0dXJuIGdldERpbWVuc2lvbnMoZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3VycmVudE9mZnNldCA9IG9mZnNldChlbGVtZW50KTtcbiAgICAgICAgdmFyIHBvcyA9IGNzcyhlbGVtZW50LCAncG9zaXRpb24nKTtcblxuICAgICAgICBbJ2xlZnQnLCAndG9wJ10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgaWYgKHByb3AgaW4gY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBjc3MoZWxlbWVudCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgY3NzKGVsZW1lbnQsIHByb3AsIGNvb3JkaW5hdGVzW3Byb3BdIC0gY3VycmVudE9mZnNldFtwcm9wXVxuICAgICAgICAgICAgICAgICAgICArIHRvRmxvYXQocG9zID09PSAnYWJzb2x1dGUnICYmIHZhbHVlID09PSAnYXV0bydcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcG9zaXRpb24oZWxlbWVudClbcHJvcF1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWUpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGltZW5zaW9ucyhlbGVtZW50KSB7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVmID0gdG9XaW5kb3coZWxlbWVudCk7XG4gICAgICAgIHZhciB0b3AgPSByZWYucGFnZVlPZmZzZXQ7XG4gICAgICAgIHZhciBsZWZ0ID0gcmVmLnBhZ2VYT2Zmc2V0O1xuXG4gICAgICAgIGlmIChpc1dpbmRvdyhlbGVtZW50KSkge1xuXG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gZWxlbWVudC5pbm5lckhlaWdodDtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IGVsZW1lbnQuaW5uZXJXaWR0aDtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICBib3R0b206IHRvcCArIGhlaWdodCxcbiAgICAgICAgICAgICAgICByaWdodDogbGVmdCArIHdpZHRoXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0eWxlLCBoaWRkZW47XG5cbiAgICAgICAgaWYgKCFpc1Zpc2libGUoZWxlbWVudCkgJiYgY3NzKGVsZW1lbnQsICdkaXNwbGF5JykgPT09ICdub25lJykge1xuXG4gICAgICAgICAgICBzdHlsZSA9IGF0dHIoZWxlbWVudCwgJ3N0eWxlJyk7XG4gICAgICAgICAgICBoaWRkZW4gPSBhdHRyKGVsZW1lbnQsICdoaWRkZW4nKTtcblxuICAgICAgICAgICAgYXR0cihlbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgc3R5bGU6ICgoc3R5bGUgfHwgJycpICsgXCI7ZGlzcGxheTpibG9jayAhaW1wb3J0YW50O1wiKSxcbiAgICAgICAgICAgICAgICBoaWRkZW46IG51bGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudCA9IHRvTm9kZShlbGVtZW50KTtcblxuICAgICAgICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChzdHlsZSkpIHtcbiAgICAgICAgICAgIGF0dHIoZWxlbWVudCwge3N0eWxlOiBzdHlsZSwgaGlkZGVuOiBoaWRkZW59KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgICAgICAgICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgICAgICAgICB0b3A6IHJlY3QudG9wICsgdG9wLFxuICAgICAgICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgbGVmdCxcbiAgICAgICAgICAgIGJvdHRvbTogcmVjdC5ib3R0b20gKyB0b3AsXG4gICAgICAgICAgICByaWdodDogcmVjdC5yaWdodCArIGxlZnRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3NpdGlvbihlbGVtZW50LCBwYXJlbnQpIHtcblxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgfHwgdG9Ob2RlKGVsZW1lbnQpLm9mZnNldFBhcmVudCB8fCB0b1dpbmRvdyhlbGVtZW50KS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICAgICAgdmFyIGVsZW1lbnRPZmZzZXQgPSBvZmZzZXQoZWxlbWVudCk7XG4gICAgICAgIHZhciBwYXJlbnRPZmZzZXQgPSBvZmZzZXQocGFyZW50KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9wOiBlbGVtZW50T2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSB0b0Zsb2F0KGNzcyhwYXJlbnQsICdib3JkZXJUb3BXaWR0aCcpKSxcbiAgICAgICAgICAgIGxlZnQ6IGVsZW1lbnRPZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0gdG9GbG9hdChjc3MocGFyZW50LCAnYm9yZGVyTGVmdFdpZHRoJykpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb2Zmc2V0UG9zaXRpb24oZWxlbWVudCkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gWzAsIDBdO1xuXG4gICAgICAgIGVsZW1lbnQgPSB0b05vZGUoZWxlbWVudCk7XG5cbiAgICAgICAgZG8ge1xuXG4gICAgICAgICAgICBvZmZzZXRbMF0gKz0gZWxlbWVudC5vZmZzZXRUb3A7XG4gICAgICAgICAgICBvZmZzZXRbMV0gKz0gZWxlbWVudC5vZmZzZXRMZWZ0O1xuXG4gICAgICAgICAgICBpZiAoY3NzKGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdpbiA9IHRvV2luZG93KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIG9mZnNldFswXSArPSB3aW4ucGFnZVlPZmZzZXQ7XG4gICAgICAgICAgICAgICAgb2Zmc2V0WzFdICs9IHdpbi5wYWdlWE9mZnNldDtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gd2hpbGUgKChlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQpKTtcblxuICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH1cblxuICAgIHZhciBoZWlnaHQgPSBkaW1lbnNpb24oJ2hlaWdodCcpO1xuICAgIHZhciB3aWR0aCA9IGRpbWVuc2lvbignd2lkdGgnKTtcblxuICAgIGZ1bmN0aW9uIGRpbWVuc2lvbihwcm9wKSB7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IHVjZmlyc3QocHJvcCk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWUpIHtcblxuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzV2luZG93KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50WyhcImlubmVyXCIgKyBwcm9wTmFtZSldO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc0RvY3VtZW50KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkb2MgPSBlbGVtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KGRvY1soXCJvZmZzZXRcIiArIHByb3BOYW1lKV0sIGRvY1soXCJzY3JvbGxcIiArIHByb3BOYW1lKV0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSB0b05vZGUoZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGNzcyhlbGVtZW50LCBwcm9wKTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlID09PSAnYXV0bycgPyBlbGVtZW50WyhcIm9mZnNldFwiICsgcHJvcE5hbWUpXSA6IHRvRmxvYXQodmFsdWUpIHx8IDA7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgLSBib3hNb2RlbEFkanVzdChlbGVtZW50LCBwcm9wKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIGNzcyhlbGVtZW50LCBwcm9wLCAhdmFsdWUgJiYgdmFsdWUgIT09IDBcbiAgICAgICAgICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgICAgICAgICA6ICt2YWx1ZSArIGJveE1vZGVsQWRqdXN0KGVsZW1lbnQsIHByb3ApICsgJ3B4J1xuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0KGVsZW1lbnQsIHByb3AsIHNpemluZykge1xuICAgICAgICBpZiAoIHNpemluZyA9PT0gdm9pZCAwICkgc2l6aW5nID0gJ2JvcmRlci1ib3gnO1xuXG4gICAgICAgIHJldHVybiBjc3MoZWxlbWVudCwgJ2JveFNpemluZycpID09PSBzaXppbmdcbiAgICAgICAgICAgID8gZGlyc1twcm9wXS5zbGljZSgxKS5tYXAodWNmaXJzdCkucmVkdWNlKGZ1bmN0aW9uICh2YWx1ZSwgcHJvcCkgeyByZXR1cm4gdmFsdWVcbiAgICAgICAgICAgICAgICArIHRvRmxvYXQoY3NzKGVsZW1lbnQsIChcInBhZGRpbmdcIiArIHByb3ApKSlcbiAgICAgICAgICAgICAgICArIHRvRmxvYXQoY3NzKGVsZW1lbnQsIChcImJvcmRlclwiICsgcHJvcCArIFwiV2lkdGhcIikpKTsgfVxuICAgICAgICAgICAgICAgICwgMClcbiAgICAgICAgICAgIDogMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlVG8ocG9zaXRpb24sIGF0dGFjaCwgZGltLCBmYWN0b3IpIHtcbiAgICAgICAgZWFjaChkaXJzLCBmdW5jdGlvbiAocmVmLCBwcm9wKSB7XG4gICAgICAgICAgICB2YXIgZGlyID0gcmVmWzBdO1xuICAgICAgICAgICAgdmFyIGFsaWduID0gcmVmWzFdO1xuICAgICAgICAgICAgdmFyIGFsaWduRmxpcCA9IHJlZlsyXTtcblxuICAgICAgICAgICAgaWYgKGF0dGFjaFtkaXJdID09PSBhbGlnbkZsaXApIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblthbGlnbl0gKz0gZGltW3Byb3BdICogZmFjdG9yO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhdHRhY2hbZGlyXSA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblthbGlnbl0gKz0gZGltW3Byb3BdICogZmFjdG9yIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UG9zKHBvcykge1xuXG4gICAgICAgIHZhciB4ID0gL2xlZnR8Y2VudGVyfHJpZ2h0LztcbiAgICAgICAgdmFyIHkgPSAvdG9wfGNlbnRlcnxib3R0b20vO1xuXG4gICAgICAgIHBvcyA9IChwb3MgfHwgJycpLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgaWYgKHBvcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHBvcyA9IHgudGVzdChwb3NbMF0pXG4gICAgICAgICAgICAgICAgPyBwb3MuY29uY2F0KCdjZW50ZXInKVxuICAgICAgICAgICAgICAgIDogeS50ZXN0KHBvc1swXSlcbiAgICAgICAgICAgICAgICAgICAgPyBbJ2NlbnRlciddLmNvbmNhdChwb3MpXG4gICAgICAgICAgICAgICAgICAgIDogWydjZW50ZXInLCAnY2VudGVyJ107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeC50ZXN0KHBvc1swXSkgPyBwb3NbMF0gOiAnY2VudGVyJyxcbiAgICAgICAgICAgIHk6IHkudGVzdChwb3NbMV0pID8gcG9zWzFdIDogJ2NlbnRlcidcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRPZmZzZXRzKG9mZnNldHMsIHdpZHRoLCBoZWlnaHQpIHtcblxuICAgICAgICB2YXIgcmVmID0gKG9mZnNldHMgfHwgJycpLnNwbGl0KCcgJyk7XG4gICAgICAgIHZhciB4ID0gcmVmWzBdO1xuICAgICAgICB2YXIgeSA9IHJlZlsxXTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCA/IHRvRmxvYXQoeCkgKiAoZW5kc1dpdGgoeCwgJyUnKSA/IHdpZHRoIC8gMTAwIDogMSkgOiAwLFxuICAgICAgICAgICAgeTogeSA/IHRvRmxvYXQoeSkgKiAoZW5kc1dpdGgoeSwgJyUnKSA/IGhlaWdodCAvIDEwMCA6IDEpIDogMFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZsaXBQb3NpdGlvbihwb3MpIHtcbiAgICAgICAgc3dpdGNoIChwb3MpIHtcbiAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiAncmlnaHQnO1xuICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnbGVmdCc7XG4gICAgICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnYm90dG9tJztcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICd0b3AnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9QeCh2YWx1ZSwgcHJvcGVydHksIGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCBwcm9wZXJ0eSA9PT0gdm9pZCAwICkgcHJvcGVydHkgPSAnd2lkdGgnO1xuICAgICAgICBpZiAoIGVsZW1lbnQgPT09IHZvaWQgMCApIGVsZW1lbnQgPSB3aW5kb3c7XG5cbiAgICAgICAgcmV0dXJuIGlzTnVtZXJpYyh2YWx1ZSlcbiAgICAgICAgICAgID8gK3ZhbHVlXG4gICAgICAgICAgICA6IGVuZHNXaXRoKHZhbHVlLCAndmgnKVxuICAgICAgICAgICAgICAgID8gcGVyY2VudChoZWlnaHQodG9XaW5kb3coZWxlbWVudCkpLCB2YWx1ZSlcbiAgICAgICAgICAgICAgICA6IGVuZHNXaXRoKHZhbHVlLCAndncnKVxuICAgICAgICAgICAgICAgICAgICA/IHBlcmNlbnQod2lkdGgodG9XaW5kb3coZWxlbWVudCkpLCB2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgOiBlbmRzV2l0aCh2YWx1ZSwgJyUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBwZXJjZW50KGdldERpbWVuc2lvbnMoZWxlbWVudClbcHJvcGVydHldLCB2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdG9GbG9hdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVyY2VudChiYXNlLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYmFzZSAqIHRvRmxvYXQodmFsdWUpIC8gMTAwO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgIEJhc2VkIG9uOlxuICAgICAgICBDb3B5cmlnaHQgKGMpIDIwMTYgV2lsc29uIFBhZ2Ugd2lsc29ucGFnZUBtZS5jb21cbiAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL3dpbHNvbnBhZ2UvZmFzdGRvbVxuICAgICovXG5cbiAgICB2YXIgZmFzdGRvbSA9IHtcblxuICAgICAgICByZWFkczogW10sXG4gICAgICAgIHdyaXRlczogW10sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24odGFzaykge1xuICAgICAgICAgICAgdGhpcy5yZWFkcy5wdXNoKHRhc2spO1xuICAgICAgICAgICAgc2NoZWR1bGVGbHVzaCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRhc2s7XG4gICAgICAgIH0sXG5cbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHRhc2spIHtcbiAgICAgICAgICAgIHRoaXMud3JpdGVzLnB1c2godGFzayk7XG4gICAgICAgICAgICBzY2hlZHVsZUZsdXNoKCk7XG4gICAgICAgICAgICByZXR1cm4gdGFzaztcbiAgICAgICAgfSxcblxuICAgICAgICBjbGVhcjogZnVuY3Rpb24odGFzaykge1xuICAgICAgICAgICAgcmV0dXJuIHJlbW92ZSQxKHRoaXMucmVhZHMsIHRhc2spIHx8IHJlbW92ZSQxKHRoaXMud3JpdGVzLCB0YXNrKTtcbiAgICAgICAgfSxcblxuICAgICAgICBmbHVzaDogZmx1c2hcblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBmbHVzaChyZWN1cnNpb24pIHtcbiAgICAgICAgaWYgKCByZWN1cnNpb24gPT09IHZvaWQgMCApIHJlY3Vyc2lvbiA9IDE7XG5cbiAgICAgICAgcnVuVGFza3MoZmFzdGRvbS5yZWFkcyk7XG4gICAgICAgIHJ1blRhc2tzKGZhc3Rkb20ud3JpdGVzLnNwbGljZSgwLCBmYXN0ZG9tLndyaXRlcy5sZW5ndGgpKTtcblxuICAgICAgICBmYXN0ZG9tLnNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChmYXN0ZG9tLnJlYWRzLmxlbmd0aCB8fCBmYXN0ZG9tLndyaXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlRmx1c2gocmVjdXJzaW9uICsgMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgUkVDVVJTSU9OX0xJTUlUID0gNTtcbiAgICBmdW5jdGlvbiBzY2hlZHVsZUZsdXNoKHJlY3Vyc2lvbikge1xuICAgICAgICBpZiAoIWZhc3Rkb20uc2NoZWR1bGVkKSB7XG4gICAgICAgICAgICBmYXN0ZG9tLnNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAocmVjdXJzaW9uID4gUkVDVVJTSU9OX0xJTUlUKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXhpbXVtIHJlY3Vyc2lvbiBsaW1pdCByZWFjaGVkLicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZWN1cnNpb24pIHtcbiAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZsdXNoKHJlY3Vyc2lvbik7IH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgeyByZXR1cm4gZmx1c2goKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5UYXNrcyh0YXNrcykge1xuICAgICAgICB2YXIgdGFzaztcbiAgICAgICAgd2hpbGUgKCh0YXNrID0gdGFza3Muc2hpZnQoKSkpIHtcbiAgICAgICAgICAgIHRhc2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZSQxKGFycmF5LCBpdGVtKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YoaXRlbSk7XG4gICAgICAgIHJldHVybiAhIX5pbmRleCAmJiAhIWFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTW91c2VUcmFja2VyKCkge31cblxuICAgIE1vdXNlVHJhY2tlci5wcm90b3R5cGUgPSB7XG5cbiAgICAgICAgcG9zaXRpb25zOiBbXSxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25zID0gW107XG5cbiAgICAgICAgICAgIHZhciBwb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMudW5iaW5kID0gb24oZG9jdW1lbnQsICdtb3VzZW1vdmUnLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gcG9zaXRpb24gPSBnZXRFdmVudFBvcyhlKTsgfSk7XG4gICAgICAgICAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcyQxLnBvc2l0aW9ucy5wdXNoKHBvc2l0aW9uKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzJDEucG9zaXRpb25zLmxlbmd0aCA+IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcyQxLnBvc2l0aW9ucy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDUwKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZCAmJiB0aGlzLnVuYmluZCgpO1xuICAgICAgICAgICAgdGhpcy5pbnRlcnZhbCAmJiBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1vdmVzVG86IGZ1bmN0aW9uKHRhcmdldCkge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wb3NpdGlvbnMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHAgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB2YXIgbGVmdCA9IHAubGVmdDtcbiAgICAgICAgICAgIHZhciByaWdodCA9IHAucmlnaHQ7XG4gICAgICAgICAgICB2YXIgdG9wID0gcC50b3A7XG4gICAgICAgICAgICB2YXIgYm90dG9tID0gcC5ib3R0b207XG5cbiAgICAgICAgICAgIHZhciByZWYgPSB0aGlzLnBvc2l0aW9ucztcbiAgICAgICAgICAgIHZhciBwcmV2UG9zaXRpb24gPSByZWZbMF07XG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBsYXN0KHRoaXMucG9zaXRpb25zKTtcbiAgICAgICAgICAgIHZhciBwYXRoID0gW3ByZXZQb3NpdGlvbiwgcG9zaXRpb25dO1xuXG4gICAgICAgICAgICBpZiAocG9pbnRJblJlY3QocG9zaXRpb24sIHApKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZGlhZ29uYWxzID0gW1t7eDogbGVmdCwgeTogdG9wfSwge3g6IHJpZ2h0LCB5OiBib3R0b219XSwgW3t4OiBsZWZ0LCB5OiBib3R0b219LCB7eDogcmlnaHQsIHk6IHRvcH1dXTtcblxuICAgICAgICAgICAgcmV0dXJuIGRpYWdvbmFscy5zb21lKGZ1bmN0aW9uIChkaWFnb25hbCkge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3QocGF0aCwgZGlhZ29uYWwpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb24gJiYgcG9pbnRJblJlY3QoaW50ZXJzZWN0aW9uLCBwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgLy8gSW5zcGlyZWQgYnkgaHR0cDovL3BhdWxib3Vya2UubmV0L2dlb21ldHJ5L3BvaW50bGluZXBsYW5lL1xuICAgIGZ1bmN0aW9uIGludGVyc2VjdChyZWYsIHJlZiQxKSB7XG4gICAgICAgIHZhciByZWZfMCA9IHJlZlswXTtcbiAgICAgICAgdmFyIHgxID0gcmVmXzAueDtcbiAgICAgICAgdmFyIHkxID0gcmVmXzAueTtcbiAgICAgICAgdmFyIHJlZl8xID0gcmVmWzFdO1xuICAgICAgICB2YXIgeDIgPSByZWZfMS54O1xuICAgICAgICB2YXIgeTIgPSByZWZfMS55O1xuICAgICAgICB2YXIgcmVmJDFfMCA9IHJlZiQxWzBdO1xuICAgICAgICB2YXIgeDMgPSByZWYkMV8wLng7XG4gICAgICAgIHZhciB5MyA9IHJlZiQxXzAueTtcbiAgICAgICAgdmFyIHJlZiQxXzEgPSByZWYkMVsxXTtcbiAgICAgICAgdmFyIHg0ID0gcmVmJDFfMS54O1xuICAgICAgICB2YXIgeTQgPSByZWYkMV8xLnk7XG5cblxuICAgICAgICB2YXIgZGVub21pbmF0b3IgPSAoeTQgLSB5MykgKiAoeDIgLSB4MSkgLSAoeDQgLSB4MykgKiAoeTIgLSB5MSk7XG5cbiAgICAgICAgLy8gTGluZXMgYXJlIHBhcmFsbGVsXG4gICAgICAgIGlmIChkZW5vbWluYXRvciA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVhID0gKCh4NCAtIHgzKSAqICh5MSAtIHkzKSAtICh5NCAtIHkzKSAqICh4MSAtIHgzKSkgLyBkZW5vbWluYXRvcjtcblxuICAgICAgICBpZiAodWEgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXR1cm4gYW4gb2JqZWN0IHdpdGggdGhlIHggYW5kIHkgY29vcmRpbmF0ZXMgb2YgdGhlIGludGVyc2VjdGlvblxuICAgICAgICByZXR1cm4ge3g6IHgxICsgdWEgKiAoeDIgLSB4MSksIHk6IHkxICsgdWEgKiAoeTIgLSB5MSl9O1xuICAgIH1cblxuICAgIHZhciBzdHJhdHMgPSB7fTtcblxuICAgIHN0cmF0cy5ldmVudHMgPVxuICAgIHN0cmF0cy5jcmVhdGVkID1cbiAgICBzdHJhdHMuYmVmb3JlQ29ubmVjdCA9XG4gICAgc3RyYXRzLmNvbm5lY3RlZCA9XG4gICAgc3RyYXRzLmJlZm9yZURpc2Nvbm5lY3QgPVxuICAgIHN0cmF0cy5kaXNjb25uZWN0ZWQgPVxuICAgIHN0cmF0cy5kZXN0cm95ID0gY29uY2F0U3RyYXQ7XG5cbiAgICAvLyBhcmdzIHN0cmF0ZWd5XG4gICAgc3RyYXRzLmFyZ3MgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAgICAgICByZXR1cm4gY2hpbGRWYWwgIT09IGZhbHNlICYmIGNvbmNhdFN0cmF0KGNoaWxkVmFsIHx8IHBhcmVudFZhbCk7XG4gICAgfTtcblxuICAgIC8vIHVwZGF0ZSBzdHJhdGVneVxuICAgIHN0cmF0cy51cGRhdGUgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAgICAgICByZXR1cm4gc29ydEJ5KGNvbmNhdFN0cmF0KHBhcmVudFZhbCwgaXNGdW5jdGlvbihjaGlsZFZhbCkgPyB7cmVhZDogY2hpbGRWYWx9IDogY2hpbGRWYWwpLCAnb3JkZXInKTtcbiAgICB9O1xuXG4gICAgLy8gcHJvcGVydHkgc3RyYXRlZ3lcbiAgICBzdHJhdHMucHJvcHMgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuXG4gICAgICAgIGlmIChpc0FycmF5KGNoaWxkVmFsKSkge1xuICAgICAgICAgICAgY2hpbGRWYWwgPSBjaGlsZFZhbC5yZWR1Y2UoZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gU3RyaW5nO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdHJhdHMubWV0aG9kcyhwYXJlbnRWYWwsIGNoaWxkVmFsKTtcbiAgICB9O1xuXG4gICAgLy8gZXh0ZW5kIHN0cmF0ZWd5XG4gICAgc3RyYXRzLmNvbXB1dGVkID1cbiAgICBzdHJhdHMubWV0aG9kcyA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gICAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgICAgICAgICAgPyBwYXJlbnRWYWxcbiAgICAgICAgICAgICAgICA/IGFzc2lnbih7fSwgcGFyZW50VmFsLCBjaGlsZFZhbClcbiAgICAgICAgICAgICAgICA6IGNoaWxkVmFsXG4gICAgICAgICAgICA6IHBhcmVudFZhbDtcbiAgICB9O1xuXG4gICAgLy8gZGF0YSBzdHJhdGVneVxuICAgIHN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKSB7XG5cbiAgICAgICAgaWYgKCF2bSkge1xuXG4gICAgICAgICAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudFZhbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRWYWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodm0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVyZ2VGbkRhdGEocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lcmdlRm5EYXRhKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbWVyZ2VGbkRhdGEocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pIHtcbiAgICAgICAgcmV0dXJuIHN0cmF0cy5jb21wdXRlZChcbiAgICAgICAgICAgIGlzRnVuY3Rpb24ocGFyZW50VmFsKVxuICAgICAgICAgICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICAgICAgICAgIDogcGFyZW50VmFsLFxuICAgICAgICAgICAgaXNGdW5jdGlvbihjaGlsZFZhbClcbiAgICAgICAgICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICAgICAgICAgIDogY2hpbGRWYWxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBjb25jYXQgc3RyYXRlZ3lcbiAgICBmdW5jdGlvbiBjb25jYXRTdHJhdChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG5cbiAgICAgICAgcGFyZW50VmFsID0gcGFyZW50VmFsICYmICFpc0FycmF5KHBhcmVudFZhbCkgPyBbcGFyZW50VmFsXSA6IHBhcmVudFZhbDtcblxuICAgICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICAgICAgICAgID8gcGFyZW50VmFsXG4gICAgICAgICAgICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgICAgICAgICAgIDogaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgICAgICAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICAgICAgICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICAgICAgICAgIDogcGFyZW50VmFsO1xuICAgIH1cblxuICAgIC8vIGRlZmF1bHQgc3RyYXRlZ3lcbiAgICBmdW5jdGlvbiBkZWZhdWx0U3RyYXQocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAgICAgICByZXR1cm4gaXNVbmRlZmluZWQoY2hpbGRWYWwpID8gcGFyZW50VmFsIDogY2hpbGRWYWw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQsIHZtKSB7XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgICAgICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5leHRlbmRzLCB2bSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5taXhpbnNbaV0sIHZtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHtcbiAgICAgICAgICAgIG1lcmdlS2V5KGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkkMSkpIHtcbiAgICAgICAgICAgICAgICBtZXJnZUtleShrZXkkMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtZXJnZUtleShrZXkpIHtcbiAgICAgICAgICAgIG9wdGlvbnNba2V5XSA9IChzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQpKHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU9wdGlvbnMob3B0aW9ucywgYXJncykge1xuICAgICAgICB2YXIgb2JqO1xuXG4gICAgICAgIGlmICggYXJncyA9PT0gdm9pZCAwICkgYXJncyA9IFtdO1xuXG4gICAgICAgIHRyeSB7XG5cbiAgICAgICAgICAgIHJldHVybiAhb3B0aW9uc1xuICAgICAgICAgICAgICAgID8ge31cbiAgICAgICAgICAgICAgICA6IHN0YXJ0c1dpdGgob3B0aW9ucywgJ3snKVxuICAgICAgICAgICAgICAgICAgICA/IEpTT04ucGFyc2Uob3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgOiBhcmdzLmxlbmd0aCAmJiAhaW5jbHVkZXMob3B0aW9ucywgJzonKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKCBvYmogPSB7fSwgb2JqW2FyZ3NbMF1dID0gb3B0aW9ucywgb2JqICkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG9wdGlvbnMuc3BsaXQoJzsnKS5yZWR1Y2UoZnVuY3Rpb24gKG9wdGlvbnMsIG9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWYgPSBvcHRpb24uc3BsaXQoLzooLiopLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSByZWZbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAmJiAhaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNba2V5LnRyaW0oKV0gPSB2YWx1ZS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwge30pO1xuXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgdmFyIGlkID0gMDtcblxuICAgIHZhciBQbGF5ZXIgPSBmdW5jdGlvbihlbCkge1xuICAgICAgICB0aGlzLmlkID0gKytpZDtcbiAgICAgICAgdGhpcy5lbCA9IHRvTm9kZShlbCk7XG4gICAgfTtcblxuICAgIFBsYXllci5wcm90b3R5cGUuaXNWaWRlbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNZb3V0dWJlKCkgfHwgdGhpcy5pc1ZpbWVvKCkgfHwgdGhpcy5pc0hUTUw1KCk7XG4gICAgfTtcblxuICAgIFBsYXllci5wcm90b3R5cGUuaXNIVE1MNSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwudGFnTmFtZSA9PT0gJ1ZJREVPJztcbiAgICB9O1xuXG4gICAgUGxheWVyLnByb3RvdHlwZS5pc0lGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwudGFnTmFtZSA9PT0gJ0lGUkFNRSc7XG4gICAgfTtcblxuICAgIFBsYXllci5wcm90b3R5cGUuaXNZb3V0dWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0lGcmFtZSgpICYmICEhdGhpcy5lbC5zcmMubWF0Y2goL1xcL1xcLy4qP3lvdXR1YmUoLW5vY29va2llKT9cXC5bYS16XStcXC8od2F0Y2hcXD92PVteJlxcc10rfGVtYmVkKXx5b3V0dVxcLmJlXFwvLiovKTtcbiAgICB9O1xuXG4gICAgUGxheWVyLnByb3RvdHlwZS5pc1ZpbWVvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0lGcmFtZSgpICYmICEhdGhpcy5lbC5zcmMubWF0Y2goL3ZpbWVvXFwuY29tXFwvdmlkZW9cXC8uKi8pO1xuICAgIH07XG5cbiAgICBQbGF5ZXIucHJvdG90eXBlLmVuYWJsZUFwaSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgaWYgKHRoaXMucmVhZHkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWR5O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHlvdXR1YmUgPSB0aGlzLmlzWW91dHViZSgpO1xuICAgICAgICB2YXIgdmltZW8gPSB0aGlzLmlzVmltZW8oKTtcblxuICAgICAgICB2YXIgcG9sbGVyO1xuXG4gICAgICAgIGlmICh5b3V0dWJlIHx8IHZpbWVvKSB7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWR5ID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcblxuICAgICAgICAgICAgICAgIG9uY2UodGhpcyQxLmVsLCAnbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHlvdXR1YmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBvc3QodGhpcyQxLmVsLCB7ZXZlbnQ6ICdsaXN0ZW5pbmcnLCBpZDogdGhpcyQxLmlkfSk7IH07XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xsZXIgPSBzZXRJbnRlcnZhbChsaXN0ZW5lciwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGxpc3RlbihmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4geW91dHViZSAmJiBkYXRhLmlkID09PSB0aGlzJDEuaWQgJiYgZGF0YS5ldmVudCA9PT0gJ29uUmVhZHknIHx8IHZpbWVvICYmIE51bWJlcihkYXRhLnBsYXllcl9pZCkgPT09IHRoaXMkMS5pZDsgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9sbGVyICYmIGNsZWFySW50ZXJ2YWwocG9sbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBhdHRyKHRoaXMkMS5lbCwgJ3NyYycsIChcIlwiICsgKHRoaXMkMS5lbC5zcmMpICsgKGluY2x1ZGVzKHRoaXMkMS5lbC5zcmMsICc/JykgPyAnJicgOiAnPycpICsgKHlvdXR1YmUgPyAnZW5hYmxlanNhcGk9MScgOiAoXCJhcGk9MSZwbGF5ZXJfaWQ9XCIgKyAodGhpcyQxLmlkKSkpKSk7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICB9O1xuXG4gICAgUGxheWVyLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICBpZiAoIXRoaXMuaXNWaWRlbygpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc0lGcmFtZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZUFwaSgpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gcG9zdCh0aGlzJDEuZWwsIHtmdW5jOiAncGxheVZpZGVvJywgbWV0aG9kOiAncGxheSd9KTsgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0hUTUw1KCkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLmVsLnBsYXkoKTtcblxuICAgICAgICAgICAgICAgIGlmIChwcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UuY2F0Y2gobm9vcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBQbGF5ZXIucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICBpZiAoIXRoaXMuaXNWaWRlbygpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc0lGcmFtZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZUFwaSgpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gcG9zdCh0aGlzJDEuZWwsIHtmdW5jOiAncGF1c2VWaWRlbycsIG1ldGhvZDogJ3BhdXNlJ30pOyB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzSFRNTDUoKSkge1xuICAgICAgICAgICAgdGhpcy5lbC5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFBsYXllci5wcm90b3R5cGUubXV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmlkZW8oKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNJRnJhbWUoKSkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGVBcGkoKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBvc3QodGhpcyQxLmVsLCB7ZnVuYzogJ211dGUnLCBtZXRob2Q6ICdzZXRWb2x1bWUnLCB2YWx1ZTogMH0pOyB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzSFRNTDUoKSkge1xuICAgICAgICAgICAgdGhpcy5lbC5tdXRlZCA9IHRydWU7XG4gICAgICAgICAgICBhdHRyKHRoaXMuZWwsICdtdXRlZCcsICcnKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvc3QoZWwsIGNtZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZWwuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeShhc3NpZ24oe2V2ZW50OiAnY29tbWFuZCd9LCBjbWQpKSwgJyonKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW4oY2IpIHtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIG9uY2Uod2luZG93LCAnbWVzc2FnZScsIGZ1bmN0aW9uIChfLCBkYXRhKSB7IHJldHVybiByZXNvbHZlKGRhdGEpOyB9LCBmYWxzZSwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gcmVmLmRhdGE7XG5cblxuICAgICAgICAgICAgICAgIGlmICghZGF0YSB8fCAhaXNTdHJpbmcoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhICYmIGNiKGRhdGEpO1xuXG4gICAgICAgICAgICB9KTsgfVxuXG4gICAgICAgICk7XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0luVmlldyhlbGVtZW50LCBvZmZzZXRUb3AsIG9mZnNldExlZnQpIHtcbiAgICAgICAgaWYgKCBvZmZzZXRUb3AgPT09IHZvaWQgMCApIG9mZnNldFRvcCA9IDA7XG4gICAgICAgIGlmICggb2Zmc2V0TGVmdCA9PT0gdm9pZCAwICkgb2Zmc2V0TGVmdCA9IDA7XG5cblxuICAgICAgICBpZiAoIWlzVmlzaWJsZShlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhcmVudHMgPSBvdmVyZmxvd1BhcmVudHMoZWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIHBhcmVudHMuZXZlcnkoZnVuY3Rpb24gKHBhcmVudCwgaSkge1xuXG4gICAgICAgICAgICB2YXIgY2xpZW50ID0gb2Zmc2V0KHBhcmVudHNbaSArIDFdIHx8IGVsZW1lbnQpO1xuICAgICAgICAgICAgdmFyIHJlZiA9IG9mZnNldChnZXRWaWV3cG9ydChwYXJlbnQpKTtcbiAgICAgICAgICAgIHZhciB0b3AgPSByZWYudG9wO1xuICAgICAgICAgICAgdmFyIGxlZnQgPSByZWYubGVmdDtcbiAgICAgICAgICAgIHZhciBib3R0b20gPSByZWYuYm90dG9tO1xuICAgICAgICAgICAgdmFyIHJpZ2h0ID0gcmVmLnJpZ2h0O1xuXG4gICAgICAgICAgICByZXR1cm4gaW50ZXJzZWN0UmVjdChjbGllbnQsIHtcbiAgICAgICAgICAgICAgICB0b3A6IHRvcCAtIG9mZnNldFRvcCxcbiAgICAgICAgICAgICAgICBsZWZ0OiBsZWZ0IC0gb2Zmc2V0TGVmdCxcbiAgICAgICAgICAgICAgICBib3R0b206IGJvdHRvbSArIG9mZnNldFRvcCxcbiAgICAgICAgICAgICAgICByaWdodDogcmlnaHQgKyBvZmZzZXRMZWZ0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2Nyb2xsVG9wKGVsZW1lbnQsIHRvcCkge1xuXG4gICAgICAgIGlmIChpc1dpbmRvdyhlbGVtZW50KSB8fCBpc0RvY3VtZW50KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gZ2V0U2Nyb2xsaW5nRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSB0b05vZGUoZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50LnNjcm9sbFRvcCA9IHRvcDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGxJbnRvVmlldyhlbGVtZW50LCByZWYpIHtcbiAgICAgICAgaWYgKCByZWYgPT09IHZvaWQgMCApIHJlZiA9IHt9O1xuICAgICAgICB2YXIgb2Zmc2V0QnkgPSByZWYub2Zmc2V0OyBpZiAoIG9mZnNldEJ5ID09PSB2b2lkIDAgKSBvZmZzZXRCeSA9IDA7XG5cblxuICAgICAgICBpZiAoIWlzVmlzaWJsZShlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhcmVudHMgPSBvdmVyZmxvd1BhcmVudHMoZWxlbWVudCkuY29uY2F0KGVsZW1lbnQpO1xuXG4gICAgICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBpICkge1xuICAgICAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxFbGVtZW50ID0gcGFyZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBwYXJlbnRzW2kgKyAxXTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsID0gc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3A7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3AgPSBNYXRoLmNlaWwocG9zaXRpb24oZWxlbWVudCwgZ2V0Vmlld3BvcnQoc2Nyb2xsRWxlbWVudCkpLnRvcCAtIG9mZnNldEJ5KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gZ2V0RHVyYXRpb24oTWF0aC5hYnModG9wKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ZXAgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwZXJjZW50ID0gZWFzZShjbGFtcCgoRGF0ZS5ub3coKSAtIHN0YXJ0KSAvIGR1cmF0aW9uKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcChzY3JvbGxFbGVtZW50LCBzY3JvbGwgKyB0b3AgKiBwZXJjZW50KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2Nyb2xsIG1vcmUgaWYgd2UgaGF2ZSBub3QgcmVhY2hlZCBvdXIgZGVzdGluYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZXJjZW50ICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBzdGVwKCk7XG4gICAgICAgICAgICAgICAgfSk7IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRzLmxlbmd0aCAtIDE7IGkrKykgbG9vcCggaSApO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldER1cmF0aW9uKGRpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiA0MCAqIE1hdGgucG93KGRpc3QsIC4zNzUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZWFzZShrKSB7XG4gICAgICAgICAgICByZXR1cm4gMC41ICogKDEgLSBNYXRoLmNvcyhNYXRoLlBJICogaykpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGxlZE92ZXIoZWxlbWVudCwgaGVpZ2h0T2Zmc2V0KSB7XG4gICAgICAgIGlmICggaGVpZ2h0T2Zmc2V0ID09PSB2b2lkIDAgKSBoZWlnaHRPZmZzZXQgPSAwO1xuXG5cbiAgICAgICAgaWYgKCFpc1Zpc2libGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNjcm9sbEVsZW1lbnQgPSBsYXN0KHNjcm9sbFBhcmVudHMoZWxlbWVudCkpO1xuICAgICAgICB2YXIgc2Nyb2xsSGVpZ2h0ID0gc2Nyb2xsRWxlbWVudC5zY3JvbGxIZWlnaHQ7XG4gICAgICAgIHZhciBzY3JvbGxUb3AgPSBzY3JvbGxFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgdmFyIHZpZXdwb3J0ID0gZ2V0Vmlld3BvcnQoc2Nyb2xsRWxlbWVudCk7XG4gICAgICAgIHZhciB2aWV3cG9ydEhlaWdodCA9IG9mZnNldCh2aWV3cG9ydCkuaGVpZ2h0O1xuICAgICAgICB2YXIgdmlld3BvcnRUb3AgPSBvZmZzZXRQb3NpdGlvbihlbGVtZW50KVswXSAtIHNjcm9sbFRvcCAtIG9mZnNldFBvc2l0aW9uKHNjcm9sbEVsZW1lbnQpWzBdO1xuICAgICAgICB2YXIgdmlld3BvcnREaXN0ID0gTWF0aC5taW4odmlld3BvcnRIZWlnaHQsIHZpZXdwb3J0VG9wICsgc2Nyb2xsVG9wKTtcblxuICAgICAgICB2YXIgdG9wID0gdmlld3BvcnRUb3AgLSB2aWV3cG9ydERpc3Q7XG4gICAgICAgIHZhciBkaXN0ID0gTWF0aC5taW4oXG4gICAgICAgICAgICBvZmZzZXQoZWxlbWVudCkuaGVpZ2h0ICsgaGVpZ2h0T2Zmc2V0ICsgdmlld3BvcnREaXN0LFxuICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0IC0gKHZpZXdwb3J0VG9wICsgc2Nyb2xsVG9wKSxcbiAgICAgICAgICAgIHNjcm9sbEhlaWdodCAtIHZpZXdwb3J0SGVpZ2h0XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIGNsYW1wKC0xICogdG9wIC8gZGlzdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2Nyb2xsUGFyZW50cyhlbGVtZW50LCBvdmVyZmxvd1JlKSB7XG4gICAgICAgIGlmICggb3ZlcmZsb3dSZSA9PT0gdm9pZCAwICkgb3ZlcmZsb3dSZSA9IC9hdXRvfHNjcm9sbC87XG5cbiAgICAgICAgdmFyIHNjcm9sbEVsID0gZ2V0U2Nyb2xsaW5nRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgdmFyIHNjcm9sbFBhcmVudHMgPSBwYXJlbnRzKGVsZW1lbnQpLmZpbHRlcihmdW5jdGlvbiAocGFyZW50KSB7IHJldHVybiBwYXJlbnQgPT09IHNjcm9sbEVsXG4gICAgICAgICAgICB8fCBvdmVyZmxvd1JlLnRlc3QoY3NzKHBhcmVudCwgJ292ZXJmbG93JykpXG4gICAgICAgICAgICAmJiBwYXJlbnQuc2Nyb2xsSGVpZ2h0ID4gTWF0aC5yb3VuZChvZmZzZXQocGFyZW50KS5oZWlnaHQpOyB9XG4gICAgICAgICkucmV2ZXJzZSgpO1xuICAgICAgICByZXR1cm4gc2Nyb2xsUGFyZW50cy5sZW5ndGggPyBzY3JvbGxQYXJlbnRzIDogW3Njcm9sbEVsXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRWaWV3cG9ydChzY3JvbGxFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBzY3JvbGxFbGVtZW50ID09PSBnZXRTY3JvbGxpbmdFbGVtZW50KHNjcm9sbEVsZW1lbnQpID8gd2luZG93IDogc2Nyb2xsRWxlbWVudDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvdmVyZmxvd1BhcmVudHMoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gc2Nyb2xsUGFyZW50cyhlbGVtZW50LCAvYXV0b3xzY3JvbGx8aGlkZGVuLyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2Nyb2xsaW5nRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHZhciByZWYgPSB0b1dpbmRvdyhlbGVtZW50KTtcbiAgICAgICAgdmFyIGRvY3VtZW50ID0gcmVmLmRvY3VtZW50O1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgdmFyIEludGVyc2VjdGlvbk9ic2VydmVyID0gaW5Ccm93c2VyICYmIHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlclxuICAgICAgICB8fCAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gSW50ZXJzZWN0aW9uT2JzZXJ2ZXJDbGFzcyhjYWxsYmFjaywgcmVmKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICAgICAgICAgIGlmICggcmVmID09PSB2b2lkIDAgKSByZWYgPSB7fTtcbiAgICAgICAgICAgIHZhciByb290TWFyZ2luID0gcmVmLnJvb3RNYXJnaW47IGlmICggcm9vdE1hcmdpbiA9PT0gdm9pZCAwICkgcm9vdE1hcmdpbiA9ICcwIDAnO1xuXG5cbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldHMgPSBbXTtcblxuICAgICAgICAgICAgICAgIHZhciByZWYkMSA9IChyb290TWFyZ2luIHx8ICcwIDAnKS5zcGxpdCgnICcpLm1hcCh0b0Zsb2F0KTtcbiAgICAgICAgICAgIHZhciBvZmZzZXRUb3AgPSByZWYkMVswXTtcbiAgICAgICAgICAgIHZhciBvZmZzZXRMZWZ0ID0gcmVmJDFbMV07XG5cbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldFRvcCA9IG9mZnNldFRvcDtcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldExlZnQgPSBvZmZzZXRMZWZ0O1xuXG4gICAgICAgICAgICAgICAgdmFyIHBlbmRpbmc7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocGVuZGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZyA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7IHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWNvcmRzID0gdGhpcyQxLnRha2VSZWNvcmRzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWNvcmRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlY29yZHMsIHRoaXMkMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7IH0pO1xuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHRoaXMub2ZmID0gb24od2luZG93LCAnc2Nyb2xsIHJlc2l6ZSBsb2FkJywgdGhpcy5hcHBseSwge3Bhc3NpdmU6IHRydWUsIGNhcHR1cmU6IHRydWV9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBJbnRlcnNlY3Rpb25PYnNlcnZlckNsYXNzLnByb3RvdHlwZS50YWtlUmVjb3JkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRhcmdldHMuZmlsdGVyKGZ1bmN0aW9uIChlbnRyeSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpblZpZXcgPSBpc0luVmlldyhlbnRyeS50YXJnZXQsIHRoaXMkMS5vZmZzZXRUb3AsIHRoaXMkMS5vZmZzZXRMZWZ0KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcgPT09IG51bGwgfHwgaW5WaWV3IF4gZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LmlzSW50ZXJzZWN0aW5nID0gaW5WaWV3O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJDbGFzcy5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICBpc0ludGVyc2VjdGluZzogbnVsbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHkoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIEludGVyc2VjdGlvbk9ic2VydmVyQ2xhc3MucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5vZmYoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIEludGVyc2VjdGlvbk9ic2VydmVyQ2xhc3M7XG4gICAgfSgpKTtcblxuICAgIHZhciB1dGlsID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICAgICAgICBfX3Byb3RvX186IG51bGwsXG4gICAgICAgIGFqYXg6IGFqYXgsXG4gICAgICAgIGdldEltYWdlOiBnZXRJbWFnZSxcbiAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbixcbiAgICAgICAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgICAgICAgYW5pbWF0ZTogYW5pbWF0ZSxcbiAgICAgICAgQW5pbWF0aW9uOiBBbmltYXRpb24sXG4gICAgICAgIGF0dHI6IGF0dHIsXG4gICAgICAgIGhhc0F0dHI6IGhhc0F0dHIsXG4gICAgICAgIHJlbW92ZUF0dHI6IHJlbW92ZUF0dHIsXG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGFkZENsYXNzOiBhZGRDbGFzcyxcbiAgICAgICAgcmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzLFxuICAgICAgICByZW1vdmVDbGFzc2VzOiByZW1vdmVDbGFzc2VzLFxuICAgICAgICByZXBsYWNlQ2xhc3M6IHJlcGxhY2VDbGFzcyxcbiAgICAgICAgaGFzQ2xhc3M6IGhhc0NsYXNzLFxuICAgICAgICB0b2dnbGVDbGFzczogdG9nZ2xlQ2xhc3MsXG4gICAgICAgIHBvc2l0aW9uQXQ6IHBvc2l0aW9uQXQsXG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgICAgIG9mZnNldFBvc2l0aW9uOiBvZmZzZXRQb3NpdGlvbixcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgYm94TW9kZWxBZGp1c3Q6IGJveE1vZGVsQWRqdXN0LFxuICAgICAgICBmbGlwUG9zaXRpb246IGZsaXBQb3NpdGlvbixcbiAgICAgICAgdG9QeDogdG9QeCxcbiAgICAgICAgcmVhZHk6IHJlYWR5LFxuICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgIGdldEluZGV4OiBnZXRJbmRleCxcbiAgICAgICAgZW1wdHk6IGVtcHR5LFxuICAgICAgICBodG1sOiBodG1sLFxuICAgICAgICBwcmVwZW5kOiBwcmVwZW5kLFxuICAgICAgICBhcHBlbmQ6IGFwcGVuZCxcbiAgICAgICAgYmVmb3JlOiBiZWZvcmUsXG4gICAgICAgIGFmdGVyOiBhZnRlcixcbiAgICAgICAgcmVtb3ZlOiByZW1vdmUsXG4gICAgICAgIHdyYXBBbGw6IHdyYXBBbGwsXG4gICAgICAgIHdyYXBJbm5lcjogd3JhcElubmVyLFxuICAgICAgICB1bndyYXA6IHVud3JhcCxcbiAgICAgICAgZnJhZ21lbnQ6IGZyYWdtZW50LFxuICAgICAgICBhcHBseTogYXBwbHksXG4gICAgICAgICQ6ICQsXG4gICAgICAgICQkOiAkJCxcbiAgICAgICAgaW5Ccm93c2VyOiBpbkJyb3dzZXIsXG4gICAgICAgIGlzSUU6IGlzSUUsXG4gICAgICAgIGlzUnRsOiBpc1J0bCxcbiAgICAgICAgaGFzVG91Y2g6IGhhc1RvdWNoLFxuICAgICAgICBwb2ludGVyRG93bjogcG9pbnRlckRvd24sXG4gICAgICAgIHBvaW50ZXJNb3ZlOiBwb2ludGVyTW92ZSxcbiAgICAgICAgcG9pbnRlclVwOiBwb2ludGVyVXAsXG4gICAgICAgIHBvaW50ZXJFbnRlcjogcG9pbnRlckVudGVyLFxuICAgICAgICBwb2ludGVyTGVhdmU6IHBvaW50ZXJMZWF2ZSxcbiAgICAgICAgcG9pbnRlckNhbmNlbDogcG9pbnRlckNhbmNlbCxcbiAgICAgICAgb246IG9uLFxuICAgICAgICBvZmY6IG9mZixcbiAgICAgICAgb25jZTogb25jZSxcbiAgICAgICAgdHJpZ2dlcjogdHJpZ2dlcixcbiAgICAgICAgY3JlYXRlRXZlbnQ6IGNyZWF0ZUV2ZW50LFxuICAgICAgICB0b0V2ZW50VGFyZ2V0czogdG9FdmVudFRhcmdldHMsXG4gICAgICAgIGlzVG91Y2g6IGlzVG91Y2gsXG4gICAgICAgIGdldEV2ZW50UG9zOiBnZXRFdmVudFBvcyxcbiAgICAgICAgZmFzdGRvbTogZmFzdGRvbSxcbiAgICAgICAgaXNWb2lkRWxlbWVudDogaXNWb2lkRWxlbWVudCxcbiAgICAgICAgaXNWaXNpYmxlOiBpc1Zpc2libGUsXG4gICAgICAgIHNlbElucHV0OiBzZWxJbnB1dCxcbiAgICAgICAgaXNJbnB1dDogaXNJbnB1dCxcbiAgICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICAgIHdpdGhpbjogd2l0aGluLFxuICAgICAgICBwYXJlbnRzOiBwYXJlbnRzLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICAgIGhhc093bjogaGFzT3duLFxuICAgICAgICBoeXBoZW5hdGU6IGh5cGhlbmF0ZSxcbiAgICAgICAgY2FtZWxpemU6IGNhbWVsaXplLFxuICAgICAgICB1Y2ZpcnN0OiB1Y2ZpcnN0LFxuICAgICAgICBzdGFydHNXaXRoOiBzdGFydHNXaXRoLFxuICAgICAgICBlbmRzV2l0aDogZW5kc1dpdGgsXG4gICAgICAgIGluY2x1ZGVzOiBpbmNsdWRlcyxcbiAgICAgICAgZmluZEluZGV4OiBmaW5kSW5kZXgsXG4gICAgICAgIGlzQXJyYXk6IGlzQXJyYXksXG4gICAgICAgIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gICAgICAgIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgICAgICAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgICAgICAgaXNXaW5kb3c6IGlzV2luZG93LFxuICAgICAgICBpc0RvY3VtZW50OiBpc0RvY3VtZW50LFxuICAgICAgICBpc0pRdWVyeTogaXNKUXVlcnksXG4gICAgICAgIGlzTm9kZTogaXNOb2RlLFxuICAgICAgICBpc0VsZW1lbnQ6IGlzRWxlbWVudCxcbiAgICAgICAgaXNOb2RlQ29sbGVjdGlvbjogaXNOb2RlQ29sbGVjdGlvbixcbiAgICAgICAgaXNCb29sZWFuOiBpc0Jvb2xlYW4sXG4gICAgICAgIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgICAgICAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICAgICAgICBpc051bWVyaWM6IGlzTnVtZXJpYyxcbiAgICAgICAgaXNFbXB0eTogaXNFbXB0eSxcbiAgICAgICAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICAgICAgICB0b0Jvb2xlYW46IHRvQm9vbGVhbixcbiAgICAgICAgdG9OdW1iZXI6IHRvTnVtYmVyLFxuICAgICAgICB0b0Zsb2F0OiB0b0Zsb2F0LFxuICAgICAgICB0b05vZGU6IHRvTm9kZSxcbiAgICAgICAgdG9Ob2RlczogdG9Ob2RlcyxcbiAgICAgICAgdG9XaW5kb3c6IHRvV2luZG93LFxuICAgICAgICB0b0xpc3Q6IHRvTGlzdCxcbiAgICAgICAgdG9NczogdG9NcyxcbiAgICAgICAgaXNFcXVhbDogaXNFcXVhbCxcbiAgICAgICAgc3dhcDogc3dhcCxcbiAgICAgICAgYXNzaWduOiBhc3NpZ24sXG4gICAgICAgIGxhc3Q6IGxhc3QsXG4gICAgICAgIGVhY2g6IGVhY2gsXG4gICAgICAgIHNvcnRCeTogc29ydEJ5LFxuICAgICAgICB1bmlxdWVCeTogdW5pcXVlQnksXG4gICAgICAgIGNsYW1wOiBjbGFtcCxcbiAgICAgICAgbm9vcDogbm9vcCxcbiAgICAgICAgaW50ZXJzZWN0UmVjdDogaW50ZXJzZWN0UmVjdCxcbiAgICAgICAgcG9pbnRJblJlY3Q6IHBvaW50SW5SZWN0LFxuICAgICAgICBEaW1lbnNpb25zOiBEaW1lbnNpb25zLFxuICAgICAgICBNb3VzZVRyYWNrZXI6IE1vdXNlVHJhY2tlcixcbiAgICAgICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgICAgIHBhcnNlT3B0aW9uczogcGFyc2VPcHRpb25zLFxuICAgICAgICBQbGF5ZXI6IFBsYXllcixcbiAgICAgICAgUHJvbWlzZTogUHJvbWlzZSxcbiAgICAgICAgRGVmZXJyZWQ6IERlZmVycmVkLFxuICAgICAgICBJbnRlcnNlY3Rpb25PYnNlcnZlcjogSW50ZXJzZWN0aW9uT2JzZXJ2ZXIsXG4gICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgcXVlcnlBbGw6IHF1ZXJ5QWxsLFxuICAgICAgICBmaW5kOiBmaW5kLFxuICAgICAgICBmaW5kQWxsOiBmaW5kQWxsLFxuICAgICAgICBtYXRjaGVzOiBtYXRjaGVzLFxuICAgICAgICBjbG9zZXN0OiBjbG9zZXN0LFxuICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgZXNjYXBlOiBlc2NhcGUsXG4gICAgICAgIGNzczogY3NzLFxuICAgICAgICBnZXRTdHlsZXM6IGdldFN0eWxlcyxcbiAgICAgICAgZ2V0U3R5bGU6IGdldFN0eWxlLFxuICAgICAgICBnZXRDc3NWYXI6IGdldENzc1ZhcixcbiAgICAgICAgcHJvcE5hbWU6IHByb3BOYW1lLFxuICAgICAgICBpc0luVmlldzogaXNJblZpZXcsXG4gICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wLFxuICAgICAgICBzY3JvbGxJbnRvVmlldzogc2Nyb2xsSW50b1ZpZXcsXG4gICAgICAgIHNjcm9sbGVkT3Zlcjogc2Nyb2xsZWRPdmVyLFxuICAgICAgICBzY3JvbGxQYXJlbnRzOiBzY3JvbGxQYXJlbnRzLFxuICAgICAgICBnZXRWaWV3cG9ydDogZ2V0Vmlld3BvcnRcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGdsb2JhbEFQSSAoVUlraXQpIHtcblxuICAgICAgICB2YXIgREFUQSA9IFVJa2l0LmRhdGE7XG5cbiAgICAgICAgVUlraXQudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuXG4gICAgICAgICAgICBpZiAocGx1Z2luLmluc3RhbGxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGx1Z2luLmNhbGwobnVsbCwgdGhpcyk7XG4gICAgICAgICAgICBwbHVnaW4uaW5zdGFsbGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4sIGNvbXBvbmVudCkge1xuICAgICAgICAgICAgY29tcG9uZW50ID0gKGlzU3RyaW5nKGNvbXBvbmVudCkgPyBVSWtpdC5jb21wb25lbnQoY29tcG9uZW50KSA6IGNvbXBvbmVudCkgfHwgdGhpcztcbiAgICAgICAgICAgIGNvbXBvbmVudC5vcHRpb25zID0gbWVyZ2VPcHRpb25zKGNvbXBvbmVudC5vcHRpb25zLCBtaXhpbik7XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQuZXh0ZW5kID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgU3ViID0gZnVuY3Rpb24gVUlraXRDb21wb25lbnQob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBTdWIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICAgICAgICAgICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICAgICAgICAgIFN1Yi5vcHRpb25zID0gbWVyZ2VPcHRpb25zKFN1cGVyLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICBTdWIuc3VwZXIgPSBTdXBlcjtcbiAgICAgICAgICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG5cbiAgICAgICAgICAgIHJldHVybiBTdWI7XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQudXBkYXRlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGUpIHtcblxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQgPyB0b05vZGUoZWxlbWVudCkgOiBkb2N1bWVudC5ib2R5O1xuXG4gICAgICAgICAgICBwYXJlbnRzKGVsZW1lbnQpLnJldmVyc2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiB1cGRhdGUoZWxlbWVudFtEQVRBXSwgZSk7IH0pO1xuICAgICAgICAgICAgYXBwbHkoZWxlbWVudCwgZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIHVwZGF0ZShlbGVtZW50W0RBVEFdLCBlKTsgfSk7XG5cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY29udGFpbmVyO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVUlraXQsICdjb250YWluZXInLCB7XG5cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lciB8fCBkb2N1bWVudC5ib2R5O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGUoZGF0YSwgZSkge1xuXG4gICAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhW25hbWVdLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtuYW1lXS5fY2FsbFVwZGF0ZShlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhvb2tzQVBJIChVSWtpdCkge1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5fY2FsbEhvb2sgPSBmdW5jdGlvbiAoaG9vaykge1xuICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy4kb3B0aW9uc1tob29rXTtcblxuICAgICAgICAgICAgaWYgKGhhbmRsZXJzKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gaGFuZGxlci5jYWxsKHRoaXMkMSk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5fY2FsbENvbm5lY3RlZCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuICAgICAgICAgICAgdGhpcy5fY29tcHV0ZWRzID0ge307XG4gICAgICAgICAgICB0aGlzLl9mcmFtZXMgPSB7cmVhZHM6IHt9LCB3cml0ZXM6IHt9fTtcblxuICAgICAgICAgICAgdGhpcy5faW5pdFByb3BzKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2NhbGxIb29rKCdiZWZvcmVDb25uZWN0Jyk7XG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICB0aGlzLl9pbml0RXZlbnRzKCk7XG4gICAgICAgICAgICB0aGlzLl9pbml0T2JzZXJ2ZXIoKTtcblxuICAgICAgICAgICAgdGhpcy5fY2FsbEhvb2soJ2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgdGhpcy5fY2FsbFVwZGF0ZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5fY2FsbERpc2Nvbm5lY3RlZCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2NhbGxIb29rKCdiZWZvcmVEaXNjb25uZWN0Jyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9vYnNlcnZlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX29ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vYnNlcnZlciA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3VuYmluZEV2ZW50cygpO1xuICAgICAgICAgICAgdGhpcy5fY2FsbEhvb2soJ2Rpc2Nvbm5lY3RlZCcpO1xuXG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcblxuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5fY2FsbFVwZGF0ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICAgICAgICAgIGlmICggZSA9PT0gdm9pZCAwICkgZSA9ICd1cGRhdGUnO1xuXG5cbiAgICAgICAgICAgIHZhciB0eXBlID0gZS50eXBlIHx8IGU7XG5cbiAgICAgICAgICAgIGlmIChpbmNsdWRlcyhbJ3VwZGF0ZScsICdyZXNpemUnXSwgdHlwZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxsV2F0Y2hlcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdXBkYXRlcyA9IHRoaXMuJG9wdGlvbnMudXBkYXRlO1xuICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuX2ZyYW1lcztcbiAgICAgICAgICAgIHZhciByZWFkcyA9IHJlZi5yZWFkcztcbiAgICAgICAgICAgIHZhciB3cml0ZXMgPSByZWYud3JpdGVzO1xuXG4gICAgICAgICAgICBpZiAoIXVwZGF0ZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAocmVmLCBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlYWQgPSByZWYucmVhZDtcbiAgICAgICAgICAgICAgICB2YXIgd3JpdGUgPSByZWYud3JpdGU7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IHJlZi5ldmVudHM7XG5cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSAndXBkYXRlJyAmJiAhaW5jbHVkZXMoZXZlbnRzLCB0eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJlYWQgJiYgIWluY2x1ZGVzKGZhc3Rkb20ucmVhZHMsIHJlYWRzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICByZWFkc1tpXSA9IGZhc3Rkb20ucmVhZChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzJDEuX2Nvbm5lY3RlZCAmJiByZWFkLmNhbGwodGhpcyQxLCB0aGlzJDEuX2RhdGEsIHR5cGUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSAmJiB3cml0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhc3Rkb20uY2xlYXIod3JpdGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduKHRoaXMkMS5fZGF0YSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHdyaXRlICYmICFpbmNsdWRlcyhmYXN0ZG9tLndyaXRlcywgd3JpdGVzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICB3cml0ZXNbaV0gPSBmYXN0ZG9tLndyaXRlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5fY29ubmVjdGVkICYmIHdyaXRlLmNhbGwodGhpcyQxLCB0aGlzJDEuX2RhdGEsIHR5cGUpOyB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLl9jYWxsV2F0Y2hlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIF9mcmFtZXMgPSByZWYuX2ZyYW1lcztcblxuICAgICAgICAgICAgaWYgKF9mcmFtZXMuX3dhdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaW5pdGl0YWwgPSAhaGFzT3duKF9mcmFtZXMsICdfd2F0Y2gnKTtcblxuICAgICAgICAgICAgX2ZyYW1lcy5fd2F0Y2ggPSBmYXN0ZG9tLnJlYWQoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzJDEuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMkMTtcbiAgICAgICAgICAgICAgICB2YXIgY29tcHV0ZWQgPSByZWYuJG9wdGlvbnMuY29tcHV0ZWQ7XG4gICAgICAgICAgICAgICAgdmFyIF9jb21wdXRlZHMgPSByZWYuX2NvbXB1dGVkcztcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNQcmV2ID0gaGFzT3duKF9jb21wdXRlZHMsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gX2NvbXB1dGVkc1trZXldO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfY29tcHV0ZWRzW2tleV07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiQxID0gY29tcHV0ZWRba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdhdGNoID0gcmVmJDEud2F0Y2g7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbW1lZGlhdGUgPSByZWYkMS5pbW1lZGlhdGU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3YXRjaCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aXRhbCAmJiBpbW1lZGlhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IGhhc1ByZXYgJiYgIWlzRXF1YWwocHJldiwgdGhpcyQxW2tleV0pXG4gICAgICAgICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoLmNhbGwodGhpcyQxLCB0aGlzJDFba2V5XSwgcHJldik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9mcmFtZXMuX3dhdGNoID0gbnVsbDtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXRlQVBJIChVSWtpdCkge1xuXG4gICAgICAgIHZhciB1aWQgPSAwO1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICAgICAgb3B0aW9ucy5kYXRhID0gbm9ybWFsaXplRGF0YShvcHRpb25zLCB0aGlzLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuXG4gICAgICAgICAgICB0aGlzLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMuY29uc3RydWN0b3Iub3B0aW9ucywgb3B0aW9ucywgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLiRlbCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLiRwcm9wcyA9IHt9O1xuXG4gICAgICAgICAgICB0aGlzLl91aWQgPSB1aWQrKztcbiAgICAgICAgICAgIHRoaXMuX2luaXREYXRhKCk7XG4gICAgICAgICAgICB0aGlzLl9pbml0TWV0aG9kcygpO1xuICAgICAgICAgICAgdGhpcy5faW5pdENvbXB1dGVkcygpO1xuICAgICAgICAgICAgdGhpcy5fY2FsbEhvb2soJ2NyZWF0ZWQnKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRtb3VudChvcHRpb25zLmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuX2luaXREYXRhID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICB2YXIgcmVmID0gdGhpcy4kb3B0aW9ucztcbiAgICAgICAgICAgIHZhciBkYXRhID0gcmVmLmRhdGE7IGlmICggZGF0YSA9PT0gdm9pZCAwICkgZGF0YSA9IHt9O1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJHByb3BzW2tleV0gPSB0aGlzW2tleV0gPSBkYXRhW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLl9pbml0TWV0aG9kcyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuJG9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgbWV0aG9kcyA9IHJlZi5tZXRob2RzO1xuXG4gICAgICAgICAgICBpZiAobWV0aG9kcykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IG1ldGhvZHNba2V5XS5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuX2luaXRDb21wdXRlZHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIHZhciByZWYgPSB0aGlzLiRvcHRpb25zO1xuICAgICAgICAgICAgdmFyIGNvbXB1dGVkID0gcmVmLmNvbXB1dGVkO1xuXG4gICAgICAgICAgICB0aGlzLl9jb21wdXRlZHMgPSB7fTtcblxuICAgICAgICAgICAgaWYgKGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyQ29tcHV0ZWQodGhpcywga2V5LCBjb21wdXRlZFtrZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLl9pbml0UHJvcHMgPSBmdW5jdGlvbiAocHJvcHMpIHtcblxuICAgICAgICAgICAgdmFyIGtleTtcblxuICAgICAgICAgICAgcHJvcHMgPSBwcm9wcyB8fCBnZXRQcm9wcyh0aGlzLiRvcHRpb25zLCB0aGlzLiRuYW1lKTtcblxuICAgICAgICAgICAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHByb3BzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGV4Y2x1ZGUgPSBbdGhpcy4kb3B0aW9ucy5jb21wdXRlZCwgdGhpcy4kb3B0aW9ucy5tZXRob2RzXTtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIHRoaXMuJHByb3BzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSBpbiBwcm9wcyAmJiBub3RJbihleGNsdWRlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IHRoaXMuJHByb3BzW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5faW5pdEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IFtdO1xuXG4gICAgICAgICAgICB2YXIgcmVmID0gdGhpcy4kb3B0aW9ucztcbiAgICAgICAgICAgIHZhciBldmVudHMgPSByZWYuZXZlbnRzO1xuXG4gICAgICAgICAgICBpZiAoZXZlbnRzKSB7XG5cbiAgICAgICAgICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc093bihldmVudCwgJ2hhbmRsZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJFdmVudCh0aGlzJDEsIGV2ZW50W2tleV0sIGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RlckV2ZW50KHRoaXMkMSwgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuX3VuYmluZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh1bmJpbmQpIHsgcmV0dXJuIHVuYmluZCgpOyB9KTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLl9pbml0T2JzZXJ2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICB2YXIgcmVmID0gdGhpcy4kb3B0aW9ucztcbiAgICAgICAgICAgIHZhciBhdHRycyA9IHJlZi5hdHRycztcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHJlZi5wcm9wcztcbiAgICAgICAgICAgIHZhciBlbCA9IHJlZi5lbDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9vYnNlcnZlciB8fCAhcHJvcHMgfHwgYXR0cnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdHRycyA9IGlzQXJyYXkoYXR0cnMpID8gYXR0cnMgOiBPYmplY3Qua2V5cyhwcm9wcyk7XG5cbiAgICAgICAgICAgIHRoaXMuX29ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKHJlY29yZHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGdldFByb3BzKHRoaXMkMS4kb3B0aW9ucywgdGhpcyQxLiRuYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3Jkcy5zb21lKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSByZWYuYXR0cmlidXRlTmFtZTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcCA9IGF0dHJpYnV0ZU5hbWUucmVwbGFjZSgnZGF0YS0nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAocHJvcCA9PT0gdGhpcyQxLiRuYW1lID8gYXR0cnMgOiBbY2FtZWxpemUocHJvcCldKS5zb21lKGZ1bmN0aW9uIChwcm9wKSB7IHJldHVybiAhaXNVbmRlZmluZWQoZGF0YVtwcm9wXSkgJiYgZGF0YVtwcm9wXSAhPT0gdGhpcyQxLiRwcm9wc1twcm9wXTsgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS4kcmVzZXQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgZmlsdGVyID0gYXR0cnMubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGh5cGhlbmF0ZShrZXkpOyB9KS5jb25jYXQodGhpcy4kbmFtZSk7XG5cbiAgICAgICAgICAgIHRoaXMuX29ic2VydmVyLm9ic2VydmUoZWwsIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUZpbHRlcjogZmlsdGVyLmNvbmNhdChmaWx0ZXIubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIChcImRhdGEtXCIgKyBrZXkpOyB9KSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldFByb3BzKG9wdHMsIG5hbWUpIHtcblxuICAgICAgICAgICAgdmFyIGRhdGEkMSA9IHt9O1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBvcHRzLmFyZ3M7IGlmICggYXJncyA9PT0gdm9pZCAwICkgYXJncyA9IFtdO1xuICAgICAgICAgICAgdmFyIHByb3BzID0gb3B0cy5wcm9wczsgaWYgKCBwcm9wcyA9PT0gdm9pZCAwICkgcHJvcHMgPSB7fTtcbiAgICAgICAgICAgIHZhciBlbCA9IG9wdHMuZWw7XG5cbiAgICAgICAgICAgIGlmICghcHJvcHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YSQxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcCA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRhdGEoZWwsIHByb3ApO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHByb3BzW2tleV0gPT09IEJvb2xlYW4gJiYgdmFsdWUgPT09ICcnXG4gICAgICAgICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICA6IGNvZXJjZShwcm9wc1trZXldLCB2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3RhcmdldCcgJiYgKCF2YWx1ZSB8fCBzdGFydHNXaXRoKHZhbHVlLCAnXycpKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkYXRhJDFba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHBhcnNlT3B0aW9ucyhkYXRhKGVsLCBuYW1lKSwgYXJncyk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGtleSQxIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcCQxID0gY2FtZWxpemUoa2V5JDEpO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wc1twcm9wJDFdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSQxW3Byb3AkMV0gPSBjb2VyY2UocHJvcHNbcHJvcCQxXSwgb3B0aW9uc1trZXkkMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGRhdGEkMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyQ29tcHV0ZWQoY29tcG9uZW50LCBrZXksIGNiKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29tcG9uZW50LCBrZXksIHtcblxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBfY29tcHV0ZWRzID0gY29tcG9uZW50Ll9jb21wdXRlZHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkcHJvcHMgPSBjb21wb25lbnQuJHByb3BzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGVsID0gY29tcG9uZW50LiRlbDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc093bihfY29tcHV0ZWRzLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY29tcHV0ZWRzW2tleV0gPSAoY2IuZ2V0IHx8IGNiKS5jYWxsKGNvbXBvbmVudCwgJHByb3BzLCAkZWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb21wdXRlZHNba2V5XTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBfY29tcHV0ZWRzID0gY29tcG9uZW50Ll9jb21wdXRlZHM7XG5cbiAgICAgICAgICAgICAgICAgICAgX2NvbXB1dGVkc1trZXldID0gY2Iuc2V0ID8gY2Iuc2V0LmNhbGwoY29tcG9uZW50LCB2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQoX2NvbXB1dGVkc1trZXldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF9jb21wdXRlZHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZWdpc3RlckV2ZW50KGNvbXBvbmVudCwgZXZlbnQsIGtleSkge1xuXG4gICAgICAgICAgICBpZiAoIWlzUGxhaW5PYmplY3QoZXZlbnQpKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQgPSAoe25hbWU6IGtleSwgaGFuZGxlcjogZXZlbnR9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG5hbWUgPSBldmVudC5uYW1lO1xuICAgICAgICAgICAgdmFyIGVsID0gZXZlbnQuZWw7XG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9IGV2ZW50LmhhbmRsZXI7XG4gICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGV2ZW50LmNhcHR1cmU7XG4gICAgICAgICAgICB2YXIgcGFzc2l2ZSA9IGV2ZW50LnBhc3NpdmU7XG4gICAgICAgICAgICB2YXIgZGVsZWdhdGUgPSBldmVudC5kZWxlZ2F0ZTtcbiAgICAgICAgICAgIHZhciBmaWx0ZXIgPSBldmVudC5maWx0ZXI7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IGV2ZW50LnNlbGY7XG4gICAgICAgICAgICBlbCA9IGlzRnVuY3Rpb24oZWwpXG4gICAgICAgICAgICAgICAgPyBlbC5jYWxsKGNvbXBvbmVudClcbiAgICAgICAgICAgICAgICA6IGVsIHx8IGNvbXBvbmVudC4kZWw7XG5cbiAgICAgICAgICAgIGlmIChpc0FycmF5KGVsKSkge1xuICAgICAgICAgICAgICAgIGVsLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiByZWdpc3RlckV2ZW50KGNvbXBvbmVudCwgYXNzaWduKHt9LCBldmVudCwge2VsOiBlbH0pLCBrZXkpOyB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZWwgfHwgZmlsdGVyICYmICFmaWx0ZXIuY2FsbChjb21wb25lbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb21wb25lbnQuX2V2ZW50cy5wdXNoKFxuICAgICAgICAgICAgICAgIG9uKFxuICAgICAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgIWRlbGVnYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaXNTdHJpbmcoZGVsZWdhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBkZWxlZ2F0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZGVsZWdhdGUuY2FsbChjb21wb25lbnQpLFxuICAgICAgICAgICAgICAgICAgICBpc1N0cmluZyhoYW5kbGVyKSA/IGNvbXBvbmVudFtoYW5kbGVyXSA6IGhhbmRsZXIuYmluZChjb21wb25lbnQpLFxuICAgICAgICAgICAgICAgICAgICB7cGFzc2l2ZTogcGFzc2l2ZSwgY2FwdHVyZTogY2FwdHVyZSwgc2VsZjogc2VsZn1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBub3RJbihvcHRpb25zLCBrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChhcnIpIHsgcmV0dXJuICFhcnIgfHwgIWhhc093bihhcnIsIGtleSk7IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY29lcmNlKHR5cGUsIHZhbHVlKSB7XG5cbiAgICAgICAgICAgIGlmICh0eXBlID09PSBCb29sZWFuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvQm9vbGVhbih2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IE51bWJlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdsaXN0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0b0xpc3QodmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHlwZSA/IHR5cGUodmFsdWUpIDogdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBub3JtYWxpemVEYXRhKHJlZiwgcmVmJDEpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gcmVmLmRhdGE7XG4gICAgICAgICAgICB2YXIgZWwgPSByZWYuZWw7XG4gICAgICAgICAgICB2YXIgYXJncyA9IHJlZiQxLmFyZ3M7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSByZWYkMS5wcm9wczsgaWYgKCBwcm9wcyA9PT0gdm9pZCAwICkgcHJvcHMgPSB7fTtcblxuICAgICAgICAgICAgZGF0YSA9IGlzQXJyYXkoZGF0YSlcbiAgICAgICAgICAgICAgICA/ICFpc0VtcHR5KGFyZ3MpXG4gICAgICAgICAgICAgICAgICAgID8gZGF0YS5zbGljZSgwLCBhcmdzLmxlbmd0aCkucmVkdWNlKGZ1bmN0aW9uIChkYXRhLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbihkYXRhLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbYXJnc1tpbmRleF1dID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfSwge30pXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgOiBkYXRhO1xuXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChkYXRhW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZGF0YVtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtrZXldID0gcHJvcHNba2V5XSA/IGNvZXJjZShwcm9wc1trZXldLCBkYXRhW2tleV0pIDogZGF0YVtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbmNlQVBJIChVSWtpdCkge1xuXG4gICAgICAgIHZhciBEQVRBID0gVUlraXQuZGF0YTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuJGNyZWF0ZSA9IGZ1bmN0aW9uIChjb21wb25lbnQsIGVsZW1lbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBVSWtpdFtjb21wb25lbnRdKGVsZW1lbnQsIGRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoZWwpIHtcblxuICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuJG9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IHJlZi5uYW1lO1xuXG4gICAgICAgICAgICBpZiAoIWVsW0RBVEFdKSB7XG4gICAgICAgICAgICAgICAgZWxbREFUQV0gPSB7fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVsW0RBVEFdW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbFtEQVRBXVtuYW1lXSA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuJGVsID0gdGhpcy4kb3B0aW9ucy5lbCA9IHRoaXMuJG9wdGlvbnMuZWwgfHwgZWw7XG5cbiAgICAgICAgICAgIGlmICh3aXRoaW4oZWwsIGRvY3VtZW50KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxDb25uZWN0ZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuJHJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fY2FsbERpc2Nvbm5lY3RlZCgpO1xuICAgICAgICAgICAgdGhpcy5fY2FsbENvbm5lY3RlZCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uIChyZW1vdmVFbCkge1xuICAgICAgICAgICAgaWYgKCByZW1vdmVFbCA9PT0gdm9pZCAwICkgcmVtb3ZlRWwgPSBmYWxzZTtcblxuXG4gICAgICAgICAgICB2YXIgcmVmID0gdGhpcy4kb3B0aW9ucztcbiAgICAgICAgICAgIHZhciBlbCA9IHJlZi5lbDtcbiAgICAgICAgICAgIHZhciBuYW1lID0gcmVmLm5hbWU7XG5cbiAgICAgICAgICAgIGlmIChlbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxEaXNjb25uZWN0ZWQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fY2FsbEhvb2soJ2Rlc3Ryb3knKTtcblxuICAgICAgICAgICAgaWYgKCFlbCB8fCAhZWxbREFUQV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSBlbFtEQVRBXVtuYW1lXTtcblxuICAgICAgICAgICAgaWYgKCFpc0VtcHR5KGVsW0RBVEFdKSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbFtEQVRBXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlbW92ZUVsKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlKHRoaXMuJGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdGhpcy5fY2FsbFVwZGF0ZShlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuJHVwZGF0ZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBlKSB7XG4gICAgICAgICAgICBpZiAoIGVsZW1lbnQgPT09IHZvaWQgMCApIGVsZW1lbnQgPSB0aGlzLiRlbDtcblxuICAgICAgICAgICAgVUlraXQudXBkYXRlKGVsZW1lbnQsIGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS4kZ2V0Q29tcG9uZW50ID0gVUlraXQuZ2V0Q29tcG9uZW50O1xuXG4gICAgICAgIHZhciBuYW1lcyA9IHt9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhVSWtpdC5wcm90b3R5cGUsIHtcblxuICAgICAgICAgICAgJGNvbnRhaW5lcjogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihVSWtpdCwgJ2NvbnRhaW5lcicpLFxuXG4gICAgICAgICAgICAkbmFtZToge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuJG9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gcmVmLm5hbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuYW1lc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNbbmFtZV0gPSBVSWtpdC5wcmVmaXggKyBoeXBoZW5hdGUobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZXNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wb25lbnRBUEkgKFVJa2l0KSB7XG5cbiAgICAgICAgdmFyIERBVEEgPSBVSWtpdC5kYXRhO1xuXG4gICAgICAgIHZhciBjb21wb25lbnRzID0ge307XG5cbiAgICAgICAgVUlraXQuY29tcG9uZW50ID0gZnVuY3Rpb24gKG5hbWUsIG9wdGlvbnMpIHtcblxuICAgICAgICAgICAgdmFyIGlkID0gaHlwaGVuYXRlKG5hbWUpO1xuXG4gICAgICAgICAgICBuYW1lID0gY2FtZWxpemUoaWQpO1xuXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KGNvbXBvbmVudHNbbmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHNbbmFtZV0gPSBVSWtpdC5leHRlbmQoY29tcG9uZW50c1tuYW1lXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudHNbbmFtZV07XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgVUlraXRbbmFtZV0gPSBmdW5jdGlvbiAoZWxlbWVudCwgZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCwgYXJnc0FycmF5ID0gQXJyYXkoaSk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKCBpLS0gKSBhcmdzQXJyYXlbaV0gPSBhcmd1bWVudHNbaV07XG5cblxuICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBVSWtpdC5jb21wb25lbnQobmFtZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbFxuICAgICAgICAgICAgICAgICAgICA/IG5ldyBjb21wb25lbnQoe2RhdGE6IGlzUGxhaW5PYmplY3QoZWxlbWVudCkgPyBlbGVtZW50IDogW10uY29uY2F0KCBhcmdzQXJyYXkgKX0pXG4gICAgICAgICAgICAgICAgICAgIDogIWVsZW1lbnQgPyBpbml0KGVsZW1lbnQpIDogJCQoZWxlbWVudCkubWFwKGluaXQpWzBdO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5pdChlbGVtZW50KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gVUlraXQuZ2V0Q29tcG9uZW50KGVsZW1lbnQsIG5hbWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBjb21wb25lbnQoe2VsOiBlbGVtZW50LCBkYXRhOiBkYXRhfSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBvcHQgPSBpc1BsYWluT2JqZWN0KG9wdGlvbnMpID8gYXNzaWduKHt9LCBvcHRpb25zKSA6IG9wdGlvbnMub3B0aW9ucztcblxuICAgICAgICAgICAgb3B0Lm5hbWUgPSBuYW1lO1xuXG4gICAgICAgICAgICBpZiAob3B0Lmluc3RhbGwpIHtcbiAgICAgICAgICAgICAgICBvcHQuaW5zdGFsbChVSWtpdCwgb3B0LCBuYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFVJa2l0Ll9pbml0aWFsaXplZCAmJiAhb3B0LmZ1bmN0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICBmYXN0ZG9tLnJlYWQoZnVuY3Rpb24gKCkgeyByZXR1cm4gVUlraXRbbmFtZV0oKFwiW3VrLVwiICsgaWQgKyBcIl0sW2RhdGEtdWstXCIgKyBpZCArIFwiXVwiKSk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50c1tuYW1lXSA9IGlzUGxhaW5PYmplY3Qob3B0aW9ucykgPyBvcHQgOiBvcHRpb25zO1xuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LmdldENvbXBvbmVudHMgPSBmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50W0RBVEFdIHx8IHt9OyB9O1xuICAgICAgICBVSWtpdC5nZXRDb21wb25lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgbmFtZSkgeyByZXR1cm4gVUlraXQuZ2V0Q29tcG9uZW50cyhlbGVtZW50KVtuYW1lXTsgfTtcblxuICAgICAgICBVSWtpdC5jb25uZWN0ID0gZnVuY3Rpb24gKG5vZGUpIHtcblxuICAgICAgICAgICAgaWYgKG5vZGVbREFUQV0pIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIG5vZGVbREFUQV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZVtEQVRBXVtuYW1lXS5fY2FsbENvbm5lY3RlZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgICAgIHZhciBuYW1lJDEgPSBnZXRDb21wb25lbnROYW1lKG5vZGUuYXR0cmlidXRlc1tpXS5uYW1lKTtcblxuICAgICAgICAgICAgICAgIGlmIChuYW1lJDEgJiYgbmFtZSQxIGluIGNvbXBvbmVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgVUlraXRbbmFtZSQxXShub2RlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBub2RlW0RBVEFdKSB7XG4gICAgICAgICAgICAgICAgbm9kZVtEQVRBXVtuYW1lXS5fY2FsbERpc2Nvbm5lY3RlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZShhdHRyaWJ1dGUpIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0c1dpdGgoYXR0cmlidXRlLCAndWstJykgfHwgc3RhcnRzV2l0aChhdHRyaWJ1dGUsICdkYXRhLXVrLScpXG4gICAgICAgICAgICA/IGNhbWVsaXplKGF0dHJpYnV0ZS5yZXBsYWNlKCdkYXRhLXVrLScsICcnKS5yZXBsYWNlKCd1ay0nLCAnJykpXG4gICAgICAgICAgICA6IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBVSWtpdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgfTtcblxuICAgIFVJa2l0LnV0aWwgPSB1dGlsO1xuICAgIFVJa2l0LmRhdGEgPSAnX191aWtpdF9fJztcbiAgICBVSWtpdC5wcmVmaXggPSAndWstJztcbiAgICBVSWtpdC5vcHRpb25zID0ge307XG4gICAgVUlraXQudmVyc2lvbiA9ICczLjQuNic7XG5cbiAgICBnbG9iYWxBUEkoVUlraXQpO1xuICAgIGhvb2tzQVBJKFVJa2l0KTtcbiAgICBzdGF0ZUFQSShVSWtpdCk7XG4gICAgY29tcG9uZW50QVBJKFVJa2l0KTtcbiAgICBpbnN0YW5jZUFQSShVSWtpdCk7XG5cbiAgICBmdW5jdGlvbiBDb3JlIChVSWtpdCkge1xuXG4gICAgICAgIGluQnJvd3NlciAmJiByZWFkeShmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIFVJa2l0LnVwZGF0ZSgpO1xuICAgICAgICAgICAgb24od2luZG93LCAnbG9hZCByZXNpemUnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBVSWtpdC51cGRhdGUobnVsbCwgJ3Jlc2l6ZScpOyB9KTtcbiAgICAgICAgICAgIG9uKGRvY3VtZW50LCAnbG9hZGVkbWV0YWRhdGEgbG9hZCcsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBVSWtpdC51cGRhdGUodGFyZ2V0LCAncmVzaXplJyk7XG4gICAgICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gdGhyb3R0bGUgYHNjcm9sbGAgZXZlbnQgKFNhZmFyaSB0cmlnZ2VycyBtdWx0aXBsZSBgc2Nyb2xsYCBldmVudHMgcGVyIGZyYW1lKVxuICAgICAgICAgICAgdmFyIHBlbmRpbmc7XG4gICAgICAgICAgICBvbih3aW5kb3csICdzY3JvbGwnLCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmYXN0ZG9tLndyaXRlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlbmRpbmcgPSBmYWxzZTsgfSk7XG5cbiAgICAgICAgICAgICAgICBVSWtpdC51cGRhdGUobnVsbCwgZS50eXBlKTtcblxuICAgICAgICAgICAgfSwge3Bhc3NpdmU6IHRydWUsIGNhcHR1cmU6IHRydWV9KTtcblxuICAgICAgICAgICAgdmFyIHN0YXJ0ZWQgPSAwO1xuICAgICAgICAgICAgb24oZG9jdW1lbnQsICdhbmltYXRpb25zdGFydCcsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgIGlmICgoY3NzKHRhcmdldCwgJ2FuaW1hdGlvbk5hbWUnKSB8fCAnJykubWF0Y2goL151ay0uKihsZWZ0fHJpZ2h0KS8pKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRlZCsrO1xuICAgICAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ292ZXJmbG93WCcsICdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tc3RhcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAnb3ZlcmZsb3dYJywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCB0b01zKGNzcyh0YXJnZXQsICdhbmltYXRpb25EdXJhdGlvbicpKSArIDEwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIHZhciBvZmY7XG4gICAgICAgICAgICBvbihkb2N1bWVudCwgcG9pbnRlckRvd24sIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgICAgICBvZmYgJiYgb2ZmKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWlzVG91Y2goZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBTd2lwZSBHZXN0dXJlXG4gICAgICAgICAgICAgICAgdmFyIHBvcyA9IGdldEV2ZW50UG9zKGUpO1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAndGFnTmFtZScgaW4gZS50YXJnZXQgPyBlLnRhcmdldCA6IGUudGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgb2ZmID0gb25jZShkb2N1bWVudCwgKHBvaW50ZXJVcCArIFwiIFwiICsgcG9pbnRlckNhbmNlbCksIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IGdldEV2ZW50UG9zKGUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IHJlZi54O1xuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IHJlZi55O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHN3aXBlXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgeCAmJiBNYXRoLmFicyhwb3MueCAtIHgpID4gMTAwIHx8IHkgJiYgTWF0aC5hYnMocG9zLnkgLSB5KSA+IDEwMCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRhcmdldCwgJ3N3aXBlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0YXJnZXQsIChcInN3aXBlXCIgKyAoc3dpcGVEaXJlY3Rpb24ocG9zLngsIHBvcy55LCB4LCB5KSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9LCB7cGFzc2l2ZTogdHJ1ZX0pO1xuXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3dpcGVEaXJlY3Rpb24oeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHgxIC0geDIpID49IE1hdGguYWJzKHkxIC0geTIpXG4gICAgICAgICAgICA/IHgxIC0geDIgPiAwXG4gICAgICAgICAgICAgICAgPyAnTGVmdCdcbiAgICAgICAgICAgICAgICA6ICdSaWdodCdcbiAgICAgICAgICAgIDogeTEgLSB5MiA+IDBcbiAgICAgICAgICAgICAgICA/ICdVcCdcbiAgICAgICAgICAgICAgICA6ICdEb3duJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBib290IChVSWtpdCkge1xuXG4gICAgICAgIHZhciBjb25uZWN0ID0gVUlraXQuY29ubmVjdDtcbiAgICAgICAgdmFyIGRpc2Nvbm5lY3QgPSBVSWtpdC5kaXNjb25uZWN0O1xuXG4gICAgICAgIGlmICghaW5Ccm93c2VyIHx8ICF3aW5kb3cuTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZmFzdGRvbS5yZWFkKGluaXQpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7XG5cbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgICAgICAgYXBwbHkoZG9jdW1lbnQuYm9keSwgY29ubmVjdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIChuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgdmFyIHVwZGF0ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb24pIHsgcmV0dXJuIGFwcGx5TXV0YXRpb24obXV0YXRpb24sIHVwZGF0ZXMpOyB9KTtcbiAgICAgICAgICAgICAgICB1cGRhdGVzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiBVSWtpdC51cGRhdGUoZWwpOyB9KTtcbiAgICAgICAgICAgIH0pKS5vYnNlcnZlKGRvY3VtZW50LCB7XG4gICAgICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHN1YnRyZWU6IHRydWUsXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgVUlraXQuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFwcGx5TXV0YXRpb24obXV0YXRpb24sIHVwZGF0ZXMpIHtcblxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IG11dGF0aW9uLnRhcmdldDtcbiAgICAgICAgICAgIHZhciB0eXBlID0gbXV0YXRpb24udHlwZTtcblxuICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IHR5cGUgIT09ICdhdHRyaWJ1dGVzJ1xuICAgICAgICAgICAgICAgID8gYXBwbHlDaGlsZExpc3QobXV0YXRpb24pXG4gICAgICAgICAgICAgICAgOiBhcHBseUF0dHJpYnV0ZShtdXRhdGlvbik7XG5cbiAgICAgICAgICAgIGlmICh1cGRhdGUgJiYgIXVwZGF0ZXMuc29tZShmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5jb250YWlucyh0YXJnZXQpOyB9KSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZXMucHVzaCh0YXJnZXQuY29udGFpbnMgPyB0YXJnZXQgOiB0YXJnZXQucGFyZW50Tm9kZSk7IC8vIElFIDExIHRleHQgbm9kZSBkb2VzIG5vdCBpbXBsZW1lbnQgY29udGFpbnNcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYXBwbHlBdHRyaWJ1dGUocmVmKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gcmVmLmF0dHJpYnV0ZU5hbWU7XG5cblxuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZU5hbWUgPT09ICdocmVmJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoYXR0cmlidXRlTmFtZSk7XG5cbiAgICAgICAgICAgIGlmICghbmFtZSB8fCAhKG5hbWUgaW4gVUlraXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaGFzQXR0cih0YXJnZXQsIGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgVUlraXRbbmFtZV0odGFyZ2V0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IFVJa2l0LmdldENvbXBvbmVudCh0YXJnZXQsIG5hbWUpO1xuXG4gICAgICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50LiRkZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFwcGx5Q2hpbGRMaXN0KHJlZikge1xuICAgICAgICAgICAgdmFyIGFkZGVkTm9kZXMgPSByZWYuYWRkZWROb2RlcztcbiAgICAgICAgICAgIHZhciByZW1vdmVkTm9kZXMgPSByZWYucmVtb3ZlZE5vZGVzO1xuXG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWRkZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGFwcGx5KGFkZGVkTm9kZXNbaV0sIGNvbm5lY3QpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCByZW1vdmVkTm9kZXMubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgICAgICAgIGFwcGx5KHJlbW92ZWROb2Rlc1tpJDFdLCBkaXNjb25uZWN0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHZhciBDbGFzcyA9IHtcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgIWhhc0NsYXNzKHRoaXMuJGVsLCB0aGlzLiRuYW1lKSAmJiBhZGRDbGFzcyh0aGlzLiRlbCwgdGhpcy4kbmFtZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgVG9nZ2xhYmxlID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBjbHM6IEJvb2xlYW4sXG4gICAgICAgICAgICBhbmltYXRpb246ICdsaXN0JyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBOdW1iZXIsXG4gICAgICAgICAgICBvcmlnaW46IFN0cmluZyxcbiAgICAgICAgICAgIHRyYW5zaXRpb246IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGNsczogZmFsc2UsXG4gICAgICAgICAgICBhbmltYXRpb246IFtmYWxzZV0sXG4gICAgICAgICAgICBkdXJhdGlvbjogMjAwLFxuICAgICAgICAgICAgb3JpZ2luOiBmYWxzZSxcbiAgICAgICAgICAgIHRyYW5zaXRpb246ICdsaW5lYXInLFxuXG4gICAgICAgICAgICBpbml0UHJvcHM6IHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJycsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnJyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wOiAnJyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nQm90dG9tOiAnJyxcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6ICcnLFxuICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogJydcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhpZGVQcm9wczoge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgcGFkZGluZ1RvcDogMCxcbiAgICAgICAgICAgICAgICBwYWRkaW5nQm90dG9tOiAwLFxuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206IDBcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGhhc0FuaW1hdGlvbjogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHJlZi5hbmltYXRpb247XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gISFhbmltYXRpb25bMF07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYXNUcmFuc2l0aW9uOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gcmVmLmFuaW1hdGlvbjtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhhc0FuaW1hdGlvbiAmJiBhbmltYXRpb25bMF0gPT09IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHRvZ2dsZUVsZW1lbnQ6IGZ1bmN0aW9uKHRhcmdldHMsIHNob3csIGFuaW1hdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbCh0b05vZGVzKHRhcmdldHMpLm1hcChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiB0aGlzJDEuX3RvZ2dsZUVsZW1lbnQoZWwsIHNob3csIGFuaW1hdGUpLnRoZW4ocmVzb2x2ZSwgbm9vcCk7IH1cbiAgICAgICAgICAgICAgICAgICAgKTsgfVxuICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaXNUb2dnbGVkOiBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRvTm9kZXMoZWwgfHwgdGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsc1xuICAgICAgICAgICAgICAgICAgICA/IGhhc0NsYXNzKG5vZGVzLCB0aGlzLmNscy5zcGxpdCgnICcpWzBdKVxuICAgICAgICAgICAgICAgICAgICA6ICFoYXNBdHRyKG5vZGVzLCAnaGlkZGVuJyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB1cGRhdGVBcmlhOiBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNscyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cihlbCwgJ2FyaWEtaGlkZGVuJywgIXRoaXMuaXNUb2dnbGVkKGVsKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX3RvZ2dsZUVsZW1lbnQ6IGZ1bmN0aW9uKGVsLCBzaG93LCBhbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIHNob3cgPSBpc0Jvb2xlYW4oc2hvdylcbiAgICAgICAgICAgICAgICAgICAgPyBzaG93XG4gICAgICAgICAgICAgICAgICAgIDogQW5pbWF0aW9uLmluUHJvZ3Jlc3MoZWwpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGhhc0NsYXNzKGVsLCAndWstYW5pbWF0aW9uLWxlYXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogVHJhbnNpdGlvbi5pblByb2dyZXNzKGVsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZWwuc3R5bGUuaGVpZ2h0ID09PSAnMHB4J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogIXRoaXMuaXNUb2dnbGVkKGVsKTtcblxuICAgICAgICAgICAgICAgIGlmICghdHJpZ2dlcihlbCwgKFwiYmVmb3JlXCIgKyAoc2hvdyA/ICdzaG93JyA6ICdoaWRlJykpLCBbdGhpc10pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gKFxuICAgICAgICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGFuaW1hdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGFuaW1hdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYW5pbWF0ZSA9PT0gZmFsc2UgfHwgIXRoaXMuaGFzQW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLl90b2dnbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuaGFzVHJhbnNpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRvZ2dsZUhlaWdodCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRvZ2dsZUFuaW1hdGlvbih0aGlzKVxuICAgICAgICAgICAgICAgICkoZWwsIHNob3cpO1xuXG4gICAgICAgICAgICAgICAgdHJpZ2dlcihlbCwgc2hvdyA/ICdzaG93JyA6ICdoaWRlJywgW3RoaXNdKTtcblxuICAgICAgICAgICAgICAgIHZhciBmaW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcihlbCwgc2hvdyA/ICdzaG93bicgOiAnaGlkZGVuJywgW3RoaXMkMV0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzJDEuJHVwZGF0ZShlbCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlID8gcHJvbWlzZS50aGVuKGZpbmFsKSA6IFByb21pc2UucmVzb2x2ZShmaW5hbCgpKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF90b2dnbGU6IGZ1bmN0aW9uKGVsLCB0b2dnbGVkKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0b2dnbGVkID0gQm9vbGVhbih0b2dnbGVkKTtcblxuICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VkO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNscykge1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkID0gaW5jbHVkZXModGhpcy5jbHMsICcgJykgfHwgdG9nZ2xlZCAhPT0gaGFzQ2xhc3MoZWwsIHRoaXMuY2xzKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCAmJiB0b2dnbGVDbGFzcyhlbCwgdGhpcy5jbHMsIGluY2x1ZGVzKHRoaXMuY2xzLCAnICcpID8gdW5kZWZpbmVkIDogdG9nZ2xlZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRvZ2dsZWQgPT09IGhhc0F0dHIoZWwsICdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCAmJiBhdHRyKGVsLCAnaGlkZGVuJywgIXRvZ2dsZWQgPyAnJyA6IG51bGwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICQkKCdbYXV0b2ZvY3VzXScsIGVsKS5zb21lKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gaXNWaXNpYmxlKGVsKSA/IGVsLmZvY3VzKCkgfHwgdHJ1ZSA6IGVsLmJsdXIoKTsgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUFyaWEoZWwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcihlbCwgJ3RvZ2dsZWQnLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiR1cGRhdGUoZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdG9nZ2xlSGVpZ2h0KHJlZikge1xuICAgICAgICB2YXIgaXNUb2dnbGVkID0gcmVmLmlzVG9nZ2xlZDtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gcmVmLmR1cmF0aW9uO1xuICAgICAgICB2YXIgaW5pdFByb3BzID0gcmVmLmluaXRQcm9wcztcbiAgICAgICAgdmFyIGhpZGVQcm9wcyA9IHJlZi5oaWRlUHJvcHM7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uID0gcmVmLnRyYW5zaXRpb247XG4gICAgICAgIHZhciBfdG9nZ2xlID0gcmVmLl90b2dnbGU7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbCwgc2hvdykge1xuXG4gICAgICAgICAgICB2YXIgaW5Qcm9ncmVzcyA9IFRyYW5zaXRpb24uaW5Qcm9ncmVzcyhlbCk7XG4gICAgICAgICAgICB2YXIgaW5uZXIgPSBlbC5oYXNDaGlsZE5vZGVzID8gdG9GbG9hdChjc3MoZWwuZmlyc3RFbGVtZW50Q2hpbGQsICdtYXJnaW5Ub3AnKSkgKyB0b0Zsb2F0KGNzcyhlbC5sYXN0RWxlbWVudENoaWxkLCAnbWFyZ2luQm90dG9tJykpIDogMDtcbiAgICAgICAgICAgIHZhciBjdXJyZW50SGVpZ2h0ID0gaXNWaXNpYmxlKGVsKSA/IGhlaWdodChlbCkgKyAoaW5Qcm9ncmVzcyA/IDAgOiBpbm5lcikgOiAwO1xuXG4gICAgICAgICAgICBUcmFuc2l0aW9uLmNhbmNlbChlbCk7XG5cbiAgICAgICAgICAgIGlmICghaXNUb2dnbGVkKGVsKSkge1xuICAgICAgICAgICAgICAgIF90b2dnbGUoZWwsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBoZWlnaHQoZWwsICcnKTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIGNoaWxkIGNvbXBvbmVudHMgZmlyc3RcbiAgICAgICAgICAgIGZhc3Rkb20uZmx1c2goKTtcblxuICAgICAgICAgICAgdmFyIGVuZEhlaWdodCA9IGhlaWdodChlbCkgKyAoaW5Qcm9ncmVzcyA/IDAgOiBpbm5lcik7XG4gICAgICAgICAgICBoZWlnaHQoZWwsIGN1cnJlbnRIZWlnaHQpO1xuXG4gICAgICAgICAgICByZXR1cm4gKHNob3dcbiAgICAgICAgICAgICAgICAgICAgPyBUcmFuc2l0aW9uLnN0YXJ0KGVsLCBhc3NpZ24oe30sIGluaXRQcm9wcywge292ZXJmbG93OiAnaGlkZGVuJywgaGVpZ2h0OiBlbmRIZWlnaHR9KSwgTWF0aC5yb3VuZChkdXJhdGlvbiAqICgxIC0gY3VycmVudEhlaWdodCAvIGVuZEhlaWdodCkpLCB0cmFuc2l0aW9uKVxuICAgICAgICAgICAgICAgICAgICA6IFRyYW5zaXRpb24uc3RhcnQoZWwsIGhpZGVQcm9wcywgTWF0aC5yb3VuZChkdXJhdGlvbiAqIChjdXJyZW50SGVpZ2h0IC8gZW5kSGVpZ2h0KSksIHRyYW5zaXRpb24pLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RvZ2dsZShlbCwgZmFsc2UpOyB9KVxuICAgICAgICAgICAgKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNzcyhlbCwgaW5pdFByb3BzKTsgfSk7XG5cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVBbmltYXRpb24oY21wKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWwsIHNob3cpIHtcblxuICAgICAgICAgICAgQW5pbWF0aW9uLmNhbmNlbChlbCk7XG5cbiAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSBjbXAuYW5pbWF0aW9uO1xuICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gY21wLmR1cmF0aW9uO1xuICAgICAgICAgICAgdmFyIF90b2dnbGUgPSBjbXAuX3RvZ2dsZTtcblxuICAgICAgICAgICAgaWYgKHNob3cpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlKGVsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gQW5pbWF0aW9uLmluKGVsLCBhbmltYXRpb25bMF0sIGR1cmF0aW9uLCBjbXAub3JpZ2luKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIEFuaW1hdGlvbi5vdXQoZWwsIGFuaW1hdGlvblsxXSB8fCBhbmltYXRpb25bMF0sIGR1cmF0aW9uLCBjbXAub3JpZ2luKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90b2dnbGUoZWwsIGZhbHNlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIEFjY29yZGlvbiA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzcywgVG9nZ2xhYmxlXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgdGFyZ2V0czogU3RyaW5nLFxuICAgICAgICAgICAgYWN0aXZlOiBudWxsLFxuICAgICAgICAgICAgY29sbGFwc2libGU6IEJvb2xlYW4sXG4gICAgICAgICAgICBtdWx0aXBsZTogQm9vbGVhbixcbiAgICAgICAgICAgIHRvZ2dsZTogU3RyaW5nLFxuICAgICAgICAgICAgY29udGVudDogU3RyaW5nLFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogU3RyaW5nLFxuICAgICAgICAgICAgb2Zmc2V0OiBOdW1iZXJcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0YXJnZXRzOiAnPiAqJyxcbiAgICAgICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICBhbmltYXRpb246IFt0cnVlXSxcbiAgICAgICAgICAgIGNvbGxhcHNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgbXVsdGlwbGU6IGZhbHNlLFxuICAgICAgICAgICAgY2xzT3BlbjogJ3VrLW9wZW4nLFxuICAgICAgICAgICAgdG9nZ2xlOiAnPiAudWstYWNjb3JkaW9uLXRpdGxlJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6ICc+IC51ay1hY2NvcmRpb24tY29udGVudCcsXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAnZWFzZScsXG4gICAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBpdGVtczoge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0cyA9IHJlZi50YXJnZXRzO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkJCh0YXJnZXRzLCAkZWwpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3YXRjaDogZnVuY3Rpb24oaXRlbXMsIHByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gaGlkZSgkKHRoaXMkMS5jb250ZW50LCBlbCksICFoYXNDbGFzcyhlbCwgdGhpcyQxLmNsc09wZW4pKTsgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXYgfHwgaGFzQ2xhc3MoaXRlbXMsIHRoaXMuY2xzT3BlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSB0aGlzLmFjdGl2ZSAhPT0gZmFsc2UgJiYgaXRlbXNbTnVtYmVyKHRoaXMuYWN0aXZlKV1cbiAgICAgICAgICAgICAgICAgICAgICAgIHx8ICF0aGlzLmNvbGxhcHNpYmxlICYmIGl0ZW1zWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlKGFjdGl2ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaW1tZWRpYXRlOiB0cnVlXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCh0aGlzLnRhcmdldHMpICsgXCIgXCIgKyAodGhpcy4kcHJvcHMudG9nZ2xlKSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZShpbmRleCgkJCgoKHRoaXMudGFyZ2V0cykgKyBcIiBcIiArICh0aGlzLiRwcm9wcy50b2dnbGUpKSwgdGhpcy4kZWwpLCBlLmN1cnJlbnQpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbihpdGVtLCBhbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IFt0aGlzLml0ZW1zW2dldEluZGV4KGl0ZW0sIHRoaXMuaXRlbXMpXV07XG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZUl0ZW1zID0gZmlsdGVyKHRoaXMuaXRlbXMsIChcIi5cIiArICh0aGlzLmNsc09wZW4pKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubXVsdGlwbGUgJiYgIWluY2x1ZGVzKGFjdGl2ZUl0ZW1zLCBpdGVtc1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMgPSBpdGVtcy5jb25jYXQoYWN0aXZlSXRlbXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb2xsYXBzaWJsZSAmJiAhZmlsdGVyKGl0ZW1zLCAoXCI6bm90KC5cIiArICh0aGlzLmNsc09wZW4pICsgXCIpXCIpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiB0aGlzJDEudG9nZ2xlRWxlbWVudChlbCwgIWhhc0NsYXNzKGVsLCB0aGlzJDEuY2xzT3BlbiksIGZ1bmN0aW9uIChlbCwgc2hvdykge1xuXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGVsLCB0aGlzJDEuY2xzT3Blbiwgc2hvdyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSAkKChcIlwiICsgKGVsLl93cmFwcGVyID8gJz4gKiAnIDogJycpICsgKHRoaXMkMS5jb250ZW50KSksIGVsKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0ZSA9PT0gZmFsc2UgfHwgIXRoaXMkMS5oYXNUcmFuc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRlKGNvbnRlbnQsICFzaG93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZWwuX3dyYXBwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLl93cmFwcGVyID0gd3JhcEFsbChjb250ZW50LCAoXCI8ZGl2XCIgKyAoc2hvdyA/ICcgaGlkZGVuJyA6ICcnKSArIFwiPlwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBoaWRlKGNvbnRlbnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvZ2dsZUhlaWdodCh0aGlzJDEpKGVsLl93cmFwcGVyLCBzaG93KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGUoY29udGVudCwgIXNob3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGVsLl93cmFwcGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdW53cmFwKGNvbnRlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b2dnbGUgPSAkKHRoaXMkMS4kcHJvcHMudG9nZ2xlLCBlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0luVmlldyh0b2dnbGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbEludG9WaWV3KHRvZ2dsZSwge29mZnNldDogdGhpcyQxLm9mZnNldH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBoaWRlKGVsLCBoaWRlKSB7XG4gICAgICAgIGF0dHIoZWwsICdoaWRkZW4nLCBoaWRlID8gJycgOiBudWxsKTtcbiAgICB9XG5cbiAgICB2YXIgYWxlcnQgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbQ2xhc3MsIFRvZ2dsYWJsZV0sXG5cbiAgICAgICAgYXJnczogJ2FuaW1hdGlvbicsXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGNsb3NlOiBTdHJpbmdcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBhbmltYXRpb246IFt0cnVlXSxcbiAgICAgICAgICAgIHNlbENsb3NlOiAnLnVrLWFsZXJ0LWNsb3NlJyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAxNTAsXG4gICAgICAgICAgICBoaWRlUHJvcHM6IGFzc2lnbih7b3BhY2l0eTogMH0sIFRvZ2dsYWJsZS5kYXRhLmhpZGVQcm9wcylcbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsQ2xvc2U7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlRWxlbWVudCh0aGlzLiRlbCkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuJGRlc3Ryb3kodHJ1ZSk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgVmlkZW8gPSB7XG5cbiAgICAgICAgYXJnczogJ2F1dG9wbGF5JyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgYXV0b211dGU6IEJvb2xlYW4sXG4gICAgICAgICAgICBhdXRvcGxheTogQm9vbGVhblxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGF1dG9tdXRlOiBmYWxzZSxcbiAgICAgICAgICAgIGF1dG9wbGF5OiB0cnVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgaW5WaWV3OiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXV0b3BsYXkgPSByZWYuYXV0b3BsYXk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYXV0b3BsYXkgPT09ICdpbnZpZXcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaW5WaWV3ICYmICFoYXNBdHRyKHRoaXMuJGVsLCAncHJlbG9hZCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZWwucHJlbG9hZCA9ICdub25lJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5wbGF5ZXIgPSBuZXcgUGxheWVyKHRoaXMuJGVsKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYXV0b211dGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5tdXRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMucGxheWVyXG4gICAgICAgICAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBpc1Zpc2libGUodGhpcy4kZWwpICYmIGNzcyh0aGlzLiRlbCwgJ3Zpc2liaWxpdHknKSAhPT0gJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBpblZpZXc6IHRoaXMuaW5WaWV3ICYmIGlzSW5WaWV3KHRoaXMuJGVsKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciB2aXNpYmxlID0gcmVmLnZpc2libGU7XG4gICAgICAgICAgICAgICAgdmFyIGluVmlldyA9IHJlZi5pblZpZXc7XG5cblxuICAgICAgICAgICAgICAgIGlmICghdmlzaWJsZSB8fCB0aGlzLmluVmlldyAmJiAhaW5WaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmF1dG9wbGF5ID09PSB0cnVlIHx8IHRoaXMuaW5WaWV3ICYmIGluVmlldykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5wbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJywgJ3Njcm9sbCddXG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBjb3ZlciA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzcywgVmlkZW9dLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICB3aWR0aDogTnVtYmVyLFxuICAgICAgICAgICAgaGVpZ2h0OiBOdW1iZXJcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBhdXRvbXV0ZTogdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBlbCA9IHRoaXMuJGVsO1xuICAgICAgICAgICAgICAgIHZhciByZWYgPSBnZXRQb3NpdGlvbmVkUGFyZW50KGVsKSB8fCBlbC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByZWYub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHJlZi5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICB2YXIgZGltID0gRGltZW5zaW9ucy5jb3ZlcihcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMud2lkdGggfHwgZWwubmF0dXJhbFdpZHRoIHx8IGVsLnZpZGVvV2lkdGggfHwgZWwuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0IHx8IGVsLm5hdHVyYWxIZWlnaHQgfHwgZWwudmlkZW9IZWlnaHQgfHwgZWwuY2xpZW50SGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCArICh3aWR0aCAlIDIgPyAxIDogMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArIChoZWlnaHQgJSAyID8gMSA6IDApXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFkaW0ud2lkdGggfHwgIWRpbS5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBkaW07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHJlZi5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gcmVmLndpZHRoO1xuXG4gICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCB7aGVpZ2h0OiBoZWlnaHQsIHdpZHRoOiB3aWR0aH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFBvc2l0aW9uZWRQYXJlbnQoZWwpIHtcbiAgICAgICAgd2hpbGUgKChlbCA9IHBhcmVudChlbCkpKSB7XG4gICAgICAgICAgICBpZiAoY3NzKGVsLCAncG9zaXRpb24nKSAhPT0gJ3N0YXRpYycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgUG9zaXRpb24gPSB7XG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIHBvczogU3RyaW5nLFxuICAgICAgICAgICAgb2Zmc2V0OiBudWxsLFxuICAgICAgICAgICAgZmxpcDogQm9vbGVhbixcbiAgICAgICAgICAgIGNsc1BvczogU3RyaW5nXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgcG9zOiAoXCJib3R0b20tXCIgKyAoIWlzUnRsID8gJ2xlZnQnIDogJ3JpZ2h0JykpLFxuICAgICAgICAgICAgZmxpcDogdHJ1ZSxcbiAgICAgICAgICAgIG9mZnNldDogZmFsc2UsXG4gICAgICAgICAgICBjbHNQb3M6ICcnXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgcG9zOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zID0gcmVmLnBvcztcblxuICAgICAgICAgICAgICAgIHJldHVybiAocG9zICsgKCFpbmNsdWRlcyhwb3MsICctJykgPyAnLWNlbnRlcicgOiAnJykpLnNwbGl0KCctJyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkaXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBvc1swXTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGFsaWduOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wb3NbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHBvc2l0aW9uQXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHRhcmdldCwgYm91bmRhcnkpIHtcblxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzZXMoZWxlbWVudCwgKCh0aGlzLmNsc1BvcykgKyBcIi0odG9wfGJvdHRvbXxsZWZ0fHJpZ2h0KSgtW2Etel0rKT9cIikpO1xuICAgICAgICAgICAgICAgIGNzcyhlbGVtZW50LCB7dG9wOiAnJywgbGVmdDogJyd9KTtcblxuICAgICAgICAgICAgICAgIHZhciBub2RlO1xuICAgICAgICAgICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQkMSA9IHJlZi5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIGF4aXMgPSB0aGlzLmdldEF4aXMoKTtcblxuICAgICAgICAgICAgICAgIGlmICghaXNOdW1lcmljKG9mZnNldCQxKSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gJChvZmZzZXQkMSk7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCQxID0gbm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvZmZzZXQobm9kZSlbYXhpcyA9PT0gJ3gnID8gJ2xlZnQnIDogJ3RvcCddIC0gb2Zmc2V0KHRhcmdldClbYXhpcyA9PT0gJ3gnID8gJ3JpZ2h0JyA6ICdib3R0b20nXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciByZWYkMSA9IHBvc2l0aW9uQXQoXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgYXhpcyA9PT0gJ3gnID8gKChmbGlwUG9zaXRpb24odGhpcy5kaXIpKSArIFwiIFwiICsgKHRoaXMuYWxpZ24pKSA6ICgodGhpcy5hbGlnbikgKyBcIiBcIiArIChmbGlwUG9zaXRpb24odGhpcy5kaXIpKSksXG4gICAgICAgICAgICAgICAgICAgIGF4aXMgPT09ICd4JyA/ICgodGhpcy5kaXIpICsgXCIgXCIgKyAodGhpcy5hbGlnbikpIDogKCh0aGlzLmFsaWduKSArIFwiIFwiICsgKHRoaXMuZGlyKSksXG4gICAgICAgICAgICAgICAgICAgIGF4aXMgPT09ICd4JyA/IChcIlwiICsgKHRoaXMuZGlyID09PSAnbGVmdCcgPyAtb2Zmc2V0JDEgOiBvZmZzZXQkMSkpIDogKFwiIFwiICsgKHRoaXMuZGlyID09PSAndG9wJyA/IC1vZmZzZXQkMSA6IG9mZnNldCQxKSksXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmxpcCxcbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlcbiAgICAgICAgICAgICAgICApLnRhcmdldDtcbiAgICAgICAgICAgICAgICB2YXIgeCA9IHJlZiQxLng7XG4gICAgICAgICAgICAgICAgdmFyIHkgPSByZWYkMS55O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kaXIgPSBheGlzID09PSAneCcgPyB4IDogeTtcbiAgICAgICAgICAgICAgICB0aGlzLmFsaWduID0gYXhpcyA9PT0gJ3gnID8geSA6IHg7XG5cbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhlbGVtZW50LCAoKHRoaXMuY2xzUG9zKSArIFwiLVwiICsgKHRoaXMuZGlyKSArIFwiLVwiICsgKHRoaXMuYWxpZ24pKSwgdGhpcy5vZmZzZXQgPT09IGZhbHNlKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0QXhpczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlyID09PSAndG9wJyB8fCB0aGlzLmRpciA9PT0gJ2JvdHRvbScgPyAneScgOiAneCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBhY3RpdmU7XG5cbiAgICB2YXIgZHJvcCA9IHtcblxuICAgICAgICBtaXhpbnM6IFtQb3NpdGlvbiwgVG9nZ2xhYmxlXSxcblxuICAgICAgICBhcmdzOiAncG9zJyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgbW9kZTogJ2xpc3QnLFxuICAgICAgICAgICAgdG9nZ2xlOiBCb29sZWFuLFxuICAgICAgICAgICAgYm91bmRhcnk6IEJvb2xlYW4sXG4gICAgICAgICAgICBib3VuZGFyeUFsaWduOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVsYXlTaG93OiBOdW1iZXIsXG4gICAgICAgICAgICBkZWxheUhpZGU6IE51bWJlcixcbiAgICAgICAgICAgIGNsc0Ryb3A6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG1vZGU6IFsnY2xpY2snLCAnaG92ZXInXSxcbiAgICAgICAgICAgIHRvZ2dsZTogJy0gKicsXG4gICAgICAgICAgICBib3VuZGFyeTogaW5Ccm93c2VyICYmIHdpbmRvdyxcbiAgICAgICAgICAgIGJvdW5kYXJ5QWxpZ246IGZhbHNlLFxuICAgICAgICAgICAgZGVsYXlTaG93OiAwLFxuICAgICAgICAgICAgZGVsYXlIaWRlOiA4MDAsXG4gICAgICAgICAgICBjbHNEcm9wOiBmYWxzZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogWyd1ay1hbmltYXRpb24tZmFkZSddLFxuICAgICAgICAgICAgY2xzOiAndWstb3BlbidcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBib3VuZGFyeTogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgYm91bmRhcnkgPSByZWYuYm91bmRhcnk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnkoYm91bmRhcnksICRlbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjbHNEcm9wOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2xzRHJvcCA9IHJlZi5jbHNEcm9wO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsc0Ryb3AgfHwgKFwidWstXCIgKyAodGhpcy4kb3B0aW9ucy5uYW1lKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjbHNQb3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsc0Ryb3A7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMudHJhY2tlciA9IG5ldyBNb3VzZVRyYWNrZXIoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbCwgdGhpcy5jbHNEcm9wKTtcblxuICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuJHByb3BzO1xuICAgICAgICAgICAgdmFyIHRvZ2dsZSA9IHJlZi50b2dnbGU7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZSA9IHRvZ2dsZSAmJiB0aGlzLiRjcmVhdGUoJ3RvZ2dsZScsIHF1ZXJ5KHRvZ2dsZSwgdGhpcy4kZWwpLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLiRlbCxcbiAgICAgICAgICAgICAgICBtb2RlOiB0aGlzLm1vZGVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAhdGhpcy50b2dnbGUgJiYgdHJpZ2dlcih0aGlzLiRlbCwgJ3VwZGF0ZWFyaWEnKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGRpc2Nvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIi5cIiArICh0aGlzLmNsc0Ryb3ApICsgXCItY2xvc2VcIik7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhW2hyZWZePVwiI1wiXSc7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFByZXZlbnRlZCA9IHJlZi5kZWZhdWx0UHJldmVudGVkO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFzaCA9IHJlZi5jdXJyZW50Lmhhc2g7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWZhdWx0UHJldmVudGVkICYmIGhhc2ggJiYgIXdpdGhpbihoYXNoLCB0aGlzLiRlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdiZWZvcmVzY3JvbGwnLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAndG9nZ2xlJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlLCB0b2dnbGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNUb2dnbGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3codG9nZ2xlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICd0b2dnbGVzaG93JyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlLCB0b2dnbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3codG9nZ2xlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICd0b2dnbGVoaWRlJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiBwb2ludGVyRW50ZXIsXG5cbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5jbHVkZXModGhpcy5tb2RlLCAnaG92ZXInKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVG91Y2goZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogcG9pbnRlckxlYXZlLFxuXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluY2x1ZGVzKHRoaXMubW9kZSwgJ2hvdmVyJyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RvdWNoKGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ3RvZ2dsZWQnLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1RvZ2dsZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhclRpbWVycygpO1xuICAgICAgICAgICAgICAgICAgICBBbmltYXRpb24uY2FuY2VsKHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ3Nob3cnLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFja2VyLmluaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ3VwZGF0ZWFyaWEnKTtcblxuICAgICAgICAgICAgICAgICAgICBvbmNlKHRoaXMuJGVsLCAnaGlkZScsIG9uKGRvY3VtZW50LCBwb2ludGVyRG93biwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF3aXRoaW4odGFyZ2V0LCB0aGlzJDEuJGVsKSAmJiBvbmNlKGRvY3VtZW50LCAocG9pbnRlclVwICsgXCIgXCIgKyBwb2ludGVyQ2FuY2VsICsgXCIgc2Nyb2xsXCIpLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSByZWYuZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdUYXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWZhdWx0UHJldmVudGVkICYmIHR5cGUgPT09IHBvaW50ZXJVcCAmJiB0YXJnZXQgPT09IG5ld1RhcmdldCAmJiAhKHRoaXMkMS50b2dnbGUgJiYgd2l0aGluKHRhcmdldCwgdGhpcyQxLnRvZ2dsZS4kZWwpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKSwge3NlbGY6IHRydWV9KTtcblxuICAgICAgICAgICAgICAgICAgICBvbmNlKHRoaXMuJGVsLCAnaGlkZScsIG9uKGRvY3VtZW50LCAna2V5ZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAyNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLCB7c2VsZjogdHJ1ZX0pO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnYmVmb3JlaGlkZScsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lcnMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdoaWRlJyxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiRlbCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSBhY3RpdmUgPT09IG51bGwgJiYgd2l0aGluKHRhcmdldCwgdGhpcy4kZWwpICYmIHRoaXMuaXNUb2dnbGVkKCkgPyB0aGlzIDogYWN0aXZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gdGhpcy5pc0FjdGl2ZSgpID8gbnVsbCA6IGFjdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ3VwZGF0ZWFyaWEnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFja2VyLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ3VwZGF0ZWFyaWEnLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUsIHRvZ2dsZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUFyaWEodGhpcy4kZWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2dnbGUgfHwgdGhpcy50b2dnbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIoKHRvZ2dsZSB8fCB0aGlzLnRvZ2dsZSkuJGVsLCAnYXJpYS1leHBhbmRlZCcsIHRoaXMuaXNUb2dnbGVkKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy50b2dnbGUuJGVsLCB0aGlzLmNscywgdGhpcy5pc1RvZ2dsZWQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNUb2dnbGVkKCkgJiYgIUFuaW1hdGlvbi5pblByb2dyZXNzKHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24odG9nZ2xlLCBkZWxheSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGlmICggdG9nZ2xlID09PSB2b2lkIDAgKSB0b2dnbGUgPSB0aGlzLnRvZ2dsZTtcbiAgICAgICAgICAgICAgICBpZiAoIGRlbGF5ID09PSB2b2lkIDAgKSBkZWxheSA9IHRydWU7XG5cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVG9nZ2xlZCgpICYmIHRvZ2dsZSAmJiB0aGlzLnRvZ2dsZSAmJiB0b2dnbGUuJGVsICE9PSB0aGlzLnRvZ2dsZS4kZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZSA9IHRvZ2dsZTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lcnMoKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVsYXkgJiYgYWN0aXZlLmlzRGVsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RpbWVyID0gc2V0VGltZW91dCh0aGlzLnNob3csIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChhY3RpdmUgJiYgIXdpdGhpbih0aGlzLiRlbCwgYWN0aXZlLiRlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZS5oaWRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiAhdGhpcyQxLmlzVG9nZ2xlZCgpICYmIHRoaXMkMS50b2dnbGVFbGVtZW50KHRoaXMkMS4kZWwsIHRydWUpOyB9LCBkZWxheSAmJiB0aGlzLmRlbGF5U2hvdyB8fCAwKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGlkZTogZnVuY3Rpb24oZGVsYXkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICAgICAgICAgICAgICBpZiAoIGRlbGF5ID09PSB2b2lkIDAgKSBkZWxheSA9IHRydWU7XG5cblxuICAgICAgICAgICAgICAgIHZhciBoaWRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLnRvZ2dsZUVsZW1lbnQodGhpcyQxLiRlbCwgZmFsc2UsIGZhbHNlKTsgfTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lcnMoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuaXNEZWxheWluZyA9IGdldFBvc2l0aW9uZWRFbGVtZW50cyh0aGlzLiRlbCkuc29tZShmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIHRoaXMkMS50cmFja2VyLm1vdmVzVG8oZWwpOyB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChkZWxheSAmJiB0aGlzLmlzRGVsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlVGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuaGlkZSwgNTApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVsYXkgJiYgdGhpcy5kZWxheUhpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlVGltZXIgPSBzZXRUaW1lb3V0KGhpZGUsIHRoaXMuZGVsYXlIaWRlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY2xlYXJUaW1lcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNob3dUaW1lcik7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaGlkZVRpbWVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dUaW1lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlVGltZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNEZWxheWluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaXNBY3RpdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhY3RpdmUgPT09IHRoaXM7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzc2VzKHRoaXMuJGVsLCAoKHRoaXMuY2xzRHJvcCkgKyBcIi0oc3RhY2t8Ym91bmRhcnkpXCIpKTtcbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLiRlbCwgKCh0aGlzLmNsc0Ryb3ApICsgXCItYm91bmRhcnlcIiksIHRoaXMuYm91bmRhcnlBbGlnbik7XG5cbiAgICAgICAgICAgICAgICB2YXIgYm91bmRhcnkgPSBvZmZzZXQodGhpcy5ib3VuZGFyeSk7XG4gICAgICAgICAgICAgICAgdmFyIGFsaWduVG8gPSB0aGlzLmJvdW5kYXJ5QWxpZ24gPyBib3VuZGFyeSA6IG9mZnNldCh0aGlzLnRvZ2dsZS4kZWwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWxpZ24gPT09ICdqdXN0aWZ5Jykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcCA9IHRoaXMuZ2V0QXhpcygpID09PSAneScgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG4gICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgcHJvcCwgYWxpZ25Ub1twcm9wXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLiRlbC5vZmZzZXRXaWR0aCA+IE1hdGgubWF4KGJvdW5kYXJ5LnJpZ2h0IC0gYWxpZ25Uby5sZWZ0LCBhbGlnblRvLnJpZ2h0IC0gYm91bmRhcnkubGVmdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsICgodGhpcy5jbHNEcm9wKSArIFwiLXN0YWNrXCIpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uQXQodGhpcy4kZWwsIHRoaXMuYm91bmRhcnlBbGlnbiA/IHRoaXMuYm91bmRhcnkgOiB0aGlzLnRvZ2dsZS4kZWwsIHRoaXMuYm91bmRhcnkpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFBvc2l0aW9uZWRFbGVtZW50cyhlbCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIGFwcGx5KGVsLCBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGNzcyhlbCwgJ3Bvc2l0aW9uJykgIT09ICdzdGF0aWMnICYmIHJlc3VsdC5wdXNoKGVsKTsgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1DdXN0b20gPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbQ2xhc3NdLFxuXG4gICAgICAgIGFyZ3M6ICd0YXJnZXQnLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IEJvb2xlYW5cbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKF8sICRlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkKHNlbElucHV0LCAkZWwpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0Lm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRhcmdldDogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQgJiYgKHRhcmdldCA9PT0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAmJiB0aGlzLmlucHV0LnBhcmVudE5vZGUgPT09ICRlbFxuICAgICAgICAgICAgICAgICAgICAmJiB0aGlzLmlucHV0Lm5leHRFbGVtZW50U2libGluZ1xuICAgICAgICAgICAgICAgICAgICB8fCBxdWVyeSh0YXJnZXQsICRlbCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IHJlZi5pbnB1dDtcblxuICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBvcHRpb247XG4gICAgICAgICAgICB2YXIgcHJvcCA9IGlzSW5wdXQodGFyZ2V0KSA/ICd2YWx1ZScgOiAndGV4dENvbnRlbnQnO1xuICAgICAgICAgICAgdmFyIHByZXYgPSB0YXJnZXRbcHJvcF07XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBpbnB1dC5maWxlcyAmJiBpbnB1dC5maWxlc1swXVxuICAgICAgICAgICAgICAgID8gaW5wdXQuZmlsZXNbMF0ubmFtZVxuICAgICAgICAgICAgICAgIDogbWF0Y2hlcyhpbnB1dCwgJ3NlbGVjdCcpICYmIChvcHRpb24gPSAkJCgnb3B0aW9uJywgaW5wdXQpLmZpbHRlcihmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGVsLnNlbGVjdGVkOyB9KVswXSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICAgICAgICAgICAgICA/IG9wdGlvbi50ZXh0Q29udGVudFxuICAgICAgICAgICAgICAgICAgICA6IGlucHV0LnZhbHVlO1xuXG4gICAgICAgICAgICBpZiAocHJldiAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2NoYW5nZScsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdyZXNldCcsXG5cbiAgICAgICAgICAgICAgICBlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9zZXN0KHRoaXMuJGVsLCAnZm9ybScpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF1cblxuICAgIH07XG5cbiAgICAvLyBEZXByZWNhdGVkXG4gICAgdmFyIGdpZiA9IHtcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGludmlldyA9IGlzSW5WaWV3KHRoaXMuJGVsKTtcblxuICAgICAgICAgICAgICAgIGlmICghaW52aWV3IHx8IGRhdGEuaXNJblZpZXcgPT09IGludmlldykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGF0YS5pc0luVmlldyA9IGludmlldztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbC5zcmMgPSB0aGlzLiRlbC5zcmM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1hc3NpZ25cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydzY3JvbGwnLCAncmVzaXplJ11cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBNYXJnaW4gPSB7XG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIG1hcmdpbjogU3RyaW5nLFxuICAgICAgICAgICAgZmlyc3RDb2x1bW46IEJvb2xlYW5cbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBtYXJnaW46ICd1ay1tYXJnaW4tc21hbGwtdG9wJyxcbiAgICAgICAgICAgIGZpcnN0Q29sdW1uOiAndWstZmlyc3QtY29sdW1uJ1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBnZXRDb2x1bW5zKHRoaXMuJGVsLmNoaWxkcmVuKSxcbiAgICAgICAgICAgICAgICAgICAgcm93czogZ2V0Um93cyh0aGlzLiRlbC5jaGlsZHJlbilcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBjb2x1bW5zID0gcmVmLmNvbHVtbnM7XG4gICAgICAgICAgICAgICAgdmFyIHJvd3MgPSByZWYucm93cztcblxuICAgICAgICAgICAgICAgIHJvd3MuZm9yRWFjaChmdW5jdGlvbiAocm93LCBpKSB7IHJldHVybiByb3cuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGVsLCB0aGlzJDEubWFyZ2luLCBpICE9PSAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGVsLCB0aGlzJDEuZmlyc3RDb2x1bW4sIGluY2x1ZGVzKGNvbHVtbnNbMF0sIGVsKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pOyB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRSb3dzKGl0ZW1zKSB7XG4gICAgICAgIHJldHVybiBzb3J0QnkkMShpdGVtcywgJ3RvcCcsICdib3R0b20nKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDb2x1bW5zKGl0ZW1zKSB7XG4gICAgICAgIHZhciBjb2x1bW5zID0gc29ydEJ5JDEoaXRlbXMsICdsZWZ0JywgJ3JpZ2h0Jyk7XG4gICAgICAgIHJldHVybiBpc1J0bFxuICAgICAgICAgICAgPyBjb2x1bW5zLnJldmVyc2UoKVxuICAgICAgICAgICAgOiBjb2x1bW5zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNvcnRCeSQxKGl0ZW1zLCBzdGFydFByb3AsIGVuZFByb3ApIHtcblxuICAgICAgICB2YXIgc29ydGVkID0gW1tdXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgIHZhciBlbCA9IGl0ZW1zW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWlzVmlzaWJsZShlbCkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGRpbSA9IGdldE9mZnNldChlbCk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSBzb3J0ZWQubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcblxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gc29ydGVkW2pdO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50WzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQucHVzaChlbCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBzdGFydERpbSA9ICh2b2lkIDApO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50WzBdLm9mZnNldFBhcmVudCA9PT0gZWwub2Zmc2V0UGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RGltID0gZ2V0T2Zmc2V0KGN1cnJlbnRbMF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRpbSA9IGdldE9mZnNldChlbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RGltID0gZ2V0T2Zmc2V0KGN1cnJlbnRbMF0sIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChkaW1bc3RhcnRQcm9wXSA+PSBzdGFydERpbVtlbmRQcm9wXSAtIDEgJiYgZGltW3N0YXJ0UHJvcF0gIT09IHN0YXJ0RGltW3N0YXJ0UHJvcF0pIHtcbiAgICAgICAgICAgICAgICAgICAgc29ydGVkLnB1c2goW2VsXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChkaW1bZW5kUHJvcF0gLSAxID4gc3RhcnREaW1bc3RhcnRQcm9wXSB8fCBkaW1bc3RhcnRQcm9wXSA9PT0gc3RhcnREaW1bc3RhcnRQcm9wXSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnB1c2goZWwpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBzb3J0ZWQudW5zaGlmdChbZWxdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzb3J0ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0T2Zmc2V0KGVsZW1lbnQsIG9mZnNldCkge1xuICAgICAgICB2YXIgYXNzaWduO1xuXG4gICAgICAgIGlmICggb2Zmc2V0ID09PSB2b2lkIDAgKSBvZmZzZXQgPSBmYWxzZTtcblxuICAgICAgICB2YXIgb2Zmc2V0VG9wID0gZWxlbWVudC5vZmZzZXRUb3A7XG4gICAgICAgIHZhciBvZmZzZXRMZWZ0ID0gZWxlbWVudC5vZmZzZXRMZWZ0O1xuICAgICAgICB2YXIgb2Zmc2V0SGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHZhciBvZmZzZXRXaWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG5cbiAgICAgICAgaWYgKG9mZnNldCkge1xuICAgICAgICAgICAgKGFzc2lnbiA9IG9mZnNldFBvc2l0aW9uKGVsZW1lbnQpLCBvZmZzZXRUb3AgPSBhc3NpZ25bMF0sIG9mZnNldExlZnQgPSBhc3NpZ25bMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvcDogb2Zmc2V0VG9wLFxuICAgICAgICAgICAgbGVmdDogb2Zmc2V0TGVmdCxcbiAgICAgICAgICAgIGJvdHRvbTogb2Zmc2V0VG9wICsgb2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgICAgcmlnaHQ6IG9mZnNldExlZnQgKyBvZmZzZXRXaWR0aFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBncmlkID0ge1xuXG4gICAgICAgIGV4dGVuZHM6IE1hcmdpbixcblxuICAgICAgICBtaXhpbnM6IFtDbGFzc10sXG5cbiAgICAgICAgbmFtZTogJ2dyaWQnLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBtYXNvbnJ5OiBCb29sZWFuLFxuICAgICAgICAgICAgcGFyYWxsYXg6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG1hcmdpbjogJ3VrLWdyaWQtbWFyZ2luJyxcbiAgICAgICAgICAgIGNsc1N0YWNrOiAndWstZ3JpZC1zdGFjaycsXG4gICAgICAgICAgICBtYXNvbnJ5OiBmYWxzZSxcbiAgICAgICAgICAgIHBhcmFsbGF4OiAwXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMubWFzb25yeSAmJiBhZGRDbGFzcyh0aGlzLiRlbCwgJ3VrLWZsZXgtdG9wIHVrLWZsZXgtd3JhcC10b3AnKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1ucyA9IHJlZi5jb2x1bW5zO1xuXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuJGVsLCB0aGlzLmNsc1N0YWNrLCBjb2x1bW5zLmxlbmd0aCA8IDIpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW5zID0gcmVmLmNvbHVtbnM7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3dzID0gcmVmLnJvd3M7XG5cblxuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZXMgPSBjaGlsZHJlbih0aGlzLiRlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub2Rlcy5sZW5ndGggfHwgIXRoaXMubWFzb25yeSAmJiAhdGhpcy5wYXJhbGxheCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25JblByb2dyZXNzID0gbm9kZXMuc29tZShUcmFuc2l0aW9uLmluUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxIZWlnaHQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhZGRpbmcgPSBNYXRoLmFicyh0aGlzLnBhcmFsbGF4KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXNvbnJ5KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMgPSBjb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7IHJldHVybiBzb3J0QnkoY29sdW1uLCAnb2Zmc2V0VG9wJyk7IH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1uSGVpZ2h0cyA9IGdldENvbHVtbkhlaWdodHMoY29sdW1ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFyZ2luID0gZ2V0TWFyZ2luVG9wKG5vZGVzLCB0aGlzLm1hcmdpbikgKiAocm93cy5sZW5ndGggLSAxKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlcyA9IGdldFRyYW5zbGF0ZXMocm93cywgY29sdW1ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbEhlaWdodCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGNvbHVtbkhlaWdodHMpICsgbWFyZ2luO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFkZGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmcgPSBjb2x1bW5IZWlnaHRzLnJlZHVjZShmdW5jdGlvbiAobmV3UGFkZGluZywgaGd0LCBpKSB7IHJldHVybiBNYXRoLm1heChuZXdQYWRkaW5nLCBoZ3QgKyBtYXJnaW4gKyAoaSAlIDIgPyBwYWRkaW5nIDogcGFkZGluZyAvIDgpIC0gZWxIZWlnaHQpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwYWRkaW5nOiBwYWRkaW5nLCBjb2x1bW5zOiBjb2x1bW5zLCB0cmFuc2xhdGVzOiB0cmFuc2xhdGVzLCBoZWlnaHQ6ICF0cmFuc2l0aW9uSW5Qcm9ncmVzcyA/IGVsSGVpZ2h0IDogZmFsc2V9O1xuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHJlZi5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWRkaW5nID0gcmVmLnBhZGRpbmc7XG5cblxuICAgICAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsICdwYWRkaW5nQm90dG9tJywgcGFkZGluZyB8fCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCAhPT0gZmFsc2UgJiYgY3NzKHRoaXMuJGVsLCAnaGVpZ2h0JywgaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQkMSA9IHJlZi5oZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGVkOiB0aGlzLnBhcmFsbGF4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzY3JvbGxlZE92ZXIodGhpcy4kZWwsIGhlaWdodCQxID8gaGVpZ2h0JDEgLSBoZWlnaHQodGhpcy4kZWwpIDogMCkgKiBNYXRoLmFicyh0aGlzLnBhcmFsbGF4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1ucyA9IHJlZi5jb2x1bW5zO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsZWQgPSByZWYuc2Nyb2xsZWQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2xhdGVzID0gcmVmLnRyYW5zbGF0ZXM7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsZWQgPT09IGZhbHNlICYmICF0cmFuc2xhdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbiwgaSkgeyByZXR1cm4gY29sdW1uLmZvckVhY2goZnVuY3Rpb24gKGVsLCBqKSB7IHJldHVybiBjc3MoZWwsICd0cmFuc2Zvcm0nLCAhc2Nyb2xsZWQgJiYgIXRyYW5zbGF0ZXMgPyAnJyA6IChcInRyYW5zbGF0ZVkoXCIgKyAoKHRyYW5zbGF0ZXMgJiYgLXRyYW5zbGF0ZXNbaV1bal0pICsgKHNjcm9sbGVkID8gaSAlIDIgPyBzY3JvbGxlZCA6IHNjcm9sbGVkIC8gOCA6IDApKSArIFwicHgpXCIpKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTsgfVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGV2ZW50czogWydzY3JvbGwnLCAncmVzaXplJ11cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRUcmFuc2xhdGVzKHJvd3MsIGNvbHVtbnMpIHtcblxuICAgICAgICB2YXIgcm93SGVpZ2h0cyA9IHJvd3MubWFwKGZ1bmN0aW9uIChyb3cpIHsgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIHJvdy5tYXAoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlbC5vZmZzZXRIZWlnaHQ7IH0pKTsgfVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBjb2x1bW5zLm1hcChmdW5jdGlvbiAoZWxlbWVudHMpIHtcbiAgICAgICAgICAgIHZhciBwcmV2ID0gMDtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50cy5tYXAoZnVuY3Rpb24gKGVsZW1lbnQsIHJvdykgeyByZXR1cm4gcHJldiArPSByb3dcbiAgICAgICAgICAgICAgICAgICAgPyByb3dIZWlnaHRzW3JvdyAtIDFdIC0gZWxlbWVudHNbcm93IC0gMV0ub2Zmc2V0SGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIDogMDsgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TWFyZ2luVG9wKG5vZGVzLCBjbHMpIHtcblxuICAgICAgICB2YXIgcmVmID0gbm9kZXMuZmlsdGVyKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gaGFzQ2xhc3MoZWwsIGNscyk7IH0pO1xuICAgICAgICB2YXIgbm9kZSA9IHJlZlswXTtcblxuICAgICAgICByZXR1cm4gdG9GbG9hdChub2RlXG4gICAgICAgICAgICA/IGNzcyhub2RlLCAnbWFyZ2luVG9wJylcbiAgICAgICAgICAgIDogY3NzKG5vZGVzWzBdLCAncGFkZGluZ0xlZnQnKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29sdW1uSGVpZ2h0cyhjb2x1bW5zKSB7XG4gICAgICAgIHJldHVybiBjb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7IHJldHVybiBjb2x1bW4ucmVkdWNlKGZ1bmN0aW9uIChzdW0sIGVsKSB7IHJldHVybiBzdW0gKyBlbC5vZmZzZXRIZWlnaHQ7IH0sIDApOyB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gSUUgMTEgZml4IChtaW4taGVpZ2h0IG9uIGEgZmxleCBjb250YWluZXIgd29uJ3QgYXBwbHkgdG8gaXRzIGZsZXggaXRlbXMpXG4gICAgdmFyIEZsZXhCdWcgPSBpc0lFID8ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBzZWxNaW5IZWlnaHQ6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHNlbE1pbkhlaWdodDogZmFsc2UsXG4gICAgICAgICAgICBmb3JjZUhlaWdodDogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBlbGVtZW50czogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsTWluSGVpZ2h0ID0gcmVmLnNlbE1pbkhlaWdodDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxNaW5IZWlnaHQgPyAkJChzZWxNaW5IZWlnaHQsICRlbCkgOiBbJGVsXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZTogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICByZWFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuZWxlbWVudHMsICdoZWlnaHQnLCAnJyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIG9yZGVyOiAtNSxcblxuICAgICAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSB0b0Zsb2F0KGNzcyhlbCwgJ21pbkhlaWdodCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoZWlnaHQgJiYgKHRoaXMkMS5mb3JjZUhlaWdodCB8fCBNYXRoLnJvdW5kKGhlaWdodCArIGJveE1vZGVsQWRqdXN0KGVsLCAnaGVpZ2h0JywgJ2NvbnRlbnQtYm94JykpID49IGVsLm9mZnNldEhlaWdodCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3MoZWwsICdoZWlnaHQnLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgb3JkZXI6IDUsXG5cbiAgICAgICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF1cblxuICAgIH0gOiB7fTtcblxuICAgIHZhciBoZWlnaHRNYXRjaCA9IHtcblxuICAgICAgICBtaXhpbnM6IFtGbGV4QnVnXSxcblxuICAgICAgICBhcmdzOiAndGFyZ2V0JyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgdGFyZ2V0OiBTdHJpbmcsXG4gICAgICAgICAgICByb3c6IEJvb2xlYW5cbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0YXJnZXQ6ICc+IConLFxuICAgICAgICAgICAgcm93OiB0cnVlLFxuICAgICAgICAgICAgZm9yY2VIZWlnaHQ6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBlbGVtZW50czogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgIHJldHVybiAkJCh0YXJnZXQsICRlbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcm93czogKHRoaXMucm93ID8gZ2V0Um93cyh0aGlzLmVsZW1lbnRzKSA6IFt0aGlzLmVsZW1lbnRzXSkubWFwKG1hdGNoKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJvd3MgPSByZWYucm93cztcblxuICAgICAgICAgICAgICAgIHJvd3MuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0cyA9IHJlZi5oZWlnaHRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gcmVmLmVsZW1lbnRzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGkpIHsgcmV0dXJuIGNzcyhlbCwgJ21pbkhlaWdodCcsIGhlaWdodHNbaV0pOyB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbWF0Y2goZWxlbWVudHMpIHtcbiAgICAgICAgdmFyIGFzc2lnbjtcblxuXG4gICAgICAgIGlmIChlbGVtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICByZXR1cm4ge2hlaWdodHM6IFsnJ10sIGVsZW1lbnRzOiBlbGVtZW50c307XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVmID0gZ2V0SGVpZ2h0cyhlbGVtZW50cyk7XG4gICAgICAgIHZhciBoZWlnaHRzID0gcmVmLmhlaWdodHM7XG4gICAgICAgIHZhciBtYXggPSByZWYubWF4O1xuICAgICAgICB2YXIgaGFzTWluSGVpZ2h0ID0gZWxlbWVudHMuc29tZShmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGVsLnN0eWxlLm1pbkhlaWdodDsgfSk7XG4gICAgICAgIHZhciBoYXNTaHJ1bmsgPSBlbGVtZW50cy5zb21lKGZ1bmN0aW9uIChlbCwgaSkgeyByZXR1cm4gIWVsLnN0eWxlLm1pbkhlaWdodCAmJiBoZWlnaHRzW2ldIDwgbWF4OyB9KTtcblxuICAgICAgICBpZiAoaGFzTWluSGVpZ2h0ICYmIGhhc1NocnVuaykge1xuICAgICAgICAgICAgY3NzKGVsZW1lbnRzLCAnbWluSGVpZ2h0JywgJycpO1xuICAgICAgICAgICAgKChhc3NpZ24gPSBnZXRIZWlnaHRzKGVsZW1lbnRzKSwgaGVpZ2h0cyA9IGFzc2lnbi5oZWlnaHRzLCBtYXggPSBhc3NpZ24ubWF4KSk7XG4gICAgICAgIH1cblxuICAgICAgICBoZWlnaHRzID0gZWxlbWVudHMubWFwKGZ1bmN0aW9uIChlbCwgaSkgeyByZXR1cm4gaGVpZ2h0c1tpXSA9PT0gbWF4ICYmIHRvRmxvYXQoZWwuc3R5bGUubWluSGVpZ2h0KS50b0ZpeGVkKDIpICE9PSBtYXgudG9GaXhlZCgyKSA/ICcnIDogbWF4OyB9XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHtoZWlnaHRzOiBoZWlnaHRzLCBlbGVtZW50czogZWxlbWVudHN9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEhlaWdodHMoZWxlbWVudHMpIHtcbiAgICAgICAgdmFyIGhlaWdodHMgPSBlbGVtZW50cy5tYXAoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBvZmZzZXQoZWwpLmhlaWdodCAtIGJveE1vZGVsQWRqdXN0KGVsLCAnaGVpZ2h0JywgJ2NvbnRlbnQtYm94Jyk7IH0pO1xuICAgICAgICB2YXIgbWF4ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgaGVpZ2h0cyk7XG5cbiAgICAgICAgcmV0dXJuIHtoZWlnaHRzOiBoZWlnaHRzLCBtYXg6IG1heH07XG4gICAgfVxuXG4gICAgdmFyIGhlaWdodFZpZXdwb3J0ID0ge1xuXG4gICAgICAgIG1peGluczogW0ZsZXhCdWddLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBleHBhbmQ6IEJvb2xlYW4sXG4gICAgICAgICAgICBvZmZzZXRUb3A6IEJvb2xlYW4sXG4gICAgICAgICAgICBvZmZzZXRCb3R0b206IEJvb2xlYW4sXG4gICAgICAgICAgICBtaW5IZWlnaHQ6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGV4cGFuZDogZmFsc2UsXG4gICAgICAgICAgICBvZmZzZXRUb3A6IGZhbHNlLFxuICAgICAgICAgICAgb2Zmc2V0Qm90dG9tOiBmYWxzZSxcbiAgICAgICAgICAgIG1pbkhlaWdodDogMFxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJldiA9IHJlZi5taW5IZWlnaHQ7XG5cblxuICAgICAgICAgICAgICAgIGlmICghaXNWaXNpYmxlKHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIG1pbkhlaWdodCA9ICcnO1xuICAgICAgICAgICAgICAgIHZhciBib3ggPSBib3hNb2RlbEFkanVzdCh0aGlzLiRlbCwgJ2hlaWdodCcsICdjb250ZW50LWJveCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZXhwYW5kKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuZGF0YXNldC5oZWlnaHRFeHBhbmQgPSAnJztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoJCgnW2RhdGEtaGVpZ2h0LWV4cGFuZF0nKSAhPT0gdGhpcy4kZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCA9IGhlaWdodCh3aW5kb3cpIC0gKG9mZnNldEhlaWdodChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIC0gb2Zmc2V0SGVpZ2h0KHRoaXMuJGVsKSkgLSBib3ggfHwgJyc7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uIG1vYmlsZSBkZXZpY2VzIChpT1MgYW5kIEFuZHJvaWQpIHdpbmRvdy5pbm5lckhlaWdodCAhPT0gMTAwdmhcbiAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0ID0gJ2NhbGMoMTAwdmgnO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9mZnNldFRvcCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmJDEgPSBvZmZzZXQodGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvcCA9IHJlZiQxLnRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCArPSB0b3AgPiAwICYmIHRvcCA8IGhlaWdodCh3aW5kb3cpIC8gMiA/IChcIiAtIFwiICsgdG9wICsgXCJweFwiKSA6ICcnO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vZmZzZXRCb3R0b20gPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0ICs9IFwiIC0gXCIgKyAob2Zmc2V0SGVpZ2h0KHRoaXMuJGVsLm5leHRFbGVtZW50U2libGluZykpICsgXCJweFwiO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOdW1lcmljKHRoaXMub2Zmc2V0Qm90dG9tKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQgKz0gXCIgLSBcIiArICh0aGlzLm9mZnNldEJvdHRvbSkgKyBcInZoXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9mZnNldEJvdHRvbSAmJiBlbmRzV2l0aCh0aGlzLm9mZnNldEJvdHRvbSwgJ3B4JykpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0ICs9IFwiIC0gXCIgKyAodG9GbG9hdCh0aGlzLm9mZnNldEJvdHRvbSkpICsgXCJweFwiO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcodGhpcy5vZmZzZXRCb3R0b20pKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCArPSBcIiAtIFwiICsgKG9mZnNldEhlaWdodChxdWVyeSh0aGlzLm9mZnNldEJvdHRvbSwgdGhpcy4kZWwpKSkgKyBcInB4XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCArPSAoYm94ID8gKFwiIC0gXCIgKyBib3ggKyBcInB4XCIpIDogJycpICsgXCIpXCI7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge21pbkhlaWdodDogbWluSGVpZ2h0LCBwcmV2OiBwcmV2fTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWluSGVpZ2h0ID0gcmVmLm1pbkhlaWdodDtcbiAgICAgICAgICAgICAgICB2YXIgcHJldiA9IHJlZi5wcmV2O1xuXG5cbiAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsIHttaW5IZWlnaHQ6IG1pbkhlaWdodH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1pbkhlaWdodCAhPT0gcHJldikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiR1cGRhdGUodGhpcy4kZWwsICdyZXNpemUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5taW5IZWlnaHQgJiYgdG9GbG9hdChjc3ModGhpcy4kZWwsICdtaW5IZWlnaHQnKSkgPCB0aGlzLm1pbkhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsICdtaW5IZWlnaHQnLCB0aGlzLm1pbkhlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0SGVpZ2h0KGVsKSB7XG4gICAgICAgIHJldHVybiBlbCAmJiBvZmZzZXQoZWwpLmhlaWdodCB8fCAwO1xuICAgIH1cblxuICAgIHZhciBTVkcgPSB7XG5cbiAgICAgICAgYXJnczogJ3NyYycsXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGlkOiBCb29sZWFuLFxuICAgICAgICAgICAgaWNvbjogU3RyaW5nLFxuICAgICAgICAgICAgc3JjOiBTdHJpbmcsXG4gICAgICAgICAgICBzdHlsZTogU3RyaW5nLFxuICAgICAgICAgICAgd2lkdGg6IE51bWJlcixcbiAgICAgICAgICAgIGhlaWdodDogTnVtYmVyLFxuICAgICAgICAgICAgcmF0aW86IE51bWJlcixcbiAgICAgICAgICAgIGNsYXNzOiBTdHJpbmcsXG4gICAgICAgICAgICBzdHJva2VBbmltYXRpb246IEJvb2xlYW4sXG4gICAgICAgICAgICBmb2N1c2FibGU6IEJvb2xlYW4sIC8vIElFIDExXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiAnbGlzdCdcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICByYXRpbzogMSxcbiAgICAgICAgICAgIGluY2x1ZGU6IFsnc3R5bGUnLCAnY2xhc3MnLCAnZm9jdXNhYmxlJ10sXG4gICAgICAgICAgICBjbGFzczogJycsXG4gICAgICAgICAgICBzdHJva2VBbmltYXRpb246IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgYmVmb3JlQ29ubmVjdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmNsYXNzICs9ICcgdWstc3ZnJztcbiAgICAgICAgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgYXNzaWduO1xuXG5cbiAgICAgICAgICAgIGlmICghdGhpcy5pY29uICYmIGluY2x1ZGVzKHRoaXMuc3JjLCAnIycpKSB7XG4gICAgICAgICAgICAgICAgKGFzc2lnbiA9IHRoaXMuc3JjLnNwbGl0KCcjJyksIHRoaXMuc3JjID0gYXNzaWduWzBdLCB0aGlzLmljb24gPSBhc3NpZ25bMV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnN2ZyA9IHRoaXMuZ2V0U3ZnKCkudGhlbihmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzJDEuYXBwbHlBdHRyaWJ1dGVzKGVsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcyQxLnN2Z0VsID0gaW5zZXJ0U1ZHKGVsLCB0aGlzJDEuJGVsKTtcbiAgICAgICAgICAgIH0sIG5vb3ApO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgIGlmIChpc1ZvaWRFbGVtZW50KHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgIGF0dHIodGhpcy4kZWwsICdoaWRkZW4nLCBudWxsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuc3ZnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdmcudGhlbihmdW5jdGlvbiAoc3ZnKSB7IHJldHVybiAoIXRoaXMkMS5fY29ubmVjdGVkIHx8IHN2ZyAhPT0gdGhpcyQxLnN2Z0VsKSAmJiByZW1vdmUoc3ZnKTsgfSwgbm9vcCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc3ZnID0gdGhpcy5zdmdFbCA9IG51bGw7XG5cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhKHRoaXMuc3Ryb2tlQW5pbWF0aW9uICYmIHRoaXMuc3ZnRWwgJiYgaXNWaXNpYmxlKHRoaXMuc3ZnRWwpKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBhcHBseUFuaW1hdGlvbih0aGlzLnN2Z0VsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHR5cGU6IFsncmVzaXplJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgZ2V0U3ZnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBsb2FkU1ZHKHRoaXMuc3JjKS50aGVuKGZ1bmN0aW9uIChzdmcpIHsgcmV0dXJuIHBhcnNlU1ZHKHN2ZywgdGhpcyQxLmljb24pIHx8IFByb21pc2UucmVqZWN0KCdTVkcgbm90IGZvdW5kLicpOyB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGFwcGx5QXR0cmlidXRlczogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiB0aGlzLiRvcHRpb25zLnByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW3Byb3BdICYmIGluY2x1ZGVzKHRoaXMuaW5jbHVkZSwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIoZWwsIHByb3AsIHRoaXNbcHJvcF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYXR0cmlidXRlIGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZV0uc3BsaXQoJzonLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3AkMSA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcmVmWzFdO1xuICAgICAgICAgICAgICAgICAgICBhdHRyKGVsLCBwcm9wJDEsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQXR0cihlbCwgJ2lkJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHByb3BzID0gWyd3aWR0aCcsICdoZWlnaHQnXTtcbiAgICAgICAgICAgICAgICB2YXIgZGltZW5zaW9ucyA9IFt0aGlzLndpZHRoLCB0aGlzLmhlaWdodF07XG5cbiAgICAgICAgICAgICAgICBpZiAoIWRpbWVuc2lvbnMuc29tZShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWw7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpbWVuc2lvbnMgPSBwcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHsgcmV0dXJuIGF0dHIoZWwsIHByb3ApOyB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgdmlld0JveCA9IGF0dHIoZWwsICd2aWV3Qm94Jyk7XG4gICAgICAgICAgICAgICAgaWYgKHZpZXdCb3ggJiYgIWRpbWVuc2lvbnMuc29tZShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWw7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpbWVuc2lvbnMgPSB2aWV3Qm94LnNwbGl0KCcgJykuc2xpY2UoMik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGltZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gKHZhbCB8IDApICogdGhpcyQxLnJhdGlvO1xuICAgICAgICAgICAgICAgICAgICB2YWwgJiYgYXR0cihlbCwgcHJvcHNbaV0sIHZhbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCAmJiAhZGltZW5zaW9uc1tpIF4gMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUF0dHIoZWwsIHByb3BzW2kgXiAxXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGF0dHIoZWwsICdkYXRhLXN2ZycsIHRoaXMuaWNvbiB8fCB0aGlzLnNyYyk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIHN2Z3MgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGxvYWRTVkcoc3JjKSB7XG5cbiAgICAgICAgaWYgKHN2Z3Nbc3JjXSkge1xuICAgICAgICAgICAgcmV0dXJuIHN2Z3Nbc3JjXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdmdzW3NyY10gPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgIGlmICghc3JjKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3RhcnRzV2l0aChzcmMsICdkYXRhOicpKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShkZWNvZGVVUklDb21wb25lbnQoc3JjLnNwbGl0KCcsJylbMV0pKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBhamF4KHNyYykudGhlbihcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHhocikgeyByZXR1cm4gcmVzb2x2ZSh4aHIucmVzcG9uc2UpOyB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiByZWplY3QoJ1NWRyBub3QgZm91bmQuJyk7IH1cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VTVkcoc3ZnLCBpY29uKSB7XG5cbiAgICAgICAgaWYgKGljb24gJiYgaW5jbHVkZXMoc3ZnLCAnPHN5bWJvbCcpKSB7XG4gICAgICAgICAgICBzdmcgPSBwYXJzZVN5bWJvbHMoc3ZnLCBpY29uKSB8fCBzdmc7XG4gICAgICAgIH1cblxuICAgICAgICBzdmcgPSAkKHN2Zy5zdWJzdHIoc3ZnLmluZGV4T2YoJzxzdmcnKSkpO1xuICAgICAgICByZXR1cm4gc3ZnICYmIHN2Zy5oYXNDaGlsZE5vZGVzKCkgJiYgc3ZnO1xuICAgIH1cblxuICAgIHZhciBzeW1ib2xSZSA9IC88c3ltYm9sKFteXSo/aWQ9KFsnXCJdKSguKz8pXFwyW15dKj88XFwvKXN5bWJvbD4vZztcbiAgICB2YXIgc3ltYm9scyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gcGFyc2VTeW1ib2xzKHN2ZywgaWNvbikge1xuXG4gICAgICAgIGlmICghc3ltYm9sc1tzdmddKSB7XG5cbiAgICAgICAgICAgIHN5bWJvbHNbc3ZnXSA9IHt9O1xuXG4gICAgICAgICAgICBzeW1ib2xSZS5sYXN0SW5kZXggPSAwO1xuXG4gICAgICAgICAgICB2YXIgbWF0Y2g7XG4gICAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gc3ltYm9sUmUuZXhlYyhzdmcpKSkge1xuICAgICAgICAgICAgICAgIHN5bWJvbHNbc3ZnXVttYXRjaFszXV0gPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIlwiICsgKG1hdGNoWzFdKSArIFwic3ZnPlwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3ltYm9sc1tzdmddW2ljb25dO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5QW5pbWF0aW9uKGVsKSB7XG5cbiAgICAgICAgdmFyIGxlbmd0aCA9IGdldE1heFBhdGhMZW5ndGgoZWwpO1xuXG4gICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KCctLXVrLWFuaW1hdGlvbi1zdHJva2UnLCBsZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNYXhQYXRoTGVuZ3RoKGVsKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoTWF0aC5tYXguYXBwbHkoTWF0aCwgWyAwIF0uY29uY2F0KCAkJCgnW3N0cm9rZV0nLCBlbCkubWFwKGZ1bmN0aW9uIChzdHJva2UpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cm9rZS5nZXRUb3RhbExlbmd0aCgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSApKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zZXJ0U1ZHKGVsLCByb290KSB7XG5cbiAgICAgICAgaWYgKGlzVm9pZEVsZW1lbnQocm9vdCkgfHwgcm9vdC50YWdOYW1lID09PSAnQ0FOVkFTJykge1xuXG4gICAgICAgICAgICBhdHRyKHJvb3QsICdoaWRkZW4nLCB0cnVlKTtcblxuICAgICAgICAgICAgdmFyIG5leHQgPSByb290Lm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgIHJldHVybiBlcXVhbHMoZWwsIG5leHQpXG4gICAgICAgICAgICAgICAgPyBuZXh0XG4gICAgICAgICAgICAgICAgOiBhZnRlcihyb290LCBlbCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsYXN0ID0gcm9vdC5sYXN0RWxlbWVudENoaWxkO1xuICAgICAgICByZXR1cm4gZXF1YWxzKGVsLCBsYXN0KVxuICAgICAgICAgICAgPyBsYXN0XG4gICAgICAgICAgICA6IGFwcGVuZChyb290LCBlbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXF1YWxzKGVsLCBvdGhlcikge1xuICAgICAgICByZXR1cm4gYXR0cihlbCwgJ2RhdGEtc3ZnJykgPT09IGF0dHIob3RoZXIsICdkYXRhLXN2ZycpO1xuICAgIH1cblxuICAgIHZhciBjbG9zZUljb24gPSBcIjxzdmcgd2lkdGg9XFxcIjE0XFxcIiBoZWlnaHQ9XFxcIjE0XFxcIiB2aWV3Qm94PVxcXCIwIDAgMTQgMTRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PGxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgeDE9XFxcIjFcXFwiIHkxPVxcXCIxXFxcIiB4Mj1cXFwiMTNcXFwiIHkyPVxcXCIxM1xcXCIvPjxsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIHgxPVxcXCIxM1xcXCIgeTE9XFxcIjFcXFwiIHgyPVxcXCIxXFxcIiB5Mj1cXFwiMTNcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBjbG9zZUxhcmdlID0gXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjRcXFwiIHgxPVxcXCIxXFxcIiB5MT1cXFwiMVxcXCIgeDI9XFxcIjE5XFxcIiB5Mj1cXFwiMTlcXFwiLz48bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS40XFxcIiB4MT1cXFwiMTlcXFwiIHkxPVxcXCIxXFxcIiB4Mj1cXFwiMVxcXCIgeTI9XFxcIjE5XFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgbWFya2VyID0gXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxyZWN0IHg9XFxcIjlcXFwiIHk9XFxcIjRcXFwiIHdpZHRoPVxcXCIxXFxcIiBoZWlnaHQ9XFxcIjExXFxcIi8+PHJlY3QgeD1cXFwiNFxcXCIgeT1cXFwiOVxcXCIgd2lkdGg9XFxcIjExXFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBuYXZiYXJUb2dnbGVJY29uID0gXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxyZWN0IHk9XFxcIjlcXFwiIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyXFxcIi8+PHJlY3QgeT1cXFwiM1xcXCIgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjJcXFwiLz48cmVjdCB5PVxcXCIxNVxcXCIgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjJcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBvdmVybGF5SWNvbiA9IFwiPHN2ZyB3aWR0aD1cXFwiNDBcXFwiIGhlaWdodD1cXFwiNDBcXFwiIHZpZXdCb3g9XFxcIjAgMCA0MCA0MFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cmVjdCB4PVxcXCIxOVxcXCIgeT1cXFwiMFxcXCIgd2lkdGg9XFxcIjFcXFwiIGhlaWdodD1cXFwiNDBcXFwiLz48cmVjdCB4PVxcXCIwXFxcIiB5PVxcXCIxOVxcXCIgd2lkdGg9XFxcIjQwXFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBwYWdpbmF0aW9uTmV4dCA9IFwiPHN2ZyB3aWR0aD1cXFwiN1xcXCIgaGVpZ2h0PVxcXCIxMlxcXCIgdmlld0JveD1cXFwiMCAwIDcgMTJcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjJcXFwiIHBvaW50cz1cXFwiMSAxIDYgNiAxIDExXFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgcGFnaW5hdGlvblByZXZpb3VzID0gXCI8c3ZnIHdpZHRoPVxcXCI3XFxcIiBoZWlnaHQ9XFxcIjEyXFxcIiB2aWV3Qm94PVxcXCIwIDAgNyAxMlxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMlxcXCIgcG9pbnRzPVxcXCI2IDEgMSA2IDYgMTFcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBzZWFyY2hJY29uID0gXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgY3g9XFxcIjlcXFwiIGN5PVxcXCI5XFxcIiByPVxcXCI3XFxcIi8+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgZD1cXFwiTTE0LDE0IEwxOCwxOCBMMTQsMTQgWlxcXCIvPjwvc3ZnPlwiO1xuXG4gICAgdmFyIHNlYXJjaExhcmdlID0gXCI8c3ZnIHdpZHRoPVxcXCI0MFxcXCIgaGVpZ2h0PVxcXCI0MFxcXCIgdmlld0JveD1cXFwiMCAwIDQwIDQwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuOFxcXCIgY3g9XFxcIjE3LjVcXFwiIGN5PVxcXCIxNy41XFxcIiByPVxcXCIxNi41XFxcIi8+PGxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuOFxcXCIgeDE9XFxcIjM4XFxcIiB5MT1cXFwiMzlcXFwiIHgyPVxcXCIyOVxcXCIgeTI9XFxcIjMwXFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgc2VhcmNoTmF2YmFyID0gXCI8c3ZnIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCIyNFxcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgY3g9XFxcIjEwLjVcXFwiIGN5PVxcXCIxMC41XFxcIiByPVxcXCI5LjVcXFwiLz48bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiB4MT1cXFwiMjNcXFwiIHkxPVxcXCIyM1xcXCIgeDI9XFxcIjE3XFxcIiB5Mj1cXFwiMTdcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBzbGlkZW5hdk5leHQgPSBcIjxzdmcgd2lkdGg9XFxcIjE0cHhcXFwiIGhlaWdodD1cXFwiMjRweFxcXCIgdmlld0JveD1cXFwiMCAwIDE0IDI0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS40XFxcIiBwb2ludHM9XFxcIjEuMjI1LDIzIDEyLjc3NSwxMiAxLjIyNSwxIFxcXCIvPjwvc3ZnPlwiO1xuXG4gICAgdmFyIHNsaWRlbmF2TmV4dExhcmdlID0gXCI8c3ZnIHdpZHRoPVxcXCIyNXB4XFxcIiBoZWlnaHQ9XFxcIjQwcHhcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNSA0MFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjJcXFwiIHBvaW50cz1cXFwiNC4wMDIsMzguNTQ3IDIyLjUyNywyMC4wMjQgNCwxLjUgXFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgc2xpZGVuYXZQcmV2aW91cyA9IFwiPHN2ZyB3aWR0aD1cXFwiMTRweFxcXCIgaGVpZ2h0PVxcXCIyNHB4XFxcIiB2aWV3Qm94PVxcXCIwIDAgMTQgMjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjRcXFwiIHBvaW50cz1cXFwiMTIuNzc1LDEgMS4yMjUsMTIgMTIuNzc1LDIzIFxcXCIvPjwvc3ZnPlwiO1xuXG4gICAgdmFyIHNsaWRlbmF2UHJldmlvdXNMYXJnZSA9IFwiPHN2ZyB3aWR0aD1cXFwiMjVweFxcXCIgaGVpZ2h0PVxcXCI0MHB4XFxcIiB2aWV3Qm94PVxcXCIwIDAgMjUgNDBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIyXFxcIiBwb2ludHM9XFxcIjIwLjUyNywxLjUgMiwyMC4wMjQgMjAuNTI1LDM4LjU0NyBcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBzcGlubmVyID0gXCI8c3ZnIHdpZHRoPVxcXCIzMFxcXCIgaGVpZ2h0PVxcXCIzMFxcXCIgdmlld0JveD1cXFwiMCAwIDMwIDMwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBjeD1cXFwiMTVcXFwiIGN5PVxcXCIxNVxcXCIgcj1cXFwiMTRcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciB0b3RvcCA9IFwiPHN2ZyB3aWR0aD1cXFwiMThcXFwiIGhlaWdodD1cXFwiMTBcXFwiIHZpZXdCb3g9XFxcIjAgMCAxOCAxMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMlxcXCIgcG9pbnRzPVxcXCIxIDkgOSAxIDE3IDkgXFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgaWNvbnMgPSB7XG4gICAgICAgIHNwaW5uZXI6IHNwaW5uZXIsXG4gICAgICAgIHRvdG9wOiB0b3RvcCxcbiAgICAgICAgbWFya2VyOiBtYXJrZXIsXG4gICAgICAgICdjbG9zZS1pY29uJzogY2xvc2VJY29uLFxuICAgICAgICAnY2xvc2UtbGFyZ2UnOiBjbG9zZUxhcmdlLFxuICAgICAgICAnbmF2YmFyLXRvZ2dsZS1pY29uJzogbmF2YmFyVG9nZ2xlSWNvbixcbiAgICAgICAgJ292ZXJsYXktaWNvbic6IG92ZXJsYXlJY29uLFxuICAgICAgICAncGFnaW5hdGlvbi1uZXh0JzogcGFnaW5hdGlvbk5leHQsXG4gICAgICAgICdwYWdpbmF0aW9uLXByZXZpb3VzJzogcGFnaW5hdGlvblByZXZpb3VzLFxuICAgICAgICAnc2VhcmNoLWljb24nOiBzZWFyY2hJY29uLFxuICAgICAgICAnc2VhcmNoLWxhcmdlJzogc2VhcmNoTGFyZ2UsXG4gICAgICAgICdzZWFyY2gtbmF2YmFyJzogc2VhcmNoTmF2YmFyLFxuICAgICAgICAnc2xpZGVuYXYtbmV4dCc6IHNsaWRlbmF2TmV4dCxcbiAgICAgICAgJ3NsaWRlbmF2LW5leHQtbGFyZ2UnOiBzbGlkZW5hdk5leHRMYXJnZSxcbiAgICAgICAgJ3NsaWRlbmF2LXByZXZpb3VzJzogc2xpZGVuYXZQcmV2aW91cyxcbiAgICAgICAgJ3NsaWRlbmF2LXByZXZpb3VzLWxhcmdlJzogc2xpZGVuYXZQcmV2aW91c0xhcmdlXG4gICAgfTtcblxuICAgIHZhciBJY29uID0ge1xuXG4gICAgICAgIGluc3RhbGw6IGluc3RhbGwsXG5cbiAgICAgICAgZXh0ZW5kczogU1ZHLFxuXG4gICAgICAgIGFyZ3M6ICdpY29uJyxcblxuICAgICAgICBwcm9wczogWydpY29uJ10sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgaW5jbHVkZTogWydmb2N1c2FibGUnXVxuICAgICAgICB9LFxuXG4gICAgICAgIGlzSWNvbjogdHJ1ZSxcblxuICAgICAgICBiZWZvcmVDb25uZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCAndWstaWNvbicpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgZ2V0U3ZnOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBpY29uID0gZ2V0SWNvbih0aGlzLmljb24pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFpY29uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnSWNvbiBub3QgZm91bmQuJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShpY29uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIEljb25Db21wb25lbnQgPSB7XG5cbiAgICAgICAgYXJnczogZmFsc2UsXG5cbiAgICAgICAgZXh0ZW5kczogSWNvbixcblxuICAgICAgICBkYXRhOiBmdW5jdGlvbiAodm0pIHsgcmV0dXJuICh7XG4gICAgICAgICAgICBpY29uOiBoeXBoZW5hdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucy5uYW1lKVxuICAgICAgICB9KTsgfSxcblxuICAgICAgICBiZWZvcmVDb25uZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCB0aGlzLiRuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBTbGlkZW5hdiA9IHtcblxuICAgICAgICBleHRlbmRzOiBJY29uQ29tcG9uZW50LFxuXG4gICAgICAgIGJlZm9yZUNvbm5lY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsICd1ay1zbGlkZW5hdicpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGljb246IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGljb24gPSByZWYuaWNvbjtcblxuICAgICAgICAgICAgICAgIHJldHVybiBoYXNDbGFzcygkZWwsICd1ay1zbGlkZW5hdi1sYXJnZScpXG4gICAgICAgICAgICAgICAgICAgID8gKGljb24gKyBcIi1sYXJnZVwiKVxuICAgICAgICAgICAgICAgICAgICA6IGljb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBTZWFyY2ggPSB7XG5cbiAgICAgICAgZXh0ZW5kczogSWNvbkNvbXBvbmVudCxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBpY29uOiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBpY29uID0gcmVmLmljb247XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzQ2xhc3MoJGVsLCAndWstc2VhcmNoLWljb24nKSAmJiBwYXJlbnRzKCRlbCwgJy51ay1zZWFyY2gtbGFyZ2UnKS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgPyAnc2VhcmNoLWxhcmdlJ1xuICAgICAgICAgICAgICAgICAgICA6IHBhcmVudHMoJGVsLCAnLnVrLXNlYXJjaC1uYXZiYXInKS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3NlYXJjaC1uYXZiYXInXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGljb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBDbG9zZSA9IHtcblxuICAgICAgICBleHRlbmRzOiBJY29uQ29tcG9uZW50LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGljb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXCJjbG9zZS1cIiArIChoYXNDbGFzcyh0aGlzLiRlbCwgJ3VrLWNsb3NlLWxhcmdlJykgPyAnbGFyZ2UnIDogJ2ljb24nKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBTcGlubmVyID0ge1xuXG4gICAgICAgIGV4dGVuZHM6IEljb25Db21wb25lbnQsXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLnN2Zy50aGVuKGZ1bmN0aW9uIChzdmcpIHsgcmV0dXJuIHRoaXMkMS5yYXRpbyAhPT0gMSAmJiBjc3MoJCgnY2lyY2xlJywgc3ZnKSwgJ3N0cm9rZVdpZHRoJywgMSAvIHRoaXMkMS5yYXRpbyk7IH0sIG5vb3ApO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIHBhcnNlZCA9IHt9O1xuICAgIGZ1bmN0aW9uIGluc3RhbGwoVUlraXQpIHtcbiAgICAgICAgVUlraXQuaWNvbi5hZGQgPSBmdW5jdGlvbiAobmFtZSwgc3ZnKSB7XG4gICAgICAgICAgICB2YXIgb2JqO1xuXG5cbiAgICAgICAgICAgIHZhciBhZGRlZCA9IGlzU3RyaW5nKG5hbWUpID8gKCggb2JqID0ge30sIG9ialtuYW1lXSA9IHN2Zywgb2JqICkpIDogbmFtZTtcbiAgICAgICAgICAgIGVhY2goYWRkZWQsIGZ1bmN0aW9uIChzdmcsIG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpY29uc1tuYW1lXSA9IHN2ZztcbiAgICAgICAgICAgICAgICBkZWxldGUgcGFyc2VkW25hbWVdO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChVSWtpdC5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICBhcHBseShkb2N1bWVudC5ib2R5LCBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGVhY2goVUlraXQuZ2V0Q29tcG9uZW50cyhlbCksIGZ1bmN0aW9uIChjbXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtcC4kb3B0aW9ucy5pc0ljb24gJiYgY21wLmljb24gaW4gYWRkZWQgJiYgY21wLiRyZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICB9KTsgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SWNvbihpY29uKSB7XG5cbiAgICAgICAgaWYgKCFpY29uc1tpY29uXSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBhcnNlZFtpY29uXSkge1xuICAgICAgICAgICAgcGFyc2VkW2ljb25dID0gJCgoaWNvbnNbYXBwbHlSdGwoaWNvbildIHx8IGljb25zW2ljb25dKS50cmltKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlZFtpY29uXS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlSdGwoaWNvbikge1xuICAgICAgICByZXR1cm4gaXNSdGwgPyBzd2FwKHN3YXAoaWNvbiwgJ2xlZnQnLCAncmlnaHQnKSwgJ3ByZXZpb3VzJywgJ25leHQnKSA6IGljb247XG4gICAgfVxuXG4gICAgdmFyIGltZyA9IHtcblxuICAgICAgICBhcmdzOiAnZGF0YVNyYycsXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGRhdGFTcmM6IFN0cmluZyxcbiAgICAgICAgICAgIGRhdGFTcmNzZXQ6IEJvb2xlYW4sXG4gICAgICAgICAgICBzaXplczogU3RyaW5nLFxuICAgICAgICAgICAgd2lkdGg6IE51bWJlcixcbiAgICAgICAgICAgIGhlaWdodDogTnVtYmVyLFxuICAgICAgICAgICAgb2Zmc2V0VG9wOiBTdHJpbmcsXG4gICAgICAgICAgICBvZmZzZXRMZWZ0OiBTdHJpbmcsXG4gICAgICAgICAgICB0YXJnZXQ6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGRhdGFTcmM6ICcnLFxuICAgICAgICAgICAgZGF0YVNyY3NldDogZmFsc2UsXG4gICAgICAgICAgICBzaXplczogZmFsc2UsXG4gICAgICAgICAgICB3aWR0aDogZmFsc2UsXG4gICAgICAgICAgICBoZWlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgb2Zmc2V0VG9wOiAnNTB2aCcsXG4gICAgICAgICAgICBvZmZzZXRMZWZ0OiAwLFxuICAgICAgICAgICAgdGFyZ2V0OiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGNhY2hlS2V5OiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YVNyYyA9IHJlZi5kYXRhU3JjO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICgodGhpcy4kbmFtZSkgKyBcIi5cIiArIGRhdGFTcmMpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd2lkdGg6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aDtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YVdpZHRoID0gcmVmLmRhdGFXaWR0aDtcblxuICAgICAgICAgICAgICAgIHJldHVybiB3aWR0aCB8fCBkYXRhV2lkdGg7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByZWYuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHZhciBkYXRhSGVpZ2h0ID0gcmVmLmRhdGFIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0IHx8IGRhdGFIZWlnaHQ7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzaXplczogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNpemVzID0gcmVmLnNpemVzO1xuICAgICAgICAgICAgICAgIHZhciBkYXRhU2l6ZXMgPSByZWYuZGF0YVNpemVzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpemVzIHx8IGRhdGFTaXplcztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGlzSW1nOiBmdW5jdGlvbihfLCAkZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNJbWcoJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRhcmdldDoge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLiRlbCBdLmNvbmNhdCggcXVlcnlBbGwodGFyZ2V0LCB0aGlzLiRlbCkpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3YXRjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgb2Zmc2V0VG9wOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0VG9wID0gcmVmLm9mZnNldFRvcDtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0b1B4KG9mZnNldFRvcCwgJ2hlaWdodCcpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgb2Zmc2V0TGVmdDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldExlZnQgPSByZWYub2Zmc2V0TGVmdDtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0b1B4KG9mZnNldExlZnQsICd3aWR0aCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgaWYgKHN0b3JhZ2VbdGhpcy5jYWNoZUtleV0pIHtcbiAgICAgICAgICAgICAgICBzZXRTcmNBdHRycyh0aGlzLiRlbCwgc3RvcmFnZVt0aGlzLmNhY2hlS2V5XSB8fCB0aGlzLmRhdGFTcmMsIHRoaXMuZGF0YVNyY3NldCwgdGhpcy5zaXplcyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNJbWcgJiYgdGhpcy53aWR0aCAmJiB0aGlzLmhlaWdodCkge1xuICAgICAgICAgICAgICAgIHNldFNyY0F0dHJzKHRoaXMuJGVsLCBnZXRQbGFjZWhvbGRlckltYWdlKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLnNpemVzKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIodGhpcy5sb2FkLCB7XG4gICAgICAgICAgICAgICAgcm9vdE1hcmdpbjogKCh0aGlzLm9mZnNldFRvcCkgKyBcInB4IFwiICsgKHRoaXMub2Zmc2V0TGVmdCkgKyBcInB4XCIpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMub2JzZXJ2ZSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBkaXNjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlOiB7XG5cbiAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IHJlZi5pbWFnZTtcblxuXG4gICAgICAgICAgICAgICAgaWYgKCFpbWFnZSAmJiBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZCh0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzSW1nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpbWFnZSAmJiBpbWFnZS50aGVuKGZ1bmN0aW9uIChpbWcpIHsgcmV0dXJuIGltZyAmJiBpbWcuY3VycmVudFNyYyAhPT0gJycgJiYgc2V0U3JjQXR0cnModGhpcyQxLiRlbCwgY3VycmVudFNyYyhpbWcpKTsgfSk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihkYXRhKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhU3Jjc2V0ICYmIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvICE9PSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGJnU2l6ZSA9IGNzcyh0aGlzLiRlbCwgJ2JhY2tncm91bmRTaXplJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiZ1NpemUubWF0Y2goL14oYXV0b1xccz8pKyQvKSB8fCB0b0Zsb2F0KGJnU2l6ZSkgPT09IGRhdGEuYmdTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmJnU2l6ZSA9IGdldFNvdXJjZVNpemUodGhpcy5kYXRhU3Jjc2V0LCB0aGlzLnNpemVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ2JhY2tncm91bmRTaXplJywgKChkYXRhLmJnU2l6ZSkgKyBcInB4XCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24oZW50cmllcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICAvLyBPbGQgY2hyb21pdW0gYmFzZWQgYnJvd3NlcnMgKFVDIEJyb3dzZXIpIGRpZCBub3QgaW1wbGVtZW50IGBpc0ludGVyc2VjdGluZ2BcbiAgICAgICAgICAgICAgICBpZiAoIWVudHJpZXMuc29tZShmdW5jdGlvbiAoZW50cnkpIHsgcmV0dXJuIGlzVW5kZWZpbmVkKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB8fCBlbnRyeS5pc0ludGVyc2VjdGluZzsgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEuaW1hZ2UgPSBnZXRJbWFnZSh0aGlzLmRhdGFTcmMsIHRoaXMuZGF0YVNyY3NldCwgdGhpcy5zaXplcykudGhlbihmdW5jdGlvbiAoaW1nKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0U3JjQXR0cnModGhpcyQxLiRlbCwgY3VycmVudFNyYyhpbWcpLCBpbWcuc3Jjc2V0LCBpbWcuc2l6ZXMpO1xuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlW3RoaXMkMS5jYWNoZUtleV0gPSBjdXJyZW50U3JjKGltZyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbWc7XG5cbiAgICAgICAgICAgICAgICB9LCBub29wKTtcblxuICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgb2JzZXJ2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29ubmVjdGVkICYmICF0aGlzLl9kYXRhLmltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiB0aGlzJDEub2JzZXJ2ZXIub2JzZXJ2ZShlbCk7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc2V0U3JjQXR0cnMoZWwsIHNyYywgc3Jjc2V0LCBzaXplcykge1xuXG4gICAgICAgIGlmIChpc0ltZyhlbCkpIHtcbiAgICAgICAgICAgIHNpemVzICYmIChlbC5zaXplcyA9IHNpemVzKTtcbiAgICAgICAgICAgIHNyY3NldCAmJiAoZWwuc3Jjc2V0ID0gc3Jjc2V0KTtcbiAgICAgICAgICAgIHNyYyAmJiAoZWwuc3JjID0gc3JjKTtcbiAgICAgICAgfSBlbHNlIGlmIChzcmMpIHtcblxuICAgICAgICAgICAgdmFyIGNoYW5nZSA9ICFpbmNsdWRlcyhlbC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UsIHNyYyk7XG4gICAgICAgICAgICBpZiAoY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgY3NzKGVsLCAnYmFja2dyb3VuZEltYWdlJywgKFwidXJsKFwiICsgKGVzY2FwZShzcmMpKSArIFwiKVwiKSk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlcihlbCwgY3JlYXRlRXZlbnQoJ2xvYWQnLCBmYWxzZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBsYWNlaG9sZGVySW1hZ2Uod2lkdGgsIGhlaWdodCwgc2l6ZXMpIHtcbiAgICAgICAgdmFyIGFzc2lnbjtcblxuXG4gICAgICAgIGlmIChzaXplcykge1xuICAgICAgICAgICAgKChhc3NpZ24gPSBEaW1lbnNpb25zLnJhdGlvKHt3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0fSwgJ3dpZHRoJywgdG9QeChzaXplc1RvUGl4ZWwoc2l6ZXMpKSksIHdpZHRoID0gYXNzaWduLndpZHRoLCBoZWlnaHQgPSBhc3NpZ24uaGVpZ2h0KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFwiZGF0YTppbWFnZS9zdmcreG1sO3V0ZjgsPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHdpZHRoPVxcXCJcIiArIHdpZHRoICsgXCJcXFwiIGhlaWdodD1cXFwiXCIgKyBoZWlnaHQgKyBcIlxcXCI+PC9zdmc+XCIpO1xuICAgIH1cblxuICAgIHZhciBzaXplc1JlID0gL1xccyooLio/KVxccyooXFx3K3xjYWxjXFwoLio/XFwpKVxccyooPzosfCQpL2c7XG4gICAgZnVuY3Rpb24gc2l6ZXNUb1BpeGVsKHNpemVzKSB7XG4gICAgICAgIHZhciBtYXRjaGVzO1xuXG4gICAgICAgIHNpemVzUmUubGFzdEluZGV4ID0gMDtcblxuICAgICAgICB3aGlsZSAoKG1hdGNoZXMgPSBzaXplc1JlLmV4ZWMoc2l6ZXMpKSkge1xuICAgICAgICAgICAgaWYgKCFtYXRjaGVzWzFdIHx8IHdpbmRvdy5tYXRjaE1lZGlhKG1hdGNoZXNbMV0pLm1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzID0gZXZhbHVhdGVTaXplKG1hdGNoZXNbMl0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hdGNoZXMgfHwgJzEwMHZ3JztcbiAgICB9XG5cbiAgICB2YXIgc2l6ZVJlID0gL1xcZCsoPzpcXHcrfCUpL2c7XG4gICAgdmFyIGFkZGl0aW9uUmUgPSAvWystXT8oXFxkKykvZztcbiAgICBmdW5jdGlvbiBldmFsdWF0ZVNpemUoc2l6ZSkge1xuICAgICAgICByZXR1cm4gc3RhcnRzV2l0aChzaXplLCAnY2FsYycpXG4gICAgICAgICAgICA/IHNpemVcbiAgICAgICAgICAgICAgICAuc3Vic3RyaW5nKDUsIHNpemUubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZShzaXplUmUsIGZ1bmN0aW9uIChzaXplKSB7IHJldHVybiB0b1B4KHNpemUpOyB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8gL2csICcnKVxuICAgICAgICAgICAgICAgIC5tYXRjaChhZGRpdGlvblJlKVxuICAgICAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEgKyArYjsgfSwgMClcbiAgICAgICAgICAgIDogc2l6ZTtcbiAgICB9XG5cbiAgICB2YXIgc3JjU2V0UmUgPSAvXFxzK1xcZCt3XFxzKig/Oix8JCkvZztcbiAgICBmdW5jdGlvbiBnZXRTb3VyY2VTaXplKHNyY3NldCwgc2l6ZXMpIHtcbiAgICAgICAgdmFyIHNyY1NpemUgPSB0b1B4KHNpemVzVG9QaXhlbChzaXplcykpO1xuICAgICAgICB2YXIgZGVzY3JpcHRvcnMgPSAoc3Jjc2V0Lm1hdGNoKHNyY1NldFJlKSB8fCBbXSkubWFwKHRvRmxvYXQpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEgLSBiOyB9KTtcblxuICAgICAgICByZXR1cm4gZGVzY3JpcHRvcnMuZmlsdGVyKGZ1bmN0aW9uIChzaXplKSB7IHJldHVybiBzaXplID49IHNyY1NpemU7IH0pWzBdIHx8IGRlc2NyaXB0b3JzLnBvcCgpIHx8ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSW1nKGVsKSB7XG4gICAgICAgIHJldHVybiBlbC50YWdOYW1lID09PSAnSU1HJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjdXJyZW50U3JjKGVsKSB7XG4gICAgICAgIHJldHVybiBlbC5jdXJyZW50U3JjIHx8IGVsLnNyYztcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gJ19fdGVzdF9fJztcbiAgICB2YXIgc3RvcmFnZTtcblxuICAgIC8vIHdvcmthcm91bmQgZm9yIFNhZmFyaSdzIHByaXZhdGUgYnJvd3NpbmcgbW9kZSBhbmQgYWNjZXNzaW5nIHNlc3Npb25TdG9yYWdlIGluIEJsaW5rXG4gICAgdHJ5IHtcbiAgICAgICAgc3RvcmFnZSA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZSB8fCB7fTtcbiAgICAgICAgc3RvcmFnZVtrZXldID0gMTtcbiAgICAgICAgZGVsZXRlIHN0b3JhZ2Vba2V5XTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHN0b3JhZ2UgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgTWVkaWEgPSB7XG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIG1lZGlhOiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbWVkaWE6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgbWF0Y2hNZWRpYTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1lZGlhID0gdG9NZWRpYSh0aGlzLm1lZGlhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gIW1lZGlhIHx8IHdpbmRvdy5tYXRjaE1lZGlhKG1lZGlhKS5tYXRjaGVzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiB0b01lZGlhKHZhbHVlKSB7XG5cbiAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlWzBdID09PSAnQCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IFwiYnJlYWtwb2ludC1cIiArICh2YWx1ZS5zdWJzdHIoMSkpO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9GbG9hdChnZXRDc3NWYXIobmFtZSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWUgJiYgIWlzTmFOKHZhbHVlKSA/IChcIihtaW4td2lkdGg6IFwiICsgdmFsdWUgKyBcInB4KVwiKSA6IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsZWFkZXIgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbQ2xhc3MsIE1lZGlhXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgZmlsbDogU3RyaW5nXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZmlsbDogJycsXG4gICAgICAgICAgICBjbHNXcmFwcGVyOiAndWstbGVhZGVyLWZpbGwnLFxuICAgICAgICAgICAgY2xzSGlkZTogJ3VrLWxlYWRlci1oaWRlJyxcbiAgICAgICAgICAgIGF0dHJGaWxsOiAnZGF0YS1maWxsJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGZpbGw6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBmaWxsID0gcmVmLmZpbGw7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsbCB8fCBnZXRDc3NWYXIoJ2xlYWRlci1maWxsLWNvbnRlbnQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYXNzaWduO1xuXG4gICAgICAgICAgICAoYXNzaWduID0gd3JhcElubmVyKHRoaXMuJGVsLCAoXCI8c3BhbiBjbGFzcz1cXFwiXCIgKyAodGhpcy5jbHNXcmFwcGVyKSArIFwiXFxcIj5cIikpLCB0aGlzLndyYXBwZXIgPSBhc3NpZ25bMF0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRpc2Nvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB1bndyYXAodGhpcy53cmFwcGVyLmNoaWxkTm9kZXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hhbmdlZCA9IHJlZi5jaGFuZ2VkO1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aDtcblxuXG4gICAgICAgICAgICAgICAgdmFyIHByZXYgPSB3aWR0aDtcblxuICAgICAgICAgICAgICAgIHdpZHRoID0gTWF0aC5mbG9vcih0aGlzLiRlbC5vZmZzZXRXaWR0aCAvIDIpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiB0aGlzLmZpbGwsXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWQ6IGNoYW5nZWQgfHwgcHJldiAhPT0gd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhpZGU6ICF0aGlzLm1hdGNoTWVkaWFcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMud3JhcHBlciwgdGhpcy5jbHNIaWRlLCBkYXRhLmhpZGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYXR0cih0aGlzLndyYXBwZXIsIHRoaXMuYXR0ckZpbGwsIG5ldyBBcnJheShkYXRhLndpZHRoKS5qb2luKGRhdGEuZmlsbCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBDb250YWluZXIgPSB7XG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGNvbnRhaW5lcjogQm9vbGVhblxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGNvbnRhaW5lcjogdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lcjogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IHJlZi5jb250YWluZXI7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGFpbmVyID09PSB0cnVlICYmIHRoaXMuJGNvbnRhaW5lciB8fCBjb250YWluZXIgJiYgJChjb250YWluZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgYWN0aXZlJDEgPSBbXTtcblxuICAgIHZhciBNb2RhbCA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzcywgQ29udGFpbmVyLCBUb2dnbGFibGVdLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBzZWxQYW5lbDogU3RyaW5nLFxuICAgICAgICAgICAgc2VsQ2xvc2U6IFN0cmluZyxcbiAgICAgICAgICAgIGVzY0Nsb3NlOiBCb29sZWFuLFxuICAgICAgICAgICAgYmdDbG9zZTogQm9vbGVhbixcbiAgICAgICAgICAgIHN0YWNrOiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgY2xzOiAndWstb3BlbicsXG4gICAgICAgICAgICBlc2NDbG9zZTogdHJ1ZSxcbiAgICAgICAgICAgIGJnQ2xvc2U6IHRydWUsXG4gICAgICAgICAgICBvdmVybGF5OiB0cnVlLFxuICAgICAgICAgICAgc3RhY2s6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgcGFuZWw6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbFBhbmVsID0gcmVmLnNlbFBhbmVsO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoc2VsUGFuZWwsICRlbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2l0aW9uRWxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFuZWw7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBiZ0Nsb3NlOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmdDbG9zZSA9IHJlZi5iZ0Nsb3NlO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJnQ2xvc2UgJiYgdGhpcy5wYW5lbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGJlZm9yZURpc2Nvbm5lY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNUb2dnbGVkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUVsZW1lbnQodGhpcy4kZWwsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdjbGljaycsXG5cbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbENsb3NlO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAndG9nZ2xlJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVG9nZ2xlZCgpID09PSBpbmNsdWRlcyhhY3RpdmUkMSwgdGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnYmVmb3Jlc2hvdycsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlcyhhY3RpdmUkMSwgdGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5zdGFjayAmJiBhY3RpdmUkMS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKGFjdGl2ZSQxLm1hcChmdW5jdGlvbiAobW9kYWwpIHsgcmV0dXJuIG1vZGFsLmhpZGUoKTsgfSkpLnRoZW4odGhpcy5zaG93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZSQxLnB1c2godGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdzaG93JyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGgod2luZG93KSAtIHdpZHRoKGRvY3VtZW50KSAmJiB0aGlzLm92ZXJsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAnb3ZlcmZsb3dZJywgJ3Njcm9sbCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjayAmJiBjc3ModGhpcy4kZWwsICd6SW5kZXgnLCBjc3ModGhpcy4kZWwsICd6SW5kZXgnKSArIGFjdGl2ZSQxLmxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLmNsc1BhZ2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJnQ2xvc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2UodGhpcy4kZWwsICdoaWRlJywgb24oZG9jdW1lbnQsIHBvaW50ZXJEb3duLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0KGFjdGl2ZSQxKSAhPT0gdGhpcyQxIHx8IHRoaXMkMS5vdmVybGF5ICYmICF3aXRoaW4odGFyZ2V0LCB0aGlzJDEuJGVsKSB8fCB3aXRoaW4odGFyZ2V0LCB0aGlzJDEucGFuZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNlKGRvY3VtZW50LCAocG9pbnRlclVwICsgXCIgXCIgKyBwb2ludGVyQ2FuY2VsICsgXCIgc2Nyb2xsXCIpLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0UHJldmVudGVkID0gcmVmLmRlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdUYXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGVmYXVsdFByZXZlbnRlZCAmJiB0eXBlID09PSBwb2ludGVyVXAgJiYgdGFyZ2V0ID09PSBuZXdUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSksIHtzZWxmOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lc2NDbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25jZSh0aGlzLiRlbCwgJ2hpZGUnLCBvbihkb2N1bWVudCwgJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDI3ICYmIGxhc3QoYWN0aXZlJDEpID09PSB0aGlzJDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCB7c2VsZjogdHJ1ZX0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnaGlkZGVuJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICBhY3RpdmUkMS5zcGxpY2UoYWN0aXZlJDEuaW5kZXhPZih0aGlzKSwgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhY3RpdmUkMS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAnb3ZlcmZsb3dZJywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCAnekluZGV4JywgJycpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghYWN0aXZlJDEuc29tZShmdW5jdGlvbiAobW9kYWwpIHsgcmV0dXJuIG1vZGFsLmNsc1BhZ2UgPT09IHRoaXMkMS5jbHNQYWdlOyB9KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLmNsc1BhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc1RvZ2dsZWQoKSA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyICYmIHRoaXMuJGVsLnBhcmVudE5vZGUgIT09IHRoaXMuY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGVuZCh0aGlzLmNvbnRhaW5lciwgdGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuc2hvdygpLnRoZW4ocmVzb2x2ZSk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7IH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b2dnbGVFbGVtZW50KHRoaXMuJGVsLCB0cnVlLCBhbmltYXRlJDEodGhpcykpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGlkZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlRWxlbWVudCh0aGlzLiRlbCwgZmFsc2UsIGFuaW1hdGUkMSh0aGlzKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGFuaW1hdGUkMShyZWYpIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25FbGVtZW50ID0gcmVmLnRyYW5zaXRpb25FbGVtZW50O1xuICAgICAgICB2YXIgX3RvZ2dsZSA9IHJlZi5fdG9nZ2xlO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWwsIHNob3cpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgcmV0dXJuIG9uY2UoZWwsICdzaG93IGhpZGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLl9yZWplY3QgJiYgZWwuX3JlamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICBlbC5fcmVqZWN0ID0gcmVqZWN0O1xuXG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGUoZWwsIHNob3cpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBvZmYgPSBvbmNlKHRyYW5zaXRpb25FbGVtZW50LCAndHJhbnNpdGlvbnN0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25jZSh0cmFuc2l0aW9uRWxlbWVudCwgJ3RyYW5zaXRpb25lbmQgdHJhbnNpdGlvbmNhbmNlbCcsIHJlc29sdmUsIHtzZWxmOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgICAgICAgICB9LCB7c2VsZjogdHJ1ZX0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2ZmKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIHRvTXMoY3NzKHRyYW5zaXRpb25FbGVtZW50LCAndHJhbnNpdGlvbkR1cmF0aW9uJykpKTtcblxuICAgICAgICAgICAgICAgIH0pOyB9XG4gICAgICAgICAgICApOyB9O1xuICAgIH1cblxuICAgIHZhciBtb2RhbCA9IHtcblxuICAgICAgICBpbnN0YWxsOiBpbnN0YWxsJDEsXG5cbiAgICAgICAgbWl4aW5zOiBbTW9kYWxdLFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGNsc1BhZ2U6ICd1ay1tb2RhbC1wYWdlJyxcbiAgICAgICAgICAgIHNlbFBhbmVsOiAnLnVrLW1vZGFsLWRpYWxvZycsXG4gICAgICAgICAgICBzZWxDbG9zZTogJy51ay1tb2RhbC1jbG9zZSwgLnVrLW1vZGFsLWNsb3NlLWRlZmF1bHQsIC51ay1tb2RhbC1jbG9zZS1vdXRzaWRlLCAudWstbW9kYWwtY2xvc2UtZnVsbCdcbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdzaG93JyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzQ2xhc3ModGhpcy5wYW5lbCwgJ3VrLW1hcmdpbi1hdXRvLXZlcnRpY2FsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCAndWstZmxleCcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCAnZGlzcGxheScsICdibG9jaycpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0KHRoaXMuJGVsKTsgLy8gZm9yY2UgcmVmbG93XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdoaWRkZW4nLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ2Rpc3BsYXknLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuJGVsLCAndWstZmxleCcpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsJDEocmVmKSB7XG4gICAgICAgIHZhciBtb2RhbCA9IHJlZi5tb2RhbDtcblxuXG4gICAgICAgIG1vZGFsLmRpYWxvZyA9IGZ1bmN0aW9uIChjb250ZW50LCBvcHRpb25zKSB7XG5cbiAgICAgICAgICAgIHZhciBkaWFsb2cgPSBtb2RhbChcbiAgICAgICAgICAgICAgICAoXCI8ZGl2IGNsYXNzPVxcXCJ1ay1tb2RhbFxcXCI+IDxkaXYgY2xhc3M9XFxcInVrLW1vZGFsLWRpYWxvZ1xcXCI+XCIgKyBjb250ZW50ICsgXCI8L2Rpdj4gPC9kaXY+XCIpLFxuICAgICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGRpYWxvZy5zaG93KCk7XG5cbiAgICAgICAgICAgIG9uKGRpYWxvZy4kZWwsICdoaWRkZW4nLCBmdW5jdGlvbiAoKSB7IHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpYWxvZy4kZGVzdHJveSh0cnVlKTsgfVxuICAgICAgICAgICAgICAgICk7IH0sIHtzZWxmOiB0cnVlfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgcmV0dXJuIGRpYWxvZztcbiAgICAgICAgfTtcblxuICAgICAgICBtb2RhbC5hbGVydCA9IGZ1bmN0aW9uIChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gb3BlbkRpYWxvZyhcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbHMgPSByZWYubGFiZWxzO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCI8ZGl2IGNsYXNzPVxcXCJ1ay1tb2RhbC1ib2R5XFxcIj5cIiArIChpc1N0cmluZyhtZXNzYWdlKSA/IG1lc3NhZ2UgOiBodG1sKG1lc3NhZ2UpKSArIFwiPC9kaXY+IDxkaXYgY2xhc3M9XFxcInVrLW1vZGFsLWZvb3RlciB1ay10ZXh0LXJpZ2h0XFxcIj4gPGJ1dHRvbiBjbGFzcz1cXFwidWstYnV0dG9uIHVrLWJ1dHRvbi1wcmltYXJ5IHVrLW1vZGFsLWNsb3NlXFxcIiBhdXRvZm9jdXM+XCIgKyAobGFiZWxzLm9rKSArIFwiPC9idXR0b24+IDwvZGl2PlwiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGVmZXJyZWQpIHsgcmV0dXJuIGRlZmVycmVkLnJlc29sdmUoKTsgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcblxuICAgICAgICBtb2RhbC5jb25maXJtID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBvcGVuRGlhbG9nKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVscyA9IHJlZi5sYWJlbHM7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIjxmb3JtPiA8ZGl2IGNsYXNzPVxcXCJ1ay1tb2RhbC1ib2R5XFxcIj5cIiArIChpc1N0cmluZyhtZXNzYWdlKSA/IG1lc3NhZ2UgOiBodG1sKG1lc3NhZ2UpKSArIFwiPC9kaXY+IDxkaXYgY2xhc3M9XFxcInVrLW1vZGFsLWZvb3RlciB1ay10ZXh0LXJpZ2h0XFxcIj4gPGJ1dHRvbiBjbGFzcz1cXFwidWstYnV0dG9uIHVrLWJ1dHRvbi1kZWZhdWx0IHVrLW1vZGFsLWNsb3NlXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiPlwiICsgKGxhYmVscy5jYW5jZWwpICsgXCI8L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz1cXFwidWstYnV0dG9uIHVrLWJ1dHRvbi1wcmltYXJ5XFxcIiBhdXRvZm9jdXM+XCIgKyAobGFiZWxzLm9rKSArIFwiPC9idXR0b24+IDwvZGl2PiA8L2Zvcm0+XCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkZWZlcnJlZCkgeyByZXR1cm4gZGVmZXJyZWQucmVqZWN0KCk7IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgbW9kYWwucHJvbXB0ID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gb3BlbkRpYWxvZyhcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbHMgPSByZWYubGFiZWxzO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCI8Zm9ybSBjbGFzcz1cXFwidWstZm9ybS1zdGFja2VkXFxcIj4gPGRpdiBjbGFzcz1cXFwidWstbW9kYWwtYm9keVxcXCI+IDxsYWJlbD5cIiArIChpc1N0cmluZyhtZXNzYWdlKSA/IG1lc3NhZ2UgOiBodG1sKG1lc3NhZ2UpKSArIFwiPC9sYWJlbD4gPGlucHV0IGNsYXNzPVxcXCJ1ay1pbnB1dFxcXCIgdmFsdWU9XFxcIlwiICsgKHZhbHVlIHx8ICcnKSArIFwiXFxcIiBhdXRvZm9jdXM+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJ1ay1tb2RhbC1mb290ZXIgdWstdGV4dC1yaWdodFxcXCI+IDxidXR0b24gY2xhc3M9XFxcInVrLWJ1dHRvbiB1ay1idXR0b24tZGVmYXVsdCB1ay1tb2RhbC1jbG9zZVxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIj5cIiArIChsYWJlbHMuY2FuY2VsKSArIFwiPC9idXR0b24+IDxidXR0b24gY2xhc3M9XFxcInVrLWJ1dHRvbiB1ay1idXR0b24tcHJpbWFyeVxcXCI+XCIgKyAobGFiZWxzLm9rKSArIFwiPC9idXR0b24+IDwvZGl2PiA8L2Zvcm0+XCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkZWZlcnJlZCkgeyByZXR1cm4gZGVmZXJyZWQucmVzb2x2ZShudWxsKTsgfSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGlhbG9nKSB7IHJldHVybiAkKCdpbnB1dCcsIGRpYWxvZy4kZWwpLnZhbHVlOyB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuXG4gICAgICAgIG1vZGFsLmxhYmVscyA9IHtcbiAgICAgICAgICAgIG9rOiAnT2snLFxuICAgICAgICAgICAgY2FuY2VsOiAnQ2FuY2VsJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIG9wZW5EaWFsb2codG1wbCwgb3B0aW9ucywgaGlkZUZuLCBzdWJtaXRGbikge1xuXG4gICAgICAgICAgICBvcHRpb25zID0gYXNzaWduKHtiZ0Nsb3NlOiBmYWxzZSwgZXNjQ2xvc2U6IHRydWUsIGxhYmVsczogbW9kYWwubGFiZWxzfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHZhciBkaWFsb2cgPSBtb2RhbC5kaWFsb2codG1wbChvcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcblxuICAgICAgICAgICAgdmFyIHJlc29sdmVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIG9uKGRpYWxvZy4kZWwsICdzdWJtaXQnLCAnZm9ybScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoc3VibWl0Rm4gJiYgc3VibWl0Rm4oZGlhbG9nKSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGRpYWxvZy5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb24oZGlhbG9nLiRlbCwgJ2hpZGUnLCBmdW5jdGlvbiAoKSB7IHJldHVybiAhcmVzb2x2ZWQgJiYgaGlkZUZuKGRlZmVycmVkKTsgfSk7XG5cbiAgICAgICAgICAgIGRlZmVycmVkLnByb21pc2UuZGlhbG9nID0gZGlhbG9nO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgdmFyIG5hdiA9IHtcblxuICAgICAgICBleHRlbmRzOiBBY2NvcmRpb24sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdGFyZ2V0czogJz4gLnVrLXBhcmVudCcsXG4gICAgICAgICAgICB0b2dnbGU6ICc+IGEnLFxuICAgICAgICAgICAgY29udGVudDogJz4gdWwnXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgbmF2YmFyID0ge1xuXG4gICAgICAgIG1peGluczogW0NsYXNzLCBGbGV4QnVnXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgZHJvcGRvd246IFN0cmluZyxcbiAgICAgICAgICAgIG1vZGU6ICdsaXN0JyxcbiAgICAgICAgICAgIGFsaWduOiBTdHJpbmcsXG4gICAgICAgICAgICBvZmZzZXQ6IE51bWJlcixcbiAgICAgICAgICAgIGJvdW5kYXJ5OiBCb29sZWFuLFxuICAgICAgICAgICAgYm91bmRhcnlBbGlnbjogQm9vbGVhbixcbiAgICAgICAgICAgIGNsc0Ryb3A6IFN0cmluZyxcbiAgICAgICAgICAgIGRlbGF5U2hvdzogTnVtYmVyLFxuICAgICAgICAgICAgZGVsYXlIaWRlOiBOdW1iZXIsXG4gICAgICAgICAgICBkcm9wYmFyOiBCb29sZWFuLFxuICAgICAgICAgICAgZHJvcGJhck1vZGU6IFN0cmluZyxcbiAgICAgICAgICAgIGRyb3BiYXJBbmNob3I6IEJvb2xlYW4sXG4gICAgICAgICAgICBkdXJhdGlvbjogTnVtYmVyXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZHJvcGRvd246ICcudWstbmF2YmFyLW5hdiA+IGxpJyxcbiAgICAgICAgICAgIGFsaWduOiAhaXNSdGwgPyAnbGVmdCcgOiAncmlnaHQnLFxuICAgICAgICAgICAgY2xzRHJvcDogJ3VrLW5hdmJhci1kcm9wZG93bicsXG4gICAgICAgICAgICBtb2RlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBvZmZzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRlbGF5U2hvdzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGVsYXlIaWRlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBib3VuZGFyeUFsaWduOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBmbGlwOiAneCcsXG4gICAgICAgICAgICBib3VuZGFyeTogdHJ1ZSxcbiAgICAgICAgICAgIGRyb3BiYXI6IGZhbHNlLFxuICAgICAgICAgICAgZHJvcGJhck1vZGU6ICdzbGlkZScsXG4gICAgICAgICAgICBkcm9wYmFyQW5jaG9yOiBmYWxzZSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAyMDAsXG4gICAgICAgICAgICBmb3JjZUhlaWdodDogdHJ1ZSxcbiAgICAgICAgICAgIHNlbE1pbkhlaWdodDogJy51ay1uYXZiYXItbmF2ID4gbGkgPiBhLCAudWstbmF2YmFyLWl0ZW0sIC51ay1uYXZiYXItdG9nZ2xlJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGJvdW5kYXJ5OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBib3VuZGFyeSA9IHJlZi5ib3VuZGFyeTtcbiAgICAgICAgICAgICAgICB2YXIgYm91bmRhcnlBbGlnbiA9IHJlZi5ib3VuZGFyeUFsaWduO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChib3VuZGFyeSA9PT0gdHJ1ZSB8fCBib3VuZGFyeUFsaWduKSA/ICRlbCA6IGJvdW5kYXJ5O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZHJvcGJhckFuY2hvcjogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHJvcGJhckFuY2hvciA9IHJlZi5kcm9wYmFyQW5jaG9yO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5KGRyb3BiYXJBbmNob3IsICRlbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBwb3M6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBhbGlnbiA9IHJlZi5hbGlnbjtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoXCJib3R0b20tXCIgKyBhbGlnbik7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkcm9wYmFyOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHJvcGJhciA9IHJlZi5kcm9wYmFyO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkcm9wYmFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRyb3BiYXIgPSB0aGlzLl9kcm9wYmFyIHx8IHF1ZXJ5KGRyb3BiYXIsIHRoaXMuJGVsKSB8fCAkKCcrIC51ay1uYXZiYXItZHJvcGJhcicsIHRoaXMuJGVsKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHJvcGJhciA/IGRyb3BiYXIgOiAodGhpcy5fZHJvcGJhciA9ICQoJzxkaXY+PC9kaXY+JykpO1xuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdhdGNoOiBmdW5jdGlvbihkcm9wYmFyKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGRyb3BiYXIsICd1ay1uYXZiYXItZHJvcGJhcicpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBpbW1lZGlhdGU6IHRydWVcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZHJvcGRvd25zOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkcm9wZG93biA9IHJlZi5kcm9wZG93bjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsc0Ryb3AgPSByZWYuY2xzRHJvcDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCQoKGRyb3Bkb3duICsgXCIgLlwiICsgY2xzRHJvcCksICRlbCk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdhdGNoOiBmdW5jdGlvbihkcm9wZG93bnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY3JlYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Ryb3AnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd25zLmZpbHRlcihmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICF0aGlzJDEuZ2V0RHJvcGRvd24oZWwpOyB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbih7fSwgdGhpcy4kcHJvcHMsIHtib3VuZGFyeTogdGhpcy5ib3VuZGFyeSwgcG9zOiB0aGlzLnBvcywgb2Zmc2V0OiB0aGlzLmRyb3BiYXIgfHwgdGhpcy5vZmZzZXR9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBpbW1lZGlhdGU6IHRydWVcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZHJvcGJhciAmJiByZW1vdmUodGhpcy5kcm9wYmFyKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9kcm9wYmFyO1xuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ21vdXNlb3ZlcicsXG5cbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRyb3Bkb3duO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSByZWYuY3VycmVudDtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlID0gdGhpcy5nZXRBY3RpdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZSAmJiBhY3RpdmUudG9nZ2xlICYmICF3aXRoaW4oYWN0aXZlLnRvZ2dsZS4kZWwsIGN1cnJlbnQpICYmICFhY3RpdmUudHJhY2tlci5tb3Zlc1RvKGFjdGl2ZS4kZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnbW91c2VsZWF2ZScsXG5cbiAgICAgICAgICAgICAgICBlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRyb3BiYXI7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlID0gdGhpcy5nZXRBY3RpdmUoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlICYmICF0aGlzLmRyb3Bkb3ducy5zb21lKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gbWF0Y2hlcyhlbCwgJzpob3ZlcicpOyB9KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnYmVmb3Jlc2hvdycsXG5cbiAgICAgICAgICAgICAgICBjYXB0dXJlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHJvcGJhcjtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRyb3BiYXIucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXIodGhpcy5kcm9wYmFyQW5jaG9yIHx8IHRoaXMuJGVsLCB0aGlzLmRyb3BiYXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3Nob3cnLFxuXG4gICAgICAgICAgICAgICAgY2FwdHVyZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRyb3BiYXI7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKF8sIGRyb3ApIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgJGVsID0gZHJvcC4kZWw7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXIgPSBkcm9wLmRpcjtcblxuICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLmRyb3BiYXIsICd1ay1uYXZiYXItZHJvcGJhci1zbGlkZScsIHRoaXMuZHJvcGJhck1vZGUgPT09ICdzbGlkZScgfHwgcGFyZW50cyh0aGlzLiRlbCkuc29tZShmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGNzcyhlbCwgJ3Bvc2l0aW9uJykgIT09ICdzdGF0aWMnOyB9KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbHNEcm9wICYmIGFkZENsYXNzKCRlbCwgKCh0aGlzLmNsc0Ryb3ApICsgXCItZHJvcGJhclwiKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpciA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvblRvKCRlbC5vZmZzZXRIZWlnaHQgKyB0b0Zsb2F0KGNzcygkZWwsICdtYXJnaW5Ub3AnKSkgKyB0b0Zsb2F0KGNzcygkZWwsICdtYXJnaW5Cb3R0b20nKSksICRlbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2JlZm9yZWhpZGUnLFxuXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHJvcGJhcjtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSwgcmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkZWwgPSByZWYuJGVsO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IHRoaXMuZ2V0QWN0aXZlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXModGhpcy5kcm9wYmFyLCAnOmhvdmVyJykgJiYgYWN0aXZlICYmIGFjdGl2ZS4kZWwgPT09ICRlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdoaWRlJyxcblxuICAgICAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRyb3BiYXI7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKF8sIHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGVsID0gcmVmLiRlbDtcblxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSB0aGlzLmdldEFjdGl2ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghYWN0aXZlIHx8IGFjdGl2ZSAmJiBhY3RpdmUuJGVsID09PSAkZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvblRvKDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBnZXRBY3RpdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciByZWYgPSB0aGlzLmRyb3Bkb3ducy5tYXAodGhpcy5nZXREcm9wZG93bikuZmlsdGVyKGZ1bmN0aW9uIChkcm9wKSB7IHJldHVybiBkcm9wICYmIGRyb3AuaXNBY3RpdmUoKTsgfSk7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aXZlICYmIGluY2x1ZGVzKGFjdGl2ZS5tb2RlLCAnaG92ZXInKSAmJiB3aXRoaW4oYWN0aXZlLnRvZ2dsZS4kZWwsIHRoaXMuJGVsKSAmJiBhY3RpdmU7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2l0aW9uVG86IGZ1bmN0aW9uKG5ld0hlaWdodCwgZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGRyb3BiYXIgPSByZWYuZHJvcGJhcjtcbiAgICAgICAgICAgICAgICB2YXIgb2xkSGVpZ2h0ID0gaXNWaXNpYmxlKGRyb3BiYXIpID8gaGVpZ2h0KGRyb3BiYXIpIDogMDtcblxuICAgICAgICAgICAgICAgIGVsID0gb2xkSGVpZ2h0IDwgbmV3SGVpZ2h0ICYmIGVsO1xuXG4gICAgICAgICAgICAgICAgY3NzKGVsLCAnY2xpcCcsIChcInJlY3QoMCxcIiArIChlbC5vZmZzZXRXaWR0aCkgKyBcInB4LFwiICsgb2xkSGVpZ2h0ICsgXCJweCwwKVwiKSk7XG5cbiAgICAgICAgICAgICAgICBoZWlnaHQoZHJvcGJhciwgb2xkSGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uY2FuY2VsKFtlbCwgZHJvcGJhcl0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uc3RhcnQoZHJvcGJhciwge2hlaWdodDogbmV3SGVpZ2h0fSwgdGhpcy5kdXJhdGlvbiksXG4gICAgICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uc3RhcnQoZWwsIHtjbGlwOiAoXCJyZWN0KDAsXCIgKyAoZWwub2Zmc2V0V2lkdGgpICsgXCJweCxcIiArIG5ld0hlaWdodCArIFwicHgsMClcIil9LCB0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChub29wKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MoZWwsIHtjbGlwOiAnJ30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyQxLiR1cGRhdGUoZHJvcGJhcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0RHJvcGRvd246IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGdldENvbXBvbmVudChlbCwgJ2Ryb3AnKSB8fCB0aGlzLiRnZXRDb21wb25lbnQoZWwsICdkcm9wZG93bicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgb2ZmY2FudmFzID0ge1xuXG4gICAgICAgIG1peGluczogW01vZGFsXSxcblxuICAgICAgICBhcmdzOiAnbW9kZScsXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIG1vZGU6IFN0cmluZyxcbiAgICAgICAgICAgIGZsaXA6IEJvb2xlYW4sXG4gICAgICAgICAgICBvdmVybGF5OiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbW9kZTogJ3NsaWRlJyxcbiAgICAgICAgICAgIGZsaXA6IGZhbHNlLFxuICAgICAgICAgICAgb3ZlcmxheTogZmFsc2UsXG4gICAgICAgICAgICBjbHNQYWdlOiAndWstb2ZmY2FudmFzLXBhZ2UnLFxuICAgICAgICAgICAgY2xzQ29udGFpbmVyOiAndWstb2ZmY2FudmFzLWNvbnRhaW5lcicsXG4gICAgICAgICAgICBzZWxQYW5lbDogJy51ay1vZmZjYW52YXMtYmFyJyxcbiAgICAgICAgICAgIGNsc0ZsaXA6ICd1ay1vZmZjYW52YXMtZmxpcCcsXG4gICAgICAgICAgICBjbHNDb250YWluZXJBbmltYXRpb246ICd1ay1vZmZjYW52YXMtY29udGFpbmVyLWFuaW1hdGlvbicsXG4gICAgICAgICAgICBjbHNTaWRlYmFyQW5pbWF0aW9uOiAndWstb2ZmY2FudmFzLWJhci1hbmltYXRpb24nLFxuICAgICAgICAgICAgY2xzTW9kZTogJ3VrLW9mZmNhbnZhcycsXG4gICAgICAgICAgICBjbHNPdmVybGF5OiAndWstb2ZmY2FudmFzLW92ZXJsYXknLFxuICAgICAgICAgICAgc2VsQ2xvc2U6ICcudWstb2ZmY2FudmFzLWNsb3NlJyxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBjbHNGbGlwOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmxpcCA9IHJlZi5mbGlwO1xuICAgICAgICAgICAgICAgIHZhciBjbHNGbGlwID0gcmVmLmNsc0ZsaXA7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmxpcCA/IGNsc0ZsaXAgOiAnJztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNsc092ZXJsYXk6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBvdmVybGF5ID0gcmVmLm92ZXJsYXk7XG4gICAgICAgICAgICAgICAgdmFyIGNsc092ZXJsYXkgPSByZWYuY2xzT3ZlcmxheTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBvdmVybGF5ID8gY2xzT3ZlcmxheSA6ICcnO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY2xzTW9kZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1vZGUgPSByZWYubW9kZTtcbiAgICAgICAgICAgICAgICB2YXIgY2xzTW9kZSA9IHJlZi5jbHNNb2RlO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChjbHNNb2RlICsgXCItXCIgKyBtb2RlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNsc1NpZGViYXJBbmltYXRpb246IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBtb2RlID0gcmVmLm1vZGU7XG4gICAgICAgICAgICAgICAgdmFyIGNsc1NpZGViYXJBbmltYXRpb24gPSByZWYuY2xzU2lkZWJhckFuaW1hdGlvbjtcblxuICAgICAgICAgICAgICAgIHJldHVybiBtb2RlID09PSAnbm9uZScgfHwgbW9kZSA9PT0gJ3JldmVhbCcgPyAnJyA6IGNsc1NpZGViYXJBbmltYXRpb247XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjbHNDb250YWluZXJBbmltYXRpb246IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBtb2RlID0gcmVmLm1vZGU7XG4gICAgICAgICAgICAgICAgdmFyIGNsc0NvbnRhaW5lckFuaW1hdGlvbiA9IHJlZi5jbHNDb250YWluZXJBbmltYXRpb247XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kZSAhPT0gJ3B1c2gnICYmIG1vZGUgIT09ICdyZXZlYWwnID8gJycgOiBjbHNDb250YWluZXJBbmltYXRpb247XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2l0aW9uRWxlbWVudDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1vZGUgPSByZWYubW9kZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBtb2RlID09PSAncmV2ZWFsJyA/IHRoaXMucGFuZWwucGFyZW50Tm9kZSA6IHRoaXMucGFuZWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhW2hyZWZePVwiI1wiXSc7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFzaCA9IHJlZi5jdXJyZW50Lmhhc2g7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0UHJldmVudGVkID0gcmVmLmRlZmF1bHRQcmV2ZW50ZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWZhdWx0UHJldmVudGVkICYmIGhhc2ggJiYgJChoYXNoLCBkb2N1bWVudC5ib2R5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAndG91Y2hzdGFydCcsXG5cbiAgICAgICAgICAgICAgICBwYXNzaXZlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYW5lbDtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRUb3VjaGVzID0gcmVmLnRhcmdldFRvdWNoZXM7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50WSA9IHRhcmdldFRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3RvdWNobW92ZScsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhc3NpdmU6IGZhbHNlLFxuXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3ZlcmxheTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLmNhbmNlbGFibGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICd0b3VjaG1vdmUnLFxuXG4gICAgICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG5cbiAgICAgICAgICAgICAgICBlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhbmVsO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGllbnRZID0gZXZlbnQudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRZIC0gdGhpcy5jbGllbnRZO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5wYW5lbDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHJlZi5zY3JvbGxUb3A7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxIZWlnaHQgPSByZWYuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2xpZW50SGVpZ2h0ID0gcmVmLmNsaWVudEhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xpZW50SGVpZ2h0ID49IHNjcm9sbEhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgc2Nyb2xsVG9wID09PSAwICYmIGNsaWVudFkgPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBzY3JvbGxIZWlnaHQgLSBzY3JvbGxUb3AgPD0gY2xpZW50SGVpZ2h0ICYmIGNsaWVudFkgPCAwXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5jYW5jZWxhYmxlICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3Nob3cnLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGUgPT09ICdyZXZlYWwnICYmICFoYXNDbGFzcyh0aGlzLnBhbmVsLnBhcmVudE5vZGUsIHRoaXMuY2xzTW9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBBbGwodGhpcy5wYW5lbCwgJzxkaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyh0aGlzLnBhbmVsLnBhcmVudE5vZGUsIHRoaXMuY2xzTW9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnb3ZlcmZsb3dZJywgdGhpcy5vdmVybGF5ID8gJ2hpZGRlbicgOiAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGRvY3VtZW50LmJvZHksIHRoaXMuY2xzQ29udGFpbmVyLCB0aGlzLmNsc0ZsaXApO1xuICAgICAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ3RvdWNoLWFjdGlvbicsICdwYW4teSBwaW5jaC16b29tJyk7XG4gICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzT3ZlcmxheSk7XG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMucGFuZWwsIHRoaXMuY2xzU2lkZWJhckFuaW1hdGlvbiwgdGhpcy5tb2RlICE9PSAncmV2ZWFsJyA/IHRoaXMuY2xzTW9kZSA6ICcnKTtcblxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQoZG9jdW1lbnQuYm9keSk7IC8vIGZvcmNlIHJlZmxvd1xuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhkb2N1bWVudC5ib2R5LCB0aGlzLmNsc0NvbnRhaW5lckFuaW1hdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbHNDb250YWluZXJBbmltYXRpb24gJiYgc3VwcHJlc3NVc2VyU2NhbGUoKTtcblxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdoaWRlJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZG9jdW1lbnQuYm9keSwgdGhpcy5jbHNDb250YWluZXJBbmltYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ3RvdWNoLWFjdGlvbicsICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2hpZGRlbicsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbHNDb250YWluZXJBbmltYXRpb24gJiYgcmVzdW1lVXNlclNjYWxlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gJ3JldmVhbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVud3JhcCh0aGlzLnBhbmVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMucGFuZWwsIHRoaXMuY2xzU2lkZWJhckFuaW1hdGlvbiwgdGhpcy5jbHNNb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzT3ZlcmxheSk7XG4gICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ2Rpc3BsYXknLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGRvY3VtZW50LmJvZHksIHRoaXMuY2xzQ29udGFpbmVyLCB0aGlzLmNsc0ZsaXApO1xuXG4gICAgICAgICAgICAgICAgICAgIGNzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICdvdmVyZmxvd1knLCAnJyk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3N3aXBlTGVmdCBzd2lwZVJpZ2h0JyxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1RvZ2dsZWQoKSAmJiBlbmRzV2l0aChlLnR5cGUsICdMZWZ0JykgXiB0aGlzLmZsaXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXVxuXG4gICAgfTtcblxuICAgIC8vIENocm9tZSBpbiByZXNwb25zaXZlIG1vZGUgem9vbXMgcGFnZSB1cG9uIG9wZW5pbmcgb2ZmY2FudmFzXG4gICAgZnVuY3Rpb24gc3VwcHJlc3NVc2VyU2NhbGUoKSB7XG4gICAgICAgIGdldFZpZXdwb3J0JDEoKS5jb250ZW50ICs9ICcsdXNlci1zY2FsYWJsZT0wJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXN1bWVVc2VyU2NhbGUoKSB7XG4gICAgICAgIHZhciB2aWV3cG9ydCA9IGdldFZpZXdwb3J0JDEoKTtcbiAgICAgICAgdmlld3BvcnQuY29udGVudCA9IHZpZXdwb3J0LmNvbnRlbnQucmVwbGFjZSgvLHVzZXItc2NhbGFibGU9MCQvLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Vmlld3BvcnQkMSgpIHtcbiAgICAgICAgcmV0dXJuICQoJ21ldGFbbmFtZT1cInZpZXdwb3J0XCJdJywgZG9jdW1lbnQuaGVhZCkgfHwgYXBwZW5kKGRvY3VtZW50LmhlYWQsICc8bWV0YSBuYW1lPVwidmlld3BvcnRcIj4nKTtcbiAgICB9XG5cbiAgICB2YXIgb3ZlcmZsb3dBdXRvID0ge1xuXG4gICAgICAgIG1peGluczogW0NsYXNzXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgc2VsQ29udGFpbmVyOiBTdHJpbmcsXG4gICAgICAgICAgICBzZWxDb250ZW50OiBTdHJpbmdcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBzZWxDb250YWluZXI6ICcudWstbW9kYWwnLFxuICAgICAgICAgICAgc2VsQ29udGVudDogJy51ay1tb2RhbC1kaWFsb2cnXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgY29udGFpbmVyOiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWxDb250YWluZXIgPSByZWYuc2VsQ29udGFpbmVyO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb3Nlc3QoJGVsLCBzZWxDb250YWluZXIpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY29udGVudDogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsQ29udGVudCA9IHJlZi5zZWxDb250ZW50O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb3Nlc3QoJGVsLCBzZWxDb250ZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjc3ModGhpcy4kZWwsICdtaW5IZWlnaHQnLCAxNTApO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb250ZW50IHx8ICF0aGlzLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudDogdG9GbG9hdChjc3ModGhpcy4kZWwsICdtYXhIZWlnaHQnKSksXG4gICAgICAgICAgICAgICAgICAgIG1heDogTWF0aC5tYXgoMTUwLCBoZWlnaHQodGhpcy5jb250YWluZXIpIC0gKG9mZnNldCh0aGlzLmNvbnRlbnQpLmhlaWdodCAtIGhlaWdodCh0aGlzLiRlbCkpKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSByZWYuY3VycmVudDtcbiAgICAgICAgICAgICAgICB2YXIgbWF4ID0gcmVmLm1heDtcblxuICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ21heEhlaWdodCcsIG1heCk7XG4gICAgICAgICAgICAgICAgaWYgKE1hdGgucm91bmQoY3VycmVudCkgIT09IE1hdGgucm91bmQobWF4KSkge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAncmVzaXplJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciByZXNwb25zaXZlID0ge1xuXG4gICAgICAgIHByb3BzOiBbJ3dpZHRoJywgJ2hlaWdodCddLFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbCwgJ3VrLXJlc3BvbnNpdmUtd2lkdGgnKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVmlzaWJsZSh0aGlzLiRlbCkgJiYgdGhpcy53aWR0aCAmJiB0aGlzLmhlaWdodFxuICAgICAgICAgICAgICAgICAgICA/IHt3aWR0aDogd2lkdGgodGhpcy4kZWwucGFyZW50Tm9kZSksIGhlaWdodDogdGhpcy5oZWlnaHR9XG4gICAgICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24oZGltKSB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0KHRoaXMuJGVsLCBEaW1lbnNpb25zLmNvbnRhaW4oe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aFxuICAgICAgICAgICAgICAgIH0sIGRpbSkuaGVpZ2h0KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgc2Nyb2xsID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBvZmZzZXQ6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgc2Nyb2xsVG86IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIGVsID0gZWwgJiYgJChlbCkgfHwgZG9jdW1lbnQuYm9keTtcblxuICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyKHRoaXMuJGVsLCAnYmVmb3Jlc2Nyb2xsJywgW3RoaXMsIGVsXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsSW50b1ZpZXcoZWwsIHtvZmZzZXQ6IHRoaXMub2Zmc2V0fSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB0cmlnZ2VyKHRoaXMkMS4kZWwsICdzY3JvbGxlZCcsIFt0aGlzJDEsIGVsXSk7IH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czoge1xuXG4gICAgICAgICAgICBjbGljazogZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG8oZXNjYXBlKGRlY29kZVVSSUNvbXBvbmVudCh0aGlzLiRlbC5oYXNoKSkuc3Vic3RyKDEpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIHNjcm9sbHNweSA9IHtcblxuICAgICAgICBhcmdzOiAnY2xzJyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgY2xzOiBTdHJpbmcsXG4gICAgICAgICAgICB0YXJnZXQ6IFN0cmluZyxcbiAgICAgICAgICAgIGhpZGRlbjogQm9vbGVhbixcbiAgICAgICAgICAgIG9mZnNldFRvcDogTnVtYmVyLFxuICAgICAgICAgICAgb2Zmc2V0TGVmdDogTnVtYmVyLFxuICAgICAgICAgICAgcmVwZWF0OiBCb29sZWFuLFxuICAgICAgICAgICAgZGVsYXk6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gICAgICAgICAgICBjbHM6IGZhbHNlLFxuICAgICAgICAgICAgdGFyZ2V0OiBmYWxzZSxcbiAgICAgICAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICAgICAgICAgIG9mZnNldFRvcDogMCxcbiAgICAgICAgICAgIG9mZnNldExlZnQ6IDAsXG4gICAgICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgICBpblZpZXdDbGFzczogJ3VrLXNjcm9sbHNweS1pbnZpZXcnXG4gICAgICAgIH0pOyB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGVsZW1lbnRzOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQgPyAkJCh0YXJnZXQsICRlbCkgOiBbJGVsXTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhpZGRlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzKGZpbHRlcihlbGVtZW50cywgKFwiOm5vdCguXCIgKyAodGhpcy5pblZpZXdDbGFzcykgKyBcIilcIikpLCAndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBpbW1lZGlhdGU6IHRydWVcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlOiBbXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IHJlZi51cGRhdGU7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBlbC5fdWtTY3JvbGxzcHlTdGF0ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0ge2NsczogZGF0YShlbCwgJ3VrLXNjcm9sbHNweS1jbGFzcycpIHx8IHRoaXMkMS5jbHN9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5zaG93ID0gaXNJblZpZXcoZWwsIHRoaXMkMS5vZmZzZXRUb3AsIHRoaXMkMS5vZmZzZXRMZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLl91a1Njcm9sbHNweVN0YXRlID0gc3RhdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICAvLyBMZXQgY2hpbGQgY29tcG9uZW50cyBiZSBhcHBsaWVkIGF0IGxlYXN0IG9uY2UgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhLnVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEudXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gZWwuX3VrU2Nyb2xsc3B5U3RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlID0gZnVuY3Rpb24gKGludmlldykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzKGVsLCAndmlzaWJpbGl0eScsICFpbnZpZXcgJiYgdGhpcyQxLmhpZGRlbiA/ICdoaWRkZW4nIDogJycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHRoaXMkMS5pblZpZXdDbGFzcywgaW52aWV3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhlbCwgc3RhdGUuY2xzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXIoZWwsIGludmlldyA/ICdpbnZpZXcnIDogJ291dHZpZXcnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmludmlldyA9IGludmlldztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS4kdXBkYXRlKGVsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLnNob3cgJiYgIXN0YXRlLmludmlldyAmJiAhc3RhdGUucXVldWVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5xdWV1ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wcm9taXNlID0gKGRhdGEucHJvbWlzZSB8fCBQcm9taXNlLnJlc29sdmUoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlLCB0aGlzJDEuZGVsYXkpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUucXVldWVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuJGVtaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc3RhdGUuc2hvdyAmJiBzdGF0ZS5pbnZpZXcgJiYgIXN0YXRlLnF1ZXVlZCAmJiB0aGlzJDEucmVwZWF0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGUoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgZXZlbnRzOiBbJ3Njcm9sbCcsICdyZXNpemUnXVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXVxuXG4gICAgfTtcblxuICAgIHZhciBzY3JvbGxzcHlOYXYgPSB7XG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGNsczogU3RyaW5nLFxuICAgICAgICAgICAgY2xvc2VzdDogU3RyaW5nLFxuICAgICAgICAgICAgc2Nyb2xsOiBCb29sZWFuLFxuICAgICAgICAgICAgb3ZlcmZsb3c6IEJvb2xlYW4sXG4gICAgICAgICAgICBvZmZzZXQ6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGNsczogJ3VrLWFjdGl2ZScsXG4gICAgICAgICAgICBjbG9zZXN0OiBmYWxzZSxcbiAgICAgICAgICAgIHNjcm9sbDogZmFsc2UsXG4gICAgICAgICAgICBvdmVyZmxvdzogdHJ1ZSxcbiAgICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGxpbmtzOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKF8sICRlbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCQoJ2FbaHJlZl49XCIjXCJdJywgJGVsKS5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlbC5oYXNoOyB9KTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGxpbmtzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjcm9sbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kY3JlYXRlKCdzY3JvbGwnLCBsaW5rcywge29mZnNldDogdGhpcy5vZmZzZXQgfHwgMH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0YXJnZXRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJCQodGhpcy5saW5rcy5tYXAoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlc2NhcGUoZWwuaGFzaCkuc3Vic3RyKDEpOyB9KS5qb2luKCcsJykpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZWxlbWVudHM6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IHJlZi5jbG9zZXN0O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb3Nlc3QodGhpcy5saW5rcywgc2VsZWN0b3IgfHwgJyonKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZTogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICByZWFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy50YXJnZXRzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gcmVmLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWxlbmd0aCB8fCAhaXNWaXNpYmxlKHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbEVsZW1lbnQgPSBsYXN0KHNjcm9sbFBhcmVudHModGhpcy50YXJnZXRzWzBdKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSBzY3JvbGxFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbEhlaWdodCA9IHNjcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmlld3BvcnQgPSBnZXRWaWV3cG9ydChzY3JvbGxFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heCA9IHNjcm9sbEhlaWdodCAtIG9mZnNldCh2aWV3cG9ydCkuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbFRvcCA9PT0gbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSBsZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldHMuZXZlcnkoZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uKGVsLCB2aWV3cG9ydCkudG9wIC0gdGhpcyQxLm9mZnNldCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZSA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlID09PSBmYWxzZSAmJiB0aGlzLm92ZXJmbG93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7YWN0aXZlOiBhY3RpdmV9O1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSByZWYuYWN0aXZlO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwuYmx1cigpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50cywgdGhpcy5jbHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAnYWN0aXZlJywgW2FjdGl2ZSwgYWRkQ2xhc3ModGhpcy5lbGVtZW50c1thY3RpdmVdLCB0aGlzLmNscyldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGV2ZW50czogWydzY3JvbGwnLCAncmVzaXplJ11cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF1cblxuICAgIH07XG5cbiAgICB2YXIgc3RpY2t5ID0ge1xuXG4gICAgICAgIG1peGluczogW0NsYXNzLCBNZWRpYV0sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIHRvcDogbnVsbCxcbiAgICAgICAgICAgIGJvdHRvbTogQm9vbGVhbixcbiAgICAgICAgICAgIG9mZnNldDogU3RyaW5nLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiBTdHJpbmcsXG4gICAgICAgICAgICBjbHNBY3RpdmU6IFN0cmluZyxcbiAgICAgICAgICAgIGNsc0luYWN0aXZlOiBTdHJpbmcsXG4gICAgICAgICAgICBjbHNGaXhlZDogU3RyaW5nLFxuICAgICAgICAgICAgY2xzQmVsb3c6IFN0cmluZyxcbiAgICAgICAgICAgIHNlbFRhcmdldDogU3RyaW5nLFxuICAgICAgICAgICAgd2lkdGhFbGVtZW50OiBCb29sZWFuLFxuICAgICAgICAgICAgc2hvd09uVXA6IEJvb2xlYW4sXG4gICAgICAgICAgICB0YXJnZXRPZmZzZXQ6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGJvdHRvbTogZmFsc2UsXG4gICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICBhbmltYXRpb246ICcnLFxuICAgICAgICAgICAgY2xzQWN0aXZlOiAndWstYWN0aXZlJyxcbiAgICAgICAgICAgIGNsc0luYWN0aXZlOiAnJyxcbiAgICAgICAgICAgIGNsc0ZpeGVkOiAndWstc3RpY2t5LWZpeGVkJyxcbiAgICAgICAgICAgIGNsc0JlbG93OiAndWstc3RpY2t5LWJlbG93JyxcbiAgICAgICAgICAgIHNlbFRhcmdldDogJycsXG4gICAgICAgICAgICB3aWR0aEVsZW1lbnQ6IGZhbHNlLFxuICAgICAgICAgICAgc2hvd09uVXA6IGZhbHNlLFxuICAgICAgICAgICAgdGFyZ2V0T2Zmc2V0OiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIG9mZnNldDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IHJlZi5vZmZzZXQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdG9QeChvZmZzZXQpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2VsVGFyZ2V0OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWxUYXJnZXQgPSByZWYuc2VsVGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbFRhcmdldCAmJiAkKHNlbFRhcmdldCwgJGVsKSB8fCAkZWw7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3aWR0aEVsZW1lbnQ6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoRWxlbWVudCA9IHJlZi53aWR0aEVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnkod2lkdGhFbGVtZW50LCAkZWwpIHx8IHRoaXMucGxhY2Vob2xkZXI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc0FjdGl2ZToge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhc0NsYXNzKHRoaXMuc2VsVGFyZ2V0LCB0aGlzLmNsc0FjdGl2ZSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmICF0aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlQ2xhc3ModGhpcy5zZWxUYXJnZXQsIHRoaXMuY2xzSW5hY3RpdmUsIHRoaXMuY2xzQWN0aXZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdmFsdWUgJiYgIWhhc0NsYXNzKHRoaXMuc2VsVGFyZ2V0LCB0aGlzLmNsc0luYWN0aXZlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUNsYXNzKHRoaXMuc2VsVGFyZ2V0LCB0aGlzLmNsc0FjdGl2ZSwgdGhpcy5jbHNJbmFjdGl2ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAnaW5hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSAkKCcrIC51ay1zdGlja3ktcGxhY2Vob2xkZXInLCB0aGlzLiRlbCkgfHwgJCgnPGRpdiBjbGFzcz1cInVrLXN0aWNreS1wbGFjZWhvbGRlclwiPjwvZGl2PicpO1xuICAgICAgICAgICAgdGhpcy5pc0ZpeGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNGaXhlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuc2VsVGFyZ2V0LCB0aGlzLmNsc0luYWN0aXZlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVtb3ZlKHRoaXMucGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLndpZHRoRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdsb2FkIGhhc2hjaGFuZ2UgcG9wc3RhdGUnLFxuXG4gICAgICAgICAgICAgICAgZWw6IGluQnJvd3NlciAmJiB3aW5kb3csXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnRhcmdldE9mZnNldCAhPT0gZmFsc2UgJiYgbG9jYXRpb24uaGFzaCAmJiB3aW5kb3cucGFnZVlPZmZzZXQgPiAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9ICQobG9jYXRpb24uaGFzaCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmFzdGRvbS5yZWFkKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWYgPSBvZmZzZXQodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9wID0gcmVmLnRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxUb3AgPSBvZmZzZXQodGhpcyQxLiRlbCkudG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbEhlaWdodCA9IHRoaXMkMS4kZWwub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMkMS5pc0ZpeGVkICYmIGVsVG9wICsgZWxIZWlnaHQgPj0gdG9wICYmIGVsVG9wIDw9IHRvcCArIHRhcmdldC5vZmZzZXRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wKHdpbmRvdywgdG9wIC0gZWxIZWlnaHQgLSAoaXNOdW1lcmljKHRoaXMkMS50YXJnZXRPZmZzZXQpID8gdGhpcyQxLnRhcmdldE9mZnNldCA6IDApIC0gdGhpcyQxLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICB1cGRhdGU6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24ocmVmLCB0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByZWYuaGVpZ2h0O1xuXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmUgJiYgdHlwZSAhPT0gJ3VwZGF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy4kZWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSAhdGhpcy5pc0FjdGl2ZSA/IHRoaXMuJGVsLm9mZnNldEhlaWdodCA6IGhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvcE9mZnNldCA9IG9mZnNldCh0aGlzLmlzRml4ZWQgPyB0aGlzLnBsYWNlaG9sZGVyIDogdGhpcy4kZWwpLnRvcDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ib3R0b21PZmZzZXQgPSB0aGlzLnRvcE9mZnNldCArIGhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgYm90dG9tID0gcGFyc2VQcm9wKCdib3R0b20nLCB0aGlzKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvcCA9IE1hdGgubWF4KHRvRmxvYXQocGFyc2VQcm9wKCd0b3AnLCB0aGlzKSksIHRoaXMudG9wT2Zmc2V0KSAtIHRoaXMub2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJvdHRvbSA9IGJvdHRvbSAmJiBib3R0b20gLSB0aGlzLiRlbC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5hY3RpdmUgPSAhdGhpcy5tYXRjaE1lZGlhO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0U2Nyb2xsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luczogY3NzKHRoaXMuJGVsLCBbJ21hcmdpblRvcCcsICdtYXJnaW5Cb3R0b20nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5SaWdodCddKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByZWYuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFyZ2lucyA9IHJlZi5tYXJnaW5zO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gcmVmJDEucGxhY2Vob2xkZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgY3NzKHBsYWNlaG9sZGVyLCBhc3NpZ24oe2hlaWdodDogaGVpZ2h0fSwgbWFyZ2lucykpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghd2l0aGluKHBsYWNlaG9sZGVyLCBkb2N1bWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyKHRoaXMuJGVsLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyKHBsYWNlaG9sZGVyLCAnaGlkZGVuJywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIGFjdGl2ZS9pbmFjdGl2ZSBjbGFzc2VzIGFyZSBhcHBsaWVkXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0aGlzLmlzQWN0aXZlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtYXNzaWduXG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsID0gcmVmLnNjcm9sbDsgaWYgKCBzY3JvbGwgPT09IHZvaWQgMCApIHNjcm9sbCA9IDA7XG5cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gb2Zmc2V0KGlzVmlzaWJsZSh0aGlzLndpZHRoRWxlbWVudCkgPyB0aGlzLndpZHRoRWxlbWVudCA6IHRoaXMuJGVsKS53aWR0aDtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlyOiBzY3JvbGwgPD0gdGhpcy5zY3JvbGwgPyAnZG93bicgOiAndXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsOiB0aGlzLnNjcm9sbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGlzVmlzaWJsZSh0aGlzLiRlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IG9mZnNldFBvc2l0aW9uKHRoaXMucGxhY2Vob2xkZXIpWzBdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihkYXRhLCB0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGluaXRUaW1lc3RhbXAgPSBkYXRhLmluaXRUaW1lc3RhbXA7IGlmICggaW5pdFRpbWVzdGFtcCA9PT0gdm9pZCAwICkgaW5pdFRpbWVzdGFtcCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXIgPSBkYXRhLmRpcjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3REaXIgPSBkYXRhLmxhc3REaXI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0U2Nyb2xsID0gZGF0YS5sYXN0U2Nyb2xsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsID0gZGF0YS5zY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3AgPSBkYXRhLnRvcDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpc2libGUgPSBkYXRhLnZpc2libGU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICAgICAgICAgICAgICAgICAgICBkYXRhLmxhc3RTY3JvbGwgPSBzY3JvbGw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbCA8IDAgfHwgc2Nyb2xsID09PSBsYXN0U2Nyb2xsIHx8ICF2aXNpYmxlIHx8IHRoaXMuZGlzYWJsZWQgfHwgdGhpcy5zaG93T25VcCAmJiB0eXBlICE9PSAnc2Nyb2xsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vdyAtIGluaXRUaW1lc3RhbXAgPiAzMDAgfHwgZGlyICE9PSBsYXN0RGlyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmluaXRTY3JvbGwgPSBzY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmluaXRUaW1lc3RhbXAgPSBub3c7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkYXRhLmxhc3REaXIgPSBkaXI7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hvd09uVXAgJiYgIXRoaXMuaXNGaXhlZCAmJiBNYXRoLmFicyhkYXRhLmluaXRTY3JvbGwgLSBzY3JvbGwpIDw9IDMwICYmIE1hdGguYWJzKGxhc3RTY3JvbGwgLSBzY3JvbGwpIDw9IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbmFjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgc2Nyb2xsIDwgdGhpcy50b3BcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IHRoaXMuc2hvd09uVXAgJiYgKHNjcm9sbCA8PSB0aGlzLnRvcCB8fCBkaXIgPT09ICdkb3duJyB8fCBkaXIgPT09ICd1cCcgJiYgIXRoaXMuaXNGaXhlZCAmJiBzY3JvbGwgPD0gdGhpcy5ib3R0b21PZmZzZXQpXG4gICAgICAgICAgICAgICAgICAgICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNGaXhlZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFuaW1hdGlvbi5pblByb2dyZXNzKHRoaXMuJGVsKSAmJiB0b3AgPiBzY3JvbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQW5pbWF0aW9uLmNhbmNlbCh0aGlzLiRlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0ZpeGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbiAmJiBzY3JvbGwgPiB0aGlzLnRvcE9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5jYW5jZWwodGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5vdXQodGhpcy4kZWwsIHRoaXMuYW5pbWF0aW9uKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5oaWRlKCk7IH0sIG5vb3ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNGaXhlZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5hbmltYXRpb24pIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgQW5pbWF0aW9uLmNhbmNlbCh0aGlzLiRlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5pbih0aGlzLiRlbCwgdGhpcy5hbmltYXRpb24pLmNhdGNoKG5vb3ApO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnLCAnc2Nyb2xsJ11cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuaXNGaXhlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICBhdHRyKHRoaXMucGxhY2Vob2xkZXIsICdoaWRkZW4nLCBudWxsKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGlkZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzRml4ZWQsIHRoaXMuY2xzQmVsb3cpO1xuICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwge3Bvc2l0aW9uOiAnJywgdG9wOiAnJywgd2lkdGg6ICcnfSk7XG4gICAgICAgICAgICAgICAgYXR0cih0aGlzLnBsYWNlaG9sZGVyLCAnaGlkZGVuJywgJycpO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IHRoaXMudG9wICE9PSAwIHx8IHRoaXMuc2Nyb2xsID4gdGhpcy50b3A7XG4gICAgICAgICAgICAgICAgdmFyIHRvcCA9IE1hdGgubWF4KDAsIHRoaXMub2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgIGlmIChpc051bWVyaWModGhpcy5ib3R0b20pICYmIHRoaXMuc2Nyb2xsID4gdGhpcy5ib3R0b20gLSB0aGlzLm9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICB0b3AgPSB0aGlzLmJvdHRvbSAtIHRoaXMuc2Nyb2xsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAodG9wICsgXCJweFwiKSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMud2lkdGhcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuaXNBY3RpdmUgPSBhY3RpdmU7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzQmVsb3csIHRoaXMuc2Nyb2xsID4gdGhpcy5ib3R0b21PZmZzZXQpO1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCB0aGlzLmNsc0ZpeGVkKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwYXJzZVByb3AocHJvcCwgcmVmKSB7XG4gICAgICAgIHZhciAkcHJvcHMgPSByZWYuJHByb3BzO1xuICAgICAgICB2YXIgJGVsID0gcmVmLiRlbDtcbiAgICAgICAgdmFyIHByb3BPZmZzZXQgPSByZWZbKHByb3AgKyBcIk9mZnNldFwiKV07XG5cblxuICAgICAgICB2YXIgdmFsdWUgPSAkcHJvcHNbcHJvcF07XG5cbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS5tYXRjaCgvXi0/XFxkLykpIHtcblxuICAgICAgICAgICAgcmV0dXJuIHByb3BPZmZzZXQgKyB0b1B4KHZhbHVlKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICByZXR1cm4gb2Zmc2V0KHZhbHVlID09PSB0cnVlID8gJGVsLnBhcmVudE5vZGUgOiBxdWVyeSh2YWx1ZSwgJGVsKSkuYm90dG9tO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgU3dpdGNoZXIgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbVG9nZ2xhYmxlXSxcblxuICAgICAgICBhcmdzOiAnY29ubmVjdCcsXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGNvbm5lY3Q6IFN0cmluZyxcbiAgICAgICAgICAgIHRvZ2dsZTogU3RyaW5nLFxuICAgICAgICAgICAgYWN0aXZlOiBOdW1iZXIsXG4gICAgICAgICAgICBzd2lwaW5nOiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgY29ubmVjdDogJ34udWstc3dpdGNoZXInLFxuICAgICAgICAgICAgdG9nZ2xlOiAnPiAqID4gOmZpcnN0LWNoaWxkJyxcbiAgICAgICAgICAgIGFjdGl2ZTogMCxcbiAgICAgICAgICAgIHN3aXBpbmc6IHRydWUsXG4gICAgICAgICAgICBjbHM6ICd1ay1hY3RpdmUnLFxuICAgICAgICAgICAgY2xzQ29udGFpbmVyOiAndWstc3dpdGNoZXInLFxuICAgICAgICAgICAgYXR0ckl0ZW06ICd1ay1zd2l0Y2hlci1pdGVtJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGNvbm5lY3RzOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb25uZWN0ID0gcmVmLmNvbm5lY3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5QWxsKGNvbm5lY3QsICRlbCk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdhdGNoOiBmdW5jdGlvbihjb25uZWN0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3RzLmZvckVhY2goZnVuY3Rpb24gKGxpc3QpIHsgcmV0dXJuIHRoaXMkMS51cGRhdGVBcmlhKGxpc3QuY2hpbGRyZW4pOyB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zd2lwaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MoY29ubmVjdHMsICd0b3VjaC1hY3Rpb24nLCAncGFuLXkgcGluY2gtem9vbScpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaW1tZWRpYXRlOiB0cnVlXG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRvZ2dsZXM6IHtcblxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvZ2dsZSA9IHJlZi50b2dnbGU7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQkKHRvZ2dsZSwgJGVsKS5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7IHJldHVybiAhbWF0Y2hlcyhlbCwgJy51ay1kaXNhYmxlZCAqLCAudWstZGlzYWJsZWQsIFtkaXNhYmxlZF0nKTsgfSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdhdGNoOiBmdW5jdGlvbih0b2dnbGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSB0aGlzLmluZGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyh+YWN0aXZlICYmIGFjdGl2ZSB8fCB0b2dnbGVzW3RoaXMuYWN0aXZlXSB8fCB0b2dnbGVzWzBdKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaW1tZWRpYXRlOiB0cnVlXG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNoaWxkcmVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbih0aGlzLiRlbCkuZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gdGhpcyQxLnRvZ2dsZXMuc29tZShmdW5jdGlvbiAodG9nZ2xlKSB7IHJldHVybiB3aXRoaW4odG9nZ2xlLCBjaGlsZCk7IH0pOyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b2dnbGU7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbmNsdWRlcyh0aGlzLnRvZ2dsZXMsIGUuY3VycmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhlLmN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdjbGljaycsXG5cbiAgICAgICAgICAgICAgICBlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3RzO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCJbXCIgKyAodGhpcy5hdHRySXRlbSkgKyBcIl0sW2RhdGEtXCIgKyAodGhpcy5hdHRySXRlbSkgKyBcIl1cIik7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coZGF0YShlLmN1cnJlbnQsIHRoaXMuYXR0ckl0ZW0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3N3aXBlUmlnaHQgc3dpcGVMZWZ0JyxcblxuICAgICAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN3aXBpbmc7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGVsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdHM7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhlbmRzV2l0aCh0eXBlLCAnTGVmdCcpID8gJ25leHQnIDogJ3ByZXZpb3VzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBpbmRleDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmluZEluZGV4KHRoaXMuY2hpbGRyZW4sIGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gaGFzQ2xhc3MoZWwsIHRoaXMkMS5jbHMpOyB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIHByZXYgPSB0aGlzLmluZGV4KCk7XG4gICAgICAgICAgICAgICAgdmFyIG5leHQgPSBnZXRJbmRleChpdGVtLCB0aGlzLnRvZ2dsZXMsIHByZXYpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhjaGlsZCwgdGhpcyQxLmNscywgbmV4dCA9PT0gaSk7XG4gICAgICAgICAgICAgICAgICAgIGF0dHIodGhpcyQxLnRvZ2dsZXNbaV0sICdhcmlhLWV4cGFuZGVkJywgbmV4dCA9PT0gaSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RzLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcyQxLnRvZ2dsZUVsZW1lbnQodG9Ob2RlcyhjaGlsZHJlbikuZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCwgaSkgeyByZXR1cm4gaSAhPT0gbmV4dCAmJiB0aGlzJDEuaXNUb2dnbGVkKGNoaWxkKTsgfVxuICAgICAgICAgICAgICAgICAgICApLCBmYWxzZSwgcHJldiA+PSAwKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS50b2dnbGVFbGVtZW50KGNoaWxkcmVuW25leHRdLCB0cnVlLCBwcmV2ID49IDApOyB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciB0YWIgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbQ2xhc3NdLFxuXG4gICAgICAgIGV4dGVuZHM6IFN3aXRjaGVyLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBtZWRpYTogQm9vbGVhblxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG1lZGlhOiA5NjAsXG4gICAgICAgICAgICBhdHRySXRlbTogJ3VrLXRhYi1pdGVtJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIHZhciBjbHMgPSBoYXNDbGFzcyh0aGlzLiRlbCwgJ3VrLXRhYi1sZWZ0JylcbiAgICAgICAgICAgICAgICA/ICd1ay10YWItbGVmdCdcbiAgICAgICAgICAgICAgICA6IGhhc0NsYXNzKHRoaXMuJGVsLCAndWstdGFiLXJpZ2h0JylcbiAgICAgICAgICAgICAgICAgICAgPyAndWstdGFiLXJpZ2h0J1xuICAgICAgICAgICAgICAgICAgICA6IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoY2xzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kY3JlYXRlKCd0b2dnbGUnLCB0aGlzLiRlbCwge2NsczogY2xzLCBtb2RlOiAnbWVkaWEnLCBtZWRpYTogdGhpcy5tZWRpYX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIHRvZ2dsZSA9IHtcblxuICAgICAgICBtaXhpbnM6IFtNZWRpYSwgVG9nZ2xhYmxlXSxcblxuICAgICAgICBhcmdzOiAndGFyZ2V0JyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgaHJlZjogU3RyaW5nLFxuICAgICAgICAgICAgdGFyZ2V0OiBudWxsLFxuICAgICAgICAgICAgbW9kZTogJ2xpc3QnLFxuICAgICAgICAgICAgcXVldWVkOiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgaHJlZjogZmFsc2UsXG4gICAgICAgICAgICB0YXJnZXQ6IGZhbHNlLFxuICAgICAgICAgICAgbW9kZTogJ2NsaWNrJyxcbiAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIHRhcmdldDoge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaHJlZiA9IHJlZi5ocmVmO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBxdWVyeUFsbCh0YXJnZXQgfHwgaHJlZiwgJGVsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5sZW5ndGggJiYgdGFyZ2V0IHx8IFskZWxdO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3YXRjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy50YXJnZXQsICd1cGRhdGVhcmlhJywgW3RoaXNdKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaW1tZWRpYXRlOiB0cnVlXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAocG9pbnRlckVudGVyICsgXCIgXCIgKyBwb2ludGVyTGVhdmUpLFxuXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluY2x1ZGVzKHRoaXMubW9kZSwgJ2hvdmVyJyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RvdWNoKGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZSgoXCJ0b2dnbGVcIiArIChlLnR5cGUgPT09IHBvaW50ZXJFbnRlciA/ICdzaG93JyA6ICdoaWRlJykpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmNsdWRlcyh0aGlzLm1vZGUsICdjbGljaycpIHx8IGhhc1RvdWNoICYmIGluY2x1ZGVzKHRoaXMubW9kZSwgJ2hvdmVyJyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGJldHRlciBpc1RvZ2dsZWQgaGFuZGxpbmdcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbms7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbG9zZXN0KGUudGFyZ2V0LCAnYVtocmVmPVwiI1wiXSwgYVtocmVmPVwiXCJdJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IChsaW5rID0gY2xvc2VzdChlLnRhcmdldCwgJ2FbaHJlZl0nKSkgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xzICYmICFoYXNDbGFzcyh0aGlzLnRhcmdldCwgdGhpcy5jbHMuc3BsaXQoJyAnKVswXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAhaXNWaXNpYmxlKHRoaXMudGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGxpbmsuaGFzaCAmJiBtYXRjaGVzKHRoaXMudGFyZ2V0LCBsaW5rLmhhc2gpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5jbHVkZXModGhpcy5tb2RlLCAnbWVkaWEnKSAmJiB0aGlzLm1lZGlhXG4gICAgICAgICAgICAgICAgICAgID8ge21hdGNoOiB0aGlzLm1hdGNoTWVkaWF9XG4gICAgICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gcmVmLm1hdGNoO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlZCA9IHRoaXMuaXNUb2dnbGVkKHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPyAhdG9nZ2xlZCA6IHRvZ2dsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgaWYgKCF0cmlnZ2VyKHRoaXMudGFyZ2V0LCB0eXBlIHx8ICd0b2dnbGUnLCBbdGhpc10pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5xdWV1ZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlZCA9IHRoaXMudGFyZ2V0LmZpbHRlcih0aGlzLmlzVG9nZ2xlZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlRWxlbWVudCh0b2dnbGVkLCBmYWxzZSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEudG9nZ2xlRWxlbWVudCh0aGlzJDEudGFyZ2V0LmZpbHRlcihmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICFpbmNsdWRlcyh0b2dnbGVkLCBlbCk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICksIHRydWUpOyB9XG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUVsZW1lbnQodGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIGNvbXBvbmVudHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAgICAgQWNjb3JkaW9uOiBBY2NvcmRpb24sXG4gICAgICAgIEFsZXJ0OiBhbGVydCxcbiAgICAgICAgQ292ZXI6IGNvdmVyLFxuICAgICAgICBEcm9wOiBkcm9wLFxuICAgICAgICBEcm9wZG93bjogZHJvcCxcbiAgICAgICAgRm9ybUN1c3RvbTogZm9ybUN1c3RvbSxcbiAgICAgICAgR2lmOiBnaWYsXG4gICAgICAgIEdyaWQ6IGdyaWQsXG4gICAgICAgIEhlaWdodE1hdGNoOiBoZWlnaHRNYXRjaCxcbiAgICAgICAgSGVpZ2h0Vmlld3BvcnQ6IGhlaWdodFZpZXdwb3J0LFxuICAgICAgICBJY29uOiBJY29uLFxuICAgICAgICBJbWc6IGltZyxcbiAgICAgICAgTGVhZGVyOiBsZWFkZXIsXG4gICAgICAgIE1hcmdpbjogTWFyZ2luLFxuICAgICAgICBNb2RhbDogbW9kYWwsXG4gICAgICAgIE5hdjogbmF2LFxuICAgICAgICBOYXZiYXI6IG5hdmJhcixcbiAgICAgICAgT2ZmY2FudmFzOiBvZmZjYW52YXMsXG4gICAgICAgIE92ZXJmbG93QXV0bzogb3ZlcmZsb3dBdXRvLFxuICAgICAgICBSZXNwb25zaXZlOiByZXNwb25zaXZlLFxuICAgICAgICBTY3JvbGw6IHNjcm9sbCxcbiAgICAgICAgU2Nyb2xsc3B5OiBzY3JvbGxzcHksXG4gICAgICAgIFNjcm9sbHNweU5hdjogc2Nyb2xsc3B5TmF2LFxuICAgICAgICBTdGlja3k6IHN0aWNreSxcbiAgICAgICAgU3ZnOiBTVkcsXG4gICAgICAgIFN3aXRjaGVyOiBTd2l0Y2hlcixcbiAgICAgICAgVGFiOiB0YWIsXG4gICAgICAgIFRvZ2dsZTogdG9nZ2xlLFxuICAgICAgICBWaWRlbzogVmlkZW8sXG4gICAgICAgIENsb3NlOiBDbG9zZSxcbiAgICAgICAgU3Bpbm5lcjogU3Bpbm5lcixcbiAgICAgICAgU2xpZGVuYXZOZXh0OiBTbGlkZW5hdixcbiAgICAgICAgU2xpZGVuYXZQcmV2aW91czogU2xpZGVuYXYsXG4gICAgICAgIFNlYXJjaEljb246IFNlYXJjaCxcbiAgICAgICAgTWFya2VyOiBJY29uQ29tcG9uZW50LFxuICAgICAgICBOYXZiYXJUb2dnbGVJY29uOiBJY29uQ29tcG9uZW50LFxuICAgICAgICBPdmVybGF5SWNvbjogSWNvbkNvbXBvbmVudCxcbiAgICAgICAgUGFnaW5hdGlvbk5leHQ6IEljb25Db21wb25lbnQsXG4gICAgICAgIFBhZ2luYXRpb25QcmV2aW91czogSWNvbkNvbXBvbmVudCxcbiAgICAgICAgVG90b3A6IEljb25Db21wb25lbnRcbiAgICB9KTtcblxuICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudHNcbiAgICBlYWNoKGNvbXBvbmVudHMsIGZ1bmN0aW9uIChjb21wb25lbnQsIG5hbWUpIHsgcmV0dXJuIFVJa2l0LmNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpOyB9XG4gICAgKTtcblxuICAgIC8vIGNvcmUgZnVuY3Rpb25hbGl0eVxuICAgIFVJa2l0LnVzZShDb3JlKTtcblxuICAgIGJvb3QoVUlraXQpO1xuXG4gICAgdmFyIGNvdW50ZG93biA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzc10sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGRhdGU6IFN0cmluZyxcbiAgICAgICAgICAgIGNsc1dyYXBwZXI6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGRhdGU6ICcnLFxuICAgICAgICAgICAgY2xzV3JhcHBlcjogJy51ay1jb3VudGRvd24tJXVuaXQlJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGRhdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBkYXRlID0gcmVmLmRhdGU7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZS5wYXJzZShkYXRlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRheXM6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsc1dyYXBwZXIgPSByZWYuY2xzV3JhcHBlcjtcblxuICAgICAgICAgICAgICAgIHJldHVybiAkKGNsc1dyYXBwZXIucmVwbGFjZSgnJXVuaXQlJywgJ2RheXMnKSwgJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhvdXJzOiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBjbHNXcmFwcGVyID0gcmVmLmNsc1dyYXBwZXI7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gJChjbHNXcmFwcGVyLnJlcGxhY2UoJyV1bml0JScsICdob3VycycpLCAkZWwpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbWludXRlczogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2xzV3JhcHBlciA9IHJlZi5jbHNXcmFwcGVyO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoY2xzV3JhcHBlci5yZXBsYWNlKCcldW5pdCUnLCAnbWludXRlcycpLCAkZWwpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2Vjb25kczogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2xzV3JhcHBlciA9IHJlZi5jbHNXcmFwcGVyO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoY2xzV3JhcHBlci5yZXBsYWNlKCcldW5pdCUnLCAnc2Vjb25kcycpLCAkZWwpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdW5pdHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnZGF5cycsICdob3VycycsICdtaW51dGVzJywgJ3NlY29uZHMnXS5maWx0ZXIoZnVuY3Rpb24gKHVuaXQpIHsgcmV0dXJuIHRoaXMkMVt1bml0XTsgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRpc2Nvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLnVuaXRzLmZvckVhY2goZnVuY3Rpb24gKHVuaXQpIHsgcmV0dXJuIGVtcHR5KHRoaXMkMVt1bml0XSk7IH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAndmlzaWJpbGl0eWNoYW5nZScsXG5cbiAgICAgICAgICAgICAgICBlbDogaW5Ccm93c2VyICYmIGRvY3VtZW50LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5oaWRkZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgdGltZXNwYW4gPSBnZXRUaW1lU3Bhbih0aGlzLmRhdGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRpbWVzcGFuLnRvdGFsIDw9IDApIHtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcblxuICAgICAgICAgICAgICAgICAgICB0aW1lc3Bhbi5kYXlzXG4gICAgICAgICAgICAgICAgICAgICAgICA9IHRpbWVzcGFuLmhvdXJzXG4gICAgICAgICAgICAgICAgICAgICAgICA9IHRpbWVzcGFuLm1pbnV0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgID0gdGltZXNwYW4uc2Vjb25kc1xuICAgICAgICAgICAgICAgICAgICAgICAgPSAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudW5pdHMuZm9yRWFjaChmdW5jdGlvbiAodW5pdCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBkaWdpdHMgPSBTdHJpbmcoTWF0aC5mbG9vcih0aW1lc3Bhblt1bml0XSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGRpZ2l0cyA9IGRpZ2l0cy5sZW5ndGggPCAyID8gKFwiMFwiICsgZGlnaXRzKSA6IGRpZ2l0cztcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSB0aGlzJDFbdW5pdF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbC50ZXh0Q29udGVudCAhPT0gZGlnaXRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWdpdHMgPSBkaWdpdHMuc3BsaXQoJycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlnaXRzLmxlbmd0aCAhPT0gZWwuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbChlbCwgZGlnaXRzLm1hcChmdW5jdGlvbiAoKSB7IHJldHVybiAnPHNwYW4+PC9zcGFuPic7IH0pLmpvaW4oJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZGlnaXRzLmZvckVhY2goZnVuY3Rpb24gKGRpZ2l0LCBpKSB7IHJldHVybiBlbC5jaGlsZHJlbltpXS50ZXh0Q29udGVudCA9IGRpZ2l0OyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRlICYmIHRoaXMudW5pdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwodGhpcy4kdXBkYXRlLCAxMDAwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFRpbWVTcGFuKGRhdGUpIHtcblxuICAgICAgICB2YXIgdG90YWwgPSBkYXRlIC0gRGF0ZS5ub3coKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG90YWw6IHRvdGFsLFxuICAgICAgICAgICAgc2Vjb25kczogdG90YWwgLyAxMDAwICUgNjAsXG4gICAgICAgICAgICBtaW51dGVzOiB0b3RhbCAvIDEwMDAgLyA2MCAlIDYwLFxuICAgICAgICAgICAgaG91cnM6IHRvdGFsIC8gMTAwMCAvIDYwIC8gNjAgJSAyNCxcbiAgICAgICAgICAgIGRheXM6IHRvdGFsIC8gMTAwMCAvIDYwIC8gNjAgLyAyNFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRDbGFzcyA9ICd1ay1hbmltYXRpb24tdGFyZ2V0JztcblxuICAgIHZhciBBbmltYXRlID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBhbmltYXRpb246IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbjogMTUwXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgdGFyZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kZWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIGFuaW1hdGU6IGZ1bmN0aW9uKGFjdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICBhZGRTdHlsZSgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuJDEgPSBjaGlsZHJlbih0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgdmFyIHByb3BzRnJvbSA9IGNoaWxkcmVuJDEubWFwKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZ2V0UHJvcHMoZWwsIHRydWUpOyB9KTtcblxuICAgICAgICAgICAgICAgIHZhciBvbGRIZWlnaHQgPSBoZWlnaHQodGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgICAgIHZhciBvbGRTY3JvbGxZID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuXG4gICAgICAgICAgICAgICAgYWN0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICBUcmFuc2l0aW9uLmNhbmNlbCh0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4kMS5mb3JFYWNoKFRyYW5zaXRpb24uY2FuY2VsKTtcblxuICAgICAgICAgICAgICAgIHJlc2V0KHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLiR1cGRhdGUodGhpcy50YXJnZXQsICdyZXNpemUnKTtcbiAgICAgICAgICAgICAgICBmYXN0ZG9tLmZsdXNoKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gaGVpZ2h0KHRoaXMudGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgIGNoaWxkcmVuJDEgPSBjaGlsZHJlbiQxLmNvbmNhdChjaGlsZHJlbih0aGlzLnRhcmdldCkuZmlsdGVyKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gIWluY2x1ZGVzKGNoaWxkcmVuJDEsIGVsKTsgfSkpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHByb3BzVG8gPSBjaGlsZHJlbiQxLm1hcChmdW5jdGlvbiAoZWwsIGkpIHsgcmV0dXJuIGVsLnBhcmVudE5vZGUgJiYgaSBpbiBwcm9wc0Zyb21cbiAgICAgICAgICAgICAgICAgICAgICAgID8gcHJvcHNGcm9tW2ldXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGlzVmlzaWJsZShlbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGdldFBvc2l0aW9uV2l0aE1hcmdpbihlbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHtvcGFjaXR5OiAwfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB7b3BhY2l0eTogaXNWaXNpYmxlKGVsKSA/IDEgOiAwfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBmYWxzZTsgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBwcm9wc0Zyb20gPSBwcm9wc1RvLm1hcChmdW5jdGlvbiAocHJvcHMsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb20gPSBjaGlsZHJlbiQxW2ldLnBhcmVudE5vZGUgPT09IHRoaXMkMS50YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcHJvcHNGcm9tW2ldIHx8IGdldFByb3BzKGNoaWxkcmVuJDFbaV0pXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGZyb20ub3BhY2l0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoISgnb3BhY2l0eScgaW4gcHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wYWNpdHkgPSBmcm9tLm9wYWNpdHk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BhY2l0eSAlIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMub3BhY2l0eSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGZyb20ub3BhY2l0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJvbTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMudGFyZ2V0LCB0YXJnZXRDbGFzcyk7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4kMS5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaSkgeyByZXR1cm4gcHJvcHNGcm9tW2ldICYmIGNzcyhlbCwgcHJvcHNGcm9tW2ldKTsgfSk7XG4gICAgICAgICAgICAgICAgY3NzKHRoaXMudGFyZ2V0LCB7aGVpZ2h0OiBvbGRIZWlnaHQsIGRpc3BsYXk6ICdibG9jayd9KTtcbiAgICAgICAgICAgICAgICBzY3JvbGxUb3Aod2luZG93LCBvbGRTY3JvbGxZKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4kMS5tYXAoZnVuY3Rpb24gKGVsLCBpKSB7IHJldHVybiBbJ3RvcCcsICdsZWZ0JywgJ2hlaWdodCcsICd3aWR0aCddLnNvbWUoZnVuY3Rpb24gKHByb3ApIHsgcmV0dXJuIHByb3BzRnJvbVtpXVtwcm9wXSAhPT0gcHJvcHNUb1tpXVtwcm9wXTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKSAmJiBUcmFuc2l0aW9uLnN0YXJ0KGVsLCBwcm9wc1RvW2ldLCB0aGlzJDEuYW5pbWF0aW9uLCAnZWFzZScpOyB9XG4gICAgICAgICAgICAgICAgICAgICkuY29uY2F0KG9sZEhlaWdodCAhPT0gbmV3SGVpZ2h0ICYmIFRyYW5zaXRpb24uc3RhcnQodGhpcy50YXJnZXQsIHtoZWlnaHQ6IG5ld0hlaWdodH0sIHRoaXMuYW5pbWF0aW9uLCAnZWFzZScpKVxuICAgICAgICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuJDEuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGkpIHsgcmV0dXJuIGNzcyhlbCwge2Rpc3BsYXk6IHByb3BzVG9baV0ub3BhY2l0eSA9PT0gMCA/ICdub25lJyA6ICcnLCB6SW5kZXg6ICcnfSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICByZXNldCh0aGlzJDEudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcyQxLiR1cGRhdGUodGhpcyQxLnRhcmdldCwgJ3Jlc2l6ZScpO1xuICAgICAgICAgICAgICAgICAgICBmYXN0ZG9tLmZsdXNoKCk7IC8vIG5lZWRlZCBmb3IgSUUxMVxuICAgICAgICAgICAgICAgIH0sIG5vb3ApO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0UHJvcHMoZWwsIG9wYWNpdHkpIHtcblxuICAgICAgICB2YXIgekluZGV4ID0gY3NzKGVsLCAnekluZGV4Jyk7XG5cbiAgICAgICAgcmV0dXJuIGlzVmlzaWJsZShlbClcbiAgICAgICAgICAgID8gYXNzaWduKHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiBvcGFjaXR5ID8gY3NzKGVsLCAnb3BhY2l0eScpIDogJzAnLFxuICAgICAgICAgICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IHpJbmRleCA9PT0gJ2F1dG8nID8gaW5kZXgoZWwpIDogekluZGV4XG4gICAgICAgICAgICB9LCBnZXRQb3NpdGlvbldpdGhNYXJnaW4oZWwpKVxuICAgICAgICAgICAgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNldChlbCkge1xuICAgICAgICBjc3MoZWwuY2hpbGRyZW4sIHtcbiAgICAgICAgICAgIGhlaWdodDogJycsXG4gICAgICAgICAgICBsZWZ0OiAnJyxcbiAgICAgICAgICAgIG9wYWNpdHk6ICcnLFxuICAgICAgICAgICAgcG9pbnRlckV2ZW50czogJycsXG4gICAgICAgICAgICBwb3NpdGlvbjogJycsXG4gICAgICAgICAgICB0b3A6ICcnLFxuICAgICAgICAgICAgd2lkdGg6ICcnXG4gICAgICAgIH0pO1xuICAgICAgICByZW1vdmVDbGFzcyhlbCwgdGFyZ2V0Q2xhc3MpO1xuICAgICAgICBjc3MoZWwsIHtoZWlnaHQ6ICcnLCBkaXNwbGF5OiAnJ30pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBvc2l0aW9uV2l0aE1hcmdpbihlbCkge1xuICAgICAgICB2YXIgcmVmID0gb2Zmc2V0KGVsKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHJlZi5oZWlnaHQ7XG4gICAgICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aDtcbiAgICAgICAgdmFyIHJlZiQxID0gcG9zaXRpb24oZWwpO1xuICAgICAgICB2YXIgdG9wID0gcmVmJDEudG9wO1xuICAgICAgICB2YXIgbGVmdCA9IHJlZiQxLmxlZnQ7XG5cbiAgICAgICAgcmV0dXJuIHt0b3A6IHRvcCwgbGVmdDogbGVmdCwgaGVpZ2h0OiBoZWlnaHQsIHdpZHRoOiB3aWR0aH07XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlO1xuXG4gICAgZnVuY3Rpb24gYWRkU3R5bGUoKSB7XG4gICAgICAgIGlmIChzdHlsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN0eWxlID0gYXBwZW5kKGRvY3VtZW50LmhlYWQsICc8c3R5bGU+Jykuc2hlZXQ7XG4gICAgICAgIHN0eWxlLmluc2VydFJ1bGUoXG4gICAgICAgICAgICAoXCIuXCIgKyB0YXJnZXRDbGFzcyArIFwiID4gKiB7XFxuICAgICAgICAgICAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50O1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogbm9uZSAhaW1wb3J0YW50O1xcbiAgICAgICAgfVwiKSwgMFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBmaWx0ZXIkMSA9IHtcblxuICAgICAgICBtaXhpbnM6IFtBbmltYXRlXSxcblxuICAgICAgICBhcmdzOiAndGFyZ2V0JyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgdGFyZ2V0OiBCb29sZWFuLFxuICAgICAgICAgICAgc2VsQWN0aXZlOiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdGFyZ2V0OiBudWxsLFxuICAgICAgICAgICAgc2VsQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgIGF0dHJJdGVtOiAndWstZmlsdGVyLWNvbnRyb2wnLFxuICAgICAgICAgICAgY2xzOiAndWstYWN0aXZlJyxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogMjUwXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgdG9nZ2xlczoge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0ckl0ZW0gPSByZWYuYXR0ckl0ZW07XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQkKChcIltcIiArICh0aGlzLmF0dHJJdGVtKSArIFwiXSxbZGF0YS1cIiArICh0aGlzLmF0dHJJdGVtKSArIFwiXVwiKSwgJGVsKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxBY3RpdmUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlcyA9ICQkKHRoaXMuc2VsQWN0aXZlLCB0aGlzLiRlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZXMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIHRvZ2dsZUNsYXNzKGVsLCB0aGlzJDEuY2xzLCBpbmNsdWRlcyhhY3RpdmVzLCBlbCkpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0YXJnZXQ6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gJCh0YXJnZXQsICRlbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjaGlsZHJlbjoge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuKHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGxpc3QsIG9sZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRXF1YWxMaXN0KGxpc3QsIG9sZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwiW1wiICsgKHRoaXMuYXR0ckl0ZW0pICsgXCJdLFtkYXRhLVwiICsgKHRoaXMuYXR0ckl0ZW0pICsgXCJdXCIpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGx5KGUuY3VycmVudCk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShtZXJnZVN0YXRlKGVsLCB0aGlzLmF0dHJJdGVtLCB0aGlzLmdldFN0YXRlKCkpKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvZ2dsZXNcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gaGFzQ2xhc3MoaXRlbSwgdGhpcyQxLmNscyk7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKHN0YXRlLCBlbCkgeyByZXR1cm4gbWVyZ2VTdGF0ZShlbCwgdGhpcyQxLmF0dHJJdGVtLCBzdGF0ZSk7IH0sIHtmaWx0ZXI6IHsnJzogJyd9LCBzb3J0OiBbXX0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0U3RhdGU6IGZ1bmN0aW9uKHN0YXRlLCBhbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaWYgKCBhbmltYXRlID09PSB2b2lkIDAgKSBhbmltYXRlID0gdHJ1ZTtcblxuXG4gICAgICAgICAgICAgICAgc3RhdGUgPSBhc3NpZ24oe2ZpbHRlcjogeycnOiAnJ30sIHNvcnQ6IFtdfSwgc3RhdGUpO1xuXG4gICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ2JlZm9yZUZpbHRlcicsIFt0aGlzLCBzdGF0ZV0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiB0b2dnbGVDbGFzcyhlbCwgdGhpcyQxLmNscywgISFtYXRjaEZpbHRlcihlbCwgdGhpcyQxLmF0dHJJdGVtLCBzdGF0ZSkpOyB9KTtcblxuICAgICAgICAgICAgICAgIHZhciBhcHBseSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihzdGF0ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGNzcyhlbCwgJ2Rpc3BsYXknLCBzZWxlY3RvciAmJiAhbWF0Y2hlcyhlbCwgc2VsZWN0b3IpID8gJ25vbmUnIDogJycpOyB9KTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gc3RhdGUuc29ydDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvcnQgPSByZWZbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcmRlciA9IHJlZlsxXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc29ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvcnRlZCA9IHNvcnRJdGVtcyhjaGlsZHJlbiwgc29ydCwgb3JkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0VxdWFsKHNvcnRlZCwgY2hpbGRyZW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGVkLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiBhcHBlbmQodGhpcyQxLnRhcmdldCwgZWwpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZShhcHBseSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB0cmlnZ2VyKHRoaXMkMS4kZWwsICdhZnRlckZpbHRlcicsIFt0aGlzJDFdKTsgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwbHkoKTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ2FmdGVyRmlsdGVyJywgW3RoaXNdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHVwZGF0ZVN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIGZhc3Rkb20ud3JpdGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLnNldFN0YXRlKHRoaXMkMS5nZXRTdGF0ZSgpLCBmYWxzZSk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRGaWx0ZXIoZWwsIGF0dHIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlT3B0aW9ucyhkYXRhKGVsLCBhdHRyKSwgWydmaWx0ZXInXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VTdGF0ZShlbCwgYXR0ciwgc3RhdGUpIHtcblxuICAgICAgICB2YXIgZmlsdGVyQnkgPSBnZXRGaWx0ZXIoZWwsIGF0dHIpO1xuICAgICAgICB2YXIgZmlsdGVyID0gZmlsdGVyQnkuZmlsdGVyO1xuICAgICAgICB2YXIgZ3JvdXAgPSBmaWx0ZXJCeS5ncm91cDtcbiAgICAgICAgdmFyIHNvcnQgPSBmaWx0ZXJCeS5zb3J0O1xuICAgICAgICB2YXIgb3JkZXIgPSBmaWx0ZXJCeS5vcmRlcjsgaWYgKCBvcmRlciA9PT0gdm9pZCAwICkgb3JkZXIgPSAnYXNjJztcblxuICAgICAgICBpZiAoZmlsdGVyIHx8IGlzVW5kZWZpbmVkKHNvcnQpKSB7XG5cbiAgICAgICAgICAgIGlmIChncm91cCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcikge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3RhdGUuZmlsdGVyWycnXTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZmlsdGVyW2dyb3VwXSA9IGZpbHRlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3RhdGUuZmlsdGVyW2dyb3VwXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNFbXB0eShzdGF0ZS5maWx0ZXIpIHx8ICcnIGluIHN0YXRlLmZpbHRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuZmlsdGVyID0geycnOiBmaWx0ZXIgfHwgJyd9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZmlsdGVyID0geycnOiBmaWx0ZXIgfHwgJyd9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHNvcnQpKSB7XG4gICAgICAgICAgICBzdGF0ZS5zb3J0ID0gW3NvcnQsIG9yZGVyXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEZpbHRlcihlbCwgYXR0ciwgcmVmKSB7XG4gICAgICAgIHZhciBzdGF0ZUZpbHRlciA9IHJlZi5maWx0ZXI7IGlmICggc3RhdGVGaWx0ZXIgPT09IHZvaWQgMCApIHN0YXRlRmlsdGVyID0geycnOiAnJ307XG4gICAgICAgIHZhciByZWZfc29ydCA9IHJlZi5zb3J0O1xuICAgICAgICB2YXIgc3RhdGVTb3J0ID0gcmVmX3NvcnRbMF07XG4gICAgICAgIHZhciBzdGF0ZU9yZGVyID0gcmVmX3NvcnRbMV07XG5cblxuICAgICAgICB2YXIgcmVmJDEgPSBnZXRGaWx0ZXIoZWwsIGF0dHIpO1xuICAgICAgICB2YXIgZmlsdGVyID0gcmVmJDEuZmlsdGVyOyBpZiAoIGZpbHRlciA9PT0gdm9pZCAwICkgZmlsdGVyID0gJyc7XG4gICAgICAgIHZhciBncm91cCA9IHJlZiQxLmdyb3VwOyBpZiAoIGdyb3VwID09PSB2b2lkIDAgKSBncm91cCA9ICcnO1xuICAgICAgICB2YXIgc29ydCA9IHJlZiQxLnNvcnQ7XG4gICAgICAgIHZhciBvcmRlciA9IHJlZiQxLm9yZGVyOyBpZiAoIG9yZGVyID09PSB2b2lkIDAgKSBvcmRlciA9ICdhc2MnO1xuXG4gICAgICAgIHJldHVybiBpc1VuZGVmaW5lZChzb3J0KVxuICAgICAgICAgICAgPyBncm91cCBpbiBzdGF0ZUZpbHRlciAmJiBmaWx0ZXIgPT09IHN0YXRlRmlsdGVyW2dyb3VwXVxuICAgICAgICAgICAgICAgIHx8ICFmaWx0ZXIgJiYgZ3JvdXAgJiYgIShncm91cCBpbiBzdGF0ZUZpbHRlcikgJiYgIXN0YXRlRmlsdGVyWycnXVxuICAgICAgICAgICAgOiBzdGF0ZVNvcnQgPT09IHNvcnQgJiYgc3RhdGVPcmRlciA9PT0gb3JkZXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNFcXVhbExpc3QobGlzdEEsIGxpc3RCKSB7XG4gICAgICAgIHJldHVybiBsaXN0QS5sZW5ndGggPT09IGxpc3RCLmxlbmd0aFxuICAgICAgICAgICAgJiYgbGlzdEEuZXZlcnkoZnVuY3Rpb24gKGVsKSB7IHJldHVybiB+bGlzdEIuaW5kZXhPZihlbCk7IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNlbGVjdG9yKHJlZikge1xuICAgICAgICB2YXIgZmlsdGVyID0gcmVmLmZpbHRlcjtcblxuICAgICAgICB2YXIgc2VsZWN0b3IgPSAnJztcbiAgICAgICAgZWFjaChmaWx0ZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gc2VsZWN0b3IgKz0gdmFsdWUgfHwgJyc7IH0pO1xuICAgICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc29ydEl0ZW1zKG5vZGVzLCBzb3J0LCBvcmRlcikge1xuICAgICAgICByZXR1cm4gYXNzaWduKFtdLCBub2Rlcykuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gZGF0YShhLCBzb3J0KS5sb2NhbGVDb21wYXJlKGRhdGEoYiwgc29ydCksIHVuZGVmaW5lZCwge251bWVyaWM6IHRydWV9KSAqIChvcmRlciA9PT0gJ2FzYycgfHwgLTEpOyB9KTtcbiAgICB9XG5cbiAgICB2YXIgQW5pbWF0aW9ucyA9IHtcblxuICAgICAgICBzbGlkZToge1xuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbihkaXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoZGlyICogLTEwMCl9LFxuICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoKX1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2xhdGVkKGN1cnJlbnQpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbihwZXJjZW50LCBkaXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoZGlyICogLTEwMCAqIHBlcmNlbnQpfSxcbiAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKGRpciAqIDEwMCAqICgxIC0gcGVyY2VudCkpfVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZWQoZWwpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGNzcyhlbCwgJ3RyYW5zZm9ybScpLnNwbGl0KCcsJylbNF0gLyBlbC5vZmZzZXRXaWR0aCkgfHwgMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUodmFsdWUsIHVuaXQpIHtcbiAgICAgICAgaWYgKCB2YWx1ZSA9PT0gdm9pZCAwICkgdmFsdWUgPSAwO1xuICAgICAgICBpZiAoIHVuaXQgPT09IHZvaWQgMCApIHVuaXQgPSAnJSc7XG5cbiAgICAgICAgdmFsdWUgKz0gdmFsdWUgPyB1bml0IDogJyc7XG4gICAgICAgIHJldHVybiBpc0lFID8gKFwidHJhbnNsYXRlWChcIiArIHZhbHVlICsgXCIpXCIpIDogKFwidHJhbnNsYXRlM2QoXCIgKyB2YWx1ZSArIFwiLCAwLCAwKVwiKTsgLy8gY3VycmVudGx5IG5vdCB0cmFuc2xhdGUzZCBpbiBJRSwgdHJhbnNsYXRlM2Qgd2l0aGluIHRyYW5zbGF0ZTNkIGRvZXMgbm90IHdvcmsgd2hpbGUgdHJhbnNpdGlvbmluZ1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYWxlM2QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIChcInNjYWxlM2QoXCIgKyB2YWx1ZSArIFwiLCBcIiArIHZhbHVlICsgXCIsIDEpXCIpO1xuICAgIH1cblxuICAgIHZhciBBbmltYXRpb25zJDEgPSBhc3NpZ24oe30sIEFuaW1hdGlvbnMsIHtcblxuICAgICAgICBmYWRlOiB7XG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHtvcGFjaXR5OiAwfSxcbiAgICAgICAgICAgICAgICAgICAge29wYWNpdHk6IDF9XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHBlcmNlbnQ6IGZ1bmN0aW9uKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMSAtIGNzcyhjdXJyZW50LCAnb3BhY2l0eScpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbihwZXJjZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAge29wYWNpdHk6IDEgLSBwZXJjZW50fSxcbiAgICAgICAgICAgICAgICAgICAge29wYWNpdHk6IHBlcmNlbnR9XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHNjYWxlOiB7XG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHtvcGFjaXR5OiAwLCB0cmFuc2Zvcm06IHNjYWxlM2QoMSAtIC4yKX0sXG4gICAgICAgICAgICAgICAgICAgIHtvcGFjaXR5OiAxLCB0cmFuc2Zvcm06IHNjYWxlM2QoMSl9XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHBlcmNlbnQ6IGZ1bmN0aW9uKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMSAtIGNzcyhjdXJyZW50LCAnb3BhY2l0eScpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbihwZXJjZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAge29wYWNpdHk6IDEgLSBwZXJjZW50LCB0cmFuc2Zvcm06IHNjYWxlM2QoMSAtIC4yICogcGVyY2VudCl9LFxuICAgICAgICAgICAgICAgICAgICB7b3BhY2l0eTogcGVyY2VudCwgdHJhbnNmb3JtOiBzY2FsZTNkKDEgLSAuMiArIC4yICogcGVyY2VudCl9XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIFRyYW5zaXRpb25lcihwcmV2LCBuZXh0LCBkaXIsIHJlZikge1xuICAgICAgICB2YXIgYW5pbWF0aW9uID0gcmVmLmFuaW1hdGlvbjtcbiAgICAgICAgdmFyIGVhc2luZyA9IHJlZi5lYXNpbmc7XG5cblxuICAgICAgICB2YXIgcGVyY2VudCA9IGFuaW1hdGlvbi5wZXJjZW50O1xuICAgICAgICB2YXIgdHJhbnNsYXRlID0gYW5pbWF0aW9uLnRyYW5zbGF0ZTtcbiAgICAgICAgdmFyIHNob3cgPSBhbmltYXRpb24uc2hvdzsgaWYgKCBzaG93ID09PSB2b2lkIDAgKSBzaG93ID0gbm9vcDtcbiAgICAgICAgdmFyIHByb3BzID0gc2hvdyhkaXIpO1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcblxuICAgICAgICByZXR1cm4ge1xuXG4gICAgICAgICAgICBkaXI6IGRpcixcblxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24oZHVyYXRpb24sIHBlcmNlbnQsIGxpbmVhcikge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGlmICggcGVyY2VudCA9PT0gdm9pZCAwICkgcGVyY2VudCA9IDA7XG5cblxuICAgICAgICAgICAgICAgIHZhciB0aW1pbmcgPSBsaW5lYXIgPyAnbGluZWFyJyA6IGVhc2luZztcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiAtPSBNYXRoLnJvdW5kKGR1cmF0aW9uICogY2xhbXAocGVyY2VudCwgLTEsIDEpKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRlKHBlcmNlbnQpO1xuXG4gICAgICAgICAgICAgICAgdHJpZ2dlclVwZGF0ZShuZXh0LCAnaXRlbWluJywge3BlcmNlbnQ6IHBlcmNlbnQsIGR1cmF0aW9uOiBkdXJhdGlvbiwgdGltaW5nOiB0aW1pbmcsIGRpcjogZGlyfSk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlclVwZGF0ZShwcmV2LCAnaXRlbW91dCcsIHtwZXJjZW50OiAxIC0gcGVyY2VudCwgZHVyYXRpb246IGR1cmF0aW9uLCB0aW1pbmc6IHRpbWluZywgZGlyOiBkaXJ9KTtcblxuICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5zdGFydChuZXh0LCBwcm9wc1sxXSwgZHVyYXRpb24sIHRpbWluZyksXG4gICAgICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uc3RhcnQocHJldiwgcHJvcHNbMF0sIGR1cmF0aW9uLCB0aW1pbmcpXG4gICAgICAgICAgICAgICAgXSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSwgbm9vcCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBUcmFuc2l0aW9uLnN0b3AoW25leHQsIHByZXZdKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwoW25leHQsIHByZXZdKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHByb3BzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNzcyhbbmV4dCwgcHJldl0sIHByb3AsICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmb3J3YXJkOiBmdW5jdGlvbihkdXJhdGlvbiwgcGVyY2VudCkge1xuICAgICAgICAgICAgICAgIGlmICggcGVyY2VudCA9PT0gdm9pZCAwICkgcGVyY2VudCA9IHRoaXMucGVyY2VudCgpO1xuXG4gICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwoW25leHQsIHByZXZdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zaG93KGR1cmF0aW9uLCBwZXJjZW50LCB0cnVlKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbihwZXJjZW50KSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvcHMgPSB0cmFuc2xhdGUocGVyY2VudCwgZGlyKTtcbiAgICAgICAgICAgICAgICBjc3MobmV4dCwgcHJvcHNbMV0pO1xuICAgICAgICAgICAgICAgIGNzcyhwcmV2LCBwcm9wc1swXSk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlclVwZGF0ZShuZXh0LCAnaXRlbXRyYW5zbGF0ZWluJywge3BlcmNlbnQ6IHBlcmNlbnQsIGRpcjogZGlyfSk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlclVwZGF0ZShwcmV2LCAnaXRlbXRyYW5zbGF0ZW91dCcsIHtwZXJjZW50OiAxIC0gcGVyY2VudCwgZGlyOiBkaXJ9KTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBlcmNlbnQocHJldiB8fCBuZXh0LCBuZXh0LCBkaXIpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0RGlzdGFuY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2ICYmIHByZXYub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyaWdnZXJVcGRhdGUoZWwsIHR5cGUsIGRhdGEpIHtcbiAgICAgICAgdHJpZ2dlcihlbCwgY3JlYXRlRXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgdmFyIFNsaWRlckF1dG9wbGF5ID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBhdXRvcGxheTogQm9vbGVhbixcbiAgICAgICAgICAgIGF1dG9wbGF5SW50ZXJ2YWw6IE51bWJlcixcbiAgICAgICAgICAgIHBhdXNlT25Ib3ZlcjogQm9vbGVhblxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICAgICAgICAgIGF1dG9wbGF5SW50ZXJ2YWw6IDcwMDAsXG4gICAgICAgICAgICBwYXVzZU9uSG92ZXI6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5hdXRvcGxheSAmJiB0aGlzLnN0YXJ0QXV0b3BsYXkoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBkaXNjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zdG9wQXV0b3BsYXkoKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYXR0cih0aGlzLnNsaWRlcywgJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICd2aXNpYmlsaXR5Y2hhbmdlJyxcblxuICAgICAgICAgICAgICAgIGVsOiBpbkJyb3dzZXIgJiYgZG9jdW1lbnQsXG5cbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hdXRvcGxheTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5oaWRkZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcEF1dG9wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0QXV0b3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBzdGFydEF1dG9wbGF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wQXV0b3BsYXkoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gKCF0aGlzJDEuZHJhZ2dhYmxlIHx8ICEkKCc6Zm9jdXMnLCB0aGlzJDEuJGVsKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICghdGhpcyQxLnBhdXNlT25Ib3ZlciB8fCAhbWF0Y2hlcyh0aGlzJDEuJGVsLCAnOmhvdmVyJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiAhdGhpcyQxLnN0YWNrLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgdGhpcyQxLnNob3coJ25leHQnKTsgfSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRvcGxheUludGVydmFsXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3RvcEF1dG9wbGF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmludGVydmFsICYmIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBTbGlkZXJEcmFnID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBkcmFnZ2FibGU6IEJvb2xlYW5cbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsXG4gICAgICAgICAgICB0aHJlc2hvbGQ6IDEwXG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICBbJ3N0YXJ0JywgJ21vdmUnLCAnZW5kJ10uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgZm4gPSB0aGlzJDFba2V5XTtcbiAgICAgICAgICAgICAgICB0aGlzJDFba2V5XSA9IGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IGdldEV2ZW50UG9zKGUpLnggKiAoaXNSdGwgPyAtMSA6IDEpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS5wcmV2UG9zID0gcG9zICE9PSB0aGlzJDEucG9zID8gdGhpcyQxLnBvcyA6IHRoaXMkMS5wcmV2UG9zO1xuICAgICAgICAgICAgICAgICAgICB0aGlzJDEucG9zID0gcG9zO1xuXG4gICAgICAgICAgICAgICAgICAgIGZuKGUpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6IHBvaW50ZXJEb3duLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxTbGlkZXM7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZHJhZ2dhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCAhaXNUb3VjaChlKSAmJiBoYXNUZXh0Tm9kZXNPbmx5KGUudGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgY2xvc2VzdChlLnRhcmdldCwgc2VsSW5wdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBlLmJ1dHRvbiA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IHRoaXMubGVuZ3RoIDwgMlxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQoZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBpT1MgMTEgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTg0MjUwXG5cbiAgICAgICAgICAgICAgICBuYW1lOiAndG91Y2htb3ZlJyxcbiAgICAgICAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAnbW92ZScsXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50ZXJNb3ZlID09PSAndG91Y2htb3ZlJztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsU2xpZGVzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdkcmFnc3RhcnQnLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIHRoaXMuZHJhZyA9IHRoaXMucG9zO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RyYW5zaXRpb25lcikge1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGVyY2VudCA9IHRoaXMuX3RyYW5zaXRpb25lci5wZXJjZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhZyArPSB0aGlzLl90cmFuc2l0aW9uZXIuZ2V0RGlzdGFuY2UoKSAqIHRoaXMucGVyY2VudCAqIHRoaXMuZGlyO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRpb25lci5jYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbmVyLnRyYW5zbGF0ZSh0aGlzLnBlcmNlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sgPSBbXTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJldkluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZWUgYWJvdmUgd29ya2Fyb3VuZCBub3RpY2VcbiAgICAgICAgICAgICAgICB2YXIgb2ZmID0gcG9pbnRlck1vdmUgIT09ICd0b3VjaG1vdmUnXG4gICAgICAgICAgICAgICAgICAgID8gb24oZG9jdW1lbnQsIHBvaW50ZXJNb3ZlLCB0aGlzLm1vdmUsIHtwYXNzaXZlOiBmYWxzZX0pXG4gICAgICAgICAgICAgICAgICAgIDogbm9vcDtcbiAgICAgICAgICAgICAgICB0aGlzLnVuYmluZE1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzJDEudW5iaW5kTW92ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBvbih3aW5kb3csICdzY3JvbGwnLCB0aGlzLnVuYmluZE1vdmUpO1xuICAgICAgICAgICAgICAgIG9uKHdpbmRvdy52aXN1YWxWaWV3cG9ydCwgJ3Jlc2l6ZScsIHRoaXMudW5iaW5kTW92ZSk7XG4gICAgICAgICAgICAgICAgb24oZG9jdW1lbnQsIChwb2ludGVyVXAgKyBcIiBcIiArIHBvaW50ZXJDYW5jZWwpLCB0aGlzLmVuZCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBjc3ModGhpcy5saXN0LCAndXNlclNlbGVjdCcsICdub25lJyk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG1vdmU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgLy8gU2VlIGFib3ZlIHdvcmthcm91bmQgbm90aWNlXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnVuYmluZE1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IHRoaXMucG9zIC0gdGhpcy5kcmFnO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlID09PSAwIHx8IHRoaXMucHJldlBvcyA9PT0gdGhpcy5wb3MgfHwgIXRoaXMuZHJhZ2dpbmcgJiYgTWF0aC5hYnMoZGlzdGFuY2UpIDwgdGhpcy50aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNzcyh0aGlzLmxpc3QsICdwb2ludGVyRXZlbnRzJywgJ25vbmUnKTtcblxuICAgICAgICAgICAgICAgIGUuY2FuY2VsYWJsZSAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRpciA9IChkaXN0YW5jZSA8IDAgPyAxIDogLTEpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlcyA9IHJlZi5zbGlkZXM7XG4gICAgICAgICAgICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgcHJldkluZGV4ID0gcmVmJDEucHJldkluZGV4O1xuICAgICAgICAgICAgICAgIHZhciBkaXMgPSBNYXRoLmFicyhkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRJbmRleCA9IHRoaXMuZ2V0SW5kZXgocHJldkluZGV4ICsgdGhpcy5kaXIsIHByZXZJbmRleCk7XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5fZ2V0RGlzdGFuY2UocHJldkluZGV4LCBuZXh0SW5kZXgpIHx8IHNsaWRlc1twcmV2SW5kZXhdLm9mZnNldFdpZHRoO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKG5leHRJbmRleCAhPT0gcHJldkluZGV4ICYmIGRpcyA+IHdpZHRoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnIC09IHdpZHRoICogdGhpcy5kaXI7XG5cbiAgICAgICAgICAgICAgICAgICAgcHJldkluZGV4ID0gbmV4dEluZGV4O1xuICAgICAgICAgICAgICAgICAgICBkaXMgLT0gd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIG5leHRJbmRleCA9IHRoaXMuZ2V0SW5kZXgocHJldkluZGV4ICsgdGhpcy5kaXIsIHByZXZJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gdGhpcy5fZ2V0RGlzdGFuY2UocHJldkluZGV4LCBuZXh0SW5kZXgpIHx8IHNsaWRlc1twcmV2SW5kZXhdLm9mZnNldFdpZHRoO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5wZXJjZW50ID0gZGlzIC8gd2lkdGg7XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJldiA9IHNsaWRlc1twcmV2SW5kZXhdO1xuICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gc2xpZGVzW25leHRJbmRleF07XG4gICAgICAgICAgICAgICAgdmFyIGNoYW5nZWQgPSB0aGlzLmluZGV4ICE9PSBuZXh0SW5kZXg7XG4gICAgICAgICAgICAgICAgdmFyIGVkZ2UgPSBwcmV2SW5kZXggPT09IG5leHRJbmRleDtcblxuICAgICAgICAgICAgICAgIHZhciBpdGVtU2hvd247XG5cbiAgICAgICAgICAgICAgICBbdGhpcy5pbmRleCwgdGhpcy5wcmV2SW5kZXhdLmZpbHRlcihmdW5jdGlvbiAoaSkgeyByZXR1cm4gIWluY2x1ZGVzKFtuZXh0SW5kZXgsIHByZXZJbmRleF0sIGkpOyB9KS5mb3JFYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIoc2xpZGVzW2ldLCAnaXRlbWhpZGRlbicsIFt0aGlzJDFdKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZWRnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVNob3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5wcmV2SW5kZXggPSBwcmV2SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggPT09IHByZXZJbmRleCAmJiB0aGlzLnByZXZJbmRleCAhPT0gcHJldkluZGV4IHx8IGl0ZW1TaG93bikge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHNsaWRlc1t0aGlzLmluZGV4XSwgJ2l0ZW1zaG93bicsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2SW5kZXggPSBwcmV2SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSBuZXh0SW5kZXg7XG5cbiAgICAgICAgICAgICAgICAgICAgIWVkZ2UgJiYgdHJpZ2dlcihwcmV2LCAnYmVmb3JlaXRlbWhpZGUnLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKG5leHQsICdiZWZvcmVpdGVtc2hvdycsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbmVyID0gdGhpcy5fdHJhbnNsYXRlKE1hdGguYWJzKHRoaXMucGVyY2VudCksIHByZXYsICFlZGdlICYmIG5leHQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgIWVkZ2UgJiYgdHJpZ2dlcihwcmV2LCAnaXRlbWhpZGUnLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKG5leHQsICdpdGVtc2hvdycsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgb2ZmKHdpbmRvdywgJ3Njcm9sbCcsIHRoaXMudW5iaW5kTW92ZSk7XG4gICAgICAgICAgICAgICAgb2ZmKHdpbmRvdy52aXN1YWxWaWV3cG9ydCwgJ3Jlc2l6ZScsIHRoaXMudW5iaW5kTW92ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy51bmJpbmRNb3ZlICYmIHRoaXMudW5iaW5kTW92ZSgpO1xuICAgICAgICAgICAgICAgIG9mZihkb2N1bWVudCwgcG9pbnRlclVwLCB0aGlzLmVuZCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kcmFnZ2luZykge1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhZ2dpbmcgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluZGV4ID09PSB0aGlzLnByZXZJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXJjZW50ID0gMSAtIHRoaXMucGVyY2VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyICo9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hvdyhmYWxzZSwgdGhpcy5pbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyQ2hhbmdlID0gKGlzUnRsID8gdGhpcy5kaXIgKiAoaXNSdGwgPyAxIDogLTEpIDogdGhpcy5kaXIpIDwgMCA9PT0gdGhpcy5wcmV2UG9zID4gdGhpcy5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gZGlyQ2hhbmdlID8gdGhpcy5pbmRleCA6IHRoaXMucHJldkluZGV4O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXJjZW50ID0gMSAtIHRoaXMucGVyY2VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KHRoaXMuZGlyID4gMCAmJiAhZGlyQ2hhbmdlIHx8IHRoaXMuZGlyIDwgMCAmJiBkaXJDaGFuZ2UgPyAnbmV4dCcgOiAncHJldmlvdXMnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY3NzKHRoaXMubGlzdCwge3VzZXJTZWxlY3Q6ICcnLCBwb2ludGVyRXZlbnRzOiAnJ30pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnXG4gICAgICAgICAgICAgICAgICAgID0gdGhpcy5wZXJjZW50XG4gICAgICAgICAgICAgICAgICAgID0gbnVsbDtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBoYXNUZXh0Tm9kZXNPbmx5KGVsKSB7XG4gICAgICAgIHJldHVybiAhZWwuY2hpbGRyZW4ubGVuZ3RoICYmIGVsLmNoaWxkTm9kZXMubGVuZ3RoO1xuICAgIH1cblxuICAgIHZhciBTbGlkZXJOYXYgPSB7XG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgc2VsTmF2OiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIG5hdjogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsTmF2ID0gcmVmLnNlbE5hdjtcblxuICAgICAgICAgICAgICAgIHJldHVybiAkKHNlbE5hdiwgJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNlbE5hdkl0ZW06IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBhdHRySXRlbSA9IHJlZi5hdHRySXRlbTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoXCJbXCIgKyBhdHRySXRlbSArIFwiXSxbZGF0YS1cIiArIGF0dHJJdGVtICsgXCJdXCIpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbmF2SXRlbXM6IGZ1bmN0aW9uKF8sICRlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkJCh0aGlzLnNlbE5hdkl0ZW0sICRlbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5uYXYgJiYgdGhpcy5sZW5ndGggIT09IHRoaXMubmF2LmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBodG1sKHRoaXMubmF2LCB0aGlzLnNsaWRlcy5tYXAoZnVuY3Rpb24gKF8sIGkpIHsgcmV0dXJuIChcIjxsaSBcIiArICh0aGlzJDEuYXR0ckl0ZW0pICsgXCI9XFxcIlwiICsgaSArIFwiXFxcIj48YSBocmVmPjwvYT48L2xpPlwiKTsgfSkuam9pbignJykpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKCQkKHRoaXMuc2VsTmF2SXRlbSwgdGhpcy4kZWwpLmNvbmNhdCh0aGlzLm5hdiksICd1ay1oaWRkZW4nLCAhdGhpcy5tYXhJbmRleCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU5hdigpO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxOYXZJdGVtO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KGRhdGEoZS5jdXJyZW50LCB0aGlzLmF0dHJJdGVtKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnaXRlbXNob3cnLFxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICd1cGRhdGVOYXYnXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgdXBkYXRlTmF2OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmdldFZhbGlkSW5kZXgoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5hdkl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNtZCA9IGRhdGEoZWwsIHRoaXMkMS5hdHRySXRlbSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHRoaXMkMS5jbHNBY3RpdmUsIHRvTnVtYmVyKGNtZCkgPT09IGkpO1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhlbCwgJ3VrLWludmlzaWJsZScsIHRoaXMkMS5maW5pdGUgJiYgKGNtZCA9PT0gJ3ByZXZpb3VzJyAmJiBpID09PSAwIHx8IGNtZCA9PT0gJ25leHQnICYmIGkgPj0gdGhpcyQxLm1heEluZGV4KSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIFNsaWRlciA9IHtcblxuICAgICAgICBtaXhpbnM6IFtTbGlkZXJBdXRvcGxheSwgU2xpZGVyRHJhZywgU2xpZGVyTmF2XSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgY2xzQWN0aXZhdGVkOiBCb29sZWFuLFxuICAgICAgICAgICAgZWFzaW5nOiBTdHJpbmcsXG4gICAgICAgICAgICBpbmRleDogTnVtYmVyLFxuICAgICAgICAgICAgZmluaXRlOiBCb29sZWFuLFxuICAgICAgICAgICAgdmVsb2NpdHk6IE51bWJlcixcbiAgICAgICAgICAgIHNlbFNsaWRlczogU3RyaW5nXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YTogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICAgICAgICAgIGVhc2luZzogJ2Vhc2UnLFxuICAgICAgICAgICAgZmluaXRlOiBmYWxzZSxcbiAgICAgICAgICAgIHZlbG9jaXR5OiAxLFxuICAgICAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgICAgICBwcmV2SW5kZXg6IC0xLFxuICAgICAgICAgICAgc3RhY2s6IFtdLFxuICAgICAgICAgICAgcGVyY2VudDogMCxcbiAgICAgICAgICAgIGNsc0FjdGl2ZTogJ3VrLWFjdGl2ZScsXG4gICAgICAgICAgICBjbHNBY3RpdmF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgVHJhbnNpdGlvbmVyOiBmYWxzZSxcbiAgICAgICAgICAgIHRyYW5zaXRpb25PcHRpb25zOiB7fVxuICAgICAgICB9KTsgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5wcmV2SW5kZXggPSAtMTtcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSB0aGlzLmdldFZhbGlkSW5kZXgodGhpcy5pbmRleCk7XG4gICAgICAgICAgICB0aGlzLnN0YWNrID0gW107XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuc2xpZGVzLCB0aGlzLmNsc0FjdGl2ZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgZHVyYXRpb246IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZlbG9jaXR5ID0gcmVmLnZlbG9jaXR5O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNwZWVkVXAoJGVsLm9mZnNldFdpZHRoIC8gdmVsb2NpdHkpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbGlzdDogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsTGlzdCA9IHJlZi5zZWxMaXN0O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoc2VsTGlzdCwgJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG1heEluZGV4OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2VsU2xpZGVzOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsTGlzdCA9IHJlZi5zZWxMaXN0O1xuICAgICAgICAgICAgICAgIHZhciBzZWxTbGlkZXMgPSByZWYuc2VsU2xpZGVzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChzZWxMaXN0ICsgXCIgXCIgKyAoc2VsU2xpZGVzIHx8ICc+IConKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzbGlkZXM6IHtcblxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkJCh0aGlzLnNlbFNsaWRlcywgdGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3YXRjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHJlc2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBsZW5ndGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNsaWRlcy5sZW5ndGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IHtcblxuICAgICAgICAgICAgaXRlbXNob3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiR1cGRhdGUodGhpcy5saXN0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24oaW5kZXgsIGZvcmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaWYgKCBmb3JjZSA9PT0gdm9pZCAwICkgZm9yY2UgPSBmYWxzZTtcblxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZHJhZ2dpbmcgfHwgIXRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgc3RhY2sgPSByZWYuc3RhY2s7XG4gICAgICAgICAgICAgICAgdmFyIHF1ZXVlSW5kZXggPSBmb3JjZSA/IDAgOiBzdGFjay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIHJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5zcGxpY2UocXVldWVJbmRleCwgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyQxLnNob3coc3RhY2suc2hpZnQoKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgc3RhY2tbZm9yY2UgPyAndW5zaGlmdCcgOiAncHVzaCddKGluZGV4KTtcblxuICAgICAgICAgICAgICAgIGlmICghZm9yY2UgJiYgc3RhY2subGVuZ3RoID4gMSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRpb25lci5mb3J3YXJkKE1hdGgubWluKHRoaXMuZHVyYXRpb24sIDIwMCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwcmV2SW5kZXggPSB0aGlzLmdldEluZGV4KHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gaGFzQ2xhc3ModGhpcy5zbGlkZXMsIHRoaXMuY2xzQWN0aXZlKSAmJiB0aGlzLnNsaWRlc1twcmV2SW5kZXhdO1xuICAgICAgICAgICAgICAgIHZhciBuZXh0SW5kZXggPSB0aGlzLmdldEluZGV4KGluZGV4LCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IHRoaXMuc2xpZGVzW25leHRJbmRleF07XG5cbiAgICAgICAgICAgICAgICBpZiAocHJldiA9PT0gbmV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5kaXIgPSBnZXREaXJlY3Rpb24oaW5kZXgsIHByZXZJbmRleCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2SW5kZXggPSBwcmV2SW5kZXg7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IG5leHRJbmRleDtcblxuICAgICAgICAgICAgICAgIGlmIChwcmV2ICYmICF0cmlnZ2VyKHByZXYsICdiZWZvcmVpdGVtaGlkZScsIFt0aGlzXSlcbiAgICAgICAgICAgICAgICAgICAgfHwgIXRyaWdnZXIobmV4dCwgJ2JlZm9yZWl0ZW1zaG93JywgW3RoaXMsIHByZXZdKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gdGhpcy5wcmV2SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX3Nob3cocHJldiwgbmV4dCwgZm9yY2UpLnRoZW4oZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHByZXYgJiYgdHJpZ2dlcihwcmV2LCAnaXRlbWhpZGRlbicsIFt0aGlzJDFdKTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcihuZXh0LCAnaXRlbXNob3duJywgW3RoaXMkMV0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmFzdGRvbS53cml0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5zaG93KHN0YWNrLnNoaWZ0KCksIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5fdHJhbnNpdGlvbmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwcmV2ICYmIHRyaWdnZXIocHJldiwgJ2l0ZW1oaWRlJywgW3RoaXNdKTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyKG5leHQsICdpdGVtc2hvdycsIFt0aGlzXSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0SW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBwcmV2KSB7XG4gICAgICAgICAgICAgICAgaWYgKCBpbmRleCA9PT0gdm9pZCAwICkgaW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgICAgIGlmICggcHJldiA9PT0gdm9pZCAwICkgcHJldiA9IHRoaXMuaW5kZXg7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY2xhbXAoZ2V0SW5kZXgoaW5kZXgsIHRoaXMuc2xpZGVzLCBwcmV2LCB0aGlzLmZpbml0ZSksIDAsIHRoaXMubWF4SW5kZXgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0VmFsaWRJbmRleDogZnVuY3Rpb24oaW5kZXgsIHByZXZJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICggaW5kZXggPT09IHZvaWQgMCApIGluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIHByZXZJbmRleCA9PT0gdm9pZCAwICkgcHJldkluZGV4ID0gdGhpcy5wcmV2SW5kZXg7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRJbmRleChpbmRleCwgcHJldkluZGV4KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF9zaG93OiBmdW5jdGlvbihwcmV2LCBuZXh0LCBmb3JjZSkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbmVyID0gdGhpcy5fZ2V0VHJhbnNpdGlvbmVyKFxuICAgICAgICAgICAgICAgICAgICBwcmV2LFxuICAgICAgICAgICAgICAgICAgICBuZXh0LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcixcbiAgICAgICAgICAgICAgICAgICAgYXNzaWduKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogZm9yY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG5leHQub2Zmc2V0V2lkdGggPCA2MDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnY3ViaWMtYmV6aWVyKDAuMjUsIDAuNDYsIDAuNDUsIDAuOTQpJyAvKiBlYXNlT3V0UXVhZCAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdjdWJpYy1iZXppZXIoMC4xNjUsIDAuODQsIDAuNDQsIDEpJyAvKiBlYXNlT3V0UXVhcnQgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZWFzaW5nXG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMudHJhbnNpdGlvbk9wdGlvbnMpXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlmICghZm9yY2UgJiYgIXByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNsYXRlKDEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuc3RhY2s7XG4gICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHJlZi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zaXRpb25lcltsZW5ndGggPiAxID8gJ2ZvcndhcmQnIDogJ3Nob3cnXShsZW5ndGggPiAxID8gTWF0aC5taW4odGhpcy5kdXJhdGlvbiwgNzUgKyA3NSAvIChsZW5ndGggLSAxKSkgOiB0aGlzLmR1cmF0aW9uLCB0aGlzLnBlcmNlbnQpO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfZ2V0RGlzdGFuY2U6IGZ1bmN0aW9uKHByZXYsIG5leHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0VHJhbnNpdGlvbmVyKHByZXYsIHByZXYgIT09IG5leHQgJiYgbmV4dCkuZ2V0RGlzdGFuY2UoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF90cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQsIHByZXYsIG5leHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIHByZXYgPT09IHZvaWQgMCApIHByZXYgPSB0aGlzLnByZXZJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIG5leHQgPT09IHZvaWQgMCApIG5leHQgPSB0aGlzLmluZGV4O1xuXG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25lciA9IHRoaXMuX2dldFRyYW5zaXRpb25lcihwcmV2ICE9PSBuZXh0ID8gcHJldiA6IGZhbHNlLCBuZXh0KTtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uZXIudHJhbnNsYXRlKHBlcmNlbnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2l0aW9uZXI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfZ2V0VHJhbnNpdGlvbmVyOiBmdW5jdGlvbihwcmV2LCBuZXh0LCBkaXIsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIHByZXYgPT09IHZvaWQgMCApIHByZXYgPSB0aGlzLnByZXZJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIG5leHQgPT09IHZvaWQgMCApIG5leHQgPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgICAgIGlmICggZGlyID09PSB2b2lkIDAgKSBkaXIgPSB0aGlzLmRpciB8fCAxO1xuICAgICAgICAgICAgICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHRoaXMudHJhbnNpdGlvbk9wdGlvbnM7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMuVHJhbnNpdGlvbmVyKFxuICAgICAgICAgICAgICAgICAgICBpc051bWJlcihwcmV2KSA/IHRoaXMuc2xpZGVzW3ByZXZdIDogcHJldixcbiAgICAgICAgICAgICAgICAgICAgaXNOdW1iZXIobmV4dCkgPyB0aGlzLnNsaWRlc1tuZXh0XSA6IG5leHQsXG4gICAgICAgICAgICAgICAgICAgIGRpciAqIChpc1J0bCA/IC0xIDogMSksXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXREaXJlY3Rpb24oaW5kZXgsIHByZXZJbmRleCkge1xuICAgICAgICByZXR1cm4gaW5kZXggPT09ICduZXh0J1xuICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICA6IGluZGV4ID09PSAncHJldmlvdXMnXG4gICAgICAgICAgICAgICAgPyAtMVxuICAgICAgICAgICAgICAgIDogaW5kZXggPCBwcmV2SW5kZXhcbiAgICAgICAgICAgICAgICAgICAgPyAtMVxuICAgICAgICAgICAgICAgICAgICA6IDE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3BlZWRVcCh4KSB7XG4gICAgICAgIHJldHVybiAuNSAqIHggKyAzMDA7IC8vIHBhcmFib2xhIHRocm91Z2ggKDQwMCw1MDA7IDYwMCw2MDA7IDE4MDAsMTIwMClcbiAgICB9XG5cbiAgICB2YXIgU2xpZGVzaG93ID0ge1xuXG4gICAgICAgIG1peGluczogW1NsaWRlcl0sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbjogU3RyaW5nXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgYW5pbWF0aW9uOiAnc2xpZGUnLFxuICAgICAgICAgICAgY2xzQWN0aXZhdGVkOiAndWstdHJhbnNpdGlvbi1hY3RpdmUnLFxuICAgICAgICAgICAgQW5pbWF0aW9uczogQW5pbWF0aW9ucyxcbiAgICAgICAgICAgIFRyYW5zaXRpb25lcjogVHJhbnNpdGlvbmVyXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgYW5pbWF0aW9uOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gcmVmLmFuaW1hdGlvbjtcbiAgICAgICAgICAgICAgICB2YXIgQW5pbWF0aW9ucyA9IHJlZi5BbmltYXRpb25zO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFzc2lnbihBbmltYXRpb25zW2FuaW1hdGlvbl0gfHwgQW5pbWF0aW9ucy5zbGlkZSwge25hbWU6IGFuaW1hdGlvbn0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdHJhbnNpdGlvbk9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7YW5pbWF0aW9uOiB0aGlzLmFuaW1hdGlvbn07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IHtcblxuICAgICAgICAgICAgJ2l0ZW1zaG93IGl0ZW1oaWRlIGl0ZW1zaG93biBpdGVtaGlkZGVuJzogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLiR1cGRhdGUodGFyZ2V0KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGJlZm9yZWl0ZW1zaG93OiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRhcmdldCwgdGhpcy5jbHNBY3RpdmUpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaXRlbXNob3duOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRhcmdldCwgdGhpcy5jbHNBY3RpdmF0ZWQpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaXRlbWhpZGRlbjogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0YXJnZXQsIHRoaXMuY2xzQWN0aXZlLCB0aGlzLmNsc0FjdGl2YXRlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBMaWdodGJveFBhbmVsID0ge1xuXG4gICAgICAgIG1peGluczogW0NvbnRhaW5lciwgTW9kYWwsIFRvZ2dsYWJsZSwgU2xpZGVzaG93XSxcblxuICAgICAgICBmdW5jdGlvbmFsOiB0cnVlLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBkZWxheUNvbnRyb2xzOiBOdW1iZXIsXG4gICAgICAgICAgICBwcmVsb2FkOiBOdW1iZXIsXG4gICAgICAgICAgICB2aWRlb0F1dG9wbGF5OiBCb29sZWFuLFxuICAgICAgICAgICAgdGVtcGxhdGU6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gICAgICAgICAgICBwcmVsb2FkOiAxLFxuICAgICAgICAgICAgdmlkZW9BdXRvcGxheTogZmFsc2UsXG4gICAgICAgICAgICBkZWxheUNvbnRyb2xzOiAzMDAwLFxuICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgY2xzOiAndWstb3BlbicsXG4gICAgICAgICAgICBjbHNQYWdlOiAndWstbGlnaHRib3gtcGFnZScsXG4gICAgICAgICAgICBzZWxMaXN0OiAnLnVrLWxpZ2h0Ym94LWl0ZW1zJyxcbiAgICAgICAgICAgIGF0dHJJdGVtOiAndWstbGlnaHRib3gtaXRlbScsXG4gICAgICAgICAgICBzZWxDbG9zZTogJy51ay1jbG9zZS1sYXJnZScsXG4gICAgICAgICAgICBzZWxDYXB0aW9uOiAnLnVrLWxpZ2h0Ym94LWNhcHRpb24nLFxuICAgICAgICAgICAgcGF1c2VPbkhvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgIHZlbG9jaXR5OiAyLFxuICAgICAgICAgICAgQW5pbWF0aW9uczogQW5pbWF0aW9ucyQxLFxuICAgICAgICAgICAgdGVtcGxhdGU6IFwiPGRpdiBjbGFzcz1cXFwidWstbGlnaHRib3ggdWstb3ZlcmZsb3ctaGlkZGVuXFxcIj4gPHVsIGNsYXNzPVxcXCJ1ay1saWdodGJveC1pdGVtc1xcXCI+PC91bD4gPGRpdiBjbGFzcz1cXFwidWstbGlnaHRib3gtdG9vbGJhciB1ay1wb3NpdGlvbi10b3AgdWstdGV4dC1yaWdodCB1ay10cmFuc2l0aW9uLXNsaWRlLXRvcCB1ay10cmFuc2l0aW9uLW9wYXF1ZVxcXCI+IDxidXR0b24gY2xhc3M9XFxcInVrLWxpZ2h0Ym94LXRvb2xiYXItaWNvbiB1ay1jbG9zZS1sYXJnZVxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiB1ay1jbG9zZT48L2J1dHRvbj4gPC9kaXY+IDxhIGNsYXNzPVxcXCJ1ay1saWdodGJveC1idXR0b24gdWstcG9zaXRpb24tY2VudGVyLWxlZnQgdWstcG9zaXRpb24tbWVkaXVtIHVrLXRyYW5zaXRpb24tZmFkZVxcXCIgaHJlZiB1ay1zbGlkZW5hdi1wcmV2aW91cyB1ay1saWdodGJveC1pdGVtPVxcXCJwcmV2aW91c1xcXCI+PC9hPiA8YSBjbGFzcz1cXFwidWstbGlnaHRib3gtYnV0dG9uIHVrLXBvc2l0aW9uLWNlbnRlci1yaWdodCB1ay1wb3NpdGlvbi1tZWRpdW0gdWstdHJhbnNpdGlvbi1mYWRlXFxcIiBocmVmIHVrLXNsaWRlbmF2LW5leHQgdWstbGlnaHRib3gtaXRlbT1cXFwibmV4dFxcXCI+PC9hPiA8ZGl2IGNsYXNzPVxcXCJ1ay1saWdodGJveC10b29sYmFyIHVrLWxpZ2h0Ym94LWNhcHRpb24gdWstcG9zaXRpb24tYm90dG9tIHVrLXRleHQtY2VudGVyIHVrLXRyYW5zaXRpb24tc2xpZGUtYm90dG9tIHVrLXRyYW5zaXRpb24tb3BhcXVlXFxcIj48L2Rpdj4gPC9kaXY+XCJcbiAgICAgICAgfSk7IH0sXG5cbiAgICAgICAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIHZhciAkZWwgPSAkKHRoaXMudGVtcGxhdGUpO1xuICAgICAgICAgICAgdmFyIGxpc3QgPSAkKHRoaXMuc2VsTGlzdCwgJGVsKTtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoKSB7IHJldHVybiBhcHBlbmQobGlzdCwgJzxsaT4nKTsgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuJG1vdW50KGFwcGVuZCh0aGlzLmNvbnRhaW5lciwgJGVsKSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBjYXB0aW9uOiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWxDYXB0aW9uID0gcmVmLnNlbENhcHRpb247XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gJCgnLnVrLWxpZ2h0Ym94LWNhcHRpb24nLCAkZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6IChwb2ludGVyTW92ZSArIFwiIFwiICsgcG9pbnRlckRvd24gKyBcIiBrZXlkb3duXCIpLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogJ3Nob3dDb250cm9scydcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbFNsaWRlcztcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ3Nob3duJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93Q29udHJvbHMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdoaWRlJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGVDb250cm9scygpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuc2xpZGVzLCB0aGlzLmNsc0FjdGl2ZSk7XG4gICAgICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uc3RvcCh0aGlzLnNsaWRlcyk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnaGlkZGVuJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZGVzdHJveSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdrZXl1cCcsXG5cbiAgICAgICAgICAgICAgICBlbDogaW5Ccm93c2VyICYmIGRvY3VtZW50LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1RvZ2dsZWQodGhpcy4kZWwpIHx8ICF0aGlzLmRyYWdnYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KCdwcmV2aW91cycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coJ25leHQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdiZWZvcmVpdGVtc2hvdycsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNUb2dnbGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhZ2dhYmxlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlRWxlbWVudCh0aGlzLiRlbCwgdHJ1ZSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uID0gQW5pbWF0aW9ucyQxWydzY2FsZSddO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhlLnRhcmdldCwgdGhpcy5jbHNBY3RpdmUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnNwbGljZSgxLCAwLCB0aGlzLmluZGV4KTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2l0ZW1zaG93JyxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGh0bWwodGhpcy5jYXB0aW9uLCB0aGlzLmdldEl0ZW0oKS5jYXB0aW9uIHx8ICcnKTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gLXRoaXMucHJlbG9hZDsgaiA8PSB0aGlzLnByZWxvYWQ7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkSXRlbSh0aGlzLmluZGV4ICsgaik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2l0ZW1zaG93bicsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnZ2FibGUgPSB0aGlzLiRwcm9wcy5kcmFnZ2FibGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnaXRlbWxvYWQnLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oXywgaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzcmMgPSBpdGVtLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBpdGVtLnR5cGU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbHQgPSBpdGVtLmFsdDsgaWYgKCBhbHQgPT09IHZvaWQgMCApIGFsdCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdGVyID0gaXRlbS5wb3N0ZXI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHRycyA9IGl0ZW0uYXR0cnM7IGlmICggYXR0cnMgPT09IHZvaWQgMCApIGF0dHJzID0ge307XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJdGVtKGl0ZW0sICc8c3BhbiB1ay1zcGlubmVyPjwvc3Bhbj4nKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNyYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpZnJhbWVBdHRycyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lYm9yZGVyOiAnMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxvdzogJ2F1dG9wbGF5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93ZnVsbHNjcmVlbjogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ21heC13aWR0aDogMTAwJTsgYm94LXNpemluZzogYm9yZGVyLWJveDsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3VrLXJlc3BvbnNpdmUnOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd1ay12aWRlbyc6IChcIlwiICsgKHRoaXMudmlkZW9BdXRvcGxheSkpXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdpbWFnZScgfHwgc3JjLm1hdGNoKC9cXC4oanBlP2d8cG5nfGdpZnxzdmd8d2VicCkoJHxcXD8pL2kpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGdldEltYWdlKHNyYywgYXR0cnMuc3Jjc2V0LCBhdHRycy5zaXplKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gcmVmLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmLmhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcyQxLnNldEl0ZW0oaXRlbSwgY3JlYXRlRWwoJ2ltZycsIGFzc2lnbih7c3JjOiBzcmMsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsIGFsdDogYWx0fSwgYXR0cnMpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5zZXRFcnJvcihpdGVtKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBWaWRlb1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd2aWRlbycgfHwgc3JjLm1hdGNoKC9cXC4obXA0fHdlYm18b2d2KSgkfFxcPykvaSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZpZGVvID0gY3JlYXRlRWwoJ3ZpZGVvJywgYXNzaWduKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHNyYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ZXI6IHBvc3RlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sczogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheXNpbmxpbmU6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1ay12aWRlbyc6IChcIlwiICsgKHRoaXMudmlkZW9BdXRvcGxheSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBhdHRycykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBvbih2aWRlbywgJ2xvYWRlZG1ldGFkYXRhJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIodmlkZW8sIHt3aWR0aDogdmlkZW8udmlkZW9XaWR0aCwgaGVpZ2h0OiB2aWRlby52aWRlb0hlaWdodH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5zZXRJdGVtKGl0ZW0sIHZpZGVvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgb24odmlkZW8sICdlcnJvcicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5zZXRFcnJvcihpdGVtKTsgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWZyYW1lXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2lmcmFtZScgfHwgc3JjLm1hdGNoKC9cXC4oaHRtbHxwaHApKCR8XFw/KS9pKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEl0ZW0oaXRlbSwgY3JlYXRlRWwoJ2lmcmFtZScsIGFzc2lnbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBzcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVib3JkZXI6ICcwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd2Z1bGxzY3JlZW46ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAndWstbGlnaHRib3gtaWZyYW1lJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgYXR0cnMpKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gWW91VHViZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChtYXRjaGVzID0gc3JjLm1hdGNoKC9cXC9cXC8oPzouKj95b3V0dWJlKC1ub2Nvb2tpZSk/XFwuLio/Wz8mXXY9fHlvdXR1XFwuYmVcXC8pKFtcXHctXXsxMX0pWyY/XT8oLiopPy8pKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEl0ZW0oaXRlbSwgY3JlYXRlRWwoJ2lmcmFtZScsIGFzc2lnbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiAoXCJodHRwczovL3d3dy55b3V0dWJlXCIgKyAobWF0Y2hlc1sxXSB8fCAnJykgKyBcIi5jb20vZW1iZWQvXCIgKyAobWF0Y2hlc1syXSkgKyAobWF0Y2hlc1szXSA/IChcIj9cIiArIChtYXRjaGVzWzNdKSkgOiAnJykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxOTIwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTA4MFxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgaWZyYW1lQXR0cnMsIGF0dHJzKSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFZpbWVvXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKG1hdGNoZXMgPSBzcmMubWF0Y2goL1xcL1xcLy4qP3ZpbWVvXFwuW2Etel0rXFwvKFxcZCspWyY/XT8oLiopPy8pKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhamF4KChcImh0dHBzOi8vdmltZW8uY29tL2FwaS9vZW1iZWQuanNvbj9tYXh3aWR0aD0xOTIwJnVybD1cIiArIChlbmNvZGVVUkkoc3JjKSkpLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZfcmVzcG9uc2UgPSByZWYucmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByZWZfcmVzcG9uc2UuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSByZWZfcmVzcG9uc2Uud2lkdGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMkMS5zZXRJdGVtKGl0ZW0sIGNyZWF0ZUVsKCdpZnJhbWUnLCBhc3NpZ24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IChcImh0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby9cIiArIChtYXRjaGVzWzFdKSArIChtYXRjaGVzWzJdID8gKFwiP1wiICsgKG1hdGNoZXNbMl0pKSA6ICcnKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBpZnJhbWVBdHRycywgYXR0cnMpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5zZXRFcnJvcihpdGVtKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgbG9hZEl0ZW06IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKCBpbmRleCA9PT0gdm9pZCAwICkgaW5kZXggPSB0aGlzLmluZGV4O1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuZ2V0SXRlbShpbmRleCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2V0U2xpZGUoaXRlbSkuY2hpbGRFbGVtZW50Q291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ2l0ZW1sb2FkJywgW2l0ZW1dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRJdGVtOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICggaW5kZXggPT09IHZvaWQgMCApIGluZGV4ID0gdGhpcy5pbmRleDtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zW2dldEluZGV4KGluZGV4LCB0aGlzLnNsaWRlcyldO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0SXRlbTogZnVuY3Rpb24oaXRlbSwgY29udGVudCkge1xuICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdpdGVtbG9hZGVkJywgW3RoaXMsIGh0bWwodGhpcy5nZXRTbGlkZShpdGVtKSwgY29udGVudCkgXSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRTbGlkZTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNsaWRlc1t0aGlzLml0ZW1zLmluZGV4T2YoaXRlbSldO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0RXJyb3I6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEl0ZW0oaXRlbSwgJzxzcGFuIHVrLWljb249XCJpY29uOiBib2x0OyByYXRpbzogMlwiPjwvc3Bhbj4nKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNob3dDb250cm9sczogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5jb250cm9sc1RpbWVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzVGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuaGlkZUNvbnRyb2xzLCB0aGlzLmRlbGF5Q29udHJvbHMpO1xuXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsICd1ay1hY3RpdmUnLCAndWstdHJhbnNpdGlvbi1hY3RpdmUnKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGlkZUNvbnRyb2xzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLiRlbCwgJ3VrLWFjdGl2ZScsICd1ay10cmFuc2l0aW9uLWFjdGl2ZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVFbCh0YWcsIGF0dHJzKSB7XG4gICAgICAgIHZhciBlbCA9IGZyYWdtZW50KChcIjxcIiArIHRhZyArIFwiPlwiKSk7XG4gICAgICAgIGF0dHIoZWwsIGF0dHJzKTtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH1cblxuICAgIHZhciBsaWdodGJveCA9IHtcblxuICAgICAgICBpbnN0YWxsOiBpbnN0YWxsJDIsXG5cbiAgICAgICAgcHJvcHM6IHt0b2dnbGU6IFN0cmluZ30sXG5cbiAgICAgICAgZGF0YToge3RvZ2dsZTogJ2EnfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICB0b2dnbGVzOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2dnbGUgPSByZWYudG9nZ2xlO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkJCh0b2dnbGUsICRlbCk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdhdGNoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBkaXNjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdjbGljaycsXG5cbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKHRoaXMudG9nZ2xlKSArIFwiOm5vdCgudWstZGlzYWJsZWQpXCIpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KGUuY3VycmVudCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IHVuaXF1ZUJ5KHRoaXMudG9nZ2xlcy5tYXAodG9JdGVtKSwgJ3NvdXJjZScpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzRWxlbWVudChpbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRvSXRlbShpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSByZWYuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGZpbmRJbmRleChpdGVtcywgZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IHJlZi5zb3VyY2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2UgPT09IHNyYztcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5wYW5lbCA9IHRoaXMucGFuZWwgfHwgdGhpcy4kY3JlYXRlKCdsaWdodGJveFBhbmVsJywgYXNzaWduKHt9LCB0aGlzLiRwcm9wcywge2l0ZW1zOiBpdGVtc30pKTtcblxuICAgICAgICAgICAgICAgIG9uKHRoaXMucGFuZWwuJGVsLCAnaGlkZGVuJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLnBhbmVsID0gZmFsc2U7IH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFuZWwuc2hvdyhpbmRleCk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhpZGU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFuZWwgJiYgdGhpcy5wYW5lbC5oaWRlKCk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaW5zdGFsbCQyKFVJa2l0LCBMaWdodGJveCkge1xuXG4gICAgICAgIGlmICghVUlraXQubGlnaHRib3hQYW5lbCkge1xuICAgICAgICAgICAgVUlraXQuY29tcG9uZW50KCdsaWdodGJveFBhbmVsJywgTGlnaHRib3hQYW5lbCk7XG4gICAgICAgIH1cblxuICAgICAgICBhc3NpZ24oXG4gICAgICAgICAgICBMaWdodGJveC5wcm9wcyxcbiAgICAgICAgICAgIFVJa2l0LmNvbXBvbmVudCgnbGlnaHRib3hQYW5lbCcpLm9wdGlvbnMucHJvcHNcbiAgICAgICAgKTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSXRlbShlbCkge1xuXG4gICAgICAgIHZhciBpdGVtID0ge307XG5cbiAgICAgICAgWydocmVmJywgJ2NhcHRpb24nLCAndHlwZScsICdwb3N0ZXInLCAnYWx0JywgJ2F0dHJzJ10uZm9yRWFjaChmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICAgICAgaXRlbVthdHRyID09PSAnaHJlZicgPyAnc291cmNlJyA6IGF0dHJdID0gZGF0YShlbCwgYXR0cik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0ZW0uYXR0cnMgPSBwYXJzZU9wdGlvbnMoaXRlbS5hdHRycyk7XG5cbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuXG4gICAgdmFyIG9iajtcblxuICAgIHZhciBub3RpZmljYXRpb24gPSB7XG5cbiAgICAgICAgZnVuY3Rpb25hbDogdHJ1ZSxcblxuICAgICAgICBhcmdzOiBbJ21lc3NhZ2UnLCAnc3RhdHVzJ10sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbWVzc2FnZTogJycsXG4gICAgICAgICAgICBzdGF0dXM6ICcnLFxuICAgICAgICAgICAgdGltZW91dDogNTAwMCxcbiAgICAgICAgICAgIGdyb3VwOiBudWxsLFxuICAgICAgICAgICAgcG9zOiAndG9wLWNlbnRlcicsXG4gICAgICAgICAgICBjbHNDb250YWluZXI6ICd1ay1ub3RpZmljYXRpb24nLFxuICAgICAgICAgICAgY2xzQ2xvc2U6ICd1ay1ub3RpZmljYXRpb24tY2xvc2UnLFxuICAgICAgICAgICAgY2xzTXNnOiAndWstbm90aWZpY2F0aW9uLW1lc3NhZ2UnXG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5zdGFsbDogaW5zdGFsbCQzLFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIG1hcmdpblByb3A6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBwb3MgPSByZWYucG9zO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcIm1hcmdpblwiICsgKHN0YXJ0c1dpdGgocG9zLCAndG9wJykgPyAnVG9wJyA6ICdCb3R0b20nKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzdGFydFByb3BzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICggb2JqID0ge29wYWNpdHk6IDB9LCBvYmpbdGhpcy5tYXJnaW5Qcm9wXSA9IC10aGlzLiRlbC5vZmZzZXRIZWlnaHQsIG9iaiApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSAkKChcIi5cIiArICh0aGlzLmNsc0NvbnRhaW5lcikgKyBcIi1cIiArICh0aGlzLnBvcykpLCB0aGlzLiRjb250YWluZXIpXG4gICAgICAgICAgICAgICAgfHwgYXBwZW5kKHRoaXMuJGNvbnRhaW5lciwgKFwiPGRpdiBjbGFzcz1cXFwiXCIgKyAodGhpcy5jbHNDb250YWluZXIpICsgXCIgXCIgKyAodGhpcy5jbHNDb250YWluZXIpICsgXCItXCIgKyAodGhpcy5wb3MpICsgXCJcXFwiIHN0eWxlPVxcXCJkaXNwbGF5OiBibG9ja1xcXCI+PC9kaXY+XCIpKTtcblxuICAgICAgICAgICAgdGhpcy4kbW91bnQoYXBwZW5kKGNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICAoXCI8ZGl2IGNsYXNzPVxcXCJcIiArICh0aGlzLmNsc01zZykgKyAodGhpcy5zdGF0dXMgPyAoXCIgXCIgKyAodGhpcy5jbHNNc2cpICsgXCItXCIgKyAodGhpcy5zdGF0dXMpKSA6ICcnKSArIFwiXFxcIj4gPGEgaHJlZiBjbGFzcz1cXFwiXCIgKyAodGhpcy5jbHNDbG9zZSkgKyBcIlxcXCIgZGF0YS11ay1jbG9zZT48L2E+IDxkaXY+XCIgKyAodGhpcy5tZXNzYWdlKSArIFwiPC9kaXY+IDwvZGl2PlwiKVxuICAgICAgICAgICAgKSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgb2JqO1xuXG5cbiAgICAgICAgICAgIHZhciBtYXJnaW4gPSB0b0Zsb2F0KGNzcyh0aGlzLiRlbCwgdGhpcy5tYXJnaW5Qcm9wKSk7XG4gICAgICAgICAgICBUcmFuc2l0aW9uLnN0YXJ0KFxuICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgdGhpcy5zdGFydFByb3BzKSxcbiAgICAgICAgICAgICAgICAoIG9iaiA9IHtvcGFjaXR5OiAxfSwgb2JqW3RoaXMubWFyZ2luUHJvcF0gPSBtYXJnaW4sIG9iaiApXG4gICAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzJDEudGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzJDEudGltZXIgPSBzZXRUaW1lb3V0KHRoaXMkMS5jbG9zZSwgdGhpcyQxLnRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiAoIG9iaiA9IHtcblxuICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdChlLnRhcmdldCwgJ2FbaHJlZj1cIiNcIl0sYVtocmVmPVwiXCJdJykpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSwgb2JqW3BvaW50ZXJFbnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIG9ialtwb2ludGVyTGVhdmVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQodGhpcy5jbG9zZSwgdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBvYmogKSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbihpbW1lZGlhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIHJlbW92ZUZuID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzJDEuJGVsLnBhcmVudE5vZGU7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzJDEuJGVsLCAnY2xvc2UnLCBbdGhpcyQxXSk7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZSh0aGlzJDEuJGVsKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyICYmICFjb250YWluZXIuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUoY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRpbWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUZuKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5zdGFydCh0aGlzLiRlbCwgdGhpcy5zdGFydFByb3BzKS50aGVuKHJlbW92ZUZuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGluc3RhbGwkMyhVSWtpdCkge1xuICAgICAgICBVSWtpdC5ub3RpZmljYXRpb24uY2xvc2VBbGwgPSBmdW5jdGlvbiAoZ3JvdXAsIGltbWVkaWF0ZSkge1xuICAgICAgICAgICAgYXBwbHkoZG9jdW1lbnQuYm9keSwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vdGlmaWNhdGlvbiA9IFVJa2l0LmdldENvbXBvbmVudChlbCwgJ25vdGlmaWNhdGlvbicpO1xuICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24gJiYgKCFncm91cCB8fCBncm91cCA9PT0gbm90aWZpY2F0aW9uLmdyb3VwKSkge1xuICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb24uY2xvc2UoaW1tZWRpYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgcHJvcHMgPSBbJ3gnLCAneScsICdiZ3gnLCAnYmd5JywgJ3JvdGF0ZScsICdzY2FsZScsICdjb2xvcicsICdiYWNrZ3JvdW5kQ29sb3InLCAnYm9yZGVyQ29sb3InLCAnb3BhY2l0eScsICdibHVyJywgJ2h1ZScsICdncmF5c2NhbGUnLCAnaW52ZXJ0JywgJ3NhdHVyYXRlJywgJ3NlcGlhJywgJ2ZvcGFjaXR5JywgJ3N0cm9rZSddO1xuXG4gICAgdmFyIFBhcmFsbGF4ID0ge1xuXG4gICAgICAgIG1peGluczogW01lZGlhXSxcblxuICAgICAgICBwcm9wczogcHJvcHMucmVkdWNlKGZ1bmN0aW9uIChwcm9wcywgcHJvcCkge1xuICAgICAgICAgICAgcHJvcHNbcHJvcF0gPSAnbGlzdCc7XG4gICAgICAgICAgICByZXR1cm4gcHJvcHM7XG4gICAgICAgIH0sIHt9KSxcblxuICAgICAgICBkYXRhOiBwcm9wcy5yZWR1Y2UoZnVuY3Rpb24gKGRhdGEsIHByb3ApIHtcbiAgICAgICAgICAgIGRhdGFbcHJvcF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSwge30pLFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIHByb3BzOiBmdW5jdGlvbihwcm9wZXJ0aWVzLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzLnJlZHVjZShmdW5jdGlvbiAocHJvcHMsIHByb3ApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQocHJvcGVydGllc1twcm9wXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpc0NvbG9yID0gcHJvcC5tYXRjaCgvY29sb3IvaSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc0Nzc1Byb3AgPSBpc0NvbG9yIHx8IHByb3AgPT09ICdvcGFjaXR5JztcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zLCBiZ1BvcywgZGlmZjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ZXBzID0gcHJvcGVydGllc1twcm9wXS5zbGljZSgwKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDc3NQcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MoJGVsLCBwcm9wLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RlcHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHMudW5zaGlmdCgocHJvcCA9PT0gJ3NjYWxlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaXNDc3NQcm9wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY3NzKCRlbCwgcHJvcClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwKSB8fCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciB1bml0ID0gZ2V0VW5pdChzdGVwcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ29sb3IpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9ICRlbC5zdHlsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IHJlZi5jb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBzID0gc3RlcHMubWFwKGZ1bmN0aW9uIChzdGVwKSB7IHJldHVybiBwYXJzZUNvbG9yKCRlbCwgc3RlcCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGVsLnN0eWxlLmNvbG9yID0gY29sb3I7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGFydHNXaXRoKHByb3AsICdiZycpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyID0gcHJvcCA9PT0gJ2JneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwcyA9IHN0ZXBzLm1hcChmdW5jdGlvbiAoc3RlcCkgeyByZXR1cm4gdG9QeChzdGVwLCBhdHRyLCB0aGlzJDEuJGVsKTsgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcygkZWwsIChcImJhY2tncm91bmQtcG9zaXRpb24tXCIgKyAocHJvcFsyXSkpLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZ1BvcyA9IGNzcygkZWwsICdiYWNrZ3JvdW5kUG9zaXRpb24nKS5zcGxpdCgnICcpW3Byb3BbMl0gPT09ICd4JyA/IDAgOiAxXTsgLy8gSUUgMTEgY2FuJ3QgcmVhZCBiYWNrZ3JvdW5kLXBvc2l0aW9uLVt4fHldXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzJDEuY292ZXJzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWluID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgc3RlcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXggPSBNYXRoLm1heC5hcHBseShNYXRoLCBzdGVwcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRvd24gPSBzdGVwcy5pbmRleE9mKG1pbikgPCBzdGVwcy5pbmRleE9mKG1heCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmID0gbWF4IC0gbWluO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHMgPSBzdGVwcy5tYXAoZnVuY3Rpb24gKHN0ZXApIHsgcmV0dXJuIHN0ZXAgLSAoZG93biA/IG1pbiA6IG1heCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IChkb3duID8gLWRpZmYgOiAwKSArIFwicHhcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IGJnUG9zO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHMgPSBzdGVwcy5tYXAodG9GbG9hdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSAnc3Ryb2tlJykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0ZXBzLnNvbWUoZnVuY3Rpb24gKHN0ZXApIHsgcmV0dXJuIHN0ZXA7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gZ2V0TWF4UGF0aExlbmd0aCh0aGlzJDEuJGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcygkZWwsICdzdHJva2VEYXNoYXJyYXknLCBsZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodW5pdCA9PT0gJyUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHMgPSBzdGVwcy5tYXAoZnVuY3Rpb24gKHN0ZXApIHsgcmV0dXJuIHN0ZXAgKiBsZW5ndGggLyAxMDA7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwcyA9IHN0ZXBzLnJldmVyc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcCA9ICdzdHJva2VEYXNob2Zmc2V0JztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHByb3BzW3Byb3BdID0ge3N0ZXBzOiBzdGVwcywgdW5pdDogdW5pdCwgcG9zOiBwb3MsIGJnUG9zOiBiZ1BvcywgZGlmZjogZGlmZn07XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzO1xuXG4gICAgICAgICAgICAgICAgfSwge30pO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBiZ1Byb3BzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBbJ2JneCcsICdiZ3knXS5maWx0ZXIoZnVuY3Rpb24gKGJnKSB7IHJldHVybiBiZyBpbiB0aGlzJDEucHJvcHM7IH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY292ZXJzOiBmdW5jdGlvbihfLCAkZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY292ZXJzKCRlbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBkaXNjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2ltYWdlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIGRhdGEuYWN0aXZlID0gdGhpcy5tYXRjaE1lZGlhO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhLmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhLmltYWdlICYmIHRoaXMuY292ZXJzICYmIHRoaXMuYmdQcm9wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IGNzcyh0aGlzLiRlbCwgJ2JhY2tncm91bmRJbWFnZScpLnJlcGxhY2UoL15ub25lfHVybFxcKFtcIiddPyguKz8pW1wiJ10/XFwpJC8sICckMScpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSBzcmM7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmltYWdlID0gaW1nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWltZy5uYXR1cmFsV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLiR1cGRhdGUoKTsgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGltYWdlID0gZGF0YS5pbWFnZTtcblxuICAgICAgICAgICAgICAgIGlmICghaW1hZ2UgfHwgIWltYWdlLm5hdHVyYWxXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGRpbUVsID0ge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy4kZWwub2Zmc2V0V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy4kZWwub2Zmc2V0SGVpZ2h0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgZGltSW1hZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBpbWFnZS5uYXR1cmFsV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogaW1hZ2UubmF0dXJhbEhlaWdodFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgZGltID0gRGltZW5zaW9ucy5jb3ZlcihkaW1JbWFnZSwgZGltRWwpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5iZ1Byb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcyQxLnByb3BzW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IHJlZi5kaWZmO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmdQb3MgPSByZWYuYmdQb3M7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGVwcyA9IHJlZi5zdGVwcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHIgPSBwcm9wID09PSAnYmd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNwYW4gPSBkaW1bYXR0cl0gLSBkaW1FbFthdHRyXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3BhbiA8IGRpZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpbUVsW2F0dHJdID0gZGltW2F0dHJdICsgZGlmZiAtIHNwYW47XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3BhbiA+IGRpZmYpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvc1BlcmNlbnRhZ2UgPSBkaW1FbFthdHRyXSAvIHRvUHgoYmdQb3MsIGF0dHIsIHRoaXMkMS4kZWwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zUGVyY2VudGFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5wcm9wc1twcm9wXS5zdGVwcyA9IHN0ZXBzLm1hcChmdW5jdGlvbiAoc3RlcCkgeyByZXR1cm4gc3RlcCAtIChzcGFuIC0gZGlmZikgLyBwb3NQZXJjZW50YWdlOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRpbSA9IERpbWVuc2lvbnMuY292ZXIoZGltSW1hZ2UsIGRpbUVsKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGRhdGEuZGltID0gZGltO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBkaW0gPSByZWYuZGltO1xuICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSByZWYuYWN0aXZlO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsIHtiYWNrZ3JvdW5kU2l6ZTogJycsIGJhY2tncm91bmRSZXBlYXQ6ICcnfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkaW0gJiYgY3NzKHRoaXMuJGVsLCB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAoKGRpbS53aWR0aCkgKyBcInB4IFwiICsgKGRpbS5oZWlnaHQpICsgXCJweFwiKSxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIGVhY2godGhpcy5nZXRDc3MoMCksIGZ1bmN0aW9uIChfLCBwcm9wKSB7IHJldHVybiBjc3ModGhpcyQxLiRlbCwgcHJvcCwgJycpOyB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldENzczogZnVuY3Rpb24ocGVyY2VudCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIHByb3BzID0gcmVmLnByb3BzO1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykucmVkdWNlKGZ1bmN0aW9uIChjc3MsIHByb3ApIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gcHJvcHNbcHJvcF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGVwcyA9IHJlZi5zdGVwcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVuaXQgPSByZWYudW5pdDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IHJlZi5wb3M7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKHN0ZXBzLCBwZXJjZW50KTtcblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHByb3ApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJhbnNmb3Jtc1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAneCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd5Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQgPSB1bml0IHx8ICdweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzLnRyYW5zZm9ybSArPSBcIiB0cmFuc2xhdGVcIiArICh1Y2ZpcnN0KHByb3ApKSArIFwiKFwiICsgKHRvRmxvYXQodmFsdWUpLnRvRml4ZWQodW5pdCA9PT0gJ3B4JyA/IDAgOiAyKSkgKyB1bml0ICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyb3RhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQgPSB1bml0IHx8ICdkZWcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcy50cmFuc2Zvcm0gKz0gXCIgcm90YXRlKFwiICsgKHZhbHVlICsgdW5pdCkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NjYWxlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3MudHJhbnNmb3JtICs9IFwiIHNjYWxlKFwiICsgdmFsdWUgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmcgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JneSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdiZ3gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc1soXCJiYWNrZ3JvdW5kLXBvc2l0aW9uLVwiICsgKHByb3BbMl0pKV0gPSBcImNhbGMoXCIgKyBwb3MgKyBcIiArIFwiICsgdmFsdWUgKyBcInB4KVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29sb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmFja2dyb3VuZENvbG9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvcmRlckNvbG9yJzoge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiQxID0gZ2V0U3RlcChzdGVwcywgcGVyY2VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gcmVmJDFbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuZCA9IHJlZiQxWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gcmVmJDFbMl07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NbcHJvcF0gPSBcInJnYmEoXCIgKyAoc3RhcnQubWFwKGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArIHAgKiAoZW5kW2ldIC0gdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPT09IDMgPyB0b0Zsb2F0KHZhbHVlKSA6IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmpvaW4oJywnKSkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENTUyBGaWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JsdXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQgPSB1bml0IHx8ICdweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzLmZpbHRlciArPSBcIiBibHVyKFwiICsgKHZhbHVlICsgdW5pdCkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2h1ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdCA9IHVuaXQgfHwgJ2RlZyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzLmZpbHRlciArPSBcIiBodWUtcm90YXRlKFwiICsgKHZhbHVlICsgdW5pdCkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZvcGFjaXR5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0ID0gdW5pdCB8fCAnJSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzLmZpbHRlciArPSBcIiBvcGFjaXR5KFwiICsgKHZhbHVlICsgdW5pdCkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2dyYXlzY2FsZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpbnZlcnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2F0dXJhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2VwaWEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQgPSB1bml0IHx8ICclJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3MuZmlsdGVyICs9IFwiIFwiICsgcHJvcCArIFwiKFwiICsgKHZhbHVlICsgdW5pdCkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3NzO1xuXG4gICAgICAgICAgICAgICAgfSwge3RyYW5zZm9ybTogJycsIGZpbHRlcjogJyd9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwYXJzZUNvbG9yKGVsLCBjb2xvcikge1xuICAgICAgICByZXR1cm4gY3NzKGNzcyhlbCwgJ2NvbG9yJywgY29sb3IpLCAnY29sb3InKVxuICAgICAgICAgICAgLnNwbGl0KC9bKCksXS9nKVxuICAgICAgICAgICAgLnNsaWNlKDEsIC0xKVxuICAgICAgICAgICAgLmNvbmNhdCgxKVxuICAgICAgICAgICAgLnNsaWNlKDAsIDQpXG4gICAgICAgICAgICAubWFwKHRvRmxvYXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFN0ZXAoc3RlcHMsIHBlcmNlbnQpIHtcbiAgICAgICAgdmFyIGNvdW50ID0gc3RlcHMubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIGluZGV4ID0gTWF0aC5taW4oTWF0aC5mbG9vcihjb3VudCAqIHBlcmNlbnQpLCBjb3VudCAtIDEpO1xuICAgICAgICB2YXIgc3RlcCA9IHN0ZXBzLnNsaWNlKGluZGV4LCBpbmRleCArIDIpO1xuXG4gICAgICAgIHN0ZXAucHVzaChwZXJjZW50ID09PSAxID8gMSA6IHBlcmNlbnQgJSAoMSAvIGNvdW50KSAqIGNvdW50KTtcblxuICAgICAgICByZXR1cm4gc3RlcDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRWYWx1ZShzdGVwcywgcGVyY2VudCwgZGlnaXRzKSB7XG4gICAgICAgIGlmICggZGlnaXRzID09PSB2b2lkIDAgKSBkaWdpdHMgPSAyO1xuXG4gICAgICAgIHZhciByZWYgPSBnZXRTdGVwKHN0ZXBzLCBwZXJjZW50KTtcbiAgICAgICAgdmFyIHN0YXJ0ID0gcmVmWzBdO1xuICAgICAgICB2YXIgZW5kID0gcmVmWzFdO1xuICAgICAgICB2YXIgcCA9IHJlZlsyXTtcbiAgICAgICAgcmV0dXJuIChpc051bWJlcihzdGFydClcbiAgICAgICAgICAgID8gc3RhcnQgKyBNYXRoLmFicyhzdGFydCAtIGVuZCkgKiBwICogKHN0YXJ0IDwgZW5kID8gMSA6IC0xKVxuICAgICAgICAgICAgOiArZW5kXG4gICAgICAgICkudG9GaXhlZChkaWdpdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFVuaXQoc3RlcHMpIHtcbiAgICAgICAgcmV0dXJuIHN0ZXBzLnJlZHVjZShmdW5jdGlvbiAodW5pdCwgc3RlcCkgeyByZXR1cm4gaXNTdHJpbmcoc3RlcCkgJiYgc3RlcC5yZXBsYWNlKC8tfFxcZC9nLCAnJykudHJpbSgpIHx8IHVuaXQ7IH0sICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb3ZlcnMoZWwpIHtcbiAgICAgICAgdmFyIHJlZiA9IGVsLnN0eWxlO1xuICAgICAgICB2YXIgYmFja2dyb3VuZFNpemUgPSByZWYuYmFja2dyb3VuZFNpemU7XG4gICAgICAgIHZhciBjb3ZlcnMgPSBjc3MoY3NzKGVsLCAnYmFja2dyb3VuZFNpemUnLCAnJyksICdiYWNrZ3JvdW5kU2l6ZScpID09PSAnY292ZXInO1xuICAgICAgICBlbC5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSA9IGJhY2tncm91bmRTaXplO1xuICAgICAgICByZXR1cm4gY292ZXJzO1xuICAgIH1cblxuICAgIHZhciBwYXJhbGxheCA9IHtcblxuICAgICAgICBtaXhpbnM6IFtQYXJhbGxheF0sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIHRhcmdldDogU3RyaW5nLFxuICAgICAgICAgICAgdmlld3BvcnQ6IE51bWJlcixcbiAgICAgICAgICAgIGVhc2luZzogTnVtYmVyXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdGFyZ2V0OiBmYWxzZSxcbiAgICAgICAgICAgIHZpZXdwb3J0OiAxLFxuICAgICAgICAgICAgZWFzaW5nOiAxXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgdGFyZ2V0OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldE9mZnNldEVsZW1lbnQodGFyZ2V0ICYmIHF1ZXJ5KHRhcmdldCwgJGVsKSB8fCAkZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlOiB7XG5cbiAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uKHJlZiwgdHlwZSkge1xuICAgICAgICAgICAgICAgIHZhciBwZXJjZW50ID0gcmVmLnBlcmNlbnQ7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IHJlZi5hY3RpdmU7XG5cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSAnc2Nyb2xsJykge1xuICAgICAgICAgICAgICAgICAgICBwZXJjZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFhY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gcGVyY2VudDtcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gZWFzZShzY3JvbGxlZE92ZXIodGhpcy50YXJnZXQpIC8gKHRoaXMudmlld3BvcnQgfHwgMSksIHRoaXMuZWFzaW5nKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHBlcmNlbnQ6IHBlcmNlbnQsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBwcmV2ICE9PSBwZXJjZW50ID8gdGhpcy5nZXRDc3MocGVyY2VudCkgOiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0eWxlID0gcmVmLnN0eWxlO1xuICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSByZWYuYWN0aXZlO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdHlsZSAmJiBjc3ModGhpcy4kZWwsIHN0eWxlKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Njcm9sbCcsICdyZXNpemUnXVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZWFzZShwZXJjZW50LCBlYXNpbmcpIHtcbiAgICAgICAgcmV0dXJuIGNsYW1wKHBlcmNlbnQgKiAoMSAtIChlYXNpbmcgLSBlYXNpbmcgKiBwZXJjZW50KSkpO1xuICAgIH1cblxuICAgIC8vIFNWRyBlbGVtZW50cyBkbyBub3QgaW5oZXJpdCBmcm9tIEhUTUxFbGVtZW50XG4gICAgZnVuY3Rpb24gZ2V0T2Zmc2V0RWxlbWVudChlbCkge1xuICAgICAgICByZXR1cm4gZWxcbiAgICAgICAgICAgID8gJ29mZnNldFRvcCcgaW4gZWxcbiAgICAgICAgICAgICAgICA/IGVsXG4gICAgICAgICAgICAgICAgOiBnZXRPZmZzZXRFbGVtZW50KGVsLnBhcmVudE5vZGUpXG4gICAgICAgICAgICA6IGRvY3VtZW50LmJvZHk7XG4gICAgfVxuXG4gICAgdmFyIFNsaWRlclJlYWN0aXZlID0ge1xuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGFjay5sZW5ndGggfHwgdGhpcy5kcmFnZ2luZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5nZXRWYWxpZEluZGV4KHRoaXMuaW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF+dGhpcy5wcmV2SW5kZXggfHwgdGhpcy5pbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KGluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBUcmFuc2l0aW9uZXIkMSAocHJldiwgbmV4dCwgZGlyLCByZWYpIHtcbiAgICAgICAgdmFyIGNlbnRlciA9IHJlZi5jZW50ZXI7XG4gICAgICAgIHZhciBlYXNpbmcgPSByZWYuZWFzaW5nO1xuICAgICAgICB2YXIgbGlzdCA9IHJlZi5saXN0O1xuXG5cbiAgICAgICAgdmFyIGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XG5cbiAgICAgICAgdmFyIGZyb20gPSBwcmV2XG4gICAgICAgICAgICA/IGdldExlZnQocHJldiwgbGlzdCwgY2VudGVyKVxuICAgICAgICAgICAgOiBnZXRMZWZ0KG5leHQsIGxpc3QsIGNlbnRlcikgKyBvZmZzZXQobmV4dCkud2lkdGggKiBkaXI7XG4gICAgICAgIHZhciB0byA9IG5leHRcbiAgICAgICAgICAgID8gZ2V0TGVmdChuZXh0LCBsaXN0LCBjZW50ZXIpXG4gICAgICAgICAgICA6IGZyb20gKyBvZmZzZXQocHJldikud2lkdGggKiBkaXIgKiAoaXNSdGwgPyAtMSA6IDEpO1xuXG4gICAgICAgIHJldHVybiB7XG5cbiAgICAgICAgICAgIGRpcjogZGlyLFxuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbihkdXJhdGlvbiwgcGVyY2VudCwgbGluZWFyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBwZXJjZW50ID09PSB2b2lkIDAgKSBwZXJjZW50ID0gMDtcblxuXG4gICAgICAgICAgICAgICAgdmFyIHRpbWluZyA9IGxpbmVhciA/ICdsaW5lYXInIDogZWFzaW5nO1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uIC09IE1hdGgucm91bmQoZHVyYXRpb24gKiBjbGFtcChwZXJjZW50LCAtMSwgMSkpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGUocGVyY2VudCk7XG5cbiAgICAgICAgICAgICAgICBwcmV2ICYmIHRoaXMudXBkYXRlVHJhbnNsYXRlcygpO1xuICAgICAgICAgICAgICAgIHBlcmNlbnQgPSBwcmV2ID8gcGVyY2VudCA6IGNsYW1wKHBlcmNlbnQsIDAsIDEpO1xuICAgICAgICAgICAgICAgIHRyaWdnZXJVcGRhdGUkMSh0aGlzLmdldEl0ZW1JbigpLCAnaXRlbWluJywge3BlcmNlbnQ6IHBlcmNlbnQsIGR1cmF0aW9uOiBkdXJhdGlvbiwgdGltaW5nOiB0aW1pbmcsIGRpcjogZGlyfSk7XG4gICAgICAgICAgICAgICAgcHJldiAmJiB0cmlnZ2VyVXBkYXRlJDEodGhpcy5nZXRJdGVtSW4odHJ1ZSksICdpdGVtb3V0Jywge3BlcmNlbnQ6IDEgLSBwZXJjZW50LCBkdXJhdGlvbjogZHVyYXRpb24sIHRpbWluZzogdGltaW5nLCBkaXI6IGRpcn0pO1xuXG4gICAgICAgICAgICAgICAgVHJhbnNpdGlvblxuICAgICAgICAgICAgICAgICAgICAuc3RhcnQobGlzdCwge3RyYW5zZm9ybTogdHJhbnNsYXRlKC10byAqIChpc1J0bCA/IC0xIDogMSksICdweCcpfSwgZHVyYXRpb24sIHRpbWluZylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZGVmZXJyZWQucmVzb2x2ZSwgbm9vcCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRyYW5zaXRpb24uc3RvcChsaXN0KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwobGlzdCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY3NzKGxpc3QsICd0cmFuc2Zvcm0nLCAnJyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmb3J3YXJkOiBmdW5jdGlvbihkdXJhdGlvbiwgcGVyY2VudCkge1xuICAgICAgICAgICAgICAgIGlmICggcGVyY2VudCA9PT0gdm9pZCAwICkgcGVyY2VudCA9IHRoaXMucGVyY2VudCgpO1xuXG4gICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwobGlzdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hvdyhkdXJhdGlvbiwgcGVyY2VudCwgdHJ1ZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQpIHtcblxuICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IHRoaXMuZ2V0RGlzdGFuY2UoKSAqIGRpciAqIChpc1J0bCA/IC0xIDogMSk7XG5cbiAgICAgICAgICAgICAgICBjc3MobGlzdCwgJ3RyYW5zZm9ybScsIHRyYW5zbGF0ZShjbGFtcChcbiAgICAgICAgICAgICAgICAgICAgLXRvICsgKGRpc3RhbmNlIC0gZGlzdGFuY2UgKiBwZXJjZW50KSxcbiAgICAgICAgICAgICAgICAgICAgLWdldFdpZHRoKGxpc3QpLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQobGlzdCkud2lkdGhcbiAgICAgICAgICAgICAgICApICogKGlzUnRsID8gLTEgOiAxKSwgJ3B4JykpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVUcmFuc2xhdGVzKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgICAgICAgICBwZXJjZW50ID0gY2xhbXAocGVyY2VudCwgLTEsIDEpO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyVXBkYXRlJDEodGhpcy5nZXRJdGVtSW4oKSwgJ2l0ZW10cmFuc2xhdGVpbicsIHtwZXJjZW50OiBwZXJjZW50LCBkaXI6IGRpcn0pO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyVXBkYXRlJDEodGhpcy5nZXRJdGVtSW4odHJ1ZSksICdpdGVtdHJhbnNsYXRlb3V0Jywge3BlcmNlbnQ6IDEgLSBwZXJjZW50LCBkaXI6IGRpcn0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKChjc3MobGlzdCwgJ3RyYW5zZm9ybScpLnNwbGl0KCcsJylbNF0gKiAoaXNSdGwgPyAtMSA6IDEpICsgZnJvbSkgLyAodG8gLSBmcm9tKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXREaXN0YW5jZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHRvIC0gZnJvbSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRJdGVtSW46IGZ1bmN0aW9uKG91dCkge1xuICAgICAgICAgICAgICAgIGlmICggb3V0ID09PSB2b2lkIDAgKSBvdXQgPSBmYWxzZTtcblxuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZXMgPSB0aGlzLmdldEFjdGl2ZXMoKTtcbiAgICAgICAgICAgICAgICB2YXIgYWxsID0gc29ydEJ5KHNsaWRlcyhsaXN0KSwgJ29mZnNldExlZnQnKTtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IGluZGV4KGFsbCwgYWN0aXZlc1tkaXIgKiAob3V0ID8gLTEgOiAxKSA+IDAgPyBhY3RpdmVzLmxlbmd0aCAtIDEgOiAwXSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gfmkgJiYgYWxsW2kgKyAocHJldiAmJiAhb3V0ID8gZGlyIDogMCldO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRBY3RpdmVzOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBsZWZ0ID0gZ2V0TGVmdChwcmV2IHx8IG5leHQsIGxpc3QsIGNlbnRlcik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc29ydEJ5KHNsaWRlcyhsaXN0KS5maWx0ZXIoZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzbGlkZUxlZnQgPSBnZXRFbExlZnQoc2xpZGUsIGxpc3QpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xpZGVMZWZ0ID49IGxlZnQgJiYgc2xpZGVMZWZ0ICsgb2Zmc2V0KHNsaWRlKS53aWR0aCA8PSBvZmZzZXQobGlzdCkud2lkdGggKyBsZWZ0O1xuICAgICAgICAgICAgICAgIH0pLCAnb2Zmc2V0TGVmdCcpO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB1cGRhdGVUcmFuc2xhdGVzOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBhY3RpdmVzID0gdGhpcy5nZXRBY3RpdmVzKCk7XG5cbiAgICAgICAgICAgICAgICBzbGlkZXMobGlzdCkuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gaW5jbHVkZXMoYWN0aXZlcywgc2xpZGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJVcGRhdGUkMShzbGlkZSwgKFwiaXRlbXRyYW5zbGF0ZVwiICsgKGlzQWN0aXZlID8gJ2luJyA6ICdvdXQnKSksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnQ6IGlzQWN0aXZlID8gMSA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXI6IHNsaWRlLm9mZnNldExlZnQgPD0gbmV4dC5vZmZzZXRMZWZ0ID8gMSA6IC0xXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRMZWZ0KGVsLCBsaXN0LCBjZW50ZXIpIHtcblxuICAgICAgICB2YXIgbGVmdCA9IGdldEVsTGVmdChlbCwgbGlzdCk7XG5cbiAgICAgICAgcmV0dXJuIGNlbnRlclxuICAgICAgICAgICAgPyBsZWZ0IC0gY2VudGVyRWwoZWwsIGxpc3QpXG4gICAgICAgICAgICA6IE1hdGgubWluKGxlZnQsIGdldE1heChsaXN0KSk7XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNYXgobGlzdCkge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgZ2V0V2lkdGgobGlzdCkgLSBvZmZzZXQobGlzdCkud2lkdGgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdpZHRoKGxpc3QpIHtcbiAgICAgICAgcmV0dXJuIHNsaWRlcyhsaXN0KS5yZWR1Y2UoZnVuY3Rpb24gKHJpZ2h0LCBlbCkgeyByZXR1cm4gb2Zmc2V0KGVsKS53aWR0aCArIHJpZ2h0OyB9LCAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNYXhXaWR0aChsaXN0KSB7XG4gICAgICAgIHJldHVybiBzbGlkZXMobGlzdCkucmVkdWNlKGZ1bmN0aW9uIChyaWdodCwgZWwpIHsgcmV0dXJuIE1hdGgubWF4KHJpZ2h0LCBvZmZzZXQoZWwpLndpZHRoKTsgfSwgMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2VudGVyRWwoZWwsIGxpc3QpIHtcbiAgICAgICAgcmV0dXJuIG9mZnNldChsaXN0KS53aWR0aCAvIDIgLSBvZmZzZXQoZWwpLndpZHRoIC8gMjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFbExlZnQoZWwsIGxpc3QpIHtcbiAgICAgICAgcmV0dXJuIChwb3NpdGlvbihlbCkubGVmdCArIChpc1J0bCA/IG9mZnNldChlbCkud2lkdGggLSBvZmZzZXQobGlzdCkud2lkdGggOiAwKSkgKiAoaXNSdGwgPyAtMSA6IDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyaWdnZXJVcGRhdGUkMShlbCwgdHlwZSwgZGF0YSkge1xuICAgICAgICB0cmlnZ2VyKGVsLCBjcmVhdGVFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UsIGRhdGEpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzbGlkZXMobGlzdCkge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW4obGlzdCk7XG4gICAgfVxuXG4gICAgdmFyIHNsaWRlciA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzcywgU2xpZGVyLCBTbGlkZXJSZWFjdGl2ZV0sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGNlbnRlcjogQm9vbGVhbixcbiAgICAgICAgICAgIHNldHM6IEJvb2xlYW5cbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBjZW50ZXI6IGZhbHNlLFxuICAgICAgICAgICAgc2V0czogZmFsc2UsXG4gICAgICAgICAgICBhdHRySXRlbTogJ3VrLXNsaWRlci1pdGVtJyxcbiAgICAgICAgICAgIHNlbExpc3Q6ICcudWstc2xpZGVyLWl0ZW1zJyxcbiAgICAgICAgICAgIHNlbE5hdjogJy51ay1zbGlkZXItbmF2JyxcbiAgICAgICAgICAgIGNsc0NvbnRhaW5lcjogJ3VrLXNsaWRlci1jb250YWluZXInLFxuICAgICAgICAgICAgVHJhbnNpdGlvbmVyOiBUcmFuc2l0aW9uZXIkMVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGF2Z1dpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0V2lkdGgodGhpcy5saXN0KSAvIHRoaXMubGVuZ3RoO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZmluaXRlOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmluaXRlID0gcmVmLmZpbml0ZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmaW5pdGUgfHwgTWF0aC5jZWlsKGdldFdpZHRoKHRoaXMubGlzdCkpIDwgb2Zmc2V0KHRoaXMubGlzdCkud2lkdGggKyBnZXRNYXhXaWR0aCh0aGlzLmxpc3QpICsgdGhpcy5jZW50ZXI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBtYXhJbmRleDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZmluaXRlIHx8IHRoaXMuY2VudGVyICYmICF0aGlzLnNldHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jZW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhc3QodGhpcy5zZXRzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjc3ModGhpcy5zbGlkZXMsICdvcmRlcicsICcnKTtcblxuICAgICAgICAgICAgICAgIHZhciBtYXggPSBnZXRNYXgodGhpcy5saXN0KTtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0RWxMZWZ0KHRoaXMubGlzdC5jaGlsZHJlbltpXSwgdGhpcy5saXN0KSA8IG1heCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKGkgKyAxLCB0aGlzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzZXRzOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgc2V0cyA9IHJlZi5zZXRzO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBvZmZzZXQodGhpcy5saXN0KS53aWR0aCAvICh0aGlzLmNlbnRlciA/IDIgOiAxKTtcblxuICAgICAgICAgICAgICAgIHZhciBsZWZ0ID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgbGVmdENlbnRlciA9IHdpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZUxlZnQgPSAwO1xuXG4gICAgICAgICAgICAgICAgc2V0cyA9IHNldHMgJiYgdGhpcy5zbGlkZXMucmVkdWNlKGZ1bmN0aW9uIChzZXRzLCBzbGlkZSwgaSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciByZWYgPSBvZmZzZXQoc2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGVXaWR0aCA9IHJlZi53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlUmlnaHQgPSBzbGlkZUxlZnQgKyBzbGlkZVdpZHRoO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZVJpZ2h0ID4gbGVmdCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMkMS5jZW50ZXIgJiYgaSA+IHRoaXMkMS5tYXhJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzJDEubWF4SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5jbHVkZXMoc2V0cywgaSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbXAgPSB0aGlzJDEuc2xpZGVzW2kgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcyQxLmNlbnRlciAmJiBjbXAgJiYgc2xpZGVXaWR0aCA8IGxlZnRDZW50ZXIgLSBvZmZzZXQoY21wKS53aWR0aCAvIDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdENlbnRlciAtPSBzbGlkZVdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRDZW50ZXIgPSB3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0cy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gc2xpZGVMZWZ0ICsgd2lkdGggKyAodGhpcyQxLmNlbnRlciA/IHNsaWRlV2lkdGggLyAyIDogMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzbGlkZUxlZnQgKz0gc2xpZGVXaWR0aDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0cztcblxuICAgICAgICAgICAgICAgIH0sIFtdKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAhaXNFbXB0eShzZXRzKSAmJiBzZXRzO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2l0aW9uT3B0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyOiB0aGlzLmNlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgbGlzdDogdGhpcy5saXN0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLiRlbCwgdGhpcy5jbHNDb250YWluZXIsICEkKChcIi5cIiArICh0aGlzLmNsc0NvbnRhaW5lcikpLCB0aGlzLiRlbCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICQkKChcIltcIiArICh0aGlzLmF0dHJJdGVtKSArIFwiXSxbZGF0YS1cIiArICh0aGlzLmF0dHJJdGVtKSArIFwiXVwiKSwgdGhpcy4kZWwpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGRhdGEoZWwsIHRoaXMkMS5hdHRySXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS5tYXhJbmRleCAmJiB0b2dnbGVDbGFzcyhlbCwgJ3VrLWhpZGRlbicsIGlzTnVtZXJpYyhpbmRleCkgJiYgKHRoaXMkMS5zZXRzICYmICFpbmNsdWRlcyh0aGlzJDEuc2V0cywgdG9GbG9hdChpbmRleCkpIHx8IGluZGV4ID4gdGhpcyQxLm1heEluZGV4KSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggJiYgIXRoaXMuZHJhZ2dpbmcgJiYgIXRoaXMuc3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVvcmRlcigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2xhdGUoMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZXMgPSB0aGlzLl9nZXRUcmFuc2l0aW9uZXIodGhpcy5pbmRleCkuZ2V0QWN0aXZlcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVzLmZvckVhY2goZnVuY3Rpb24gKHNsaWRlKSB7IHJldHVybiB0b2dnbGVDbGFzcyhzbGlkZSwgdGhpcyQxLmNsc0FjdGl2ZSwgaW5jbHVkZXMoYWN0aXZlcywgc2xpZGUpKTsgfSk7XG4gICAgICAgICAgICAgICAgKCF0aGlzLnNldHMgfHwgaW5jbHVkZXModGhpcy5zZXRzLCB0b0Zsb2F0KHRoaXMuaW5kZXgpKSkgJiYgdGhpcy5zbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGUpIHsgcmV0dXJuIHRvZ2dsZUNsYXNzKHNsaWRlLCB0aGlzJDEuY2xzQWN0aXZhdGVkLCBpbmNsdWRlcyhhY3RpdmVzLCBzbGlkZSkpOyB9KTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IHtcblxuICAgICAgICAgICAgYmVmb3JlaXRlbXNob3c6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kcmFnZ2luZyAmJiB0aGlzLnNldHMgJiYgdGhpcy5zdGFjay5sZW5ndGggPCAyICYmICFpbmNsdWRlcyh0aGlzLnNldHMsIHRoaXMuaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSB0aGlzLmdldFZhbGlkSW5kZXgoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IE1hdGguYWJzKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4XG4gICAgICAgICAgICAgICAgICAgIC0gdGhpcy5wcmV2SW5kZXhcbiAgICAgICAgICAgICAgICAgICAgKyAodGhpcy5kaXIgPiAwICYmIHRoaXMuaW5kZXggPCB0aGlzLnByZXZJbmRleCB8fCB0aGlzLmRpciA8IDAgJiYgdGhpcy5pbmRleCA+IHRoaXMucHJldkluZGV4ID8gKHRoaXMubWF4SW5kZXggKyAxKSAqIHRoaXMuZGlyIDogMClcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRyYWdnaW5nICYmIGRpZmYgPiAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaWZmOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2suc3BsaWNlKDEsIDAsIHRoaXMuZGlyID4gMCA/ICduZXh0JyA6ICdwcmV2aW91cycpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IHNwZWVkVXAodGhpcy5hdmdXaWR0aCAvIHRoaXMudmVsb2NpdHkpXG4gICAgICAgICAgICAgICAgICAgICogKG9mZnNldChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyIDwgMCB8fCAhdGhpcy5zbGlkZXNbdGhpcy5wcmV2SW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnNsaWRlc1t0aGlzLmluZGV4XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5zbGlkZXNbdGhpcy5wcmV2SW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICkud2lkdGggLyB0aGlzLmF2Z1dpZHRoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMucmVvcmRlcigpO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpdGVtc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgfnRoaXMucHJldkluZGV4ICYmIGFkZENsYXNzKHRoaXMuX2dldFRyYW5zaXRpb25lcigpLmdldEl0ZW1JbigpLCB0aGlzLmNsc0FjdGl2ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHJlb3JkZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maW5pdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuc2xpZGVzLCAnb3JkZXInLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmRpciA+IDAgJiYgdGhpcy5zbGlkZXNbdGhpcy5wcmV2SW5kZXhdID8gdGhpcy5wcmV2SW5kZXggOiB0aGlzLmluZGV4O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGUsIGkpIHsgcmV0dXJuIGNzcyhzbGlkZSwgJ29yZGVyJywgdGhpcyQxLmRpciA+IDAgJiYgaSA8IGluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcyQxLmRpciA8IDAgJiYgaSA+PSB0aGlzJDEuaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgICAgICAgICApOyB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jZW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gdGhpcy5zbGlkZXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IG9mZnNldCh0aGlzLmxpc3QpLndpZHRoIC8gMiAtIG9mZnNldChuZXh0KS53aWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgdmFyIGogPSAwO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKHdpZHRoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGVJbmRleCA9IHRoaXMuZ2V0SW5kZXgoLS1qICsgaW5kZXgsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gdGhpcy5zbGlkZXNbc2xpZGVJbmRleF07XG5cbiAgICAgICAgICAgICAgICAgICAgY3NzKHNsaWRlLCAnb3JkZXInLCBzbGlkZUluZGV4ID4gaW5kZXggPyAtMiA6IC0xKTtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggLT0gb2Zmc2V0KHNsaWRlKS53aWR0aDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldFZhbGlkSW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBwcmV2SW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIGluZGV4ID09PSB2b2lkIDAgKSBpbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICAgICAgaWYgKCBwcmV2SW5kZXggPT09IHZvaWQgMCApIHByZXZJbmRleCA9IHRoaXMucHJldkluZGV4O1xuXG5cbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMuZ2V0SW5kZXgoaW5kZXgsIHByZXZJbmRleCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2V0cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHByZXY7XG5cbiAgICAgICAgICAgICAgICBkbyB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGluY2x1ZGVzKHRoaXMuc2V0cywgaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwcmV2ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5nZXRJbmRleChpbmRleCArIHRoaXMuZGlyLCBwcmV2SW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoaW5kZXggIT09IHByZXYpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgc2xpZGVyUGFyYWxsYXggPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbUGFyYWxsYXhdLFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHNlbEl0ZW06ICchbGknXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgaXRlbTogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsSXRlbSA9IHJlZi5zZWxJdGVtO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5KHNlbEl0ZW0sICRlbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2l0ZW1zaG93bicsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCB0aGlzLmdldENzcyguNSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdpdGVtaW4gaXRlbW91dCcsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZl9kZXRhaWwgPSByZWYuZGV0YWlsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGVyY2VudCA9IHJlZl9kZXRhaWwucGVyY2VudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gcmVmX2RldGFpbC5kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWluZyA9IHJlZl9kZXRhaWwudGltaW5nO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlyID0gcmVmX2RldGFpbC5kaXI7XG5cblxuICAgICAgICAgICAgICAgICAgICBUcmFuc2l0aW9uLmNhbmNlbCh0aGlzLiRlbCk7XG4gICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgdGhpcy5nZXRDc3MoZ2V0Q3VycmVudCh0eXBlLCBkaXIsIHBlcmNlbnQpKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5zdGFydCh0aGlzLiRlbCwgdGhpcy5nZXRDc3MoaXNJbih0eXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAuNVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBkaXIgPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwXG4gICAgICAgICAgICAgICAgICAgICksIGR1cmF0aW9uLCB0aW1pbmcpLmNhdGNoKG5vb3ApO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICd0cmFuc2l0aW9uY2FuY2VsZWQgdHJhbnNpdGlvbmVuZCcsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwodGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdpdGVtdHJhbnNsYXRlaW4gaXRlbXRyYW5zbGF0ZW91dCcsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZl9kZXRhaWwgPSByZWYuZGV0YWlsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGVyY2VudCA9IHJlZl9kZXRhaWwucGVyY2VudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpciA9IHJlZl9kZXRhaWwuZGlyO1xuXG4gICAgICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uY2FuY2VsKHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCB0aGlzLmdldENzcyhnZXRDdXJyZW50KHR5cGUsIGRpciwgcGVyY2VudCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGlzSW4odHlwZSkge1xuICAgICAgICByZXR1cm4gZW5kc1dpdGgodHlwZSwgJ2luJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q3VycmVudCh0eXBlLCBkaXIsIHBlcmNlbnQpIHtcblxuICAgICAgICBwZXJjZW50IC89IDI7XG5cbiAgICAgICAgcmV0dXJuICFpc0luKHR5cGUpXG4gICAgICAgICAgICA/IGRpciA8IDBcbiAgICAgICAgICAgICAgICA/IHBlcmNlbnRcbiAgICAgICAgICAgICAgICA6IDEgLSBwZXJjZW50XG4gICAgICAgICAgICA6IGRpciA8IDBcbiAgICAgICAgICAgICAgICA/IDEgLSBwZXJjZW50XG4gICAgICAgICAgICAgICAgOiBwZXJjZW50O1xuICAgIH1cblxuICAgIHZhciBBbmltYXRpb25zJDIgPSBhc3NpZ24oe30sIEFuaW1hdGlvbnMsIHtcblxuICAgICAgICBmYWRlOiB7XG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHtvcGFjaXR5OiAwLCB6SW5kZXg6IDB9LFxuICAgICAgICAgICAgICAgICAgICB7ekluZGV4OiAtMX1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxIC0gY3NzKGN1cnJlbnQsICdvcGFjaXR5Jyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB7b3BhY2l0eTogMSAtIHBlcmNlbnQsIHpJbmRleDogMH0sXG4gICAgICAgICAgICAgICAgICAgIHt6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBzY2FsZToge1xuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB7b3BhY2l0eTogMCwgdHJhbnNmb3JtOiBzY2FsZTNkKDEgKyAuNSksIHpJbmRleDogMH0sXG4gICAgICAgICAgICAgICAgICAgIHt6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBwZXJjZW50OiBmdW5jdGlvbihjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgLSBjc3MoY3VycmVudCwgJ29wYWNpdHknKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24ocGVyY2VudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHtvcGFjaXR5OiAxIC0gcGVyY2VudCwgdHJhbnNmb3JtOiBzY2FsZTNkKDEgKyAuNSAqIHBlcmNlbnQpLCB6SW5kZXg6IDB9LFxuICAgICAgICAgICAgICAgICAgICB7ekluZGV4OiAtMX1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgcHVsbDoge1xuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbihkaXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlyIDwgMFxuICAgICAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgzMCksIHpJbmRleDogLTF9LFxuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKCksIHpJbmRleDogMH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMTAwKSwgekluZGV4OiAwfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgpLCB6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oY3VycmVudCwgbmV4dCwgZGlyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpciA8IDBcbiAgICAgICAgICAgICAgICAgICAgPyAxIC0gdHJhbnNsYXRlZChuZXh0KVxuICAgICAgICAgICAgICAgICAgICA6IHRyYW5zbGF0ZWQoY3VycmVudCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQsIGRpcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkaXIgPCAwXG4gICAgICAgICAgICAgICAgICAgID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKDMwICogcGVyY2VudCksIHpJbmRleDogLTF9LFxuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKC0xMDAgKiAoMSAtIHBlcmNlbnQpKSwgekluZGV4OiAwfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIDogW1xuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKC1wZXJjZW50ICogMTAwKSwgekluZGV4OiAwfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgzMCAqICgxIC0gcGVyY2VudCkpLCB6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgcHVzaDoge1xuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbihkaXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlyIDwgMFxuICAgICAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgxMDApLCB6SW5kZXg6IDB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKCksIHpJbmRleDogLTF9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoLTMwKSwgekluZGV4OiAtMX0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoKSwgekluZGV4OiAwfVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oY3VycmVudCwgbmV4dCwgZGlyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpciA+IDBcbiAgICAgICAgICAgICAgICAgICAgPyAxIC0gdHJhbnNsYXRlZChuZXh0KVxuICAgICAgICAgICAgICAgICAgICA6IHRyYW5zbGF0ZWQoY3VycmVudCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQsIGRpcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkaXIgPCAwXG4gICAgICAgICAgICAgICAgICAgID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKHBlcmNlbnQgKiAxMDApLCB6SW5kZXg6IDB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKC0zMCAqICgxIC0gcGVyY2VudCkpLCB6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIDogW1xuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKC0zMCAqIHBlcmNlbnQpLCB6SW5kZXg6IC0xfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgxMDAgKiAoMSAtIHBlcmNlbnQpKSwgekluZGV4OiAwfVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgdmFyIHNsaWRlc2hvdyA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzcywgU2xpZGVzaG93LCBTbGlkZXJSZWFjdGl2ZV0sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIHJhdGlvOiBTdHJpbmcsXG4gICAgICAgICAgICBtaW5IZWlnaHQ6IE51bWJlcixcbiAgICAgICAgICAgIG1heEhlaWdodDogTnVtYmVyXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgcmF0aW86ICcxNjo5JyxcbiAgICAgICAgICAgIG1pbkhlaWdodDogZmFsc2UsXG4gICAgICAgICAgICBtYXhIZWlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgc2VsTGlzdDogJy51ay1zbGlkZXNob3ctaXRlbXMnLFxuICAgICAgICAgICAgYXR0ckl0ZW06ICd1ay1zbGlkZXNob3ctaXRlbScsXG4gICAgICAgICAgICBzZWxOYXY6ICcudWstc2xpZGVzaG93LW5hdicsXG4gICAgICAgICAgICBBbmltYXRpb25zOiBBbmltYXRpb25zJDJcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5yYXRpby5zcGxpdCgnOicpLm1hcChOdW1iZXIpO1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmWzFdO1xuXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0ICogdGhpcy5saXN0Lm9mZnNldFdpZHRoIC8gd2lkdGggfHwgMDtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1pbkhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLm1heCh0aGlzLm1pbkhlaWdodCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXhIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5taW4odGhpcy5tYXhIZWlnaHQsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtoZWlnaHQ6IGhlaWdodCAtIGJveE1vZGVsQWRqdXN0KHRoaXMubGlzdCwgJ2hlaWdodCcsICdjb250ZW50LWJveCcpfTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmLmhlaWdodDtcblxuICAgICAgICAgICAgICAgIGhlaWdodCA+IDAgJiYgY3NzKHRoaXMubGlzdCwgJ21pbkhlaWdodCcsIGhlaWdodCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIHNvcnRhYmxlID0ge1xuXG4gICAgICAgIG1peGluczogW0NsYXNzLCBBbmltYXRlXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgZ3JvdXA6IFN0cmluZyxcbiAgICAgICAgICAgIHRocmVzaG9sZDogTnVtYmVyLFxuICAgICAgICAgICAgY2xzSXRlbTogU3RyaW5nLFxuICAgICAgICAgICAgY2xzUGxhY2Vob2xkZXI6IFN0cmluZyxcbiAgICAgICAgICAgIGNsc0RyYWc6IFN0cmluZyxcbiAgICAgICAgICAgIGNsc0RyYWdTdGF0ZTogU3RyaW5nLFxuICAgICAgICAgICAgY2xzQmFzZTogU3RyaW5nLFxuICAgICAgICAgICAgY2xzTm9EcmFnOiBTdHJpbmcsXG4gICAgICAgICAgICBjbHNFbXB0eTogU3RyaW5nLFxuICAgICAgICAgICAgY2xzQ3VzdG9tOiBTdHJpbmcsXG4gICAgICAgICAgICBoYW5kbGU6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGdyb3VwOiBmYWxzZSxcbiAgICAgICAgICAgIHRocmVzaG9sZDogNSxcbiAgICAgICAgICAgIGNsc0l0ZW06ICd1ay1zb3J0YWJsZS1pdGVtJyxcbiAgICAgICAgICAgIGNsc1BsYWNlaG9sZGVyOiAndWstc29ydGFibGUtcGxhY2Vob2xkZXInLFxuICAgICAgICAgICAgY2xzRHJhZzogJ3VrLXNvcnRhYmxlLWRyYWcnLFxuICAgICAgICAgICAgY2xzRHJhZ1N0YXRlOiAndWstZHJhZycsXG4gICAgICAgICAgICBjbHNCYXNlOiAndWstc29ydGFibGUnLFxuICAgICAgICAgICAgY2xzTm9EcmFnOiAndWstc29ydGFibGUtbm9kcmFnJyxcbiAgICAgICAgICAgIGNsc0VtcHR5OiAndWstc29ydGFibGUtZW1wdHknLFxuICAgICAgICAgICAgY2xzQ3VzdG9tOiAnJyxcbiAgICAgICAgICAgIGhhbmRsZTogZmFsc2UsXG4gICAgICAgICAgICBwb3M6IHt9XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgWydpbml0JywgJ3N0YXJ0JywgJ21vdmUnLCAnZW5kJ10uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGZuID0gdGhpcyQxW2tleV07XG4gICAgICAgICAgICAgICAgdGhpcyQxW2tleV0gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBhc3NpZ24odGhpcyQxLnBvcywgZ2V0RXZlbnRQb3MoZSkpO1xuICAgICAgICAgICAgICAgICAgICBmbihlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiB7XG5cbiAgICAgICAgICAgIG5hbWU6IHBvaW50ZXJEb3duLFxuICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgICAgICBoYW5kbGVyOiAnaW5pdCdcblxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIHRhcmdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLiRlbC50Qm9kaWVzIHx8IFt0aGlzLiRlbF0pWzBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaXRlbXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbih0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc0VtcHR5OiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNFbXB0eSh0aGlzLml0ZW1zKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGVtcHR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMudGFyZ2V0LCB0aGlzLmNsc0VtcHR5LCBlbXB0eSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYW5kbGVzOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHJlZiwgZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZSA9IHJlZi5oYW5kbGU7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZSA/ICQkKGhhbmRsZSwgZWwpIDogdGhpcy5pdGVtcztcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGhhbmRsZXMsIHByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHByZXYsIHt0b3VjaEFjdGlvbjogJycsIHVzZXJTZWxlY3Q6ICcnfSk7XG4gICAgICAgICAgICAgICAgICAgIGNzcyhoYW5kbGVzLCB7dG91Y2hBY3Rpb246IGhhc1RvdWNoID8gJ25vbmUnIDogJycsIHVzZXJTZWxlY3Q6ICdub25lJ30pOyAvLyB0b3VjaEFjdGlvbiBzZXQgdG8gJ25vbmUnIGNhdXNlcyBhIHBlcmZvcm1hbmNlIGRyb3AgaW4gQ2hyb21lIDgwXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRyYWcgfHwgIXBhcmVudCh0aGlzLnBsYWNlaG9sZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gY2xhbXAgdG8gdmlld3BvcnRcbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5wb3M7XG4gICAgICAgICAgICAgICAgdmFyIHggPSByZWYueDtcbiAgICAgICAgICAgICAgICB2YXIgeSA9IHJlZi55O1xuICAgICAgICAgICAgICAgIHZhciByZWYkMSA9IHRoaXMub3JpZ2luO1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXRUb3AgPSByZWYkMS5vZmZzZXRUb3A7XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldExlZnQgPSByZWYkMS5vZmZzZXRMZWZ0O1xuICAgICAgICAgICAgICAgIHZhciByZWYkMiA9IHRoaXMuZHJhZztcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0SGVpZ2h0ID0gcmVmJDIub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXRXaWR0aCA9IHJlZiQyLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgIHZhciByZWYkMyA9IG9mZnNldCh3aW5kb3cpO1xuICAgICAgICAgICAgICAgIHZhciByaWdodCA9IHJlZiQzLnJpZ2h0O1xuICAgICAgICAgICAgICAgIHZhciBib3R0b20gPSByZWYkMy5ib3R0b207XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XG5cbiAgICAgICAgICAgICAgICBjc3ModGhpcy5kcmFnLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogY2xhbXAoeSAtIG9mZnNldFRvcCwgMCwgYm90dG9tIC0gb2Zmc2V0SGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogY2xhbXAoeCAtIG9mZnNldExlZnQsIDAsIHJpZ2h0IC0gb2Zmc2V0V2lkdGgpXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc29ydGFibGUgPSB0aGlzLmdldFNvcnRhYmxlKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzID0gdGhpcy5nZXRTb3J0YWJsZSh0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB2YXIgbW92ZSA9IHNvcnRhYmxlICE9PSBwcmV2aW91cztcblxuICAgICAgICAgICAgICAgIGlmICghc29ydGFibGUgfHwgd2l0aGluKHRhcmdldCwgdGhpcy5wbGFjZWhvbGRlcikgfHwgbW92ZSAmJiAoIXNvcnRhYmxlLmdyb3VwIHx8IHNvcnRhYmxlLmdyb3VwICE9PSBwcmV2aW91cy5ncm91cCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHNvcnRhYmxlLnRhcmdldCA9PT0gdGFyZ2V0LnBhcmVudE5vZGUgJiYgdGFyZ2V0IHx8IHNvcnRhYmxlLml0ZW1zLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gd2l0aGluKHRhcmdldCwgZWxlbWVudCk7IH0pWzBdO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMucmVtb3ZlKHRoaXMucGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc29ydGFibGUuaW5zZXJ0KHRoaXMucGxhY2Vob2xkZXIsIHRhcmdldCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWluY2x1ZGVzKHRoaXMudG91Y2hlZCwgc29ydGFibGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG91Y2hlZC5wdXNoKHNvcnRhYmxlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydtb3ZlJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHZhciBidXR0b24gPSBlLmJ1dHRvbjtcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFByZXZlbnRlZCA9IGUuZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5pdGVtcy5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7IHJldHVybiB3aXRoaW4odGFyZ2V0LCBlbCk7IH0pO1xuICAgICAgICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IHJlZlswXTtcblxuICAgICAgICAgICAgICAgIGlmICghcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgICAgICAgfHwgZGVmYXVsdFByZXZlbnRlZFxuICAgICAgICAgICAgICAgICAgICB8fCBidXR0b24gPiAwXG4gICAgICAgICAgICAgICAgICAgIHx8IGlzSW5wdXQodGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICB8fCB3aXRoaW4odGFyZ2V0LCAoXCIuXCIgKyAodGhpcy5jbHNOb0RyYWcpKSlcbiAgICAgICAgICAgICAgICAgICAgfHwgdGhpcy5oYW5kbGUgJiYgIXdpdGhpbih0YXJnZXQsIHRoaXMuaGFuZGxlKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50b3VjaGVkID0gW3RoaXNdO1xuICAgICAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgICAgICAgICAgICB0aGlzLm9yaWdpbiA9IGFzc2lnbih7dGFyZ2V0OiB0YXJnZXQsIGluZGV4OiBpbmRleChwbGFjZWhvbGRlcil9LCB0aGlzLnBvcyk7XG5cbiAgICAgICAgICAgICAgICBvbihkb2N1bWVudCwgcG9pbnRlck1vdmUsIHRoaXMubW92ZSk7XG4gICAgICAgICAgICAgICAgb24oZG9jdW1lbnQsIHBvaW50ZXJVcCwgdGhpcy5lbmQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0KGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuZHJhZyA9IGFwcGVuZERyYWcodGhpcy4kY29udGFpbmVyLCB0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5wbGFjZWhvbGRlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICB2YXIgbGVmdCA9IHJlZi5sZWZ0O1xuICAgICAgICAgICAgICAgIHZhciB0b3AgPSByZWYudG9wO1xuICAgICAgICAgICAgICAgIGFzc2lnbih0aGlzLm9yaWdpbiwge29mZnNldExlZnQ6IHRoaXMucG9zLnggLSBsZWZ0LCBvZmZzZXRUb3A6IHRoaXMucG9zLnkgLSB0b3B9KTtcblxuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuZHJhZywgdGhpcy5jbHNEcmFnLCB0aGlzLmNsc0N1c3RvbSk7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy5wbGFjZWhvbGRlciwgdGhpcy5jbHNQbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy5pdGVtcywgdGhpcy5jbHNJdGVtKTtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuY2xzRHJhZ1N0YXRlKTtcblxuICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdzdGFydCcsIFt0aGlzLCB0aGlzLnBsYWNlaG9sZGVyXSk7XG5cbiAgICAgICAgICAgICAgICB0cmFja1Njcm9sbCh0aGlzLnBvcyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm1vdmUoZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBtb3ZlOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kcmFnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ21vdmUnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKHRoaXMucG9zLnggLSB0aGlzLm9yaWdpbi54KSA+IHRoaXMudGhyZXNob2xkIHx8IE1hdGguYWJzKHRoaXMucG9zLnkgLSB0aGlzLm9yaWdpbi55KSA+IHRoaXMudGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQoZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBlbmQ6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgIG9mZihkb2N1bWVudCwgcG9pbnRlck1vdmUsIHRoaXMubW92ZSk7XG4gICAgICAgICAgICAgICAgb2ZmKGRvY3VtZW50LCBwb2ludGVyVXAsIHRoaXMuZW5kKTtcbiAgICAgICAgICAgICAgICBvZmYod2luZG93LCAnc2Nyb2xsJywgdGhpcy5zY3JvbGwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRyYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gJ3RvdWNoZW5kJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuY2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB1bnRyYWNrU2Nyb2xsKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc29ydGFibGUgPSB0aGlzLmdldFNvcnRhYmxlKHRoaXMucGxhY2Vob2xkZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMgPT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9yaWdpbi5pbmRleCAhPT0gaW5kZXgodGhpcy5wbGFjZWhvbGRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdtb3ZlZCcsIFt0aGlzLCB0aGlzLnBsYWNlaG9sZGVyXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHNvcnRhYmxlLiRlbCwgJ2FkZGVkJywgW3NvcnRhYmxlLCB0aGlzLnBsYWNlaG9sZGVyXSk7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdyZW1vdmVkJywgW3RoaXMsIHRoaXMucGxhY2Vob2xkZXJdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAnc3RvcCcsIFt0aGlzLCB0aGlzLnBsYWNlaG9sZGVyXSk7XG5cbiAgICAgICAgICAgICAgICByZW1vdmUodGhpcy5kcmFnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWcgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzZXMgPSB0aGlzLnRvdWNoZWQubWFwKGZ1bmN0aW9uIChzb3J0YWJsZSkgeyByZXR1cm4gKChzb3J0YWJsZS5jbHNQbGFjZWhvbGRlcikgKyBcIiBcIiArIChzb3J0YWJsZS5jbHNJdGVtKSk7IH0pLmpvaW4oJyAnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvdWNoZWQuZm9yRWFjaChmdW5jdGlvbiAoc29ydGFibGUpIHsgcmV0dXJuIHJlbW92ZUNsYXNzKHNvcnRhYmxlLml0ZW1zLCBjbGFzc2VzKTsgfSk7XG5cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuY2xzRHJhZ1N0YXRlKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaW5zZXJ0OiBmdW5jdGlvbihlbGVtZW50LCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy5pdGVtcywgdGhpcy5jbHNJdGVtKTtcblxuICAgICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdpdGhpbihlbGVtZW50LCB0aGlzJDEudGFyZ2V0KSB8fCBpc1ByZWRlY2Vzc29yKGVsZW1lbnQsIHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUodGFyZ2V0LCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXIodGFyZ2V0LCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kKHRoaXMkMS50YXJnZXQsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZShpbnNlcnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluc2VydCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihlbGVtZW50KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXdpdGhpbihlbGVtZW50LCB0aGlzLnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKGVsZW1lbnQpOyB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRTb3J0YWJsZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50ICYmICh0aGlzLiRnZXRDb21wb25lbnQoZWxlbWVudCwgJ3NvcnRhYmxlJykgfHwgdGhpcy5nZXRTb3J0YWJsZShlbGVtZW50LnBhcmVudE5vZGUpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaXNQcmVkZWNlc3NvcihlbGVtZW50LCB0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSA9PT0gdGFyZ2V0LnBhcmVudE5vZGUgJiYgaW5kZXgoZWxlbWVudCkgPiBpbmRleCh0YXJnZXQpO1xuICAgIH1cblxuICAgIHZhciB0cmFja1RpbWVyO1xuICAgIGZ1bmN0aW9uIHRyYWNrU2Nyb2xsKHBvcykge1xuXG4gICAgICAgIHZhciBsYXN0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdHJhY2tUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgdmFyIHggPSBwb3MueDtcbiAgICAgICAgICAgIHZhciB5ID0gcG9zLnk7XG4gICAgICAgICAgICB5ICs9IHdpbmRvdy5wYWdlWU9mZnNldDtcblxuICAgICAgICAgICAgdmFyIGRpc3QgPSAoRGF0ZS5ub3coKSAtIGxhc3QpICogLjM7XG4gICAgICAgICAgICBsYXN0ID0gRGF0ZS5ub3coKTtcblxuICAgICAgICAgICAgc2Nyb2xsUGFyZW50cyhkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHgsIHBvcy55KSkuc29tZShmdW5jdGlvbiAoc2Nyb2xsRWwpIHtcblxuICAgICAgICAgICAgICAgIHZhciBzY3JvbGwgPSBzY3JvbGxFbC5zY3JvbGxUb3A7XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbEhlaWdodCA9IHNjcm9sbEVsLnNjcm9sbEhlaWdodDtcblxuICAgICAgICAgICAgICAgIHZhciByZWYgPSBvZmZzZXQoZ2V0Vmlld3BvcnQoc2Nyb2xsRWwpKTtcbiAgICAgICAgICAgICAgICB2YXIgdG9wID0gcmVmLnRvcDtcbiAgICAgICAgICAgICAgICB2YXIgYm90dG9tID0gcmVmLmJvdHRvbTtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmLmhlaWdodDtcblxuICAgICAgICAgICAgICAgIGlmICh0b3AgPCB5ICYmIHRvcCArIDMwID4geSkge1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGwgLT0gZGlzdDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJvdHRvbSA+IHkgJiYgYm90dG9tIC0gMzAgPCB5KSB7XG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbCArPSBkaXN0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsID4gMCAmJiBzY3JvbGwgPCBzY3JvbGxIZWlnaHQgLSBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wKHNjcm9sbEVsLCBzY3JvbGwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sIDE1KTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVudHJhY2tTY3JvbGwoKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodHJhY2tUaW1lcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwZW5kRHJhZyhjb250YWluZXIsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGNsb25lID0gYXBwZW5kKGNvbnRhaW5lciwgZWxlbWVudC5vdXRlckhUTUwucmVwbGFjZSgvKF48KSg/OmxpfHRyKXwoPzpsaXx0cikoXFwvPiQpL2csICckMWRpdiQyJykpO1xuXG4gICAgICAgIGF0dHIoY2xvbmUsICdzdHlsZScsICgoYXR0cihjbG9uZSwgJ3N0eWxlJykpICsgXCI7bWFyZ2luOjAhaW1wb3J0YW50XCIpKTtcblxuICAgICAgICBjc3MoY2xvbmUsIGFzc2lnbih7XG4gICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCxcbiAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgICB9LCBjc3MoZWxlbWVudCwgWydwYWRkaW5nTGVmdCcsICdwYWRkaW5nUmlnaHQnLCAncGFkZGluZ1RvcCcsICdwYWRkaW5nQm90dG9tJ10pKSk7XG5cbiAgICAgICAgaGVpZ2h0KGNsb25lLmZpcnN0RWxlbWVudENoaWxkLCBoZWlnaHQoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkpO1xuXG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG5cbiAgICB2YXIgb2JqJDE7XG5cbiAgICB2YXIgYWN0aXZlcyA9IFtdO1xuXG4gICAgdmFyIHRvb2x0aXAgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbQ29udGFpbmVyLCBUb2dnbGFibGUsIFBvc2l0aW9uXSxcblxuICAgICAgICBhcmdzOiAndGl0bGUnLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBkZWxheTogTnVtYmVyLFxuICAgICAgICAgICAgdGl0bGU6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHBvczogJ3RvcCcsXG4gICAgICAgICAgICB0aXRsZTogJycsXG4gICAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogWyd1ay1hbmltYXRpb24tc2NhbGUtdXAnXSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAxMDAsXG4gICAgICAgICAgICBjbHM6ICd1ay1hY3RpdmUnLFxuICAgICAgICAgICAgY2xzUG9zOiAndWstdG9vbHRpcCdcbiAgICAgICAgfSxcblxuICAgICAgICBiZWZvcmVDb25uZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhc1RpdGxlID0gaGFzQXR0cih0aGlzLiRlbCwgJ3RpdGxlJyk7XG4gICAgICAgICAgICBhdHRyKHRoaXMuJGVsLCB7dGl0bGU6ICcnLCAnYXJpYS1leHBhbmRlZCc6IGZhbHNlfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgYXR0cih0aGlzLiRlbCwge3RpdGxlOiB0aGlzLl9oYXNUaXRsZSA/IHRoaXMudGl0bGUgOiBudWxsLCAnYXJpYS1leHBhbmRlZCc6IG51bGx9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSgpIHx8ICF0aGlzLnRpdGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhY3RpdmVzLmZvckVhY2goZnVuY3Rpb24gKGFjdGl2ZSkgeyByZXR1cm4gYWN0aXZlLmhpZGUoKTsgfSk7XG4gICAgICAgICAgICAgICAgYWN0aXZlcy5wdXNoKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fdW5iaW5kID0gb24oZG9jdW1lbnQsIHBvaW50ZXJVcCwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuICF3aXRoaW4oZS50YXJnZXQsIHRoaXMkMS4kZWwpICYmIHRoaXMkMS5oaWRlKCk7IH0pO1xuXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc2hvd1RpbWVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dUaW1lciA9IHNldFRpbWVvdXQodGhpcy5fc2hvdywgdGhpcy5kZWxheSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoaWRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlKCkgfHwgbWF0Y2hlcyh0aGlzLiRlbCwgJ2lucHV0OmZvY3VzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlRWxlbWVudCh0aGlzLnRvb2x0aXAsIGZhbHNlLCBmYWxzZSkudGhlbihmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlcy5zcGxpY2UoYWN0aXZlcy5pbmRleE9mKHRoaXMkMSksIDEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzJDEuc2hvd1RpbWVyKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzJDEudG9vbHRpcCA9IHJlbW92ZSh0aGlzJDEudG9vbHRpcCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS5fdW5iaW5kKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcCA9IGFwcGVuZCh0aGlzLmNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICAgICAgKFwiPGRpdiBjbGFzcz1cXFwiXCIgKyAodGhpcy5jbHNQb3MpICsgXCJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJcIiArICh0aGlzLmNsc1BvcykgKyBcIi1pbm5lclxcXCI+XCIgKyAodGhpcy50aXRsZSkgKyBcIjwvZGl2PiA8L2Rpdj5cIilcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgb24odGhpcy50b29sdGlwLCAndG9nZ2xlZCcsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlZCA9IHRoaXMkMS5pc1RvZ2dsZWQodGhpcyQxLnRvb2x0aXApO1xuXG4gICAgICAgICAgICAgICAgICAgIGF0dHIodGhpcyQxLiRlbCwgJ2FyaWEtZXhwYW5kZWQnLCB0b2dnbGVkKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRvZ2dsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS5wb3NpdGlvbkF0KHRoaXMkMS50b29sdGlwLCB0aGlzJDEuJGVsKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzJDEub3JpZ2luID0gdGhpcyQxLmdldEF4aXMoKSA9PT0gJ3knXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICgoZmxpcFBvc2l0aW9uKHRoaXMkMS5kaXIpKSArIFwiLVwiICsgKHRoaXMkMS5hbGlnbikpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICgodGhpcyQxLmFsaWduKSArIFwiLVwiICsgKGZsaXBQb3NpdGlvbih0aGlzJDEuZGlyKSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVFbGVtZW50KHRoaXMudG9vbHRpcCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGlzQWN0aXZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5jbHVkZXMoYWN0aXZlcywgdGhpcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6ICggb2JqJDEgPSB7XG5cbiAgICAgICAgICAgIGZvY3VzOiAnc2hvdycsXG4gICAgICAgICAgICBibHVyOiAnaGlkZSdcblxuICAgICAgICB9LCBvYmokMVsocG9pbnRlckVudGVyICsgXCIgXCIgKyBwb2ludGVyTGVhdmUpXSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzVG91Y2goZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlLnR5cGUgPT09IHBvaW50ZXJFbnRlclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICB9LCBvYmokMVtwb2ludGVyRG93bl0gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmICghaXNUb3VjaChlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaXNBY3RpdmUoKVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5zaG93KCk7XG4gICAgICAgICAgICB9LCBvYmokMSApXG5cbiAgICB9O1xuXG4gICAgdmFyIHVwbG9hZCA9IHtcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgYWxsb3c6IFN0cmluZyxcbiAgICAgICAgICAgIGNsc0RyYWdvdmVyOiBTdHJpbmcsXG4gICAgICAgICAgICBjb25jdXJyZW50OiBOdW1iZXIsXG4gICAgICAgICAgICBtYXhTaXplOiBOdW1iZXIsXG4gICAgICAgICAgICBtZXRob2Q6IFN0cmluZyxcbiAgICAgICAgICAgIG1pbWU6IFN0cmluZyxcbiAgICAgICAgICAgIG1zZ0ludmFsaWRNaW1lOiBTdHJpbmcsXG4gICAgICAgICAgICBtc2dJbnZhbGlkTmFtZTogU3RyaW5nLFxuICAgICAgICAgICAgbXNnSW52YWxpZFNpemU6IFN0cmluZyxcbiAgICAgICAgICAgIG11bHRpcGxlOiBCb29sZWFuLFxuICAgICAgICAgICAgbmFtZTogU3RyaW5nLFxuICAgICAgICAgICAgcGFyYW1zOiBPYmplY3QsXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICB1cmw6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGFsbG93OiBmYWxzZSxcbiAgICAgICAgICAgIGNsc0RyYWdvdmVyOiAndWstZHJhZ292ZXInLFxuICAgICAgICAgICAgY29uY3VycmVudDogMSxcbiAgICAgICAgICAgIG1heFNpemU6IDAsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIG1pbWU6IGZhbHNlLFxuICAgICAgICAgICAgbXNnSW52YWxpZE1pbWU6ICdJbnZhbGlkIEZpbGUgVHlwZTogJXMnLFxuICAgICAgICAgICAgbXNnSW52YWxpZE5hbWU6ICdJbnZhbGlkIEZpbGUgTmFtZTogJXMnLFxuICAgICAgICAgICAgbXNnSW52YWxpZFNpemU6ICdJbnZhbGlkIEZpbGUgU2l6ZTogJXMgS2lsb2J5dGVzIE1heCcsXG4gICAgICAgICAgICBtdWx0aXBsZTogZmFsc2UsXG4gICAgICAgICAgICBuYW1lOiAnZmlsZXNbXScsXG4gICAgICAgICAgICBwYXJhbXM6IHt9LFxuICAgICAgICAgICAgdHlwZTogJycsXG4gICAgICAgICAgICB1cmw6ICcnLFxuICAgICAgICAgICAgYWJvcnQ6IG5vb3AsXG4gICAgICAgICAgICBiZWZvcmVBbGw6IG5vb3AsXG4gICAgICAgICAgICBiZWZvcmVTZW5kOiBub29wLFxuICAgICAgICAgICAgY29tcGxldGU6IG5vb3AsXG4gICAgICAgICAgICBjb21wbGV0ZUFsbDogbm9vcCxcbiAgICAgICAgICAgIGVycm9yOiBub29wLFxuICAgICAgICAgICAgZmFpbDogbm9vcCxcbiAgICAgICAgICAgIGxvYWQ6IG5vb3AsXG4gICAgICAgICAgICBsb2FkRW5kOiBub29wLFxuICAgICAgICAgICAgbG9hZFN0YXJ0OiBub29wLFxuICAgICAgICAgICAgcHJvZ3Jlc3M6IG5vb3BcbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IHtcblxuICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZXMoZS50YXJnZXQsICdpbnB1dFt0eXBlPVwiZmlsZVwiXScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuZmlsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWQoZS50YXJnZXQuZmlsZXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnZhbHVlID0gJyc7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkcm9wOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3RvcChlKTtcblxuICAgICAgICAgICAgICAgIHZhciB0cmFuc2ZlciA9IGUuZGF0YVRyYW5zZmVyO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0cmFuc2ZlciB8fCAhdHJhbnNmZXIuZmlsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuJGVsLCB0aGlzLmNsc0RyYWdvdmVyKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkKHRyYW5zZmVyLmZpbGVzKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRyYWdlbnRlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHN0b3AoZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkcmFnb3ZlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHN0b3AoZSk7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzRHJhZ292ZXIpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZHJhZ2xlYXZlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3RvcChlKTtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLiRlbCwgdGhpcy5jbHNEcmFnb3Zlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHVwbG9hZDogZnVuY3Rpb24oZmlsZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgaWYgKCFmaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICd1cGxvYWQnLCBbZmlsZXNdKTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXhTaXplICYmIHRoaXMubWF4U2l6ZSAqIDEwMDAgPCBmaWxlc1tpXS5zaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWwodGhpcy5tc2dJbnZhbGlkU2l6ZS5yZXBsYWNlKCclcycsIHRoaXMubWF4U2l6ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWxsb3cgJiYgIW1hdGNoJDEodGhpcy5hbGxvdywgZmlsZXNbaV0ubmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmFpbCh0aGlzLm1zZ0ludmFsaWROYW1lLnJlcGxhY2UoJyVzJywgdGhpcy5hbGxvdykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWltZSAmJiAhbWF0Y2gkMSh0aGlzLm1pbWUsIGZpbGVzW2ldLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWwodGhpcy5tc2dJbnZhbGlkTWltZS5yZXBsYWNlKCclcycsIHRoaXMubWltZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZXMgPSBbZmlsZXNbMF1dO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuYmVmb3JlQWxsKHRoaXMsIGZpbGVzKTtcblxuICAgICAgICAgICAgICAgIHZhciBjaHVua3MgPSBjaHVuayhmaWxlcywgdGhpcy5jb25jdXJyZW50KTtcbiAgICAgICAgICAgICAgICB2YXIgdXBsb2FkID0gZnVuY3Rpb24gKGZpbGVzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBuZXcgRm9ybURhdGEoKTtcblxuICAgICAgICAgICAgICAgICAgICBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7IHJldHVybiBkYXRhLmFwcGVuZCh0aGlzJDEubmFtZSwgZmlsZSk7IH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzJDEucGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmFwcGVuZChrZXksIHRoaXMkMS5wYXJhbXNba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBhamF4KHRoaXMkMS51cmwsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IHRoaXMkMS5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IHRoaXMkMS50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24gKGVudikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhociA9IGVudi54aHI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnVwbG9hZCAmJiBvbih4aHIudXBsb2FkLCAncHJvZ3Jlc3MnLCB0aGlzJDEucHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnbG9hZFN0YXJ0JywgJ2xvYWQnLCAnbG9hZEVuZCcsICdhYm9ydCddLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIG9uKHhociwgdHlwZS50b0xvd2VyQ2FzZSgpLCB0aGlzJDFbdHlwZV0pOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5iZWZvcmVTZW5kKGVudik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh4aHIpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5jb21wbGV0ZSh4aHIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNodW5rcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkKGNodW5rcy5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuY29tcGxldGVBbGwoeGhyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcyQxLmVycm9yKGUpOyB9XG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdXBsb2FkKGNodW5rcy5zaGlmdCgpKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBtYXRjaCQxKHBhdHRlcm4sIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHBhdGgubWF0Y2gobmV3IFJlZ0V4cCgoXCJeXCIgKyAocGF0dGVybi5yZXBsYWNlKC9cXC8vZywgJ1xcXFwvJykucmVwbGFjZSgvXFwqXFwqL2csICcoXFxcXC9bXlxcXFwvXSspKicpLnJlcGxhY2UoL1xcKi9nLCAnW15cXFxcL10rJykucmVwbGFjZSgvKCg/IVxcXFwpKVxcPy9nLCAnJDEuJykpICsgXCIkXCIpLCAnaScpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaHVuayhmaWxlcywgc2l6ZSkge1xuICAgICAgICB2YXIgY2h1bmtzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpICs9IHNpemUpIHtcbiAgICAgICAgICAgIHZhciBjaHVuayA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzaXplOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjaHVuay5wdXNoKGZpbGVzW2kgKyBqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaHVua3MucHVzaChjaHVuayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNodW5rcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdG9wKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIHZhciBjb21wb25lbnRzJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAgICAgQ291bnRkb3duOiBjb3VudGRvd24sXG4gICAgICAgIEZpbHRlcjogZmlsdGVyJDEsXG4gICAgICAgIExpZ2h0Ym94OiBsaWdodGJveCxcbiAgICAgICAgTGlnaHRib3hQYW5lbDogTGlnaHRib3hQYW5lbCxcbiAgICAgICAgTm90aWZpY2F0aW9uOiBub3RpZmljYXRpb24sXG4gICAgICAgIFBhcmFsbGF4OiBwYXJhbGxheCxcbiAgICAgICAgU2xpZGVyOiBzbGlkZXIsXG4gICAgICAgIFNsaWRlclBhcmFsbGF4OiBzbGlkZXJQYXJhbGxheCxcbiAgICAgICAgU2xpZGVzaG93OiBzbGlkZXNob3csXG4gICAgICAgIFNsaWRlc2hvd1BhcmFsbGF4OiBzbGlkZXJQYXJhbGxheCxcbiAgICAgICAgU29ydGFibGU6IHNvcnRhYmxlLFxuICAgICAgICBUb29sdGlwOiB0b29sdGlwLFxuICAgICAgICBVcGxvYWQ6IHVwbG9hZFxuICAgIH0pO1xuXG4gICAgZWFjaChjb21wb25lbnRzJDEsIGZ1bmN0aW9uIChjb21wb25lbnQsIG5hbWUpIHsgcmV0dXJuIFVJa2l0LmNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpOyB9XG4gICAgKTtcblxuICAgIHJldHVybiBVSWtpdDtcblxufSkpKTtcbiIsIi8qISBVSWtpdCAzLjQuNiB8IGh0dHBzOi8vd3d3LmdldHVpa2l0LmNvbSB8IChjKSAyMDE0IC0gMjAyMCBZT090aGVtZSB8IE1JVCBMaWNlbnNlICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZSgndWlraXRpY29ucycsIGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5VSWtpdEljb25zID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgZnVuY3Rpb24gcGx1Z2luKFVJa2l0KSB7XG5cbiAgICAgICAgaWYgKHBsdWdpbi5pbnN0YWxsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIFVJa2l0Lmljb24uYWRkKHtcbiAgICAgICAgXCI1MDBweFwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBhdGggZD1cXFwiTTkuNjI0LDExLjg2NmMtMC4xNDEsMC4xMzIsMC40NzksMC42NTgsMC42NjIsMC40MThjMC4wNTEtMC4wNDYsMC42MDctMC42MSwwLjY2Mi0wLjY2NGMwLDAsMC43MzgsMC43MTksMC44MTQsMC43MTkgYzAuMSwwLDAuMjA3LTAuMDU1LDAuMzIyLTAuMTdjMC4yNy0wLjI2OSwwLjEzNS0wLjQxNiwwLjA2Ni0wLjQ5NWwtMC42MzEtMC42MTZsMC42NTgtMC42NjhjMC4xNDYtMC4xNTYsMC4wMjEtMC4zMTQtMC4xLTAuNDQ5IGMtMC4xODItMC4xOC0wLjM1OS0wLjIyNi0wLjQ3MS0wLjEyNWwtMC42NTYsMC42NTRsLTAuNjU0LTAuNjU0Yy0wLjAzMy0wLjAzNC0wLjA4LTAuMDQ1LTAuMTI0LTAuMDQ1IGMtMC4wNzksMC0wLjE5MSwwLjA2OC0wLjMwNywwLjE4MWMtMC4yMDIsMC4yMDItMC4yNDcsMC4zNTEtMC4xMzMsMC40NjJsMC42NjUsMC42NjVMOS42MjQsMTEuODY2elxcXCIvPjxwYXRoIGQ9XFxcIk0xMS4wNjYsMi44ODRjLTEuMDYxLDAtMi4xODUsMC4yNDgtMy4wMTEsMC42MDRjLTAuMDg3LDAuMDM0LTAuMTQxLDAuMTA2LTAuMTUsMC4yMDVDNy44OTMsMy43ODQsNy45MTksMy45MDksNy45ODIsNC4wNjYgYzAuMDUsMC4xMzYsMC4xODcsMC40NzQsMC40NTIsMC4zNzJjMC44NDQtMC4zMjYsMS43NzktMC41MDcsMi42MzMtMC41MDdjMC45NjMsMCwxLjksMC4xOTEsMi43ODEsMC41NjQgYzAuNjk1LDAuMjkyLDEuMzU3LDAuNzE5LDIuMDc4LDEuMzRjMC4wNTEsMC4wNDQsMC4xMDUsMC4wNjgsMC4xNjQsMC4wNjhjMC4xNDMsMCwwLjI3My0wLjEzNywwLjM4OS0wLjI3MSBjMC4xOTEtMC4yMTQsMC4zMjQtMC4zOTUsMC4xMzUtMC41NzVjLTAuNjg2LTAuNjU0LTEuNDM2LTEuMTM4LTIuMzYzLTEuNTMzQzEzLjI0LDMuMDk3LDEyLjE2OCwyLjg4NCwxMS4wNjYsMi44ODR6XFxcIi8+PHBhdGggZD1cXFwiTTE2LjQzLDE1Ljc0N2MtMC4wOTItMC4wMjgtMC4yNDIsMC4wNS0wLjMwOSwwLjExOWwwLDBjLTAuNjUyLDAuNjUyLTEuNDIsMS4xNjktMi4yNjgsMS41MjEgYy0wLjg3NywwLjM3MS0xLjgxNCwwLjU1MS0yLjc3OSwwLjU1MWMtMC45NjEsMC0xLjg5Ni0wLjE4OS0yLjc3NS0wLjU2NGMtMC44NDgtMC4zNi0xLjYxMi0wLjg3OS0yLjI2OC0xLjUzIGMtMC42ODItMC42ODgtMS4xOTYtMS40NTUtMS41MjktMi4yNjhjLTAuMzI1LTAuNzk5LTAuNDcxLTEuNjQzLTAuNDcxLTEuNjQzYy0wLjA0NS0wLjI0LTAuMjU4LTAuMjQ5LTAuNTY3LTAuMjAzIGMtMC4xMjgsMC4wMjEtMC41MTksMC4wNzktMC40ODMsMC4zNnYwLjAxYzAuMTA1LDAuNjQ0LDAuMjg5LDEuMjg0LDAuNTQ1LDEuODk1YzAuNDE3LDAuOTY5LDEuMDAyLDEuODQ5LDEuNzU2LDIuNjA0IGMwLjc1NywwLjc1NCwxLjYzNiwxLjM0LDIuNjA0LDEuNzU3QzguOTAxLDE4Ljc4NSw5Ljk3LDE5LDExLjA4OCwxOWMxLjEwNCwwLDIuMTg2LTAuMjE1LDMuMTg4LTAuNjQ1IGMxLjgzOC0wLjg5NiwyLjYwNC0xLjc1NywyLjYwNC0xLjc1N2MwLjE4Mi0wLjIwNCwwLjIyNy0wLjMxNy0wLjEtMC42NDNDMTYuNzc5LDE1Ljk1NiwxNi41MjUsMTUuNzc0LDE2LjQzLDE1Ljc0N3pcXFwiLz48cGF0aCBkPVxcXCJNNS42MzMsMTMuMjg3YzAuMjkzLDAuNzEsMC43MjMsMS4zNDEsMS4yNjIsMS44ODJjMC41NCwwLjU0LDEuMTcyLDAuOTcxLDEuODgyLDEuMjY0YzAuNzMxLDAuMzAzLDEuNTA5LDAuNDYxLDIuMjk4LDAuNDYxIGMwLjgwMSwwLDEuNTc4LTAuMTU4LDIuMjk3LTAuNDYxYzAuNzExLTAuMjkzLDEuMzQ0LTAuNzI0LDEuODgzLTEuMjY0YzAuNTQzLTAuNTQxLDAuOTcxLTEuMTcyLDEuMjY0LTEuODgyIGMwLjMxNC0wLjcyMSwwLjQ2My0xLjUsMC40NjMtMi4yOThjMC0wLjc5LTAuMTQ4LTEuNTY5LTAuNDYzLTIuMjg5Yy0wLjI5My0wLjY5OS0wLjcyMS0xLjMyOS0xLjI2NC0xLjg4MSBjLTAuNTM5LTAuNTQxLTEuMTcyLTAuOTU5LTEuODY3LTEuMjYzYy0wLjcyMS0wLjMwMy0xLjUtMC40NjEtMi4yOTktMC40NjFjLTAuODAyLDAtMS42MTMsMC4xNTktMi4zMjIsMC40NjEgYy0wLjU3NywwLjI1LTEuNTQ0LDAuODY3LTIuMTE5LDEuNDU0djAuMDEyVjIuMTA4aDguMTZDMTUuMSwyLjEwNCwxNS4xLDEuNjksMTUuMSwxLjU1MkMxNS4xLDEuNDE3LDE1LjEsMSwxNC44MDksMUg1LjkxNSBDNS42NzYsMSw1LjUyNywxLjE5Miw1LjUyNywxLjM4NHY2Ljg0YzAsMC4yMTQsMC4yNzMsMC4zNzIsMC41MjksMC40MjhjMC41LDAuMTA1LDAuNjE0LTAuMDU2LDAuNzM3LTAuMjI0bDAsMCBjMC4xOC0wLjI3MywwLjc3Ni0wLjg4NCwwLjc4Ny0wLjg5NGMwLjkwMS0wLjkwNSwyLjExNy0xLjQwOCwzLjQxNi0xLjQwOGMxLjI4NSwwLDIuNSwwLjUwMSwzLjQxMiwxLjQwOCBjMC45MTQsMC45MTQsMS40MDgsMi4xMjIsMS40MDgsMy40MDVjMCwxLjI4OC0wLjUwOCwyLjQ5Ni0xLjQwOCwzLjQwNWMtMC45LDAuODk2LTIuMTUyLDEuNDA2LTMuNDM4LDEuNDA2IGMtMC44NzcsMC0xLjcxMS0wLjIyOS0yLjQzMy0wLjY3MXYtNC4xNThjMC0wLjU1MywwLjIzNy0xLjE1MSwwLjY0My0xLjYxNGMwLjQ2Mi0wLjUxOSwxLjA5NC0wLjc5OSwxLjc4Mi0wLjc5OSBjMC42NjQsMCwxLjI5MywwLjI1MywxLjc1OCwwLjcxNWMwLjQ1OSwwLjQ1OSwwLjcwOSwxLjA3MSwwLjcwOSwxLjcyM2MwLDEuMzg1LTEuMDk0LDIuNDY4LTIuNDg4LDIuNDY4IGMtMC4yNzMsMC0wLjc2OS0wLjEyMS0wLjc4MS0wLjEyNWMtMC4yODEtMC4wODctMC40MDUsMC4zMDYtMC40MzgsMC40MzZjLTAuMTU5LDAuNDk2LDAuMDc5LDAuNTg1LDAuMTIzLDAuNjA3IGMwLjQ1MiwwLjEzNywwLjc0MywwLjE1NywxLjEyOSwwLjE1N2MxLjk3MywwLDMuNTcyLTEuNiwzLjU3Mi0zLjU3YzAtMS45NjQtMS42LTMuNTUyLTMuNTcyLTMuNTUyYy0wLjk3LDAtMS44NzIsMC4zNi0yLjU0NiwxLjAzOCBjLTAuNjU2LDAuNjMxLTEuMDI3LDEuNDg3LTEuMDI3LDIuMzIydjMuNDM4di0wLjAxMWMtMC4zNzItMC40Mi0wLjczMi0xLjA0MS0wLjk4MS0xLjY4MmMtMC4xMDItMC4yNDgtMC4zMTUtMC4yMDItMC42MDctMC4xMTMgYy0wLjEzNSwwLjAzNS0wLjUxOSwwLjE1Ny0wLjQ0LDAuNDM5QzUuMzcyLDEyLjc5OSw1LjU3NywxMy4xNjQsNS42MzMsMTMuMjg3elxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImFsYnVtXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cmVjdCB4PVxcXCI1XFxcIiB5PVxcXCIyXFxcIiB3aWR0aD1cXFwiMTBcXFwiIGhlaWdodD1cXFwiMVxcXCIvPjxyZWN0IHg9XFxcIjNcXFwiIHk9XFxcIjRcXFwiIHdpZHRoPVxcXCIxNFxcXCIgaGVpZ2h0PVxcXCIxXFxcIi8+PHJlY3QgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiB4PVxcXCIxLjVcXFwiIHk9XFxcIjYuNVxcXCIgd2lkdGg9XFxcIjE3XFxcIiBoZWlnaHQ9XFxcIjExXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiYXJyb3ctZG93blwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlnb24gcG9pbnRzPVxcXCIxMC41LDE2LjA4IDUuNjMsMTAuNjYgNi4zNywxMCAxMC41LDE0LjU4IDE0LjYzLDEwIDE1LjM3LDEwLjY2XFxcIi8+PGxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiB4MT1cXFwiMTAuNVxcXCIgeTE9XFxcIjRcXFwiIHgyPVxcXCIxMC41XFxcIiB5Mj1cXFwiMTVcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJhcnJvdy1sZWZ0XCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBwb2ludHM9XFxcIjEwIDE0IDUgOS41IDEwIDVcXFwiLz48bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHgxPVxcXCIxNlxcXCIgeTE9XFxcIjkuNVxcXCIgeDI9XFxcIjVcXFwiIHkyPVxcXCI5LjUyXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiYXJyb3ctcmlnaHRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHBvaW50cz1cXFwiMTAgNSAxNSA5LjUgMTAgMTRcXFwiLz48bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHgxPVxcXCI0XFxcIiB5MT1cXFwiOS41XFxcIiB4Mj1cXFwiMTVcXFwiIHkyPVxcXCI5LjVcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJhcnJvdy11cFwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlnb24gcG9pbnRzPVxcXCIxMC41LDQgMTUuMzcsOS40IDE0LjYzLDEwLjA4IDEwLjUsNS40OSA2LjM3LDEwLjA4IDUuNjMsOS40XFxcIi8+PGxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiB4MT1cXFwiMTAuNVxcXCIgeTE9XFxcIjE2XFxcIiB4Mj1cXFwiMTAuNVxcXCIgeTI9XFxcIjVcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJiYW5cIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgY3g9XFxcIjEwXFxcIiBjeT1cXFwiMTBcXFwiIHI9XFxcIjlcXFwiLz48bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiB4MT1cXFwiNFxcXCIgeTE9XFxcIjMuNVxcXCIgeDI9XFxcIjE2XFxcIiB5Mj1cXFwiMTYuNVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImJlaGFuY2VcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk05LjUsMTAuNmMtMC40LTAuNS0wLjktMC45LTEuNi0xLjFjMS43LTEsMi4yLTMuMiwwLjctNC43QzcuOCw0LDYuMyw0LDUuMiw0QzMuNSw0LDEuNyw0LDAsNHYxMmMxLjcsMCwzLjQsMCw1LjIsMCBjMSwwLDIuMSwwLDMuMS0wLjVDMTAuMiwxNC42LDEwLjUsMTIuMyw5LjUsMTAuNkw5LjUsMTAuNnogTTUuNiw2LjFjMS44LDAsMS44LDIuNy0wLjEsMi43Yy0xLDAtMiwwLTIuOSwwVjYuMUg1LjZ6IE0yLjYsMTMuOHYtMy4xIGMxLjEsMCwyLjEsMCwzLjIsMGMyLjEsMCwyLjEsMy4yLDAuMSwzLjJMMi42LDEzLjh6XFxcIi8+PHBhdGggZD1cXFwiTTE5LjksMTAuOUMxOS43LDkuMiwxOC43LDcuNiwxNyw3Yy00LjItMS4zLTcuMywzLjQtNS4zLDcuMWMwLjksMS43LDIuOCwyLjMsNC43LDIuMWMxLjctMC4yLDIuOS0xLjMsMy40LTIuOWgtMi4yIGMtMC40LDEuMy0yLjQsMS41LTMuNSwwLjZjLTAuNC0wLjQtMC42LTEuMS0wLjYtMS43SDIwQzIwLDExLjcsMTkuOSwxMC45LDE5LjksMTAuOXogTTEzLjUsMTAuNmMwLTEuNiwyLjMtMi43LDMuNS0xLjQgYzAuNCwwLjQsMC41LDAuOSwwLjYsMS40SDEzLjVMMTMuNSwxMC42elxcXCIvPjxyZWN0IHg9XFxcIjEzXFxcIiB5PVxcXCI0XFxcIiB3aWR0aD1cXFwiNVxcXCIgaGVpZ2h0PVxcXCIxLjRcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJiZWxsXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiBkPVxcXCJNMTcsMTUuNSBMMywxNS41IEMyLjk5LDE0LjYxIDMuNzksMTMuMzQgNC4xLDEyLjUxIEM0LjU4LDExLjMgNC43MiwxMC4zNSA1LjE5LDcuMDEgQzUuNTQsNC41MyA1Ljg5LDMuMiA3LjI4LDIuMTYgQzguMTMsMS41NiA5LjM3LDEuNSA5LjgxLDEuNSBMOS45NiwxLjUgQzkuOTYsMS41IDExLjYyLDEuNDEgMTIuNjcsMi4xNyBDMTQuMDgsMy4yIDE0LjQyLDQuNTQgMTQuNzcsNy4wMiBDMTUuMjYsMTAuMzUgMTUuNCwxMS4zMSAxNS44NywxMi41MiBDMTYuMiwxMy4zNCAxNy4wMSwxNC42MSAxNywxNS41IEwxNywxNS41IFpcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIGQ9XFxcIk0xMi4zOSwxNiBDMTIuMzksMTcuMzcgMTEuMzUsMTguNDMgOS45MSwxOC40MyBDOC40OCwxOC40MyA3LjQyLDE3LjM3IDcuNDIsMTZcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJib2xkXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBkPVxcXCJNNSwxNS4zIEM1LjY2LDE1LjMgNS45LDE1IDUuOSwxNC41MyBMNS45LDUuNSBDNS45LDQuOTIgNS41Niw0LjcgNSw0LjcgTDUsNCBMOC45NSw0IEMxMi42LDQgMTMuNyw1LjM3IDEzLjcsNi45IEMxMy43LDcuODcgMTMuMTQsOS4xNyAxMC44Niw5LjU5IEwxMC44Niw5LjcgQzEzLjI1LDkuODYgMTQuMjksMTEuMjggMTQuMywxMi41NCBDMTQuMywxNC40NyAxMi45NCwxNiA5LDE2IEw1LDE2IEw1LDE1LjMgWiBNOSw5LjMgQzExLjE5LDkuMyAxMS44LDguNSAxMS44NSw3IEMxMS44NSw1LjY1IDExLjMsNC44IDksNC44IEw3LjY3LDQuOCBMNy42Nyw5LjMgTDksOS4zIFogTTkuMTg1LDE1LjIyIEMxMS45NywxNSAxMi4zOSwxNCAxMi40LDEyLjU4IEMxMi40LDExLjE1IDExLjM5LDEwIDksMTAgTDcuNjcsMTAgTDcuNjcsMTUgTDkuMTgsMTUgWlxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImJvbHRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk00Ljc0LDIwIEw3LjczLDEyIEwzLDEyIEwxNS40MywxIEwxMi4zMiw5IEwxNy4wMiw5IEw0Ljc0LDIwIEw0Ljc0LDIwIEw0Ljc0LDIwIFogTTkuMTgsMTEgTDcuMSwxNi4zOSBMMTQuNDcsMTAgTDEwLjg2LDEwIEwxMi45OSw0LjY3IEw1LjYxLDExIEw5LjE4LDExIEw5LjE4LDExIEw5LjE4LDExIFpcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJib29rbWFya1wiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlnb24gZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBwb2ludHM9XFxcIjUuNSAxLjUgMTUuNSAxLjUgMTUuNSAxNy41IDEwLjUgMTIuNSA1LjUgMTcuNVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImNhbGVuZGFyXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBkPVxcXCJNIDIsMyAyLDE3IDE4LDE3IDE4LDMgMiwzIFogTSAxNywxNiAzLDE2IDMsOCAxNyw4IDE3LDE2IFogTSAxNyw3IDMsNyAzLDQgMTcsNCAxNyw3IFpcXFwiLz48cmVjdCB3aWR0aD1cXFwiMVxcXCIgaGVpZ2h0PVxcXCIzXFxcIiB4PVxcXCI2XFxcIiB5PVxcXCIyXFxcIi8+PHJlY3Qgd2lkdGg9XFxcIjFcXFwiIGhlaWdodD1cXFwiM1xcXCIgeD1cXFwiMTNcXFwiIHk9XFxcIjJcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJjYW1lcmFcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgY3g9XFxcIjEwXFxcIiBjeT1cXFwiMTAuOFxcXCIgcj1cXFwiMy44XFxcIi8+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBkPVxcXCJNMSw0LjUgQzAuNyw0LjUgMC41LDQuNyAwLjUsNSBMMC41LDE3IEMwLjUsMTcuMyAwLjcsMTcuNSAxLDE3LjUgTDE5LDE3LjUgQzE5LjMsMTcuNSAxOS41LDE3LjMgMTkuNSwxNyBMMTkuNSw1IEMxOS41LDQuNyAxOS4zLDQuNSAxOSw0LjUgTDEzLjUsNC41IEwxMy41LDIuOSBDMTMuNSwyLjYgMTMuMywyLjUgMTMsMi41IEw3LDIuNSBDNi43LDIuNSA2LjUsMi42IDYuNSwyLjkgTDYuNSw0LjUgTDEsNC41IEwxLDQuNSBaXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiY2FydFwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PGNpcmNsZSBjeD1cXFwiNy4zXFxcIiBjeT1cXFwiMTcuM1xcXCIgcj1cXFwiMS40XFxcIi8+PGNpcmNsZSBjeD1cXFwiMTMuM1xcXCIgY3k9XFxcIjE3LjNcXFwiIHI9XFxcIjEuNFxcXCIvPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHBvaW50cz1cXFwiMCAyIDMuMiA0IDUuMyAxMi41IDE2IDEyLjUgMTggNi41IDggNi41XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiY2hlY2tcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiBwb2ludHM9XFxcIjQsMTAgOCwxNSAxNyw0XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiY2hldnJvbi1kb3VibGUtbGVmdFwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjAzXFxcIiBwb2ludHM9XFxcIjEwIDE0IDYgMTAgMTAgNlxcXCIvPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4wM1xcXCIgcG9pbnRzPVxcXCIxNCAxNCAxMCAxMCAxNCA2XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiY2hldnJvbi1kb3VibGUtcmlnaHRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4wM1xcXCIgcG9pbnRzPVxcXCIxMCA2IDE0IDEwIDEwIDE0XFxcIi8+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjAzXFxcIiBwb2ludHM9XFxcIjYgNiAxMCAxMCA2IDE0XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiY2hldnJvbi1kb3duXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMDNcXFwiIHBvaW50cz1cXFwiMTYgNyAxMCAxMyA0IDdcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJjaGV2cm9uLWxlZnRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4wM1xcXCIgcG9pbnRzPVxcXCIxMyAxNiA3IDEwIDEzIDRcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJjaGV2cm9uLXJpZ2h0XCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMDNcXFwiIHBvaW50cz1cXFwiNyA0IDEzIDEwIDcgMTZcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJjaGV2cm9uLXVwXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMDNcXFwiIHBvaW50cz1cXFwiNCAxMyAxMCA3IDE2IDEzXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiY2xvY2tcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgY3g9XFxcIjEwXFxcIiBjeT1cXFwiMTBcXFwiIHI9XFxcIjlcXFwiLz48cmVjdCB4PVxcXCI5XFxcIiB5PVxcXCI0XFxcIiB3aWR0aD1cXFwiMVxcXCIgaGVpZ2h0PVxcXCI3XFxcIi8+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgZD1cXFwiTTEzLjAxOCwxNC4xOTcgTDkuNDQ1LDEwLjYyNVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImNsb3NlXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4wNlxcXCIgZD1cXFwiTTE2LDE2IEw0LDRcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4wNlxcXCIgZD1cXFwiTTE2LDQgTDQsMTZcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJjbG91ZC1kb3dubG9hZFwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgZD1cXFwiTTYuNSwxNC42MSBMMy43NSwxNC42MSBDMS45NiwxNC42MSAwLjUsMTMuMTcgMC41LDExLjM5IEMwLjUsOS43NiAxLjcyLDguNDEgMy4zLDguMiBDMy4zOCw1LjMxIDUuNzUsMyA4LjY4LDMgQzExLjE5LDMgMTMuMzEsNC43MSAxMy44OSw3LjAyIEMxNC4zOSw2LjggMTQuOTMsNi42OCAxNS41LDYuNjggQzE3LjcxLDYuNjggMTkuNSw4LjQ1IDE5LjUsMTAuNjQgQzE5LjUsMTIuODMgMTcuNzEsMTQuNiAxNS41LDE0LjYgTDEyLjUsMTQuNlxcXCIvPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHBvaW50cz1cXFwiMTEuNzUgMTYgOS41IDE4LjI1IDcuMjUgMTZcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIGQ9XFxcIk05LjUsMTggTDkuNSw5LjVcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJjbG91ZC11cGxvYWRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIGQ9XFxcIk02LjUsMTQuNjEgTDMuNzUsMTQuNjEgQzEuOTYsMTQuNjEgMC41LDEzLjE3IDAuNSwxMS4zOSBDMC41LDkuNzYgMS43Miw4LjQxIDMuMzEsOC4yIEMzLjM4LDUuMzEgNS43NSwzIDguNjgsMyBDMTEuMTksMyAxMy4zMSw0LjcxIDEzLjg5LDcuMDIgQzE0LjM5LDYuOCAxNC45Myw2LjY4IDE1LjUsNi42OCBDMTcuNzEsNi42OCAxOS41LDguNDUgMTkuNSwxMC42NCBDMTkuNSwxMi44MyAxNy43MSwxNC42IDE1LjUsMTQuNiBMMTIuNSwxNC42XFxcIi8+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgcG9pbnRzPVxcXCI3LjI1IDExLjc1IDkuNSA5LjUgMTEuNzUgMTEuNzVcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIGQ9XFxcIk05LjUsMTggTDkuNSw5LjVcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJjb2RlXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMDFcXFwiIHBvaW50cz1cXFwiMTMsNCAxOSwxMCAxMywxNlxcXCIvPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4wMVxcXCIgcG9pbnRzPVxcXCI3LDQgMSwxMCA3LDE2XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiY29nXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48Y2lyY2xlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgY3g9XFxcIjkuOTk3XFxcIiBjeT1cXFwiMTBcXFwiIHI9XFxcIjMuMzFcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIGQ9XFxcIk0xOC40ODgsMTIuMjg1IEwxNi4yMDUsMTYuMjM3IEMxNS4zMjIsMTUuNDk2IDE0LjE4NSwxNS4yODEgMTMuMzAzLDE1Ljc5MSBDMTIuNDI4LDE2LjI4OSAxMi4wNDcsMTcuMzczIDEyLjI0NiwxOC41IEw3LjczNSwxOC41IEM3LjkzOCwxNy4zNzQgNy41NTMsMTYuMjk5IDYuNjg0LDE1Ljc5MSBDNS44MDEsMTUuMjcgNC42NTUsMTUuNDkyIDMuNzczLDE2LjIzNyBMMS41LDEyLjI4NSBDMi41NzMsMTEuODcxIDMuMzE3LDEwLjk5OSAzLjMxNyw5Ljk5MSBDMy4zMDUsOC45OCAyLjU3Myw4LjEyMSAxLjUsNy43MTYgTDMuNzY1LDMuNzg0IEM0LjY0NSw0LjUxNiA1Ljc5NCw0LjczOCA2LjY4Nyw0LjIzMiBDNy41NTUsMy43MjIgNy45MzksMi42MzcgNy43MzUsMS41IEwxMi4yNjMsMS41IEMxMi4wNzIsMi42MzcgMTIuNDQxLDMuNzEgMTMuMzE0LDQuMjIgQzE0LjIwNiw0LjczIDE1LjM0Myw0LjUxNiAxNi4yMjUsMy43OTQgTDE4LjQ4Nyw3LjcxNCBDMTcuNDA0LDguMTE3IDE2LjY2MSw4Ljk4OCAxNi42NywxMC4wMDkgQzE2LjY3MiwxMS4wMTggMTcuNDE1LDExLjg4IDE4LjQ4OCwxMi4yODUgTDE4LjQ4OCwxMi4yODUgWlxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImNvbW1lbnRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk02LDE4LjcxIEw2LDE0IEwxLDE0IEwxLDEgTDE5LDEgTDE5LDE0IEwxMC43MSwxNCBMNiwxOC43MSBMNiwxOC43MSBaIE0yLDEzIEw3LDEzIEw3LDE2LjI5IEwxMC4yOSwxMyBMMTgsMTMgTDE4LDIgTDIsMiBMMiwxMyBMMiwxMyBaXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiY29tbWVudGluZ1wiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlnb24gZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBwb2ludHM9XFxcIjEuNSwxLjUgMTguNSwxLjUgMTguNSwxMy41IDEwLjUsMTMuNSA2LjUsMTcuNSA2LjUsMTMuNSAxLjUsMTMuNVxcXCIvPjxjaXJjbGUgY3g9XFxcIjEwXFxcIiBjeT1cXFwiOFxcXCIgcj1cXFwiMVxcXCIvPjxjaXJjbGUgY3g9XFxcIjZcXFwiIGN5PVxcXCI4XFxcIiByPVxcXCIxXFxcIi8+PGNpcmNsZSBjeD1cXFwiMTRcXFwiIGN5PVxcXCI4XFxcIiByPVxcXCIxXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiY29tbWVudHNcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHBvaW50cz1cXFwiMiAwLjUgMTkuNSAwLjUgMTkuNSAxM1xcXCIvPjxwYXRoIGQ9XFxcIk01LDE5LjcxIEw1LDE1IEwwLDE1IEwwLDIgTDE4LDIgTDE4LDE1IEw5LjcxLDE1IEw1LDE5LjcxIEw1LDE5LjcxIEw1LDE5LjcxIFogTTEsMTQgTDYsMTQgTDYsMTcuMjkgTDkuMjksMTQgTDE3LDE0IEwxNywzIEwxLDMgTDEsMTQgTDEsMTQgTDEsMTQgWlxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImNvcHlcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxyZWN0IGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgeD1cXFwiMy41XFxcIiB5PVxcXCIyLjVcXFwiIHdpZHRoPVxcXCIxMlxcXCIgaGVpZ2h0PVxcXCIxNlxcXCIvPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHBvaW50cz1cXFwiNSAwLjUgMTcuNSAwLjUgMTcuNSAxN1xcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImNyZWRpdC1jYXJkXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cmVjdCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHg9XFxcIjEuNVxcXCIgeT1cXFwiNC41XFxcIiB3aWR0aD1cXFwiMTdcXFwiIGhlaWdodD1cXFwiMTJcXFwiLz48cmVjdCB4PVxcXCIxXFxcIiB5PVxcXCI3XFxcIiB3aWR0aD1cXFwiMThcXFwiIGhlaWdodD1cXFwiM1xcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImRhdGFiYXNlXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48ZWxsaXBzZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIGN4PVxcXCIxMFxcXCIgY3k9XFxcIjQuNjRcXFwiIHJ4PVxcXCI3LjVcXFwiIHJ5PVxcXCIzLjE0XFxcIi8+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBkPVxcXCJNMTcuNSw4LjExIEMxNy41LDkuODUgMTQuMTQsMTEuMjUgMTAsMTEuMjUgQzUuODYsMTEuMjUgMi41LDkuODQgMi41LDguMTFcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIGQ9XFxcIk0xNy41LDExLjI1IEMxNy41LDEyLjk5IDE0LjE0LDE0LjM5IDEwLDE0LjM5IEM1Ljg2LDE0LjM5IDIuNSwxMi45OCAyLjUsMTEuMjVcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIGQ9XFxcIk0xNy40OSw0LjY0IEwxNy41LDE0LjM2IEMxNy41LDE2LjEgMTQuMTQsMTcuNSAxMCwxNy41IEM1Ljg2LDE3LjUgMi41LDE2LjA5IDIuNSwxNC4zNiBMMi41LDQuNjRcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJkZXNrdG9wXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cmVjdCB4PVxcXCI4XFxcIiB5PVxcXCIxNVxcXCIgd2lkdGg9XFxcIjFcXFwiIGhlaWdodD1cXFwiMlxcXCIvPjxyZWN0IHg9XFxcIjExXFxcIiB5PVxcXCIxNVxcXCIgd2lkdGg9XFxcIjFcXFwiIGhlaWdodD1cXFwiMlxcXCIvPjxyZWN0IHg9XFxcIjVcXFwiIHk9XFxcIjE2XFxcIiB3aWR0aD1cXFwiMTBcXFwiIGhlaWdodD1cXFwiMVxcXCIvPjxyZWN0IGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgeD1cXFwiMS41XFxcIiB5PVxcXCIzLjVcXFwiIHdpZHRoPVxcXCIxN1xcXCIgaGVpZ2h0PVxcXCIxMVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImRvd25sb2FkXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBwb2ludHM9XFxcIjE0LDEwIDkuNSwxNC41IDUsMTBcXFwiLz48cmVjdCB4PVxcXCIzXFxcIiB5PVxcXCIxN1xcXCIgd2lkdGg9XFxcIjEzXFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHgxPVxcXCI5LjVcXFwiIHkxPVxcXCIxMy45MVxcXCIgeDI9XFxcIjkuNVxcXCIgeTI9XFxcIjNcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJkcmliYmJsZVwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuNFxcXCIgZD1cXFwiTTEuMyw4LjljMCwwLDUsMC4xLDguNi0xYzEuNC0wLjQsMi42LTAuOSw0LTEuOSBjMS40LTEuMSwyLjUtMi41LDIuNS0yLjVcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS40XFxcIiBkPVxcXCJNMy45LDE2LjZjMCwwLDEuNy0yLjgsMy41LTQuMiBjMS44LTEuMyw0LTIsNS43LTIuMkMxNiwxMCwxOSwxMC42LDE5LDEwLjZcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS40XFxcIiBkPVxcXCJNNi45LDEuNmMwLDAsMy4zLDQuNiw0LjIsNi44IGMwLjQsMC45LDEuMywzLjEsMS45LDUuMmMwLjYsMiwwLjksNC40LDAuOSw0LjRcXFwiLz48Y2lyY2xlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjRcXFwiIGN4PVxcXCIxMFxcXCIgY3k9XFxcIjEwXFxcIiByPVxcXCI5XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiZXRzeVwiOiBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCI+PHBhdGggZD1cXFwiTTgsNC4yNkM4LDQuMDcsOCw0LDguMzEsNGg0LjQ2Yy43OSwwLDEuMjIuNjcsMS41MywxLjkxbC4yNSwxaC43NmMuMTQtMi44Mi4yNi00LC4yNi00UzEzLjY1LDMsMTIuNTIsM0g2LjgxTDMuNzUsMi45MnYuODRsMSwuMmMuNzMuMTEuOS4yNywxLDEsMCwwLC4wNiwyLC4wNiw1LjE3cy0uMDYsNS4xNC0uMDYsNS4xNGMwLC41OS0uMjMuODEtMSwuOTRsLTEsLjJ2Ljg0bDMuMDYtLjFoNS4xMWMxLjE1LDAsMy44Mi4xLDMuODIuMSwwLS43LjQ1LTMuODguNTEtNC4yMmgtLjczbC0uNzYsMS42OWEyLjI1LDIuMjUsMCwwLDEtMi40NSwxLjQ3SDkuNGMtMSwwLTEuNDQtLjQtMS40NC0xLjI0VjEwLjQ0czIuMTYsMCwyLjg2LjA2Yy41NSwwLC44NS4xOSwxLjA2LDFsLjIzLDFIMTNMMTIuOSw5Ljk0LDEzLDcuNDFoLS44NWwtLjI4LDEuMTNjLS4xNi43NC0uMjguODQtMSwxLTEsLjEtMi44OS4wOS0yLjg5LjA5WlxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImV4cGFuZFwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlnb24gcG9pbnRzPVxcXCIxMyAyIDE4IDIgMTggNyAxNyA3IDE3IDMgMTMgM1xcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMiAxMyAzIDEzIDMgMTcgNyAxNyA3IDE4IDIgMThcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiBkPVxcXCJNMTEsOSBMMTcsM1xcXCIvPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIGQ9XFxcIk0zLDE3IEw5LDExXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiZmFjZWJvb2tcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk0xMSwxMGgyLjZsMC40LTNIMTFWNS4zYzAtMC45LDAuMi0xLjUsMS41LTEuNUgxNFYxLjFjLTAuMywwLTEtMC4xLTIuMS0wLjFDOS42LDEsOCwyLjQsOCw1djJINS41djNIOHY4aDNWMTB6XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiZmlsZS1lZGl0XCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIGQ9XFxcIk0xOC42NSwxLjY4IEMxOC40MSwxLjQ1IDE4LjEwOSwxLjMzIDE3LjgxLDEuMzMgQzE3LjQ5OSwxLjMzIDE3LjIwOSwxLjQ1IDE2Ljk4LDEuNjggTDguOTIsOS43NiBMOCwxMi4zMyBMMTAuNTUsMTEuNDEgTDE4LjY1MSwzLjM0IEMxOS4xMiwyLjg3IDE5LjEyLDIuMTUgMTguNjUsMS42OCBMMTguNjUsMS42OCBMMTguNjUsMS42OCBaXFxcIi8+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgcG9pbnRzPVxcXCIxNi41IDguNDgyIDE2LjUgMTguNSAzLjUgMTguNSAzLjUgMS41IDE0LjIxMSAxLjVcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJmaWxlLXBkZlwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHJlY3QgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiB3aWR0aD1cXFwiMTNcXFwiIGhlaWdodD1cXFwiMTdcXFwiIHg9XFxcIjMuNVxcXCIgeT1cXFwiMS41XFxcIi8+PHBhdGggZD1cXFwiTTE0LjY1IDExLjY3Yy0uNDguMy0xLjM3LS4xOS0xLjc5LS4zN2E0LjY1IDQuNjUgMCAwIDEgMS40OS4wNmMuMzUuMS4zNi4yOC4zLjMxem0tNi4zLjA2bC40My0uNzlhMTQuNyAxNC43IDAgMCAwIC43NS0xLjY0IDUuNDggNS40OCAwIDAgMCAxLjI1IDEuNTVsLjIuMTVhMTYuMzYgMTYuMzYgMCAwIDAtMi42My43M3pNOS41IDUuMzJjLjIgMCAuMzIuNS4zMi45N2ExLjk5IDEuOTkgMCAwIDEtLjIzIDEuMDQgNS4wNSA1LjA1IDAgMCAxLS4xNy0xLjNzMC0uNzEuMDgtLjcxem0tMy45IDlhNC4zNSA0LjM1IDAgMCAxIDEuMjEtMS40NmwuMjQtLjIyYTQuMzUgNC4zNSAwIDAgMS0xLjQ2IDEuNjh6bTkuMjMtMy4zYTIuMDUgMi4wNSAwIDAgMC0xLjMyLS4zIDExLjA3IDExLjA3IDAgMCAwLTEuNTguMTEgNC4wOSA0LjA5IDAgMCAxLS43NC0uNSA1LjM5IDUuMzkgMCAwIDEtMS4zMi0yLjA2IDEwLjM3IDEwLjM3IDAgMCAwIC4yOC0yLjYyIDEuODMgMS44MyAwIDAgMC0uMDctLjI1LjU3LjU3IDAgMCAwLS41Mi0uNEg5LjRhLjU5LjU5IDAgMCAwLS42LjM4IDYuOTUgNi45NSAwIDAgMCAuMzcgMy4xNGMtLjI2LjYzLTEgMi4xMi0xIDIuMTItLjMuNTgtLjU3IDEuMDgtLjgyIDEuNWwtLjguNDRBMy4xMSAzLjExIDAgMCAwIDUgMTQuMTZhLjM5LjM5IDAgMCAwIC4xNS40MmwuMjQuMTNjMS4xNS41NiAyLjI4LTEuNzQgMi42Ni0yLjQyYTIzLjEgMjMuMSAwIDAgMSAzLjU5LS44NSA0LjU2IDQuNTYgMCAwIDAgMi45MS44LjUuNSAwIDAgMCAuMy0uMjEgMS4xIDEuMSAwIDAgMCAuMTItLjc1Ljg0Ljg0IDAgMCAwLS4xNC0uMjV6XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiZmlsZS10ZXh0XCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cmVjdCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHdpZHRoPVxcXCIxM1xcXCIgaGVpZ2h0PVxcXCIxN1xcXCIgeD1cXFwiMy41XFxcIiB5PVxcXCIxLjVcXFwiLz48bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHgxPVxcXCI2XFxcIiB4Mj1cXFwiMTJcXFwiIHkxPVxcXCIxMi41XFxcIiB5Mj1cXFwiMTIuNVxcXCIvPjxsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgeDE9XFxcIjZcXFwiIHgyPVxcXCIxNFxcXCIgeTE9XFxcIjguNVxcXCIgeTI9XFxcIjguNVxcXCIvPjxsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgeDE9XFxcIjZcXFwiIHgyPVxcXCIxNFxcXCIgeTE9XFxcIjYuNVxcXCIgeTI9XFxcIjYuNVxcXCIvPjxsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgeDE9XFxcIjZcXFwiIHgyPVxcXCIxNFxcXCIgeTE9XFxcIjEwLjVcXFwiIHkyPVxcXCIxMC41XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiZmlsZVwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHJlY3QgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiB4PVxcXCIzLjVcXFwiIHk9XFxcIjEuNVxcXCIgd2lkdGg9XFxcIjEzXFxcIiBoZWlnaHQ9XFxcIjE3XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiZmxpY2tyXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48Y2lyY2xlIGN4PVxcXCI1LjVcXFwiIGN5PVxcXCI5LjVcXFwiIHI9XFxcIjMuNVxcXCIvPjxjaXJjbGUgY3g9XFxcIjE0LjVcXFwiIGN5PVxcXCI5LjVcXFwiIHI9XFxcIjMuNVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImZvbGRlclwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlnb24gZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBwb2ludHM9XFxcIjkuNSA1LjUgOC41IDMuNSAxLjUgMy41IDEuNSAxNi41IDE4LjUgMTYuNSAxOC41IDUuNVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImZvcndhcmRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk0yLjQ3LDEzLjExIEM0LjAyLDEwLjAyIDYuMjcsNy44NSA5LjA0LDYuNjEgQzkuNDgsNi40MSAxMC4yNyw2LjEzIDExLDUuOTEgTDExLDIgTDE4Ljg5LDkgTDExLDE2IEwxMSwxMi4xMyBDOS4yNSwxMi40NyA3LjU4LDEzLjE5IDYuMDIsMTQuMjUgQzMuMDMsMTYuMjggMS42MywxOC41NCAxLjYzLDE4LjU0IEMxLjYzLDE4LjU0IDEuMzgsMTUuMjggMi40NywxMy4xMSBMMi40NywxMy4xMSBaIE01LjMsMTMuNTMgQzYuOTIsMTIuNCA5LjA0LDExLjQgMTIsMTAuOTIgTDEyLDEzLjYzIEwxNy4zNiw5IEwxMiw0LjI1IEwxMiw2LjggQzExLjcxLDYuODYgMTAuODYsNy4wMiA5LjY3LDcuNDkgQzYuNzksOC42NSA0LjU4LDEwLjk2IDMuNDksMTMuMDggQzMuMTgsMTMuNyAyLjY4LDE0Ljg3IDIuNDksMTYgQzMuMjgsMTUuMDUgNC40LDE0LjE1IDUuMywxMy41MyBMNS4zLDEzLjUzIFpcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJmb3Vyc3F1YXJlXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBkPVxcXCJNMTUuMjMsMiBDMTUuOTYsMiAxNi40LDIuNDEgMTYuNSwyLjg2IEMxNi41NywzLjE1IDE2LjU2LDMuNDQgMTYuNTEsMy43MyBDMTYuNDYsNC4wNCAxNC44NiwxMS43MiAxNC43NSwxMi4wMyBDMTQuNTYsMTIuNTYgMTQuMTYsMTIuODIgMTMuNjEsMTIuODMgQzEzLjAzLDEyLjg0IDExLjA5LDEyLjUxIDEwLjY5LDEzIEMxMC4zOCwxMy4zOCA3Ljc5LDE2LjM5IDYuODEsMTcuNTMgQzYuNjEsMTcuNzYgNi40LDE3Ljk2IDYuMDgsMTcuOTkgQzUuNjgsMTguMDQgNS4yOSwxNy44NyA1LjE3LDE3LjQ1IEM1LjEyLDE3LjI4IDUuMSwxNy4wOSA1LjEsMTYuOTEgQzUuMSwxMi40IDQuODYsNy44MSA1LjExLDMuMzEgQzUuMTcsMi41IDUuODEsMi4xMiA2LjUzLDIgTDE1LjIzLDIgTDE1LjIzLDIgWiBNOS43NiwxMS40MiBDOS45NCwxMS4xOSAxMC4xNywxMS4xIDEwLjQ1LDExLjEgTDEyLjg2LDExLjEgQzEzLjEyLDExLjEgMTMuMzEsMTAuOTQgMTMuMzYsMTAuNjkgQzEzLjM3LDEwLjY0IDEzLjYyLDkuNDEgMTMuNzQsOC44MyBDMTMuODEsOC41MiAxMy41Myw4LjI4IDEzLjI3LDguMjggQzEyLjM1LDguMjkgMTEuNDIsOC4yOCAxMC41LDguMjggQzkuODQsOC4yOCA5LjgzLDcuNjkgOS44Miw3LjIxIEM5LjgsNi44NSAxMC4xMyw2LjU1IDEwLjUsNi41NSBDMTEuNTksNi41NiAxMi42Nyw2LjU1IDEzLjc2LDYuNTUgQzE0LjAzLDYuNTUgMTQuMjMsNi40IDE0LjI4LDYuMTQgQzE0LjM0LDUuODcgMTQuNjcsNC4yOSAxNC42Nyw0LjI5IEMxNC42Nyw0LjI5IDE0LjgyLDMuNzQgMTQuMTksMy43NCBMNy4zNCwzLjc0IEM3LDMuNzUgNi44NCw0LjAyIDYuODQsNC4zMyBDNi44NCw3LjU4IDYuODUsMTQuOTUgNi44NSwxNC45OSBDNi44NywxNSA4Ljg5LDEyLjUxIDkuNzYsMTEuNDIgTDkuNzYsMTEuNDIgWlxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImZ1dHVyZVwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlsaW5lIHBvaW50cz1cXFwiMTkgMiAxOCAyIDE4IDYgMTQgNiAxNCA3IDE5IDcgMTkgMlxcXCIvPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIGQ9XFxcIk0xOCw2LjU0OCBDMTYuNzA5LDMuMjkgMTMuMzU0LDEgOS42LDEgQzQuNiwxIDAuNiw1IDAuNiwxMCBDMC42LDE1IDQuNiwxOSA5LjYsMTkgQzE0LjYsMTkgMTguNiwxNSAxOC42LDEwXFxcIi8+PHJlY3QgeD1cXFwiOVxcXCIgeT1cXFwiNFxcXCIgd2lkdGg9XFxcIjFcXFwiIGhlaWdodD1cXFwiN1xcXCIvPjxwYXRoIGQ9XFxcIk0xMy4wMTgsMTQuMTk3IEw5LjQ0NSwxMC42MjVcXFwiIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJnaXQtYnJhbmNoXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48Y2lyY2xlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjJcXFwiIGN4PVxcXCI3XFxcIiBjeT1cXFwiM1xcXCIgcj1cXFwiMlxcXCIvPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMlxcXCIgY3g9XFxcIjE0XFxcIiBjeT1cXFwiNlxcXCIgcj1cXFwiMlxcXCIvPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMlxcXCIgY3g9XFxcIjdcXFwiIGN5PVxcXCIxN1xcXCIgcj1cXFwiMlxcXCIvPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIyXFxcIiBkPVxcXCJNMTQsOCBDMTQsMTAuNDEgMTIuNDMsMTAuODcgMTAuNTYsMTEuMjUgQzkuMDksMTEuNTQgNywxMi4wNiA3LDE1IEw3LDVcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJnaXQtZm9ya1wiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PGNpcmNsZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4yXFxcIiBjeD1cXFwiNS43OVxcXCIgY3k9XFxcIjIuNzlcXFwiIHI9XFxcIjEuNzlcXFwiLz48Y2lyY2xlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjJcXFwiIGN4PVxcXCIxNC4xOVxcXCIgY3k9XFxcIjIuNzlcXFwiIHI9XFxcIjEuNzlcXFwiLz48Y2lyY2xlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjJcXFwiIGN4PVxcXCIxMC4wM1xcXCIgY3k9XFxcIjE2Ljc5XFxcIiByPVxcXCIxLjc5XFxcIi8+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjJcXFwiIGQ9XFxcIk01Ljc5LDQuNTcgTDUuNzksNi41NiBDNS43OSw5LjE5IDEwLjAzLDEwLjIyIDEwLjAzLDEzLjMxIEMxMC4wMywxNC44NiAxMC4wNCwxNC41NSAxMC4wNCwxNC41NSBDMTAuMDQsMTQuMzcgMTAuMDQsMTQuODYgMTAuMDQsMTMuMzEgQzEwLjA0LDEwLjIyIDE0LjIsOS4xOSAxNC4yLDYuNTYgTDE0LjIsNC41N1xcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImdpdGh1Yi1hbHRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk0xMCwwLjUgQzQuNzUsMC41IDAuNSw0Ljc2IDAuNSwxMC4wMSBDMC41LDE1LjI2IDQuNzUsMTkuNTEgMTAsMTkuNTEgQzE1LjI0LDE5LjUxIDE5LjUsMTUuMjYgMTkuNSwxMC4wMSBDMTkuNSw0Ljc2IDE1LjI1LDAuNSAxMCwwLjUgTDEwLDAuNSBaIE0xMi44MSwxNy42OSBDMTIuODEsMTcuNjkgMTIuODEsMTcuNyAxMi43OSwxNy42OSBDMTIuNDcsMTcuNzUgMTIuMzUsMTcuNTkgMTIuMzUsMTcuMzYgTDEyLjM1LDE2LjE3IEMxMi4zNSwxNS40NSAxMi4wOSwxNC45MiAxMS41OCwxNC41NiBDMTIuMiwxNC41MSAxMi43NywxNC4zOSAxMy4yNiwxNC4yMSBDMTMuODcsMTMuOTggMTQuMzYsMTMuNjkgMTQuNzQsMTMuMjkgQzE1LjQyLDEyLjU5IDE1Ljc2LDExLjU1IDE1Ljc2LDEwLjE3IEMxNS43Niw5LjI1IDE1LjQ1LDguNDYgMTQuODMsNy44IEMxNS4xLDcuMDggMTUuMDcsNi4yOSAxNC43NSw1LjQ0IEwxNC41MSw1LjQyIEMxNC4zNCw1LjQgMTQuMDYsNS40NiAxMy42Nyw1LjYxIEMxMy4yNSw1Ljc4IDEyLjc5LDYuMDMgMTIuMzEsNi4zNSBDMTEuNTUsNi4xNiAxMC44MSw2LjA1IDEwLjA5LDYuMDUgQzkuMzYsNi4wNSA4LjYxLDYuMTUgNy44OCw2LjM1IEM3LjI4LDUuOTYgNi43NSw1LjY4IDYuMjYsNS41NCBDNi4wNyw1LjQ3IDUuOSw1LjQ0IDUuNzgsNS40NCBMNS40Miw1LjQ0IEM1LjA2LDYuMjkgNS4wNCw3LjA4IDUuMzIsNy44IEM0LjcsOC40NiA0LjQsOS4yNSA0LjQsMTAuMTcgQzQuNCwxMS45NCA0Ljk2LDEzLjE2IDYuMDgsMTMuODQgQzYuNTMsMTQuMTMgNy4wNSwxNC4zMiA3LjY5LDE0LjQzIEM4LjAzLDE0LjUgOC4zMiwxNC41NCA4LjU1LDE0LjU1IEM4LjA3LDE0Ljg5IDcuODIsMTUuNDIgNy44MiwxNi4xNiBMNy44MiwxNy41MSBDNy44LDE3LjY5IDcuNywxNy44IDcuNTEsMTcuOCBDNC4yMSwxNi43NCAxLjgyLDEzLjY1IDEuODIsMTAuMDEgQzEuODIsNS41IDUuNDksMS44MyAxMCwxLjgzIEMxNC41LDEuODMgMTguMTcsNS41IDE4LjE3LDEwLjAxIEMxOC4xOCwxMy41MyAxNS45NCwxNi41NCAxMi44MSwxNy42OSBMMTIuODEsMTcuNjkgWlxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImdpdGh1YlwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBhdGggZD1cXFwiTTEwLDEgQzUuMDMsMSAxLDUuMDMgMSwxMCBDMSwxMy45OCAzLjU4LDE3LjM1IDcuMTYsMTguNTQgQzcuNjEsMTguNjIgNy43NywxOC4zNCA3Ljc3LDE4LjExIEM3Ljc3LDE3LjkgNy43NiwxNy4zMyA3Ljc2LDE2LjU4IEM1LjI2LDE3LjEyIDQuNzMsMTUuMzcgNC43MywxNS4zNyBDNC4zMiwxNC4zMyAzLjczLDE0LjA1IDMuNzMsMTQuMDUgQzIuOTEsMTMuNSAzLjc5LDEzLjUgMy43OSwxMy41IEM0LjY5LDEzLjU2IDUuMTcsMTQuNDMgNS4xNywxNC40MyBDNS45NywxNS44IDcuMjgsMTUuNDEgNy43OSwxNS4xOCBDNy44NywxNC42IDguMSwxNC4yIDguMzYsMTMuOTggQzYuMzYsMTMuNzUgNC4yNiwxMi45OCA0LjI2LDkuNTMgQzQuMjYsOC41NSA0LjYxLDcuNzQgNS4xOSw3LjExIEM1LjEsNi44OCA0Ljc5LDUuOTcgNS4yOCw0LjczIEM1LjI4LDQuNzMgNi4wNCw0LjQ5IDcuNzUsNS42NSBDOC40Nyw1LjQ1IDkuMjQsNS4zNSAxMCw1LjM1IEMxMC43Niw1LjM1IDExLjUzLDUuNDUgMTIuMjUsNS42NSBDMTMuOTcsNC40OCAxNC43Miw0LjczIDE0LjcyLDQuNzMgQzE1LjIxLDUuOTcgMTQuOSw2Ljg4IDE0LjgxLDcuMTEgQzE1LjM5LDcuNzQgMTUuNzMsOC41NCAxNS43Myw5LjUzIEMxNS43MywxMi45OSAxMy42MywxMy43NSAxMS42MiwxMy45NyBDMTEuOTQsMTQuMjUgMTIuMjMsMTQuOCAxMi4yMywxNS42NCBDMTIuMjMsMTYuODQgMTIuMjIsMTcuODEgMTIuMjIsMTguMTEgQzEyLjIyLDE4LjM1IDEyLjM4LDE4LjYzIDEyLjg0LDE4LjU0IEMxNi40MiwxNy4zNSAxOSwxMy45OCAxOSwxMCBDMTksNS4wMyAxNC45NywxIDEwLDEgTDEwLDEgWlxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImdpdHRlclwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHJlY3QgeD1cXFwiMy41XFxcIiB5PVxcXCIxXFxcIiB3aWR0aD1cXFwiMS41MzFcXFwiIGhlaWdodD1cXFwiMTEuNDcxXFxcIi8+PHJlY3QgeD1cXFwiNy4zMjRcXFwiIHk9XFxcIjQuMDU5XFxcIiB3aWR0aD1cXFwiMS41MjlcXFwiIGhlaWdodD1cXFwiMTUuMjk0XFxcIi8+PHJlY3QgeD1cXFwiMTEuMTQ4XFxcIiB5PVxcXCI0LjA1OVxcXCIgd2lkdGg9XFxcIjEuNTI3XFxcIiBoZWlnaHQ9XFxcIjE1LjI5NFxcXCIvPjxyZWN0IHg9XFxcIjE0Ljk3MVxcXCIgeT1cXFwiNC4wNTlcXFwiIHdpZHRoPVxcXCIxLjUyOVxcXCIgaGVpZ2h0PVxcXCI4LjQxMlxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImdvb2dsZS1wbHVzXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBkPVxcXCJNMTIuOSw5YzAsMi43LTAuNiw1LTMuMiw2LjNjLTMuNywxLjgtOC4xLDAuMi05LjQtMy42Qy0xLjEsNy42LDEuOSwzLjMsNi4xLDNjMS43LTAuMSwzLjIsMC4zLDQuNiwxLjMgYzAuMSwwLjEsMC4zLDAuMiwwLjQsMC40Yy0wLjUsMC41LTEuMiwxLTEuNywxLjZjLTEtMC44LTIuMS0xLjEtMy41LTAuOUM1LDUuNiw0LjIsNiwzLjYsNi43Yy0xLjMsMS4zLTEuNSwzLjQtMC41LDUgYzEsMS43LDIuNiwyLjMsNC42LDEuOWMxLjQtMC4zLDIuNC0xLjIsMi42LTIuNkg2LjlWOUgxMi45elxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjAsOSAyMCwxMSAxOCwxMSAxOCwxMyAxNiwxMyAxNiwxMSAxNCwxMSAxNCw5IDE2LDkgMTYsNyAxOCw3IDE4LDlcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJnb29nbGVcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk0xNy44Niw5LjA5IEMxOC40NiwxMi4xMiAxNy4xNCwxNi4wNSAxMy44MSwxNy41NiBDOS40NSwxOS41MyA0LjEzLDE3LjY4IDIuNDcsMTIuODcgQzAuNjgsNy42OCA0LjIyLDIuNDIgOS41LDIuMDMgQzExLjU3LDEuODggMTMuNDIsMi4zNyAxNS4wNSwzLjY1IEMxNS4yMiwzLjc4IDE1LjM3LDMuOTMgMTUuNjEsNC4xNCBDMTQuOSw0LjgxIDE0LjIzLDUuNDUgMTMuNSw2LjE0IEMxMi4yNyw1LjA4IDEwLjg0LDQuNzIgOS4yOCw0Ljk4IEM4LjEyLDUuMTcgNy4xNiw1Ljc2IDYuMzcsNi42MyBDNC44OCw4LjI3IDQuNjIsMTAuODYgNS43NiwxMi44MiBDNi45NSwxNC44NyA5LjE3LDE1LjggMTEuNTcsMTUuMjUgQzEzLjI3LDE0Ljg3IDE0Ljc2LDEzLjMzIDE0Ljg5LDExLjc1IEwxMC41MSwxMS43NSBMMTAuNTEsOS4wOSBMMTcuODYsOS4wOSBMMTcuODYsOS4wOSBaXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiZ3JpZFwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHJlY3QgeD1cXFwiMlxcXCIgeT1cXFwiMlxcXCIgd2lkdGg9XFxcIjNcXFwiIGhlaWdodD1cXFwiM1xcXCIvPjxyZWN0IHg9XFxcIjhcXFwiIHk9XFxcIjJcXFwiIHdpZHRoPVxcXCIzXFxcIiBoZWlnaHQ9XFxcIjNcXFwiLz48cmVjdCB4PVxcXCIxNFxcXCIgeT1cXFwiMlxcXCIgd2lkdGg9XFxcIjNcXFwiIGhlaWdodD1cXFwiM1xcXCIvPjxyZWN0IHg9XFxcIjJcXFwiIHk9XFxcIjhcXFwiIHdpZHRoPVxcXCIzXFxcIiBoZWlnaHQ9XFxcIjNcXFwiLz48cmVjdCB4PVxcXCI4XFxcIiB5PVxcXCI4XFxcIiB3aWR0aD1cXFwiM1xcXCIgaGVpZ2h0PVxcXCIzXFxcIi8+PHJlY3QgeD1cXFwiMTRcXFwiIHk9XFxcIjhcXFwiIHdpZHRoPVxcXCIzXFxcIiBoZWlnaHQ9XFxcIjNcXFwiLz48cmVjdCB4PVxcXCIyXFxcIiB5PVxcXCIxNFxcXCIgd2lkdGg9XFxcIjNcXFwiIGhlaWdodD1cXFwiM1xcXCIvPjxyZWN0IHg9XFxcIjhcXFwiIHk9XFxcIjE0XFxcIiB3aWR0aD1cXFwiM1xcXCIgaGVpZ2h0PVxcXCIzXFxcIi8+PHJlY3QgeD1cXFwiMTRcXFwiIHk9XFxcIjE0XFxcIiB3aWR0aD1cXFwiM1xcXCIgaGVpZ2h0PVxcXCIzXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiaGFwcHlcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgY3g9XFxcIjEzXFxcIiBjeT1cXFwiN1xcXCIgcj1cXFwiMVxcXCIvPjxjaXJjbGUgY3g9XFxcIjdcXFwiIGN5PVxcXCI3XFxcIiByPVxcXCIxXFxcIi8+PGNpcmNsZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIGN4PVxcXCIxMFxcXCIgY3k9XFxcIjEwXFxcIiByPVxcXCI4LjVcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIGQ9XFxcIk0xNC42LDExLjQgQzEzLjksMTMuMyAxMi4xLDE0LjUgMTAsMTQuNSBDNy45LDE0LjUgNi4xLDEzLjMgNS40LDExLjRcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJoYXNodGFnXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBkPVxcXCJNMTUuNDMxLDggTDE1LjY2MSw3IEwxMi45MTEsNyBMMTMuODMxLDMgTDEyLjkwMSwzIEwxMS45OCw3IEw5LjI5LDcgTDEwLjIxLDMgTDkuMjgxLDMgTDguMzYxLDcgTDUuMjMsNyBMNSw4IEw4LjEzLDggTDcuMjEsMTIgTDQuMjMsMTIgTDQsMTMgTDYuOTgsMTMgTDYuMDYxLDE3IEw2Ljk5MSwxNyBMNy45MTEsMTMgTDEwLjYwMSwxMyBMOS42ODEsMTcgTDEwLjYxMSwxNyBMMTEuNTMxLDEzIEwxNC40MzEsMTMgTDE0LjY2MSwxMiBMMTEuNzYsMTIgTDEyLjY4MSw4IEwxNS40MzEsOCBaIE0xMC44MzEsMTIgTDguMTQxLDEyIEw5LjA2MSw4IEwxMS43NSw4IEwxMC44MzEsMTIgWlxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImhlYXJ0XCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4wM1xcXCIgZD1cXFwiTTEwLDQgQzEwLDQgOC4xLDIgNS43NCwyIEMzLjM4LDIgMSwzLjU1IDEsNi43MyBDMSw4Ljg0IDIuNjcsMTAuNDQgMi42NywxMC40NCBMMTAsMTggTDE3LjMzLDEwLjQ0IEMxNy4zMywxMC40NCAxOSw4Ljg0IDE5LDYuNzMgQzE5LDMuNTUgMTYuNjIsMiAxNC4yNiwyIEMxMS45LDIgMTAsNCAxMCw0IEwxMCw0IFpcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJoaXN0b3J5XCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWxpbmUgZmlsbD1cXFwiIzAwMFxcXCIgcG9pbnRzPVxcXCIxIDIgMiAyIDIgNiA2IDYgNiA3IDEgNyAxIDJcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiBkPVxcXCJNMi4xLDYuNTQ4IEMzLjM5MSwzLjI5IDYuNzQ2LDEgMTAuNSwxIEMxNS41LDEgMTkuNSw1IDE5LjUsMTAgQzE5LjUsMTUgMTUuNSwxOSAxMC41LDE5IEM1LjUsMTkgMS41LDE1IDEuNSwxMFxcXCIvPjxyZWN0IHg9XFxcIjlcXFwiIHk9XFxcIjRcXFwiIHdpZHRoPVxcXCIxXFxcIiBoZWlnaHQ9XFxcIjdcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiBkPVxcXCJNMTMuMDE4LDE0LjE5NyBMOS40NDUsMTAuNjI1XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiaG9tZVwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlnb24gcG9pbnRzPVxcXCIxOC42NSAxMS4zNSAxMCAyLjcxIDEuMzUgMTEuMzUgMC42NSAxMC42NSAxMCAxLjI5IDE5LjM1IDEwLjY1XFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxNSA0IDE4IDQgMTggNyAxNyA3IDE3IDUgMTUgNVxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMyAxMSA0IDExIDQgMTggNyAxOCA3IDEyIDEyIDEyIDEyIDE4IDE2IDE4IDE2IDExIDE3IDExIDE3IDE5IDExIDE5IDExIDEzIDggMTMgOCAxOSAzIDE5XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgY3g9XFxcIjE2LjFcXFwiIGN5PVxcXCI2LjFcXFwiIHI9XFxcIjEuMVxcXCIvPjxyZWN0IGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgeD1cXFwiLjVcXFwiIHk9XFxcIjIuNVxcXCIgd2lkdGg9XFxcIjE5XFxcIiBoZWlnaHQ9XFxcIjE1XFxcIi8+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjAxXFxcIiBwb2ludHM9XFxcIjQsMTMgOCw5IDEzLDE0XFxcIi8+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjAxXFxcIiBwb2ludHM9XFxcIjExLDEyIDEyLjUsMTAuNSAxNiwxNFxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImluZm9cIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk0xMi4xMywxMS41OSBDMTEuOTcsMTIuODQgMTAuMzUsMTQuMTIgOS4xLDE0LjE2IEM2LjE3LDE0LjIgOS44OSw5LjQ2IDguNzQsOC4zNyBDOS4zLDguMTYgMTAuNjIsNy44MyAxMC42Miw4LjgxIEMxMC42Miw5LjYzIDEwLjEyLDEwLjU1IDkuODgsMTEuMzIgQzguNjYsMTUuMTYgMTIuMTMsMTEuMTUgMTIuMTQsMTEuMTggQzEyLjE2LDExLjIxIDEyLjE2LDExLjM1IDEyLjEzLDExLjU5IEMxMi4wOCwxMS45NSAxMi4xNiwxMS4zNSAxMi4xMywxMS41OSBMMTIuMTMsMTEuNTkgWiBNMTEuNTYsNS42NyBDMTEuNTYsNi42NyA5LjM2LDcuMTUgOS4zNiw2LjAzIEM5LjM2LDUgMTEuNTYsNC41NCAxMS41Niw1LjY3IEwxMS41Niw1LjY3IFpcXFwiLz48Y2lyY2xlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIGN4PVxcXCIxMFxcXCIgY3k9XFxcIjEwXFxcIiByPVxcXCI5XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwiaW5zdGFncmFtXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBkPVxcXCJNMTMuNTUsMUg2LjQ2QzMuNDUsMSwxLDMuNDQsMSw2LjQ0djcuMTJjMCwzLDIuNDUsNS40NCw1LjQ2LDUuNDRoNy4wOGMzLjAyLDAsNS40Ni0yLjQ0LDUuNDYtNS40NFY2LjQ0IEMxOS4wMSwzLjQ0LDE2LjU2LDEsMTMuNTUsMXogTTE3LjUsMTRjMCwxLjkzLTEuNTcsMy41LTMuNSwzLjVINmMtMS45MywwLTMuNS0xLjU3LTMuNS0zLjVWNmMwLTEuOTMsMS41Ny0zLjUsMy41LTMuNWg4IGMxLjkzLDAsMy41LDEuNTcsMy41LDMuNVYxNHpcXFwiLz48Y2lyY2xlIGN4PVxcXCIxNC44N1xcXCIgY3k9XFxcIjUuMjZcXFwiIHI9XFxcIjEuMDlcXFwiLz48cGF0aCBkPVxcXCJNMTAuMDMsNS40NWMtMi41NSwwLTQuNjMsMi4wNi00LjYzLDQuNmMwLDIuNTUsMi4wNyw0LjYxLDQuNjMsNC42MWMyLjU2LDAsNC42My0yLjA2MSw0LjYzLTQuNjEgQzE0LjY1LDcuNTEsMTIuNTgsNS40NSwxMC4wMyw1LjQ1TDEwLjAzLDUuNDVMMTAuMDMsNS40NXogTTEwLjA4LDEzYy0xLjY2LDAtMy0xLjM0LTMtMi45OWMwLTEuNjUsMS4zNC0yLjk5LDMtMi45OXMzLDEuMzQsMywyLjk5IEMxMy4wOCwxMS42NiwxMS43NCwxMywxMC4wOCwxM0wxMC4wOCwxM0wxMC4wOCwxM3pcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJpdGFsaWNcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk0xMi42Myw1LjQ4IEwxMC4xNSwxNC41MiBDMTAsMTUuMDggMTAuMzcsMTUuMjUgMTEuOTIsMTUuMyBMMTEuNzIsMTYgTDYsMTYgTDYuMiwxNS4zMSBDNy43OCwxNS4yNiA4LjE5LDE1LjA5IDguMzQsMTQuNTMgTDEwLjgyLDUuNDkgQzEwLjk3LDQuOTIgMTAuNjMsNC43NiA5LjA5LDQuNzEgTDkuMjgsNCBMMTUsNCBMMTQuODEsNC42OSBDMTMuMjMsNC43NSAxMi43OCw0LjkxIDEyLjYzLDUuNDggTDEyLjYzLDUuNDggWlxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImpvb21sYVwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBhdGggZD1cXFwiTTcuOCwxMy40bDEuNy0xLjdMNS45LDhjLTAuNi0wLjUtMC42LTEuNSwwLTJjMC42LTAuNiwxLjQtMC42LDIsMGwxLjctMS43Yy0xLTEtMi4zLTEuMy0zLjYtMUM1LjgsMi4yLDQuOCwxLjQsMy43LDEuNCBjLTEuMywwLTIuMywxLTIuMywyLjNjMCwxLjEsMC44LDIsMS44LDIuM2MtMC40LDEuMy0wLjEsMi44LDEsMy44TDcuOCwxMy40TDcuOCwxMy40elxcXCIvPjxwYXRoIGQ9XFxcIk0xMC4yLDQuM2MxLTEsMi41LTEuNCwzLjgtMWMwLjItMS4xLDEuMS0yLDIuMy0yYzEuMywwLDIuMywxLDIuMywyLjNjMCwxLjItMC45LDIuMi0yLDIuM2MwLjQsMS4zLDAsMi44LTEsMy44TDEzLjksOCBjMC42LTAuNSwwLjYtMS41LDAtMmMtMC41LTAuNi0xLjUtMC42LTIsMEw4LjIsOS43TDYuNSw4XFxcIi8+PHBhdGggZD1cXFwiTTE0LjEsMTYuOGMtMS4zLDAuNC0yLjgsMC4xLTMuOC0xbDEuNy0xLjdjMC42LDAuNiwxLjUsMC42LDIsMGMwLjUtMC42LDAuNi0xLjUsMC0ybC0zLjctMy43TDEyLDYuN2wzLjcsMy43IGMxLDEsMS4zLDIuNCwxLDMuNmMxLjEsMC4yLDIsMS4xLDIsMi4zYzAsMS4zLTEsMi4zLTIuMywyLjNDMTUuMiwxOC42LDE0LjMsMTcuOCwxNC4xLDE2LjhcXFwiLz48cGF0aCBkPVxcXCJNMTMuMiwxMi4ybC0zLjcsMy43Yy0xLDEtMi40LDEuMy0zLjYsMWMtMC4yLDEtMS4yLDEuOC0yLjIsMS44Yy0xLjMsMC0yLjMtMS0yLjMtMi4zYzAtMS4xLDAuOC0yLDEuOC0yLjMgYy0wLjMtMS4zLDAtMi43LDEtMy43bDEuNywxLjdjLTAuNiwwLjYtMC42LDEuNSwwLDJjMC42LDAuNiwxLjQsMC42LDIsMGwzLjctMy43XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwibGFwdG9wXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cmVjdCB5PVxcXCIxNlxcXCIgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48cmVjdCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHg9XFxcIjIuNVxcXCIgeT1cXFwiNC41XFxcIiB3aWR0aD1cXFwiMTVcXFwiIGhlaWdodD1cXFwiMTBcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJsaWZlc2F2ZXJcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk0xMCwwLjUgQzQuNzYsMC41IDAuNSw0Ljc2IDAuNSwxMCBDMC41LDE1LjI0IDQuNzYsMTkuNSAxMCwxOS41IEMxNS4yNCwxOS41IDE5LjUsMTUuMjQgMTkuNSwxMCBDMTkuNSw0Ljc2IDE1LjI0LDAuNSAxMCwwLjUgTDEwLDAuNSBaIE0xMCwxLjUgQzExLjQ5LDEuNSAxMi44OSwxLjg4IDE0LjExLDIuNTYgTDExLjg1LDQuODIgQzExLjI3LDQuNjEgMTAuNjUsNC41IDEwLDQuNSBDOS4yMSw0LjUgOC40Nyw0LjY3IDcuNzksNC45NiBMNS41OCwyLjc1IEM2Ljg3LDEuOTUgOC4zOCwxLjUgMTAsMS41IEwxMCwxLjUgWiBNNC45Niw3LjggQzQuNjcsOC40OCA0LjUsOS4yMSA0LjUsMTAgQzQuNSwxMC42NSA0LjYxLDExLjI3IDQuODMsMTEuODUgTDIuNTYsMTQuMTEgQzEuODgsMTIuODkgMS41LDExLjQ5IDEuNSwxMCBDMS41LDguMzggMS45NSw2Ljg3IDIuNzUsNS41OCBMNC45Niw3Ljc5IEw0Ljk2LDcuOCBMNC45Niw3LjggWiBNMTAsMTguNSBDOC4yNSwxOC41IDYuNjIsMTcuOTcgNS4yNywxNy4wNiBMNy40NiwxNC44NyBDOC4yMiwxNS4yNyA5LjA4LDE1LjUgMTAsMTUuNSBDMTAuNzksMTUuNSAxMS41MywxNS4zMyAxMi4yMSwxNS4wNCBMMTQuNDIsMTcuMjUgQzEzLjEzLDE4LjA1IDExLjYyLDE4LjUgMTAsMTguNSBMMTAsMTguNSBaIE0xMCwxNC41IEM3LjUyLDE0LjUgNS41LDEyLjQ4IDUuNSwxMCBDNS41LDcuNTIgNy41Miw1LjUgMTAsNS41IEMxMi40OCw1LjUgMTQuNSw3LjUyIDE0LjUsMTAgQzE0LjUsMTIuNDggMTIuNDgsMTQuNSAxMCwxNC41IEwxMCwxNC41IFogTTE1LjA0LDEyLjIxIEMxNS4zMywxMS41MyAxNS41LDEwLjc5IDE1LjUsMTAgQzE1LjUsOS4wOCAxNS4yNyw4LjIyIDE0Ljg3LDcuNDYgTDE3LjA2LDUuMjcgQzE3Ljk3LDYuNjIgMTguNSw4LjI1IDE4LjUsMTAgQzE4LjUsMTEuNjIgMTguMDUsMTMuMTMgMTcuMjUsMTQuNDIgTDE1LjA0LDEyLjIxIEwxNS4wNCwxMi4yMSBaXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwibGlua1wiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgZD1cXFwiTTEwLjYyNSwxMi4zNzUgTDcuNTI1LDE1LjQ3NSBDNi44MjUsMTYuMTc1IDUuOTI1LDE2LjE3NSA1LjIyNSwxNS40NzUgTDQuNTI1LDE0Ljc3NSBDMy44MjUsMTQuMDc0IDMuODI1LDEzLjE3NSA0LjUyNSwxMi40NzUgTDcuNjI1LDkuMzc1XFxcIi8+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgZD1cXFwiTTkuMzI1LDcuMzc1IEwxMi40MjUsNC4yNzUgQzEzLjEyNSwzLjU3NSAxNC4wMjUsMy41NzUgMTQuNzI0LDQuMjc1IEwxNS40MjUsNC45NzUgQzE2LjEyNSw1LjY3NSAxNi4xMjUsNi41NzUgMTUuNDI1LDcuMjc1IEwxMi4zMjUsMTAuMzc1XFxcIi8+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgZD1cXFwiTTcuOTI1LDExLjg3NSBMMTEuOTI1LDcuOTc1XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwibGlua2VkaW5cIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk01Ljc3LDE3Ljg5IEw1Ljc3LDcuMTcgTDIuMjEsNy4xNyBMMi4yMSwxNy44OSBMNS43NywxNy44OSBMNS43NywxNy44OSBaIE0zLjk5LDUuNzEgQzUuMjMsNS43MSA2LjAxLDQuODkgNi4wMSwzLjg2IEM1Ljk5LDIuOCA1LjI0LDIgNC4wMiwyIEMyLjgsMiAyLDIuOCAyLDMuODUgQzIsNC44OCAyLjc3LDUuNyAzLjk3LDUuNyBMMy45OSw1LjcgTDMuOTksNS43MSBMMy45OSw1LjcxIFpcXFwiLz48cGF0aCBkPVxcXCJNNy43NSwxNy44OSBMMTEuMzEsMTcuODkgTDExLjMxLDExLjkgQzExLjMxLDExLjU4IDExLjMzLDExLjI2IDExLjQzLDExLjAzIEMxMS42OSwxMC4zOSAxMi4yNyw5LjczIDEzLjI2LDkuNzMgQzE0LjU1LDkuNzMgMTUuMDYsMTAuNzEgMTUuMDYsMTIuMTUgTDE1LjA2LDE3Ljg5IEwxOC42MiwxNy44OSBMMTguNjIsMTEuNzQgQzE4LjYyLDguNDUgMTYuODYsNi45MiAxNC41Miw2LjkyIEMxMi42LDYuOTIgMTEuNzUsNy45OSAxMS4yOCw4LjczIEwxMS4zLDguNzMgTDExLjMsNy4xNyBMNy43NSw3LjE3IEM3Ljc5LDguMTcgNy43NSwxNy44OSA3Ljc1LDE3Ljg5IEw3Ljc1LDE3Ljg5IEw3Ljc1LDE3Ljg5IFpcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJsaXN0XCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cmVjdCB4PVxcXCI2XFxcIiB5PVxcXCI0XFxcIiB3aWR0aD1cXFwiMTJcXFwiIGhlaWdodD1cXFwiMVxcXCIvPjxyZWN0IHg9XFxcIjZcXFwiIHk9XFxcIjlcXFwiIHdpZHRoPVxcXCIxMlxcXCIgaGVpZ2h0PVxcXCIxXFxcIi8+PHJlY3QgeD1cXFwiNlxcXCIgeT1cXFwiMTRcXFwiIHdpZHRoPVxcXCIxMlxcXCIgaGVpZ2h0PVxcXCIxXFxcIi8+PHJlY3QgeD1cXFwiMlxcXCIgeT1cXFwiNFxcXCIgd2lkdGg9XFxcIjJcXFwiIGhlaWdodD1cXFwiMVxcXCIvPjxyZWN0IHg9XFxcIjJcXFwiIHk9XFxcIjlcXFwiIHdpZHRoPVxcXCIyXFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48cmVjdCB4PVxcXCIyXFxcIiB5PVxcXCIxNFxcXCIgd2lkdGg9XFxcIjJcXFwiIGhlaWdodD1cXFwiMVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImxvY2F0aW9uXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4wMVxcXCIgZD1cXFwiTTEwLDAuNSBDNi40MSwwLjUgMy41LDMuMzkgMy41LDYuOTggQzMuNSwxMS44MyAxMCwxOSAxMCwxOSBDMTAsMTkgMTYuNSwxMS44MyAxNi41LDYuOTggQzE2LjUsMy4zOSAxMy41OSwwLjUgMTAsMC41IEwxMCwwLjUgWlxcXCIvPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBjeD1cXFwiMTBcXFwiIGN5PVxcXCI2LjhcXFwiIHI9XFxcIjIuM1xcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcImxvY2tcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxyZWN0IGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgaGVpZ2h0PVxcXCIxMFxcXCIgd2lkdGg9XFxcIjEzXFxcIiB5PVxcXCI4LjVcXFwiIHg9XFxcIjMuNVxcXCIvPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgZD1cXFwiTTYuNSw4IEw2LjUsNC44OCBDNi41LDMuMDEgOC4wNywxLjUgMTAsMS41IEMxMS45MywxLjUgMTMuNSwzLjAxIDEzLjUsNC44OCBMMTMuNSw4XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwibWFpbFwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgcG9pbnRzPVxcXCIxLjQsNi41IDEwLDExIDE4LjYsNi41XFxcIi8+PHBhdGggZD1cXFwiTSAxLDQgMSwxNiAxOSwxNiAxOSw0IDEsNCBaIE0gMTgsMTUgMiwxNSAyLDUgMTgsNSAxOCwxNSBaXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwibWVudVwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHJlY3QgeD1cXFwiMlxcXCIgeT1cXFwiNFxcXCIgd2lkdGg9XFxcIjE2XFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48cmVjdCB4PVxcXCIyXFxcIiB5PVxcXCI5XFxcIiB3aWR0aD1cXFwiMTZcXFwiIGhlaWdodD1cXFwiMVxcXCIvPjxyZWN0IHg9XFxcIjJcXFwiIHk9XFxcIjE0XFxcIiB3aWR0aD1cXFwiMTZcXFwiIGhlaWdodD1cXFwiMVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcIm1pY3JvcGhvbmVcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgeDE9XFxcIjEwXFxcIiB4Mj1cXFwiMTBcXFwiIHkxPVxcXCIxNi40NFxcXCIgeTI9XFxcIjE4LjVcXFwiLz48bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHgxPVxcXCI3XFxcIiB4Mj1cXFwiMTNcXFwiIHkxPVxcXCIxOC41XFxcIiB5Mj1cXFwiMTguNVxcXCIvPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIGQ9XFxcIk0xMy41IDQuODl2NS44N2EzLjUgMy41IDAgMCAxLTcgMFY0Ljg5YTMuNSAzLjUgMCAwIDEgNyAwelxcXCIvPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIGQ9XFxcIk0xNS41IDEwLjM2VjExYTUuNSA1LjUgMCAwIDEtMTEgMHYtLjZcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJtaW51cy1jaXJjbGVcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgY3g9XFxcIjkuNVxcXCIgY3k9XFxcIjkuNVxcXCIgcj1cXFwiOVxcXCIvPjxsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgeDE9XFxcIjVcXFwiIHkxPVxcXCI5LjVcXFwiIHgyPVxcXCIxNFxcXCIgeTI9XFxcIjkuNVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcIm1pbnVzXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxOFxcXCIgeT1cXFwiOVxcXCIgeD1cXFwiMVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcIm1vcmUtdmVydGljYWxcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgY3g9XFxcIjEwXFxcIiBjeT1cXFwiM1xcXCIgcj1cXFwiMlxcXCIvPjxjaXJjbGUgY3g9XFxcIjEwXFxcIiBjeT1cXFwiMTBcXFwiIHI9XFxcIjJcXFwiLz48Y2lyY2xlIGN4PVxcXCIxMFxcXCIgY3k9XFxcIjE3XFxcIiByPVxcXCIyXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwibW9yZVwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PGNpcmNsZSBjeD1cXFwiM1xcXCIgY3k9XFxcIjEwXFxcIiByPVxcXCIyXFxcIi8+PGNpcmNsZSBjeD1cXFwiMTBcXFwiIGN5PVxcXCIxMFxcXCIgcj1cXFwiMlxcXCIvPjxjaXJjbGUgY3g9XFxcIjE3XFxcIiBjeT1cXFwiMTBcXFwiIHI9XFxcIjJcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJtb3ZlXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWdvbiBwb2ludHM9XFxcIjQsNSAxLDUgMSw5IDIsOSAyLDYgNCw2XFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxLDE2IDIsMTYgMiwxOCA0LDE4IDQsMTkgMSwxOVxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTQsMTYgMTQsMTkgMTEsMTkgMTEsMTggMTMsMTggMTMsMTZcXFwiLz48cmVjdCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHg9XFxcIjUuNVxcXCIgeT1cXFwiMS41XFxcIiB3aWR0aD1cXFwiMTNcXFwiIGhlaWdodD1cXFwiMTNcXFwiLz48cmVjdCB4PVxcXCIxXFxcIiB5PVxcXCIxMVxcXCIgd2lkdGg9XFxcIjFcXFwiIGhlaWdodD1cXFwiM1xcXCIvPjxyZWN0IHg9XFxcIjZcXFwiIHk9XFxcIjE4XFxcIiB3aWR0aD1cXFwiM1xcXCIgaGVpZ2h0PVxcXCIxXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwibnV0XCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWdvbiBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHBvaW50cz1cXFwiMi41LDUuNyAxMCwxLjMgMTcuNSw1LjcgMTcuNSwxNC4zIDEwLDE4LjcgMi41LDE0LjNcXFwiLz48Y2lyY2xlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgY3g9XFxcIjEwXFxcIiBjeT1cXFwiMTBcXFwiIHI9XFxcIjMuNVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInBhZ2VraXRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5Z29uIHBvaW50cz1cXFwiMywxIDE3LDEgMTcsMTYgMTAsMTYgMTAsMTMgMTQsMTMgMTQsNCA2LDQgNiwxNiAxMCwxNiAxMCwxOSAzLDE5XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwicGFpbnQtYnVja2V0XCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBkPVxcXCJNMTAuMjEsMSBMMCwxMS4yMSBMOC4xLDE5LjMxIEwxOC4zMSw5LjEgTDEwLjIxLDEgTDEwLjIxLDEgWiBNMTYuODksOS4xIEwxNSwxMSBMMS43LDExIEwxMC4yMSwyLjQyIEwxNi44OSw5LjEgWlxcXCIvPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIGQ9XFxcIk02LjQyLDIuMzMgTDExLjcsNy42MVxcXCIvPjxwYXRoIGQ9XFxcIk0xOC40OSwxMiBDMTguNDksMTIgMjAsMTQuMDYgMjAsMTUuMzYgQzIwLDE2LjI4IDE5LjI0LDE3IDE4LjQ5LDE3IEwxOC40OSwxNyBDMTcuNzQsMTcgMTcsMTYuMjggMTcsMTUuMzYgQzE3LDE0LjA2IDE4LjQ5LDEyIDE4LjQ5LDEyIEwxOC40OSwxMiBaXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwicGVuY2lsXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIGQ9XFxcIk0xNy4yNSw2LjAxIEw3LjEyLDE2LjEgTDMuODIsMTcuMiBMNS4wMiwxMy45IEwxNS4xMiwzLjg4IEMxNS43MSwzLjI5IDE2LjY2LDMuMjkgMTcuMjUsMy44OCBDMTcuODMsNC40NyAxNy44Myw1LjQyIDE3LjI1LDYuMDEgTDE3LjI1LDYuMDEgWlxcXCIvPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgZD1cXFwiTTE1Ljk4LDcuMjY4IEwxMy44NTEsNS4xNDhcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJwaG9uZS1sYW5kc2NhcGVcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgZD1cXFwiTTE3LDUuNSBDMTcuOCw1LjUgMTguNSw2LjIgMTguNSw3IEwxOC41LDE0IEMxOC41LDE0LjggMTcuOCwxNS41IDE3LDE1LjUgTDMsMTUuNSBDMi4yLDE1LjUgMS41LDE0LjggMS41LDE0IEwxLjUsNyBDMS41LDYuMiAyLjIsNS41IDMsNS41IEwxNyw1LjUgTDE3LDUuNSBMMTcsNS41IFpcXFwiLz48Y2lyY2xlIGN4PVxcXCIzLjhcXFwiIGN5PVxcXCIxMC41XFxcIiByPVxcXCIuOFxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInBob25lXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIGQ9XFxcIk0xNS41LDE3IEMxNS41LDE3LjggMTQuOCwxOC41IDE0LDE4LjUgTDcsMTguNSBDNi4yLDE4LjUgNS41LDE3LjggNS41LDE3IEw1LjUsMyBDNS41LDIuMiA2LjIsMS41IDcsMS41IEwxNCwxLjUgQzE0LjgsMS41IDE1LjUsMi4yIDE1LjUsMyBMMTUuNSwxNyBMMTUuNSwxNyBMMTUuNSwxNyBaXFxcIi8+PGNpcmNsZSBjeD1cXFwiMTAuNVxcXCIgY3k9XFxcIjE2LjVcXFwiIHI9XFxcIi44XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwicGludGVyZXN0XCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBkPVxcXCJNMTAuMjEsMSBDNS41LDEgMyw0LjE2IDMsNy42MSBDMyw5LjIxIDMuODUsMTEuMiA1LjIyLDExLjg0IEM1LjQzLDExLjk0IDUuNTQsMTEuODkgNS41OCwxMS42OSBDNS42MiwxMS41NCA1LjgsMTAuOCA1Ljg4LDEwLjQ1IEM1LjkxLDEwLjM0IDUuODksMTAuMjQgNS44LDEwLjE0IEM1LjM2LDkuNTkgNSw4LjU4IDUsNy42NSBDNSw1LjI0IDYuODIsMi45MSA5LjkzLDIuOTEgQzEyLjYxLDIuOTEgMTQuNDksNC43NCAxNC40OSw3LjM1IEMxNC40OSwxMC4zIDEzLDEyLjM1IDExLjA2LDEyLjM1IEM5Ljk5LDEyLjM1IDkuMTksMTEuNDcgOS40NCwxMC4zOCBDOS43NSw5LjA4IDEwLjM1LDcuNjggMTAuMzUsNi43NSBDMTAuMzUsNS45MSA5LjksNS4yMSA4Ljk3LDUuMjEgQzcuODcsNS4yMSA2Ljk5LDYuMzQgNi45OSw3Ljg2IEM2Ljk5LDguODMgNy4zMiw5LjQ4IDcuMzIsOS40OCBDNy4zMiw5LjQ4IDYuMjQsMTQuMDYgNi4wNCwxNC45MSBDNS43LDE2LjM1IDYuMDgsMTguNyA2LjEyLDE4LjkgQzYuMTQsMTkuMDEgNi4yNiwxOS4wNSA2LjMzLDE4Ljk1IEM2LjQ0LDE4LjgxIDcuNzQsMTYuODUgOC4xMSwxNS40NCBDOC4yNCwxNC45MyA4Ljc5LDEyLjg0IDguNzksMTIuODQgQzkuMTUsMTMuNTIgMTAuMTksMTQuMDkgMTEuMjksMTQuMDkgQzE0LjU4LDE0LjA5IDE2Ljk2LDExLjA2IDE2Ljk2LDcuMyBDMTYuOTQsMy43IDE0LDEgMTAuMjEsMVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInBsYXktY2lyY2xlXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWdvbiBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiBwb2ludHM9XFxcIjguNSA3IDEzLjUgMTAgOC41IDEzXFxcIi8+PGNpcmNsZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiBjeD1cXFwiMTBcXFwiIGN5PVxcXCIxMFxcXCIgcj1cXFwiOVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInBsYXlcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5Z29uIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgcG9pbnRzPVxcXCI2LjUsNSAxNC41LDEwIDYuNSwxNVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInBsdXMtY2lyY2xlXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48Y2lyY2xlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIGN4PVxcXCI5LjVcXFwiIGN5PVxcXCI5LjVcXFwiIHI9XFxcIjlcXFwiLz48bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHgxPVxcXCI5LjVcXFwiIHkxPVxcXCI1XFxcIiB4Mj1cXFwiOS41XFxcIiB5Mj1cXFwiMTRcXFwiLz48bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHgxPVxcXCI1XFxcIiB5MT1cXFwiOS41XFxcIiB4Mj1cXFwiMTRcXFwiIHkyPVxcXCI5LjVcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJwbHVzXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cmVjdCB4PVxcXCI5XFxcIiB5PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgaGVpZ2h0PVxcXCIxN1xcXCIvPjxyZWN0IHg9XFxcIjFcXFwiIHk9XFxcIjlcXFwiIHdpZHRoPVxcXCIxN1xcXCIgaGVpZ2h0PVxcXCIxXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwicHJpbnRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHBvaW50cz1cXFwiNC41IDEzLjUgMS41IDEzLjUgMS41IDYuNSAxOC41IDYuNSAxOC41IDEzLjUgMTUuNSAxMy41XFxcIi8+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgcG9pbnRzPVxcXCIxNS41IDYuNSAxNS41IDIuNSA0LjUgMi41IDQuNSA2LjVcXFwiLz48cmVjdCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHdpZHRoPVxcXCIxMVxcXCIgaGVpZ2h0PVxcXCI2XFxcIiB4PVxcXCI0LjVcXFwiIHk9XFxcIjExLjVcXFwiLz48cmVjdCB3aWR0aD1cXFwiOFxcXCIgaGVpZ2h0PVxcXCIxXFxcIiB4PVxcXCI2XFxcIiB5PVxcXCIxM1xcXCIvPjxyZWN0IHdpZHRoPVxcXCI4XFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHg9XFxcIjZcXFwiIHk9XFxcIjE1XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwicHVsbFwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlnb24gcG9pbnRzPVxcXCI2Ljg1LDggOS41LDEwLjYgMTIuMTUsOCAxMi44NSw4LjcgOS41LDEyIDYuMTUsOC43XFxcIi8+PGxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiB4MT1cXFwiOS41XFxcIiB5MT1cXFwiMTFcXFwiIHgyPVxcXCI5LjVcXFwiIHkyPVxcXCIyXFxcIi8+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgcG9pbnRzPVxcXCI2LDUuNSAzLjUsNS41IDMuNSwxOC41IDE1LjUsMTguNSAxNS41LDUuNSAxMyw1LjVcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJwdXNoXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWdvbiBwb2ludHM9XFxcIjEyLjE1LDQgOS41LDEuNCA2Ljg1LDQgNi4xNSwzLjMgOS41LDAgMTIuODUsMy4zXFxcIi8+PGxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiB4MT1cXFwiOS41XFxcIiB5MT1cXFwiMTBcXFwiIHgyPVxcXCI5LjVcXFwiIHkyPVxcXCIxXFxcIi8+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgcG9pbnRzPVxcXCI2IDUuNSAzLjUgNS41IDMuNSAxOC41IDE1LjUgMTguNSAxNS41IDUuNSAxMyA1LjVcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJxdWVzdGlvblwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PGNpcmNsZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiBjeD1cXFwiMTBcXFwiIGN5PVxcXCIxMFxcXCIgcj1cXFwiOVxcXCIvPjxjaXJjbGUgY3g9XFxcIjEwLjQ0XFxcIiBjeT1cXFwiMTQuNDJcXFwiIHI9XFxcIjEuMDVcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4yXFxcIiBkPVxcXCJNOC4xNyw3Ljc5IEM4LjE3LDQuNzUgMTIuNzIsNC43MyAxMi43Miw3LjcyIEMxMi43Miw4LjY3IDExLjgxLDkuMTUgMTEuMjMsOS43NSBDMTAuNzUsMTAuMjQgMTAuNTEsMTAuNzMgMTAuNDUsMTEuNCBDMTAuNDQsMTEuNTMgMTAuNDMsMTEuNjQgMTAuNDMsMTEuNzVcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJxdW90ZS1yaWdodFwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBhdGggZD1cXFwiTTE3LjI3LDcuNzkgQzE3LjI3LDkuNDUgMTYuOTcsMTAuNDMgMTUuOTksMTIuMDIgQzE0Ljk4LDEzLjY0IDEzLDE1LjIzIDExLjU2LDE1Ljk3IEwxMS4xLDE1LjA4IEMxMi4zNCwxNC4yIDEzLjE0LDEzLjUxIDE0LjAyLDExLjgyIEMxNC4yNywxMS4zNCAxNC40MSwxMC45MiAxNC40OSwxMC41NCBDMTQuMywxMC41OCAxNC4wOSwxMC42IDEzLjg4LDEwLjYgQzEyLjA2LDEwLjYgMTAuNTksOS4xMiAxMC41OSw3LjMgQzEwLjU5LDUuNDggMTIuMDYsNCAxMy44OCw0IEMxNS4zOSw0IDE2LjY3LDUuMDIgMTcuMDUsNi40MiBDMTcuMTksNi44MiAxNy4yNyw3LjI3IDE3LjI3LDcuNzkgTDE3LjI3LDcuNzkgWlxcXCIvPjxwYXRoIGQ9XFxcIk04LjY4LDcuNzkgQzguNjgsOS40NSA4LjM4LDEwLjQzIDcuNCwxMi4wMiBDNi4zOSwxMy42NCA0LjQxLDE1LjIzIDIuOTcsMTUuOTcgTDIuNTEsMTUuMDggQzMuNzUsMTQuMiA0LjU1LDEzLjUxIDUuNDMsMTEuODIgQzUuNjgsMTEuMzQgNS44MiwxMC45MiA1LjksMTAuNTQgQzUuNzEsMTAuNTggNS41LDEwLjYgNS4yOSwxMC42IEMzLjQ3LDEwLjYgMiw5LjEyIDIsNy4zIEMyLDUuNDggMy40Nyw0IDUuMjksNCBDNi44LDQgOC4wOCw1LjAyIDguNDYsNi40MiBDOC42LDYuODIgOC42OCw3LjI3IDguNjgsNy43OSBMOC42OCw3Ljc5IFpcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJyZWNlaXZlclwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMDFcXFwiIGQ9XFxcIk02LjE4OSwxMy42MTFDOC4xMzQsMTUuNTI1IDExLjA5NywxOC4yMzkgMTMuODY3LDE4LjI1N0MxNi40NywxOC4yNzUgMTguMiwxNi4yNDEgMTguMiwxNi4yNDFMMTQuNTA5LDEyLjU1MUwxMS41MzksMTMuNjM5TDYuMTg5LDguMjlMNy4zMTMsNS4zNTVMMy43NiwxLjhDMy43NiwxLjggMS43MzIsMy41MzcgMS43LDYuMDkyQzEuNjY3LDguODA5IDQuMzQ3LDExLjczOCA2LjE4OSwxMy42MTFcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJyZWRkaXRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk0xOSA5LjA1YTIuNTYgMi41NiAwIDAgMC0yLjU2LTIuNTYgMi41OSAyLjU5IDAgMCAwLTEuODguODIgMTAuNjMgMTAuNjMgMCAwIDAtNC4xNC0xdi0uMDhjLjU4LTEuNjIgMS41OC0zLjg5IDIuNy00LjEuMzgtLjA4Ljc3LjEyIDEuMTkuNTdhMS4xNSAxLjE1IDAgMCAwLS4wNi4zNyAxLjQ4IDEuNDggMCAxIDAgMS41MS0xLjQ1IDEuNDMgMS40MyAwIDAgMC0uNzYuMTlBMi4yOSAyLjI5IDAgMCAwIDEyLjkxIDFjLTIuMTEuNDMtMy4zOSA0LjM4LTMuNjMgNS4xOSAwIDAgMCAuMTEtLjA2LjExYTEwLjY1IDEwLjY1IDAgMCAwLTMuNzUgMUEyLjU2IDIuNTYgMCAwIDAgMSA5LjA1YTIuNDIgMi40MiAwIDAgMCAuNzIgMS43NkE1LjE4IDUuMTggMCAwIDAgMS4yNCAxM2MwIDMuNjYgMy45MiA2LjY0IDguNzMgNi42NHM4Ljc0LTMgOC43NC02LjY0YTUuMjMgNS4yMyAwIDAgMC0uNDYtMi4xM0EyLjU4IDIuNTggMCAwIDAgMTkgOS4wNXptLTE2Ljg4IDBhMS40NCAxLjQ0IDAgMCAxIDIuMjctMS4xOSA3LjY4IDcuNjggMCAwIDAtMi4wNyAxLjkxIDEuMzMgMS4zMyAwIDAgMS0uMi0uNzJ6TTEwIDE4LjRjLTQuMTcgMC03LjU1LTIuNC03LjU1LTUuNFM1LjgzIDcuNTMgMTAgNy41MyAxNy41IDEwIDE3LjUgMTNzLTMuMzggNS40LTcuNSA1LjR6bTcuNjktOC42MWE3LjYyIDcuNjIgMCAwIDAtMi4wOS0xLjkxIDEuNDEgMS40MSAwIDAgMSAuODQtLjI4IDEuNDcgMS40NyAwIDAgMSAxLjQ0IDEuNDUgMS4zNCAxLjM0IDAgMCAxLS4yMS43MnpcXFwiLz48cGF0aCBkPVxcXCJNNi42OSAxMi41OGExLjM5IDEuMzkgMCAxIDEgMS4zOS0xLjM5IDEuMzggMS4zOCAwIDAgMS0xLjM4IDEuMzl6XFxcIi8+PHBhdGggZD1cXFwiTTE0LjI2IDExLjJhMS4zOSAxLjM5IDAgMSAxLTEuMzktMS4zOSAxLjM5IDEuMzkgMCAwIDEgMS4zOSAxLjM5elxcXCIvPjxwYXRoIGQ9XFxcIk0xMy4wOSAxNC44OGEuNTQuNTQgMCAwIDEtLjA5Ljc3IDUuMyA1LjMgMCAwIDEtMy4yNiAxLjE5IDUuNjEgNS42MSAwIDAgMS0zLjQtMS4yMi41NS41NSAwIDEgMSAuNzMtLjgzIDQuMDkgNC4wOSAwIDAgMCA1LjI1IDAgLjU2LjU2IDAgMCAxIC43Ny4wOXpcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJyZWZyZXNoXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiBkPVxcXCJNMTcuMDgsMTEuMTUgQzE3LjA5LDExLjMxIDE3LjEsMTEuNDcgMTcuMSwxMS42NCBDMTcuMSwxNS41MyAxMy45NCwxOC42OSAxMC4wNSwxOC42OSBDNi4xNiwxOC42OCAzLDE1LjUzIDMsMTEuNjMgQzMsNy43NCA2LjE2LDQuNTggMTAuMDUsNC41OCBDMTAuOSw0LjU4IDExLjcxLDQuNzMgMTIuNDYsNVxcXCIvPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHBvaW50cz1cXFwiOS45IDIgMTIuNzkgNC44OSA5Ljc5IDcuOVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInJlcGx5XCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBkPVxcXCJNMTcuNywxMy4xMSBDMTYuMTIsMTAuMDIgMTMuODQsNy44NSAxMS4wMiw2LjYxIEMxMC41Nyw2LjQxIDkuNzUsNi4xMyA5LDUuOTEgTDksMiBMMSw5IEw5LDE2IEw5LDEyLjEzIEMxMC43OCwxMi40NyAxMi41LDEzLjE5IDE0LjA5LDE0LjI1IEMxNy4xMywxNi4yOCAxOC41NiwxOC41NCAxOC41NiwxOC41NCBDMTguNTYsMTguNTQgMTguODEsMTUuMjggMTcuNywxMy4xMSBMMTcuNywxMy4xMSBaIE0xNC44MiwxMy41MyBDMTMuMTcsMTIuNCAxMS4wMSwxMS40IDgsMTAuOTIgTDgsMTMuNjMgTDIuNTUsOSBMOCw0LjI1IEw4LDYuOCBDOC4zLDYuODYgOS4xNiw3LjAyIDEwLjM3LDcuNDkgQzEzLjMsOC42NSAxNS41NCwxMC45NiAxNi42NSwxMy4wOCBDMTYuOTcsMTMuNyAxNy40OCwxNC44NiAxNy42OCwxNiBDMTYuODcsMTUuMDUgMTUuNzMsMTQuMTUgMTQuODIsMTMuNTMgTDE0LjgyLDEzLjUzIFpcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJyc3NcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgY3g9XFxcIjMuMTJcXFwiIGN5PVxcXCIxNi44XFxcIiByPVxcXCIxLjg1XFxcIi8+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgZD1cXFwiTTEuNSw4LjIgQzEuNzgsOC4xOCAyLjA2LDguMTYgMi4zNSw4LjE2IEM3LjU3LDguMTYgMTEuODEsMTIuMzcgMTEuODEsMTcuNTcgQzExLjgxLDE3Ljg5IDExLjc5LDE4LjE5IDExLjc2LDE4LjVcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiBkPVxcXCJNMS41LDIuNTIgQzEuNzgsMi41MSAyLjA2LDIuNSAyLjM1LDIuNSBDMTAuNzIsMi41IDE3LjUsOS4yNCAxNy41LDE3LjU3IEMxNy41LDE3Ljg5IDE3LjQ5LDE4LjE5IDE3LjQ3LDE4LjVcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJzZWFyY2hcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgY3g9XFxcIjlcXFwiIGN5PVxcXCI5XFxcIiByPVxcXCI3XFxcIi8+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgZD1cXFwiTTE0LDE0IEwxOCwxOCBMMTQsMTQgWlxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInNlcnZlclwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHJlY3QgeD1cXFwiM1xcXCIgeT1cXFwiM1xcXCIgd2lkdGg9XFxcIjFcXFwiIGhlaWdodD1cXFwiMlxcXCIvPjxyZWN0IHg9XFxcIjVcXFwiIHk9XFxcIjNcXFwiIHdpZHRoPVxcXCIxXFxcIiBoZWlnaHQ9XFxcIjJcXFwiLz48cmVjdCB4PVxcXCI3XFxcIiB5PVxcXCIzXFxcIiB3aWR0aD1cXFwiMVxcXCIgaGVpZ2h0PVxcXCIyXFxcIi8+PHJlY3QgeD1cXFwiMTZcXFwiIHk9XFxcIjNcXFwiIHdpZHRoPVxcXCIxXFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48cmVjdCB4PVxcXCIxNlxcXCIgeT1cXFwiMTBcXFwiIHdpZHRoPVxcXCIxXFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48Y2lyY2xlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgY3g9XFxcIjkuOVxcXCIgY3k9XFxcIjE3LjRcXFwiIHI9XFxcIjEuNFxcXCIvPjxyZWN0IHg9XFxcIjNcXFwiIHk9XFxcIjEwXFxcIiB3aWR0aD1cXFwiMVxcXCIgaGVpZ2h0PVxcXCIyXFxcIi8+PHJlY3QgeD1cXFwiNVxcXCIgeT1cXFwiMTBcXFwiIHdpZHRoPVxcXCIxXFxcIiBoZWlnaHQ9XFxcIjJcXFwiLz48cmVjdCB4PVxcXCI5LjVcXFwiIHk9XFxcIjE0XFxcIiB3aWR0aD1cXFwiMVxcXCIgaGVpZ2h0PVxcXCIyXFxcIi8+PHJlY3QgeD1cXFwiM1xcXCIgeT1cXFwiMTdcXFwiIHdpZHRoPVxcXCI2XFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48cmVjdCB4PVxcXCIxMVxcXCIgeT1cXFwiMTdcXFwiIHdpZHRoPVxcXCI2XFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48cmVjdCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHg9XFxcIjEuNVxcXCIgeT1cXFwiMS41XFxcIiB3aWR0aD1cXFwiMTdcXFwiIGhlaWdodD1cXFwiNVxcXCIvPjxyZWN0IGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgeD1cXFwiMS41XFxcIiB5PVxcXCI4LjVcXFwiIHdpZHRoPVxcXCIxN1xcXCIgaGVpZ2h0PVxcXCI1XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwic2V0dGluZ3NcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxlbGxpcHNlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgY3g9XFxcIjYuMTFcXFwiIGN5PVxcXCIzLjU1XFxcIiByeD1cXFwiMi4xMVxcXCIgcnk9XFxcIjIuMTVcXFwiLz48ZWxsaXBzZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIGN4PVxcXCI2LjExXFxcIiBjeT1cXFwiMTUuNTVcXFwiIHJ4PVxcXCIyLjExXFxcIiByeT1cXFwiMi4xNVxcXCIvPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBjeD1cXFwiMTMuMTVcXFwiIGN5PVxcXCI5LjU1XFxcIiByPVxcXCIyLjE1XFxcIi8+PHJlY3QgeD1cXFwiMVxcXCIgeT1cXFwiM1xcXCIgd2lkdGg9XFxcIjNcXFwiIGhlaWdodD1cXFwiMVxcXCIvPjxyZWN0IHg9XFxcIjEwXFxcIiB5PVxcXCIzXFxcIiB3aWR0aD1cXFwiOFxcXCIgaGVpZ2h0PVxcXCIxXFxcIi8+PHJlY3QgeD1cXFwiMVxcXCIgeT1cXFwiOVxcXCIgd2lkdGg9XFxcIjhcXFwiIGhlaWdodD1cXFwiMVxcXCIvPjxyZWN0IHg9XFxcIjE1XFxcIiB5PVxcXCI5XFxcIiB3aWR0aD1cXFwiM1xcXCIgaGVpZ2h0PVxcXCIxXFxcIi8+PHJlY3QgeD1cXFwiMVxcXCIgeT1cXFwiMTVcXFwiIHdpZHRoPVxcXCIzXFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48cmVjdCB4PVxcXCIxMFxcXCIgeT1cXFwiMTVcXFwiIHdpZHRoPVxcXCI4XFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJzaHJpbmtcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5Z29uIHBvaW50cz1cXFwiMTEgNCAxMiA0IDEyIDggMTYgOCAxNiA5IDExIDlcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjQgMTEgOSAxMSA5IDE2IDggMTYgOCAxMiA0IDEyXFxcIi8+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgZD1cXFwiTTEyLDggTDE4LDJcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiBkPVxcXCJNMiwxOCBMOCwxMlxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInNpZ24taW5cIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5Z29uIHBvaW50cz1cXFwiNyAyIDE3IDIgMTcgMTcgNyAxNyA3IDE2IDE2IDE2IDE2IDMgNyAzXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCI5LjEgMTMuNCA4LjUgMTIuOCAxMS4yOCAxMCA0IDEwIDQgOSAxMS4yOCA5IDguNSA2LjIgOS4xIDUuNjIgMTMgOS41XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwic2lnbi1vdXRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5Z29uIHBvaW50cz1cXFwiMTMuMSAxMy40IDEyLjUgMTIuOCAxNS4yOCAxMCA4IDEwIDggOSAxNS4yOCA5IDEyLjUgNi4yIDEzLjEgNS42MiAxNyA5LjVcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjEzIDIgMyAyIDMgMTcgMTMgMTcgMTMgMTYgNCAxNiA0IDMgMTMgM1xcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInNvY2lhbFwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PGxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgeDE9XFxcIjEzLjRcXFwiIHkxPVxcXCIxNFxcXCIgeDI9XFxcIjYuM1xcXCIgeTI9XFxcIjEwLjdcXFwiLz48bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiB4MT1cXFwiMTMuNVxcXCIgeTE9XFxcIjUuNVxcXCIgeDI9XFxcIjYuNVxcXCIgeTI9XFxcIjguOFxcXCIvPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgY3g9XFxcIjE1LjVcXFwiIGN5PVxcXCI0LjZcXFwiIHI9XFxcIjIuM1xcXCIvPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgY3g9XFxcIjE1LjVcXFwiIGN5PVxcXCIxNC44XFxcIiByPVxcXCIyLjNcXFwiLz48Y2lyY2xlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIGN4PVxcXCI0LjVcXFwiIGN5PVxcXCI5LjhcXFwiIHI9XFxcIjIuM1xcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInNvdW5kY2xvdWRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk0xNy4yLDkuNGMtMC40LDAtMC44LDAuMS0xLjEwMSwwLjJjLTAuMTk5LTIuNS0yLjM5OS00LjUtNS00LjVjLTAuNiwwLTEuMiwwLjEtMS43LDAuM0M5LjIsNS41LDkuMSw1LjYsOS4xLDUuNlYxNWg4IGMxLjYwMSwwLDIuODAxLTEuMiwyLjgwMS0yLjhDMjAsMTAuNywxOC43LDkuNCwxNy4yLDkuNEwxNy4yLDkuNHpcXFwiLz48cmVjdCB4PVxcXCI2XFxcIiB5PVxcXCI2LjVcXFwiIHdpZHRoPVxcXCIxLjVcXFwiIGhlaWdodD1cXFwiOC41XFxcIi8+PHJlY3QgeD1cXFwiM1xcXCIgeT1cXFwiOFxcXCIgd2lkdGg9XFxcIjEuNVxcXCIgaGVpZ2h0PVxcXCI3XFxcIi8+PHJlY3QgeT1cXFwiMTBcXFwiIHdpZHRoPVxcXCIxLjVcXFwiIGhlaWdodD1cXFwiNVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInN0YXJcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5Z29uIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjAxXFxcIiBwb2ludHM9XFxcIjEwIDIgMTIuNjMgNy4yNyAxOC41IDguMTIgMTQuMjUgMTIuMjIgMTUuMjUgMTggMTAgMTUuMjcgNC43NSAxOCA1Ljc1IDEyLjIyIDEuNSA4LjEyIDcuMzcgNy4yN1xcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInN0cmlrZXRocm91Z2hcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk02LDEzLjAyIEw2LjY1LDEzLjAyIEM3LjY0LDE1LjE2IDguODYsMTYuMTIgMTAuNDEsMTYuMTIgQzEyLjIyLDE2LjEyIDEyLjkyLDE0LjkzIDEyLjkyLDEzLjg5IEMxMi45MiwxMi41NSAxMS45OSwxMi4wMyA5Ljc0LDExLjIzIEM4LjA1LDEwLjY0IDYuMjMsMTAuMTEgNi4yMyw3LjgzIEM2LjIzLDUuNSA4LjA5LDQuMDkgMTAuNCw0LjA5IEMxMS40NCw0LjA5IDEyLjEzLDQuMzEgMTIuNzIsNC41NCBMMTMuMzMsNCBMMTMuODEsNCBMMTMuODEsNy41OSBMMTMuMTYsNy41OSBDMTIuNTUsNS44OCAxMS41Miw0Ljg5IDEwLjA3LDQuODkgQzguODQsNC44OSA3Ljg5LDUuNjkgNy44OSw3LjAzIEM3Ljg5LDguMjkgOC44OSw4Ljc4IDEwLjg4LDkuNDUgQzEyLjU3LDEwLjAzIDE0LjM4LDEwLjYgMTQuMzgsMTIuOTEgQzE0LjM4LDE0Ljc1IDEzLjI3LDE2LjkzIDEwLjE4LDE2LjkzIEM5LjE4LDE2LjkzIDguMTcsMTYuNjkgNy40NiwxNi4zOSBMNi41MiwxNyBMNiwxNyBMNiwxMy4wMiBMNiwxMy4wMiBaXFxcIi8+PHJlY3QgeD1cXFwiM1xcXCIgeT1cXFwiMTBcXFwiIHdpZHRoPVxcXCIxNVxcXCIgaGVpZ2h0PVxcXCIxXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwidGFibGVcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxyZWN0IHg9XFxcIjFcXFwiIHk9XFxcIjNcXFwiIHdpZHRoPVxcXCIxOFxcXCIgaGVpZ2h0PVxcXCIxXFxcIi8+PHJlY3QgeD1cXFwiMVxcXCIgeT1cXFwiN1xcXCIgd2lkdGg9XFxcIjE4XFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48cmVjdCB4PVxcXCIxXFxcIiB5PVxcXCIxMVxcXCIgd2lkdGg9XFxcIjE4XFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48cmVjdCB4PVxcXCIxXFxcIiB5PVxcXCIxNVxcXCIgd2lkdGg9XFxcIjE4XFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJ0YWJsZXQtbGFuZHNjYXBlXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIGQ9XFxcIk0xLjUsNSBDMS41LDQuMiAyLjIsMy41IDMsMy41IEwxNywzLjUgQzE3LjgsMy41IDE4LjUsNC4yIDE4LjUsNSBMMTguNSwxNiBDMTguNSwxNi44IDE3LjgsMTcuNSAxNywxNy41IEwzLDE3LjUgQzIuMiwxNy41IDEuNSwxNi44IDEuNSwxNiBMMS41LDUgTDEuNSw1IEwxLjUsNSBaXFxcIi8+PGNpcmNsZSBjeD1cXFwiMy43XFxcIiBjeT1cXFwiMTAuNVxcXCIgcj1cXFwiLjhcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJ0YWJsZXRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgZD1cXFwiTTUsMTguNSBDNC4yLDE4LjUgMy41LDE3LjggMy41LDE3IEwzLjUsMyBDMy41LDIuMiA0LjIsMS41IDUsMS41IEwxNiwxLjUgQzE2LjgsMS41IDE3LjUsMi4yIDE3LjUsMyBMMTcuNSwxNyBDMTcuNSwxNy44IDE2LjgsMTguNSAxNiwxOC41IEw1LDE4LjUgTDUsMTguNSBMNSwxOC41IFpcXFwiLz48Y2lyY2xlIGN4PVxcXCIxMC41XFxcIiBjeT1cXFwiMTYuM1xcXCIgcj1cXFwiLjhcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJ0YWdcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIGQ9XFxcIk0xNy41LDMuNzEgTDE3LjUsNy43MiBDMTcuNSw3Ljk2IDE3LjQsOC4yIDE3LjIxLDguMzkgTDguMzksMTcuMiBDNy45OSwxNy42IDcuMzMsMTcuNiA2LjkzLDE3LjIgTDIuOCwxMy4wNyBDMi40LDEyLjY3IDIuNCwxMi4wMSAyLjgsMTEuNjEgTDExLjYxLDIuOCBDMTEuODEsMi42IDEyLjA4LDIuNSAxMi4zNCwyLjUgTDE2LjE5LDIuNSBDMTYuNTIsMi41IDE2Ljg2LDIuNjMgMTcuMTEsMi44OCBDMTcuMzUsMy4xMSAxNy40OCwzLjQgMTcuNSwzLjcxIEwxNy41LDMuNzEgWlxcXCIvPjxjaXJjbGUgY3g9XFxcIjE0XFxcIiBjeT1cXFwiNlxcXCIgcj1cXFwiMVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInRodW1ibmFpbHNcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxyZWN0IGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgeD1cXFwiMy41XFxcIiB5PVxcXCIzLjVcXFwiIHdpZHRoPVxcXCI1XFxcIiBoZWlnaHQ9XFxcIjVcXFwiLz48cmVjdCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHg9XFxcIjExLjVcXFwiIHk9XFxcIjMuNVxcXCIgd2lkdGg9XFxcIjVcXFwiIGhlaWdodD1cXFwiNVxcXCIvPjxyZWN0IGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgeD1cXFwiMTEuNVxcXCIgeT1cXFwiMTEuNVxcXCIgd2lkdGg9XFxcIjVcXFwiIGhlaWdodD1cXFwiNVxcXCIvPjxyZWN0IGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgeD1cXFwiMy41XFxcIiB5PVxcXCIxMS41XFxcIiB3aWR0aD1cXFwiNVxcXCIgaGVpZ2h0PVxcXCI1XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwidHJhc2hcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHBvaW50cz1cXFwiNi41IDMgNi41IDEuNSAxMy41IDEuNSAxMy41IDNcXFwiLz48cG9seWxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBwb2ludHM9XFxcIjQuNSA0IDQuNSAxOC41IDE1LjUgMTguNSAxNS41IDRcXFwiLz48cmVjdCB4PVxcXCI4XFxcIiB5PVxcXCI3XFxcIiB3aWR0aD1cXFwiMVxcXCIgaGVpZ2h0PVxcXCI5XFxcIi8+PHJlY3QgeD1cXFwiMTFcXFwiIHk9XFxcIjdcXFwiIHdpZHRoPVxcXCIxXFxcIiBoZWlnaHQ9XFxcIjlcXFwiLz48cmVjdCB4PVxcXCIyXFxcIiB5PVxcXCIzXFxcIiB3aWR0aD1cXFwiMTZcXFwiIGhlaWdodD1cXFwiMVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInRyaWFuZ2xlLWRvd25cIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5Z29uIHBvaW50cz1cXFwiNSA3IDE1IDcgMTAgMTJcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJ0cmlhbmdsZS1sZWZ0XCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWdvbiBwb2ludHM9XFxcIjEyIDUgNyAxMCAxMiAxNVxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInRyaWFuZ2xlLXJpZ2h0XCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWdvbiBwb2ludHM9XFxcIjggNSAxMyAxMCA4IDE1XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwidHJpYW5nbGUtdXBcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5Z29uIHBvaW50cz1cXFwiNSAxMyAxMCA4IDE1IDEzXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwidHJpcGFkdmlzb3JcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk0xOS4wMjEsNy44NjZDMTkuMjU2LDYuODYyLDIwLDUuODU0LDIwLDUuODU0aC0zLjM0NkMxNC43ODEsNC42NDEsMTIuNTA0LDQsOS45OCw0QzcuMzYzLDQsNC45OTksNC42NTEsMy4xMzUsNS44NzZIMFxcdGMwLDAsMC43MzgsMC45ODcsMC45NzYsMS45ODhjLTAuNjExLDAuODM3LTAuOTczLDEuODUyLTAuOTczLDIuOTY0YzAsMi43NjMsMi4yNDksNS4wMDksNS4wMTEsNS4wMDlcXHRjMS41NzYsMCwyLjk3Ni0wLjczNywzLjkwMS0xLjg3OWwxLjA2MywxLjU5OWwxLjA3NS0xLjYxNWMwLjQ3NSwwLjYxMSwxLjEsMS4xMTEsMS44MzgsMS40NTFjMS4yMTMsMC41NDcsMi41NzQsMC42MTIsMy44MjUsMC4xNVxcdGMyLjU4OS0wLjk2MywzLjkxMy0zLjg1MiwyLjk2NC02LjQzOWMtMC4xNzUtMC40NjMtMC40LTAuODc2LTAuNjc1LTEuMjM4SDE5LjAyMXogTTE2LjM4LDE0LjU5NFxcdGMtMS4wMDIsMC4zNzEtMi4wODgsMC4zMjgtMy4wNi0wLjExOWMtMC42ODgtMC4zMTctMS4yNTItMC44MTctMS42NTctMS40MzhjLTAuMTY0LTAuMjUtMC4zMTMtMC41Mi0wLjQxNy0wLjgxMVxcdGMtMC4xMjQtMC4zMjgtMC4xODYtMC42NjgtMC4yMTctMS4wMTRjLTAuMDYzLTAuNjg5LDAuMDM3LTEuMzk2LDAuMzM5LTIuMDQzYzAuNDQ4LTAuOTcxLDEuMjUxLTEuNzEsMi4yNS0yLjA3OVxcdGMyLjA3NS0wLjc2NSw0LjM3NSwwLjMsNS4xNCwyLjM2NmMwLjc2MiwyLjA2Ni0wLjMwMSw0LjM3LTIuMzYzLDUuMTM0TDE2LjM4LDE0LjU5NEwxNi4zOCwxNC41OTR6IE04LjMyMiwxMy4wNjZcXHRjLTAuNzIsMS4wNTktMS45MzUsMS43Ni0zLjMwOSwxLjc2Yy0yLjIwNywwLTQuMDAxLTEuNzk3LTQuMDAxLTMuOTk2YzAtMi4yMDMsMS43OTUtNC4wMDIsNC4wMDEtNC4wMDJcXHRjMi4yMDQsMCwzLjk5OSwxLjgsMy45OTksNC4wMDJjMCwwLjEzNy0wLjAyNCwwLjI2MS0wLjA0LDAuMzk2Yy0wLjA2NywwLjY3OC0wLjI4NCwxLjMxMy0wLjY0OCwxLjg1M3YtMC4wMTNIOC4zMjJ6IE0yLjQ3MiwxMC43NzVcXHRjMCwxLjM2NywxLjExMiwyLjQ3OSwyLjQ3NiwyLjQ3OWMxLjM2MywwLDIuNDcyLTEuMTEsMi40NzItMi40NzljMC0xLjM1OS0xLjExLTIuNDY4LTIuNDcyLTIuNDY4XFx0QzMuNTg0LDguMzA2LDIuNDczLDkuNDE2LDIuNDcyLDEwLjc3NUwyLjQ3MiwxMC43NzV6IE0xMi41MTQsMTAuNzc1YzAsMS4zNjcsMS4xMDQsMi40NzksMi40NzEsMi40NzlcXHRjMS4zNjMsMCwyLjQ3NC0xLjEwOCwyLjQ3NC0yLjQ3OWMwLTEuMzU5LTEuMTEtMi40NjgtMi40NzQtMi40NjhjLTEuMzY0LDAtMi40NzcsMS4xMDktMi40NzcsMi40NjhIMTIuNTE0eiBNMy4zMjQsMTAuNzc1XFx0YzAtMC44OTMsMC43MjYtMS42MTgsMS42MTQtMS42MThjMC44ODksMCwxLjYyNSwwLjcyNywxLjYyNSwxLjYxOGMwLDAuODk4LTAuNzI1LDEuNjI3LTEuNjI1LDEuNjI3XFx0Yy0wLjkwMSwwLTEuNjI1LTAuNzI5LTEuNjI1LTEuNjI3SDMuMzI0eiBNMTMuMzU0LDEwLjc3NWMwLTAuODkzLDAuNzI2LTEuNjE4LDEuNjI3LTEuNjE4YzAuODg2LDAsMS42MSwwLjcyNywxLjYxLDEuNjE4XFx0YzAsMC44OTgtMC43MjYsMS42MjctMS42MjYsMS42MjdzLTEuNjI1LTAuNzI5LTEuNjI1LTEuNjI3SDEzLjM1NHogTTkuOTc3LDQuODc1YzEuNzk4LDAsMy40MjUsMC4zMjQsNC44NDksMC45NjhcXHRjLTAuNTM1LDAuMDE1LTEuMDYxLDAuMTA4LTEuNTg2LDAuM2MtMS4yNjQsMC40NjMtMi4yNjQsMS4zODgtMi44MTUsMi42MDRjLTAuMjYyLDAuNTUxLTAuMzk4LDEuMTMzLTAuNDQ4LDEuNzJcXHRDOS43OSw3LjkwNSw3LjY3Nyw1Ljg3Myw1LjA3Niw1LjgyQzYuNTAxLDUuMjA4LDguMTUzLDQuODc1LDkuOTQsNC44NzVIOS45Nzd6XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwidHVtYmxyXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBkPVxcXCJNNi44ODUsOC41OThjMCwwLDAsMy4zOTMsMCw0Ljk5NmMwLDAuMjgyLDAsMC42NiwwLjA5NCwwLjk0MmMwLjM3NywxLjUwOSwxLjEzMSwyLjU0NSwyLjU0NSwzLjExIGMxLjMxOSwwLjQ3MiwyLjM1NiwwLjQ3MiwzLjY3NiwwYzAuNTY1LTAuMTg4LDEuMTMyLTAuNjU5LDEuMTMyLTAuNjU5bC0wLjg0OS0yLjI2M2MwLDAtMS4wMzYsMC4zNzgtMS42MDMsMC4yODMgYy0wLjU2NS0wLjA5NC0xLjIyNi0wLjY2LTEuMjI2LTEuNTA4YzAtMS42MDMsMC00LjkwMiwwLTQuOTAyaDIuODI4VjUuNzcxaC0yLjgyOFYySDguMjA1YzAsMC0wLjA5NCwwLjY2LTAuMTg4LDAuOTQyIEM3LjgyOCwzLjc5MSw3LjI2Miw0LjczMyw2LjYwMyw1LjM5NEM1Ljg0OCw2LjE0Nyw1LDYuNDMsNSw2LjQzdjIuMTY4SDYuODg1elxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInR2XCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cmVjdCB4PVxcXCI3XFxcIiB5PVxcXCIxNlxcXCIgd2lkdGg9XFxcIjZcXFwiIGhlaWdodD1cXFwiMVxcXCIvPjxyZWN0IGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgeD1cXFwiLjVcXFwiIHk9XFxcIjMuNVxcXCIgd2lkdGg9XFxcIjE5XFxcIiBoZWlnaHQ9XFxcIjExXFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwidHdpdHRlclwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBhdGggZD1cXFwiTTE5LDQuNzQgQzE4LjMzOSw1LjAyOSAxNy42MjYsNS4yMjkgMTYuODgxLDUuMzIgQzE3LjY0NCw0Ljg2IDE4LjIyNyw0LjEzOSAxOC41MDMsMy4yOCBDMTcuNzksMy43IDE3LjAwMSw0LjAwOSAxNi4xNTksNC4xNyBDMTUuNDg1LDMuNDUgMTQuNTI2LDMgMTMuNDY0LDMgQzExLjQyMywzIDkuNzcxLDQuNjYgOS43NzEsNi43IEM5Ljc3MSw2Ljk5IDkuODA0LDcuMjY5IDkuODY4LDcuNTM5IEM2Ljc5NSw3LjM4IDQuMDc2LDUuOTE5IDIuMjU0LDMuNjc5IEMxLjkzNiw0LjIxOSAxLjc1NCw0Ljg2IDEuNzU0LDUuNTM5IEMxLjc1NCw2LjgyIDIuNDA1LDcuOTUgMy4zOTcsOC42MSBDMi43OSw4LjU4OSAyLjIyLDguNDI5IDEuNzIzLDguMTQ5IEwxLjcyMyw4LjE4OSBDMS43MjMsOS45NzggMi45OTcsMTEuNDc4IDQuNjg2LDExLjgyIEM0LjM3NiwxMS44OTkgNC4wNDksMTEuOTM5IDMuNzEzLDExLjkzOSBDMy40NzUsMTEuOTM5IDMuMjQ1LDExLjkxOSAzLjAxOCwxMS44OCBDMy40OSwxMy4zNDkgNC44NTIsMTQuNDE5IDYuNDY5LDE0LjQ0OSBDNS4yMDUsMTUuNDI5IDMuNjEyLDE2LjAxOSAxLjg4MiwxNi4wMTkgQzEuNTgzLDE2LjAxOSAxLjI5LDE2LjAwOSAxLDE1Ljk2OSBDMi42MzUsMTcuMDE5IDQuNTc2LDE3LjYyOSA2LjY2MiwxNy42MjkgQzEzLjQ1NCwxNy42MjkgMTcuMTcsMTIgMTcuMTcsNy4xMjkgQzE3LjE3LDYuOTY5IDE3LjE2Niw2LjgwOSAxNy4xNTcsNi42NDkgQzE3Ljg3OSw2LjEyOSAxOC41MDQsNS40NzggMTksNC43NFxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInVpa2l0XCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWdvbiBwb2ludHM9XFxcIjE0LjQsMy4xIDExLjMsNS4xIDE1LDcuMyAxNSwxMi45IDEwLDE1LjcgNSwxMi45IDUsOC41IDIsNi44IDIsMTQuOCA5LjksMTkuNSAxOCwxNC44IDE4LDUuM1xcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiOS44LDQuMiA2LjcsMi40IDkuOCwwLjQgMTIuOSwyLjNcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJ1bmxvY2tcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxyZWN0IGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgeD1cXFwiMy41XFxcIiB5PVxcXCI4LjVcXFwiIHdpZHRoPVxcXCIxM1xcXCIgaGVpZ2h0PVxcXCIxMFxcXCIvPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgZD1cXFwiTTYuNSw4LjUgTDYuNSw0LjkgQzYuNSwzIDguMSwxLjUgMTAsMS41IEMxMS45LDEuNSAxMy41LDMgMTMuNSw0LjlcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJ1cGxvYWRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHBvaW50cz1cXFwiNSA4IDkuNSAzLjUgMTQgOFxcXCIvPjxyZWN0IHg9XFxcIjNcXFwiIHk9XFxcIjE3XFxcIiB3aWR0aD1cXFwiMTNcXFwiIGhlaWdodD1cXFwiMVxcXCIvPjxsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgeDE9XFxcIjkuNVxcXCIgeTE9XFxcIjE1XFxcIiB4Mj1cXFwiOS41XFxcIiB5Mj1cXFwiNFxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInVzZXJcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgY3g9XFxcIjkuOVxcXCIgY3k9XFxcIjYuNFxcXCIgcj1cXFwiNC40XFxcIi8+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgZD1cXFwiTTEuNSwxOSBDMi4zLDE0LjUgNS44LDExLjIgMTAsMTEuMiBDMTQuMiwxMS4yIDE3LjcsMTQuNiAxOC41LDE5LjJcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJ1c2Vyc1wiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PGNpcmNsZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiBjeD1cXFwiNy43XFxcIiBjeT1cXFwiOC42XFxcIiByPVxcXCIzLjVcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiBkPVxcXCJNMSwxOC4xIEMxLjcsMTQuNiA0LjQsMTIuMSA3LjYsMTIuMSBDMTAuOSwxMi4xIDEzLjcsMTQuOCAxNC4zLDE4LjNcXFwiLz48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiBkPVxcXCJNMTEuNCw0IEMxMi44LDIuNCAxNS40LDIuOCAxNi4zLDQuNyBDMTcuMiw2LjYgMTUuNyw4LjkgMTMuNiw4LjkgQzE2LjUsOC45IDE4LjgsMTEuMyAxOS4yLDE0LjFcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJ2aWRlby1jYW1lcmFcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5Z29uIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgcG9pbnRzPVxcXCIxNy41IDYuOSAxNy41IDEzLjEgMTMuNSAxMC40IDEzLjUgMTQuNSAyLjUgMTQuNSAyLjUgNS41IDEzLjUgNS41IDEzLjUgOS42IDE3LjUgNi45XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwidmltZW9cIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk0yLjA2NSw3LjU5QzEuODQsNy4zNjcsMS42NTQsNy4wODIsMS40NjgsNi44MzhjLTAuMzMyLTAuNDItMC4xMzctMC40MTEsMC4yNzQtMC43NzJjMS4wMjYtMC45MSwyLjAwNC0xLjg5NiwzLjEyNy0yLjY4OCBjMS4wMTctMC43MTMsMi4zNjUtMS4xNzMsMy4yODYtMC4wMzljMC44NDksMS4wNDUsMC44NjksMi42MjksMS4wODQsMy44OTFjMC4yMTUsMS4zMDksMC40MjEsMi42NDgsMC44OCwzLjkwMSBjMC4xMjcsMC4zNTIsMC4zNywxLjAxOCwwLjgxLDEuMDc0YzAuNTY3LDAuMDc4LDEuMTQ1LTAuOTE3LDEuNDA4LTEuMjg5YzAuNjg0LTAuOTg3LDEuNjExLTIuMzE3LDEuNDk0LTMuNTg3IGMtMC4xMTUtMS4zNDktMS41NzItMS4wOTUtMi40ODItMC43NzNjMC4xNDYtMS41MTQsMS41NTUtMy4yMTYsMi45MTItMy43OTJjMS40MzktMC41OTcsMy41NzktMC41ODcsNC4zMDIsMS4wMzYgYzAuNzcyLDEuNzU5LDAuMDc4LDMuODAyLTAuNzYzLDUuMzk2Yy0wLjkxOCwxLjczMS0yLjEsMy4zMzMtMy4zNjMsNC44MjljLTEuMTE0LDEuMzI5LTIuNDMyLDIuNzg3LTQuMDkzLDMuNDIyIGMtMS44OTcsMC43MjMtMy4wMjEtMC42ODYtMy42NjctMi4zMThjLTAuNzA1LTEuNzc3LTEuMDU2LTMuNzcxLTEuNTY1LTUuNjIxQzQuODk4LDguNzI2LDQuNjQ0LDcuODM2LDQuMTM2LDcuMTkxIEMzLjQ3Myw2LjM1OCwyLjcyLDcuMTQxLDIuMDY1LDcuNTlDMS45NzcsNy41MDIsMi4xMTUsNy41NTEsMi4wNjUsNy41OUwyLjA2NSw3LjU5elxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcIndhcm5pbmdcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgY3g9XFxcIjEwXFxcIiBjeT1cXFwiMTRcXFwiIHI9XFxcIjFcXFwiLz48Y2lyY2xlIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIGN4PVxcXCIxMFxcXCIgY3k9XFxcIjEwXFxcIiByPVxcXCI5XFxcIi8+PHBhdGggZD1cXFwiTTEwLjk3LDcuNzIgQzEwLjg1LDkuNTQgMTAuNTYsMTEuMjkgMTAuNTYsMTEuMjkgQzEwLjUxLDExLjg3IDEwLjI3LDEyIDkuOTksMTIgQzkuNjksMTIgOS40OSwxMS44NyA5LjQzLDExLjI5IEM5LjQzLDExLjI5IDkuMTYsOS41NCA5LjAzLDcuNzIgQzguOTYsNi41NCA5LjAzLDYgOS4wMyw2IEM5LjAzLDUuNDUgOS40Niw1LjAyIDkuOTksNSBDMTAuNTMsNS4wMSAxMC45Nyw1LjQ0IDEwLjk3LDYgQzEwLjk3LDYgMTEuMDQsNi41NCAxMC45Nyw3LjcyIEwxMC45Nyw3LjcyIFpcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJ3aGF0c2FwcFwiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBhdGggZD1cXFwiTTE2LjcsMy4zYy0xLjgtMS44LTQuMS0yLjgtNi43LTIuOGMtNS4yLDAtOS40LDQuMi05LjQsOS40YzAsMS43LDAuNCwzLjMsMS4zLDQuN2wtMS4zLDQuOWw1LTEuM2MxLjQsMC44LDIuOSwxLjIsNC41LDEuMiBsMCwwbDAsMGM1LjIsMCw5LjQtNC4yLDkuNC05LjRDMTkuNSw3LjQsMTguNSw1LDE2LjcsMy4zIE0xMC4xLDE3LjdMMTAuMSwxNy43Yy0xLjQsMC0yLjgtMC40LTQtMS4xbC0wLjMtMC4ybC0zLDAuOGwwLjgtMi45IGwtMC4yLTAuM2MtMC44LTEuMi0xLjItMi43LTEuMi00LjJjMC00LjMsMy41LTcuOCw3LjgtNy44YzIuMSwwLDQuMSwwLjgsNS41LDIuM2MxLjUsMS41LDIuMywzLjQsMi4zLDUuNSBDMTcuOSwxNC4yLDE0LjQsMTcuNywxMC4xLDE3LjcgTTE0LjQsMTEuOWMtMC4yLTAuMS0xLjQtMC43LTEuNi0wLjhjLTAuMi0wLjEtMC40LTAuMS0wLjUsMC4xYy0wLjIsMC4yLTAuNiwwLjgtMC44LDAuOSBjLTAuMSwwLjItMC4zLDAuMi0wLjUsMC4xYy0wLjItMC4xLTEtMC40LTEuOS0xLjJjLTAuNy0wLjYtMS4yLTEuNC0xLjMtMS42Yy0wLjEtMC4yLDAtMC40LDAuMS0wLjVDOCw4LjgsOC4xLDguNyw4LjIsOC41IGMwLjEtMC4xLDAuMi0wLjIsMC4yLTAuNGMwLjEtMC4yLDAtMC4zLDAtMC40QzguNCw3LjYsNy45LDYuNSw3LjcsNkM3LjUsNS41LDcuMyw1LjYsNy4yLDUuNmMtMC4xLDAtMC4zLDAtMC40LDAgYy0wLjIsMC0wLjQsMC4xLTAuNiwwLjNjLTAuMiwwLjItMC44LDAuOC0wLjgsMmMwLDEuMiwwLjgsMi4zLDEsMi40YzAuMSwwLjIsMS43LDIuNSw0LDMuNWMwLjYsMC4yLDEsMC40LDEuMywwLjUgYzAuNiwwLjIsMS4xLDAuMiwxLjUsMC4xYzAuNS0wLjEsMS40LTAuNiwxLjYtMS4xYzAuMi0wLjUsMC4yLTEsMC4xLTEuMUMxNC44LDEyLjEsMTQuNiwxMiwxNC40LDExLjlcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJ3b3JkcHJlc3NcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk0xMCwwLjVjLTUuMiwwLTkuNSw0LjMtOS41LDkuNXM0LjMsOS41LDkuNSw5LjVjNS4yLDAsOS41LTQuMyw5LjUtOS41UzE1LjIsMC41LDEwLDAuNUwxMCwwLjVMMTAsMC41eiBNMTUuNiwzLjloLTAuMSBjLTAuOCwwLTEuNCwwLjctMS40LDEuNWMwLDAuNywwLjQsMS4zLDAuOCwxLjljMC4zLDAuNiwwLjcsMS4zLDAuNywyLjNjMCwwLjctMC4zLDEuNS0wLjYsMi43TDE0LjEsMTVsLTMtOC45IGMwLjUsMCwwLjktMC4xLDAuOS0wLjFDMTIuNSw2LDEyLjUsNS4zLDEyLDUuNGMwLDAtMS4zLDAuMS0yLjIsMC4xQzksNS41LDcuNyw1LjQsNy43LDUuNEM3LjIsNS4zLDcuMiw2LDcuNiw2YzAsMCwwLjQsMC4xLDAuOSwwLjEgbDEuMywzLjVMOCwxNUw1LDYuMUM1LjUsNi4xLDUuOSw2LDUuOSw2QzYuNCw2LDYuMyw1LjMsNS45LDUuNGMwLDAtMS4zLDAuMS0yLjIsMC4xYy0wLjIsMC0wLjMsMC0wLjUsMGMxLjUtMi4yLDQtMy43LDYuOS0zLjcgQzEyLjIsMS43LDE0LjEsMi42LDE1LjYsMy45TDE1LjYsMy45TDE1LjYsMy45eiBNMi41LDYuNmwzLjksMTAuOGMtMi43LTEuMy00LjYtNC4yLTQuNi03LjRDMS44LDguOCwyLDcuNiwyLjUsNi42TDIuNSw2LjZMMi41LDYuNiB6IE0xMC4yLDEwLjdsMi41LDYuOWMwLDAsMCwwLjEsMC4xLDAuMUMxMS45LDE4LDExLDE4LjIsMTAsMTguMmMtMC44LDAtMS42LTAuMS0yLjMtMC4zTDEwLjIsMTAuN0wxMC4yLDEwLjdMMTAuMiwxMC43eiBNMTQuMiwxNy4xIGwyLjUtNy4zYzAuNS0xLjIsMC42LTIuMSwwLjYtMi45YzAtMC4zLDAtMC42LTAuMS0wLjhjMC42LDEuMiwxLDIuNSwxLDRDMTguMywxMywxNi42LDE1LjcsMTQuMiwxNy4xTDE0LjIsMTcuMUwxNC4yLDE3LjF6XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwid29ybGRcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgZD1cXFwiTTEsMTAuNSBMMTksMTAuNVxcXCIvPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgZD1cXFwiTTIuMzUsMTUuNSBMMTcuNjUsMTUuNVxcXCIvPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgZD1cXFwiTTIuMzUsNS41IEwxNy41MjMsNS41XFxcIi8+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBkPVxcXCJNMTAsMTkuNDYgTDkuOTgsMTkuNDYgQzcuMzEsMTcuMzMgNS42MSwxNC4xNDEgNS42MSwxMC41OCBDNS42MSw3LjAyIDcuMzMsMy44MyAxMCwxLjcgQzEwLjAxLDEuNyA5Ljk5LDEuNyAxMCwxLjcgTDEwLDEuNyBDMTIuNjcsMy44MyAxNC40LDcuMDIgMTQuNCwxMC41OCBDMTQuNCwxNC4xNDEgMTIuNjcsMTcuMzMgMTAsMTkuNDYgTDEwLDE5LjQ2IEwxMCwxOS40NiBMMTAsMTkuNDYgWlxcXCIvPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBjeD1cXFwiMTBcXFwiIGN5PVxcXCIxMC41XFxcIiByPVxcXCI5XFxcIi8+PC9zdmc+XCIsXG4gICAgICAgIFwieGluZ1wiOiBcIjxzdmcgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBhdGggZD1cXFwiTTQuNCw0LjU2IEM0LjI0LDQuNTYgNC4xMSw0LjYxIDQuMDUsNC43MiBDMy45OCw0LjgzIDMuOTksNC45NyA0LjA3LDUuMTIgTDUuODIsOC4xNiBMNS44Miw4LjE3IEwzLjA2LDEzLjA0IEMyLjk5LDEzLjE4IDIuOTksMTMuMzMgMy4wNiwxMy40NCBDMy4xMiwxMy41NSAzLjI0LDEzLjYyIDMuNCwxMy42MiBMNiwxMy42MiBDNi4zOSwxMy42MiA2LjU3LDEzLjM2IDYuNzEsMTMuMTIgQzYuNzEsMTMuMTIgOS40MSw4LjM1IDkuNTEsOC4xNiBDOS40OSw4LjE0IDcuNzIsNS4wNCA3LjcyLDUuMDQgQzcuNTgsNC44MSA3LjM5LDQuNTYgNi45OSw0LjU2IEw0LjQsNC41NiBMNC40LDQuNTYgWlxcXCIvPjxwYXRoIGQ9XFxcIk0xNS4zLDEgQzE0LjkxLDEgMTQuNzQsMS4yNSAxNC42LDEuNSBDMTQuNiwxLjUgOS4wMSwxMS40MiA4LjgyLDExLjc0IEM4LjgzLDExLjc2IDEyLjUxLDE4LjUxIDEyLjUxLDE4LjUxIEMxMi42NCwxOC43NCAxMi44NCwxOSAxMy4yMywxOSBMMTUuODIsMTkgQzE1Ljk4LDE5IDE2LjEsMTguOTQgMTYuMTYsMTguODMgQzE2LjIzLDE4LjcyIDE2LjIzLDE4LjU3IDE2LjE2LDE4LjQzIEwxMi41LDExLjc0IEwxMi41LDExLjcyIEwxOC4yNSwxLjU2IEMxOC4zMiwxLjQyIDE4LjMyLDEuMjcgMTguMjUsMS4xNiBDMTguMjEsMS4wNiAxOC4wOCwxIDE3LjkzLDEgTDE1LjMsMSBMMTUuMywxIFpcXFwiLz48L3N2Zz5cIixcbiAgICAgICAgXCJ5ZWxwXCI6IFwiPHN2ZyB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMCAyMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBkPVxcXCJNMTcuMTc1LDE0Ljk3MWMtMC4xMTIsMC43Ny0xLjY4NiwyLjc2Ny0yLjQwNiwzLjA1NGMtMC4yNDYsMC4xLTAuNDg3LDAuMDc2LTAuNjc1LTAuMDY5XFx0Yy0wLjEyMi0wLjA5Ni0yLjQ0Ni0zLjg1OS0yLjQ0Ni0zLjg1OWMtMC4xOTQtMC4yOTMtMC4xNTctMC42ODIsMC4wODMtMC45NzhjMC4yMzQtMC4yODQsMC41ODEtMC4zOTMsMC44ODEtMC4yNzZcXHRjMC4wMTYsMC4wMSw0LjIxLDEuMzk0LDQuMzMyLDEuNDgyYzAuMTc4LDAuMTQ4LDAuMjYzLDAuMzc5LDAuMjI1LDAuNjQ2TDE3LjE3NSwxNC45NzFMMTcuMTc1LDE0Ljk3MXogTTExLjQ2NCwxMC43ODlcXHRjLTAuMjAzLTAuMzA3LTAuMTk5LTAuNjY2LDAuMDA5LTAuOTE2YzAsMCwyLjYyNS0zLjU3NCwyLjc0NS0zLjY1N2MwLjIwMy0wLjEzNSwwLjQ1Mi0wLjE0MSwwLjY5LTAuMDI1XFx0YzAuNjkxLDAuMzM1LDIuMDg1LDIuNDA1LDIuMTY3LDMuMTk5djAuMDI3YzAuMDI0LDAuMjcxLTAuMDgyLDAuNDkxLTAuMjczLDAuNjIzYy0wLjEzMiwwLjA4My00LjQzLDEuMTU1LTQuNDMsMS4xNTVcXHRjLTAuMzIyLDAuMDk2LTAuNjgtMC4wNi0wLjg4Mi0wLjM4MUwxMS40NjQsMTAuNzg5eiBNOS40NzUsOS41NjNDOS4zMiw5LjYwOSw4Ljg0OCw5Ljc1Nyw4LjI2OSw4LjgxN2MwLDAtMy45MTYtNi4xNi00LjAwNy02LjM1MVxcdGMtMC4wNTctMC4yMTIsMC4wMTEtMC40NTUsMC4yMDItMC42NUM1LjA0NywxLjIxMSw4LjIxLDAuMzI3LDkuMDM3LDAuNTI5YzAuMjcsMC4wNjksMC40NTcsMC4yMzgsMC41MjIsMC40NzlcXHRjMC4wNDcsMC4yNjYsMC40MzMsNS45ODIsMC40ODgsNy4yNjRDMTAuMDk4LDkuMzY4LDkuNjI5LDkuNTE3LDkuNDc1LDkuNTYzeiBNOS45MjcsMTkuMDY2Yy0wLjA4MywwLjIyNS0wLjI3MywwLjM3My0wLjU0LDAuNDIxXFx0Yy0wLjc2MiwwLjEzLTMuMTUtMC43NTEtMy42NDctMS4zNDJjLTAuMDk2LTAuMTMxLTAuMTU1LTAuMjYyLTAuMTY3LTAuMzk0Yy0wLjAxMS0wLjA5NSwwLTAuMTg5LDAuMDM2LTAuMjcyXFx0YzAuMDYxLTAuMTU1LDIuOTE3LTMuNTM4LDIuOTE3LTMuNTM4YzAuMjE0LTAuMjcyLDAuNTk1LTAuMzU1LDAuOTUyLTAuMjEzYzAuMzQ1LDAuMTMsMC41NiwwLjQyOCwwLjUzNiwwLjc0OVxcdEMxMC4wMTQsMTQuNDc5LDkuOTc3LDE4LjkyMyw5LjkyNywxOS4wNjZ6IE0zLjQ5NSwxMy45MTJjLTAuMjM1LTAuMDA5LTAuNDQ0LTAuMTQ4LTAuNTY4LTAuMzgyYy0wLjA4OS0wLjE3LTAuMTUxLTAuNDUzLTAuMTktMC43OTRcXHRDMi42MywxMS43MDEsMi43NjEsMTAuMTQ0LDMuMDcsOS42NDhjMC4xNDUtMC4yMjYsMC4zNTctMC4zNDUsMC41OTItMC4zMzZjMC4xNTQsMCw0LjI1NSwxLjY2Nyw0LjI1NSwxLjY2N1xcdGMwLjMyMSwwLjExOCwwLjUyMSwwLjQ1MywwLjUsMC44MzNjLTAuMDIzLDAuMzctMC4yMzYsMC42NTUtMC41NTEsMC43MzhMMy40OTUsMTMuOTEyelxcXCIvPjwvc3ZnPlwiLFxuICAgICAgICBcInlvdXR1YmVcIjogXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIk0xNSw0LjFjMSwwLjEsMi4zLDAsMywwLjhjMC44LDAuOCwwLjksMi4xLDAuOSwzLjFDMTksOS4yLDE5LDEwLjksMTksMTJjLTAuMSwxLjEsMCwyLjQtMC41LDMuNGMtMC41LDEuMS0xLjQsMS41LTIuNSwxLjYgYy0xLjIsMC4xLTguNiwwLjEtMTEsMGMtMS4xLTAuMS0yLjQtMC4xLTMuMi0xYy0wLjctMC44LTAuNy0yLTAuOC0zQzEsMTEuOCwxLDEwLjEsMSw4LjljMC0xLjEsMC0yLjQsMC41LTMuNEMyLDQuNSwzLDQuMyw0LjEsNC4yIEM1LjMsNC4xLDEyLjYsNCwxNSw0LjF6IE04LDcuNXY2bDUuNS0zTDgsNy41elxcXCIvPjwvc3ZnPlwiXG4gICAgfSk7XG5cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlVJa2l0KSB7XG4gICAgICAgIHdpbmRvdy5VSWtpdC51c2UocGx1Z2luKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGx1Z2luO1xuXG59KSkpO1xuIiwiLy8gVW1icmVsbGEgSlMgIGh0dHA6Ly91bWJyZWxsYWpzLmNvbS9cbi8vIC0tLS0tLS0tLS0tXG4vLyBTbWFsbCwgbGlnaHR3ZWlnaHQgalF1ZXJ5IGFsdGVybmF0aXZlXG4vLyBAYXV0aG9yIEZyYW5jaXNjbyBQcmVzZW5jaWEgRmFuZG9zIGh0dHBzOi8vZnJhbmNpc2NvLmlvL1xuLy8gQGluc3BpcmF0aW9uIGh0dHA6Ly95b3VtaWdodG5vdG5lZWRqcXVlcnkuY29tL1xuXG4vLyBJbml0aWFsaXplIHRoZSBsaWJyYXJ5XG52YXIgdSA9IGZ1bmN0aW9uIChwYXJhbWV0ZXIsIGNvbnRleHQpIHtcbiAgLy8gTWFrZSBpdCBhbiBpbnN0YW5jZSBvZiB1KCkgdG8gYXZvaWQgbmVlZGluZyAnbmV3JyBhcyBpbiAnbmV3IHUoKScgYW5kIGp1c3RcbiAgLy8gdXNlICd1KCkuYmxhKCk7Jy5cbiAgLy8gQHJlZmVyZW5jZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8yNDAxOTg2M1xuICAvLyBAcmVmZXJlbmNlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xLzg4NzU4NzhcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIHUpKSB7XG4gICAgcmV0dXJuIG5ldyB1KHBhcmFtZXRlciwgY29udGV4dCk7XG4gIH1cblxuICAvLyBObyBuZWVkIHRvIGZ1cnRoZXIgcHJvY2Vzc2luZyBpdCBpZiBpdCdzIGFscmVhZHkgYW4gaW5zdGFuY2VcbiAgaWYgKHBhcmFtZXRlciBpbnN0YW5jZW9mIHUpIHtcbiAgICByZXR1cm4gcGFyYW1ldGVyO1xuICB9XG5cbiAgLy8gUGFyc2UgaXQgYXMgYSBDU1Mgc2VsZWN0b3IgaWYgaXQncyBhIHN0cmluZ1xuICBpZiAodHlwZW9mIHBhcmFtZXRlciA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXJhbWV0ZXIgPSB0aGlzLnNlbGVjdChwYXJhbWV0ZXIsIGNvbnRleHQpO1xuICB9XG5cbiAgLy8gSWYgd2UncmUgcmVmZXJyaW5nIGEgc3BlY2lmaWMgbm9kZSBhcyBpbiBvbignY2xpY2snLCBmdW5jdGlvbigpeyB1KHRoaXMpIH0pXG4gIC8vIG9yIHRoZSBzZWxlY3QoKSBmdW5jdGlvbiByZXR1cm5lZCBhIHNpbmdsZSBub2RlIHN1Y2ggYXMgaW4gJyNpZCdcbiAgaWYgKHBhcmFtZXRlciAmJiBwYXJhbWV0ZXIubm9kZU5hbWUpIHtcbiAgICBwYXJhbWV0ZXIgPSBbcGFyYW1ldGVyXTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgdG8gYW4gYXJyYXksIHNpbmNlIHRoZXJlIGFyZSBtYW55ICdhcnJheS1saWtlJyBzdHVmZiBpbiBqcy1sYW5kXG4gIHRoaXMubm9kZXMgPSB0aGlzLnNsaWNlKHBhcmFtZXRlcik7XG59O1xuXG4vLyBNYXAgdSguLi4pLmxlbmd0aCB0byB1KC4uLikubm9kZXMubGVuZ3RoXG51LnByb3RvdHlwZSA9IHtcbiAgZ2V0IGxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMubGVuZ3RoO1xuICB9XG59O1xuXG4vLyBUaGlzIG1hZGUgdGhlIGNvZGUgZmFzdGVyLCByZWFkIFwiSW5pdGlhbGl6aW5nIGluc3RhbmNlIHZhcmlhYmxlc1wiIGluXG4vLyBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9zcGVlZC9hcnRpY2xlcy9vcHRpbWl6aW5nLWphdmFzY3JpcHRcbnUucHJvdG90eXBlLm5vZGVzID0gW107XG5cbi8vIEFkZCBjbGFzcyhlcykgdG8gdGhlIG1hdGNoZWQgbm9kZXNcbnUucHJvdG90eXBlLmFkZENsYXNzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5lYWNoYXJnKGFyZ3VtZW50cywgZnVuY3Rpb24gKGVsLCBuYW1lKSB7XG4gICAgZWwuY2xhc3NMaXN0LmFkZChuYW1lKTtcbiAgfSk7XG59O1xuXG5cbi8vIFtJTlRFUk5BTCBVU0UgT05MWV1cbi8vIEFkZCB0ZXh0IGluIHRoZSBzcGVjaWZpZWQgcG9zaXRpb24uIEl0IGlzIHVzZWQgYnkgb3RoZXIgZnVuY3Rpb25zXG51LnByb3RvdHlwZS5hZGphY2VudCA9IGZ1bmN0aW9uIChodG1sLCBkYXRhLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKGRhdGEgPT09IDApIHtcbiAgICAgIGRhdGEgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IG5ldyBBcnJheShkYXRhKS5qb2luKCkuc3BsaXQoJywnKS5tYXAoTnVtYmVyLmNhbGwsIE51bWJlcik7XG4gICAgfVxuICB9XG5cbiAgLy8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgbm9kZXMuIEl0IGNhbm5vdCByZXVzZSB0aGUgZWFjaGFyZygpIHNpbmNlIHRoZSBkYXRhXG4gIC8vIHdlIHdhbnQgdG8gZG8gaXQgb25jZSBldmVuIGlmIHRoZXJlJ3Mgbm8gXCJkYXRhXCIgYW5kIHdlIGFjY2VwdCBhIHNlbGVjdG9yXG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKG5vZGUsIGopIHtcbiAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cbiAgICAvLyBBbGxvdyBmb3IgZGF0YSB0byBiZSBmYWxzeSBhbmQgc3RpbGwgbG9vcCBvbmNlXG4gICAgdShkYXRhIHx8IHt9KS5tYXAoZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAvLyBBbGxvdyBmb3IgY2FsbGJhY2tzIHRoYXQgYWNjZXB0IHNvbWUgZGF0YVxuICAgICAgdmFyIHBhcnQgPSAodHlwZW9mIGh0bWwgPT09ICdmdW5jdGlvbicpID8gaHRtbC5jYWxsKHRoaXMsIGVsLCBpLCBub2RlLCBqKSA6IGh0bWw7XG5cbiAgICAgIGlmICh0eXBlb2YgcGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGUocGFydCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1KHBhcnQpO1xuICAgIH0pLmVhY2goZnVuY3Rpb24gKG4pIHtcbiAgICAgIHRoaXMuaXNJblBhZ2UobilcbiAgICAgICAgPyBmcmFnbWVudC5hcHBlbmRDaGlsZCh1KG4pLmNsb25lKCkuZmlyc3QoKSlcbiAgICAgICAgOiBmcmFnbWVudC5hcHBlbmRDaGlsZChuKTtcbiAgICB9KTtcblxuICAgIGNhbGxiYWNrLmNhbGwodGhpcywgbm9kZSwgZnJhZ21lbnQpO1xuICB9KTtcbn07XG5cbi8vIEFkZCBzb21lIGh0bWwgYXMgYSBzaWJsaW5nIGFmdGVyIGVhY2ggb2YgdGhlIG1hdGNoZWQgZWxlbWVudHMuXG51LnByb3RvdHlwZS5hZnRlciA9IGZ1bmN0aW9uIChodG1sLCBkYXRhKSB7XG4gIHJldHVybiB0aGlzLmFkamFjZW50KGh0bWwsIGRhdGEsIGZ1bmN0aW9uIChub2RlLCBmcmFnbWVudCkge1xuICAgIG5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZnJhZ21lbnQsIG5vZGUubmV4dFNpYmxpbmcpO1xuICB9KTtcbn07XG5cblxuLy8gQWRkIHNvbWUgaHRtbCBhcyBhIGNoaWxkIGF0IHRoZSBlbmQgb2YgZWFjaCBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbnUucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIChodG1sLCBkYXRhKSB7XG4gIHJldHVybiB0aGlzLmFkamFjZW50KGh0bWwsIGRhdGEsIGZ1bmN0aW9uIChub2RlLCBmcmFnbWVudCkge1xuICAgIG5vZGUuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuICB9KTtcbn07XG5cblxuLy8gW0lOVEVSTkFMIFVTRSBPTkxZXVxuXG4vLyBOb3JtYWxpemUgdGhlIGFyZ3VtZW50cyB0byBhbiBhcnJheSBvZiBzdHJpbmdzXG4vLyBBbGxvdyBmb3Igc2V2ZXJhbCBjbGFzcyBuYW1lcyBsaWtlIFwiYSBiLCBjXCIgYW5kIHNldmVyYWwgcGFyYW1ldGVyc1xudS5wcm90b3R5cGUuYXJncyA9IGZ1bmN0aW9uIChhcmdzLCBub2RlLCBpKSB7XG4gIGlmICh0eXBlb2YgYXJncyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGFyZ3MgPSBhcmdzKG5vZGUsIGkpO1xuICB9XG5cbiAgLy8gRmlyc3QgZmxhdHRlbiBpdCBhbGwgdG8gYSBzdHJpbmcgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMjI5MjAzMDVcbiAgLy8gSWYgd2UgdHJ5IHRvIHNsaWNlIGEgc3RyaW5nIGJhZCB0aGluZ3MgaGFwcGVuOiBbJ24nLCAnYScsICdtJywgJ2UnXVxuICBpZiAodHlwZW9mIGFyZ3MgIT09ICdzdHJpbmcnKSB7XG4gICAgYXJncyA9IHRoaXMuc2xpY2UoYXJncykubWFwKHRoaXMuc3RyKG5vZGUsIGkpKTtcbiAgfVxuXG4gIC8vIFRoZW4gY29udmVydCB0aGF0IHN0cmluZyB0byBhbiBhcnJheSBvZiBub3QtbnVsbCBzdHJpbmdzXG4gIHJldHVybiBhcmdzLnRvU3RyaW5nKCkuc3BsaXQoL1tcXHMsXSsvKS5maWx0ZXIoZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gZS5sZW5ndGg7XG4gIH0pO1xufTtcblxuXG4vLyBNZXJnZSBhbGwgb2YgdGhlIG5vZGVzIHRoYXQgdGhlIGNhbGxiYWNrIHJldHVybiBpbnRvIGEgc2ltcGxlIGFycmF5XG51LnByb3RvdHlwZS5hcnJheSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICBjYWxsYmFjayA9IGNhbGxiYWNrO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJldHVybiB0aGlzLm5vZGVzLnJlZHVjZShmdW5jdGlvbiAobGlzdCwgbm9kZSwgaSkge1xuICAgIHZhciB2YWw7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB2YWwgPSBjYWxsYmFjay5jYWxsKHNlbGYsIG5vZGUsIGkpO1xuICAgICAgaWYgKCF2YWwpIHZhbCA9IGZhbHNlO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB2YWwgPSB1KHZhbCk7XG4gICAgICBpZiAodmFsIGluc3RhbmNlb2YgdSkgdmFsID0gdmFsLm5vZGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWwgPSBub2RlLmlubmVySFRNTDtcbiAgICB9XG4gICAgcmV0dXJuIGxpc3QuY29uY2F0KHZhbCAhPT0gZmFsc2UgPyB2YWwgOiBbXSk7XG4gIH0sIFtdKTtcbn07XG5cblxuLy8gW0lOVEVSTkFMIFVTRSBPTkxZXVxuXG4vLyBIYW5kbGUgYXR0cmlidXRlcyBmb3IgdGhlIG1hdGNoZWQgZWxlbWVudHNcbnUucHJvdG90eXBlLmF0dHIgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUsIGRhdGEpIHtcbiAgZGF0YSA9IGRhdGEgPyAnZGF0YS0nIDogJyc7XG5cbiAgLy8gVGhpcyB3aWxsIGhhbmRsZSB0aG9zZSBlbGVtZW50cyB0aGF0IGNhbiBhY2NlcHQgYSBwYWlyIHdpdGggdGhlc2UgZm9vdHByaW50czpcbiAgLy8gLmF0dHIoJ2EnKSwgLmF0dHIoJ2EnLCAnYicpLCAuYXR0cih7IGE6ICdiJyB9KVxuICByZXR1cm4gdGhpcy5wYWlycyhuYW1lLCB2YWx1ZSwgZnVuY3Rpb24gKG5vZGUsIG5hbWUpIHtcbiAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUoZGF0YSArIG5hbWUpO1xuICB9LCBmdW5jdGlvbiAobm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShkYXRhICsgbmFtZSwgdmFsdWUpO1xuICB9KTtcbn07XG5cblxuLy8gQWRkIHNvbWUgaHRtbCBiZWZvcmUgZWFjaCBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbnUucHJvdG90eXBlLmJlZm9yZSA9IGZ1bmN0aW9uIChodG1sLCBkYXRhKSB7XG4gIHJldHVybiB0aGlzLmFkamFjZW50KGh0bWwsIGRhdGEsIGZ1bmN0aW9uIChub2RlLCBmcmFnbWVudCkge1xuICAgIG5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZnJhZ21lbnQsIG5vZGUpO1xuICB9KTtcbn07XG5cblxuLy8gR2V0IHRoZSBkaXJlY3QgY2hpbGRyZW4gb2YgYWxsIG9mIHRoZSBub2RlcyB3aXRoIGFuIG9wdGlvbmFsIGZpbHRlclxudS5wcm90b3R5cGUuY2hpbGRyZW4gPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIHRoaXMuc2xpY2Uobm9kZS5jaGlsZHJlbik7XG4gIH0pLmZpbHRlcihzZWxlY3Rvcik7XG59O1xuXG5cbi8qKlxuICogRGVlcCBjbG9uZSBhIERPTSBub2RlIGFuZCBpdHMgZGVzY2VuZGFudHMuXG4gKiBAcmV0dXJuIHtbT2JqZWN0XX0gICAgICAgICBSZXR1cm5zIGFuIFVtYnJlbGxhLmpzIGluc3RhbmNlLlxuICovXG51LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChub2RlLCBpKSB7XG4gICAgdmFyIGNsb25lID0gbm9kZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgdmFyIGRlc3QgPSB0aGlzLmdldEFsbChjbG9uZSk7XG5cbiAgICB0aGlzLmdldEFsbChub2RlKS5lYWNoKGZ1bmN0aW9uIChzcmMsIGkpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLm1pcnJvcikge1xuICAgICAgICBpZiAodGhpcy5taXJyb3Jba2V5XSkge1xuICAgICAgICAgIHRoaXMubWlycm9yW2tleV0oc3JjLCBkZXN0Lm5vZGVzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNsb25lO1xuICB9KTtcbn07XG5cbi8qKlxuICogUmV0dXJuIGFuIGFycmF5IG9mIERPTSBub2RlcyBvZiBhIHNvdXJjZSBub2RlIGFuZCBpdHMgY2hpbGRyZW4uXG4gKiBAcGFyYW0gIHtbT2JqZWN0XX0gY29udGV4dCBET00gbm9kZS5cbiAqIEBwYXJhbSAge1tTdHJpbmddfSB0YWcgICAgIERPTSBub2RlIHRhZ05hbWUuXG4gKiBAcmV0dXJuIHtbQXJyYXldfSAgICAgICAgICBBcnJheSBjb250YWluaW5nIHF1ZXJpZWQgRE9NIG5vZGVzLlxuICovXG51LnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbiBnZXRBbGwgKGNvbnRleHQpIHtcbiAgcmV0dXJuIHUoW2NvbnRleHRdLmNvbmNhdCh1KCcqJywgY29udGV4dCkubm9kZXMpKTtcbn07XG5cbi8vIFN0b3JlIGFsbCBvZiB0aGUgb3BlcmF0aW9ucyB0byBwZXJmb3JtIHdoZW4gY2xvbmluZyBlbGVtZW50c1xudS5wcm90b3R5cGUubWlycm9yID0ge307XG5cbi8qKlxuICogQ29weSBhbGwgSmF2YVNjcmlwdCBldmVudHMgb2Ygc291cmNlIG5vZGUgdG8gZGVzdGluYXRpb24gbm9kZS5cbiAqIEBwYXJhbSAge1tPYmplY3RdfSBzb3VyY2UgICAgICBET00gbm9kZVxuICogQHBhcmFtICB7W09iamVjdF19IGRlc3RpbmF0aW9uIERPTSBub2RlXG4gKiBAcmV0dXJuIHtbdW5kZWZpbmVkXV19XG4gKi9cbnUucHJvdG90eXBlLm1pcnJvci5ldmVudHMgPSBmdW5jdGlvbiAoc3JjLCBkZXN0KSB7XG4gIGlmICghc3JjLl9lKSByZXR1cm47XG5cbiAgZm9yICh2YXIgdHlwZSBpbiBzcmMuX2UpIHtcbiAgICBzcmMuX2VbdHlwZV0uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHUoZGVzdCkub24odHlwZSwgZXZlbnQpO1xuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENvcHkgc2VsZWN0IGlucHV0IHZhbHVlIHRvIGl0cyBjbG9uZS5cbiAqIEBwYXJhbSAge1tPYmplY3RdfSBzcmMgIERPTSBub2RlXG4gKiBAcGFyYW0gIHtbT2JqZWN0XX0gZGVzdCBET00gbm9kZVxuICogQHJldHVybiB7W3VuZGVmaW5lZF19XG4gKi9cbnUucHJvdG90eXBlLm1pcnJvci5zZWxlY3QgPSBmdW5jdGlvbiAoc3JjLCBkZXN0KSB7XG4gIGlmICh1KHNyYykuaXMoJ3NlbGVjdCcpKSB7XG4gICAgZGVzdC52YWx1ZSA9IHNyYy52YWx1ZTtcbiAgfVxufTtcblxuLyoqXG4gKiBDb3B5IHRleHRhcmVhIGlucHV0IHZhbHVlIHRvIGl0cyBjbG9uZVxuICogQHBhcmFtICB7W09iamVjdF19IHNyYyAgRE9NIG5vZGVcbiAqIEBwYXJhbSAge1tPYmplY3RdfSBkZXN0IERPTSBub2RlXG4gKiBAcmV0dXJuIHtbdW5kZWZpbmVkXX1cbiAqL1xudS5wcm90b3R5cGUubWlycm9yLnRleHRhcmVhID0gZnVuY3Rpb24gKHNyYywgZGVzdCkge1xuICBpZiAodShzcmMpLmlzKCd0ZXh0YXJlYScpKSB7XG4gICAgZGVzdC52YWx1ZSA9IHNyYy52YWx1ZTtcbiAgfVxufTtcblxuXG4vLyBGaW5kIHRoZSBmaXJzdCBhbmNlc3RvciB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yIGZvciBlYWNoIG5vZGVcbnUucHJvdG90eXBlLmNsb3Nlc3QgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgLy8gS2VlcCBnb2luZyB1cCBhbmQgdXAgb24gdGhlIHRyZWUuIEZpcnN0IGVsZW1lbnQgaXMgYWxzbyBjaGVja2VkXG4gICAgZG8ge1xuICAgICAgaWYgKHUobm9kZSkuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKChub2RlID0gbm9kZS5wYXJlbnROb2RlKSAmJiBub2RlICE9PSBkb2N1bWVudCk7XG4gIH0pO1xufTtcblxuXG4vLyBIYW5kbGUgZGF0YS0qIGF0dHJpYnV0ZXMgZm9yIHRoZSBtYXRjaGVkIGVsZW1lbnRzXG51LnByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLmF0dHIobmFtZSwgdmFsdWUsIHRydWUpO1xufTtcblxuXG4vLyBMb29wcyB0aHJvdWdoIGV2ZXJ5IG5vZGUgZnJvbSB0aGUgY3VycmVudCBjYWxsXG51LnByb3RvdHlwZS5lYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIC8vIEJ5IGRvaW5nIGNhbGxiYWNrLmNhbGwgd2UgYWxsb3cgXCJ0aGlzXCIgdG8gYmUgdGhlIGNvbnRleHQgZm9yXG4gIC8vIHRoZSBjYWxsYmFjayAoc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xLzQwNjUzNTMgcHJlY2lzZWx5KVxuICB0aGlzLm5vZGVzLmZvckVhY2goY2FsbGJhY2suYmluZCh0aGlzKSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8vIFtJTlRFUk5BTCBVU0UgT05MWV1cbi8vIExvb3AgdGhyb3VnaCB0aGUgY29tYmluYXRpb24gb2YgZXZlcnkgbm9kZSBhbmQgZXZlcnkgYXJndW1lbnQgcGFzc2VkXG51LnByb3RvdHlwZS5lYWNoYXJnID0gZnVuY3Rpb24gKGFyZ3MsIGNhbGxiYWNrKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKG5vZGUsIGkpIHtcbiAgICB0aGlzLmFyZ3MoYXJncywgbm9kZSwgaSkuZm9yRWFjaChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAvLyBQZXJmb3JtIHRoZSBjYWxsYmFjayBmb3IgdGhpcyBub2RlXG4gICAgICAvLyBCeSBkb2luZyBjYWxsYmFjay5jYWxsIHdlIGFsbG93IFwidGhpc1wiIHRvIGJlIHRoZSBjb250ZXh0IGZvclxuICAgICAgLy8gdGhlIGNhbGxiYWNrIChzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3EvNDA2NTM1MyBwcmVjaXNlbHkpXG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIG5vZGUsIGFyZyk7XG4gICAgfSwgdGhpcyk7XG4gIH0pO1xufTtcblxuXG4vLyBSZW1vdmUgYWxsIGNoaWxkcmVuIG9mIHRoZSBtYXRjaGVkIG5vZGVzIGZyb20gdGhlIERPTS5cbnUucHJvdG90eXBlLmVtcHR5ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgd2hpbGUgKG5vZGUuZmlyc3RDaGlsZCkge1xuICAgICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5cbi8vIC5maWx0ZXIoc2VsZWN0b3IpXG4vLyBEZWxldGUgYWxsIG9mIHRoZSBub2RlcyB0aGF0IGRvbid0IHBhc3MgdGhlIHNlbGVjdG9yXG51LnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgLy8gVGhlIGRlZmF1bHQgZnVuY3Rpb24gaWYgaXQncyBhIGNzcyBzZWxlY3RvclxuICAvLyBDYW5ub3QgY2hhbmdlIG5hbWUgdG8gJ3NlbGVjdG9yJyBzaW5jZSBpdCdkIG1lc3Mgd2l0aCBpdCBpbnNpZGUgdGhpcyBmblxuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIC8vIE1ha2UgaXQgY29tcGF0aWJsZSB3aXRoIHNvbWUgb3RoZXIgYnJvd3NlcnNcbiAgICBub2RlLm1hdGNoZXMgPSBub2RlLm1hdGNoZXMgfHwgbm9kZS5tc01hdGNoZXNTZWxlY3RvciB8fCBub2RlLndlYmtpdE1hdGNoZXNTZWxlY3RvcjtcblxuICAgIC8vIENoZWNrIGlmIGl0J3MgdGhlIHNhbWUgZWxlbWVudCAob3IgYW55IGVsZW1lbnQgaWYgbm8gc2VsZWN0b3Igd2FzIHBhc3NlZClcbiAgICByZXR1cm4gbm9kZS5tYXRjaGVzKHNlbGVjdG9yIHx8ICcqJyk7XG4gIH07XG5cbiAgLy8gZmlsdGVyKCkgcmVjZWl2ZXMgYSBmdW5jdGlvbiBhcyBpbiAuZmlsdGVyKGUgPT4gdShlKS5jaGlsZHJlbigpLmxlbmd0aClcbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2sgPSBzZWxlY3RvcjtcblxuICAvLyBmaWx0ZXIoKSByZWNlaXZlcyBhbiBpbnN0YW5jZSBvZiBVbWJyZWxsYSBhcyBpbiAuZmlsdGVyKHUoJ2EnKSlcbiAgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2YgdSkge1xuICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHJldHVybiAoc2VsZWN0b3Iubm9kZXMpLmluZGV4T2Yobm9kZSkgIT09IC0xO1xuICAgIH07XG4gIH1cblxuICAvLyBKdXN0IGEgbmF0aXZlIGZpbHRlcmluZyBmdW5jdGlvbiBmb3IgdWx0cmEtc3BlZWRcbiAgcmV0dXJuIHUodGhpcy5ub2Rlcy5maWx0ZXIoY2FsbGJhY2spKTtcbn07XG5cblxuLy8gRmluZCBhbGwgdGhlIG5vZGVzIGNoaWxkcmVuIG9mIHRoZSBjdXJyZW50IG9uZXMgbWF0Y2hlZCBieSBhIHNlbGVjdG9yXG51LnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiB1KHNlbGVjdG9yIHx8ICcqJywgbm9kZSk7XG4gIH0pO1xufTtcblxuXG4vLyBHZXQgdGhlIGZpcnN0IG9mIHRoZSBub2Rlc1xudS5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLm5vZGVzWzBdIHx8IGZhbHNlO1xufTtcblxuXG4vLyBbSU5URVJOQUwgVVNFIE9OTFldXG4vLyBHZW5lcmF0ZSBhIGZyYWdtZW50IG9mIEhUTUwuIFRoaXMgaXJvbnMgb3V0IHRoZSBpbmNvbnNpc3RlbmNlc1xudS5wcm90b3R5cGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiAoaHRtbCkge1xuICAvLyBUYWJsZSBlbGVtZW50cyBuZWVkIHRvIGJlIGNoaWxkIG9mIDx0YWJsZT4gZm9yIHNvbWUgZioqKmVkIHVwIHJlYXNvblxuICBpZiAoL15cXHMqPHRyWz4gXS8udGVzdChodG1sKSkge1xuICAgIHJldHVybiB1KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJykpLmh0bWwoaHRtbCkuY2hpbGRyZW4oKS5jaGlsZHJlbigpLm5vZGVzO1xuICB9IGVsc2UgaWYgKC9eXFxzKjx0KGh8ZClbPiBdLy50ZXN0KGh0bWwpKSB7XG4gICAgcmV0dXJuIHUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKSkuaHRtbChodG1sKS5jaGlsZHJlbigpLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5ub2RlcztcbiAgfSBlbHNlIGlmICgvXlxccyo8Ly50ZXN0KGh0bWwpKSB7XG4gICAgcmV0dXJuIHUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLmh0bWwoaHRtbCkuY2hpbGRyZW4oKS5ub2RlcztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoaHRtbCk7XG4gIH1cbn07XG5cbi8vIENoYW5nZSB0aGUgZGVmYXVsdCBldmVudCBmb3IgdGhlIGNhbGxiYWNrLiBTaW1wbGUgZGVjb3JhdG9yIHRvIHByZXZlbnREZWZhdWx0XG51LnByb3RvdHlwZS5oYW5kbGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhcmdzID0gdGhpcy5zbGljZShhcmd1bWVudHMpLm1hcChmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGFyZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGFyZztcbiAgfSwgdGhpcyk7XG5cbiAgcmV0dXJuIHRoaXMub24uYXBwbHkodGhpcywgYXJncyk7XG59O1xuXG5cbi8vIEZpbmQgb3V0IHdoZXRoZXIgdGhlIG1hdGNoZWQgZWxlbWVudHMgaGF2ZSBhIGNsYXNzIG9yIG5vdFxudS5wcm90b3R5cGUuaGFzQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIENoZWNrIGlmIGFueSBvZiB0aGVtIGhhcyBhbGwgb2YgdGhlIGNsYXNzZXNcbiAgcmV0dXJuIHRoaXMuaXMoJy4nICsgdGhpcy5hcmdzKGFyZ3VtZW50cykuam9pbignLicpKTtcbn07XG5cblxuLy8gU2V0IG9yIHJldHJpZXZlIHRoZSBodG1sIGZyb20gdGhlIG1hdGNoZWQgbm9kZShzKVxudS5wcm90b3R5cGUuaHRtbCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIC8vIE5lZWRzIHRvIGNoZWNrIHVuZGVmaW5lZCBhcyBpdCBtaWdodCBiZSBcIlwiXG4gIGlmICh0ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdGhpcy5maXJzdCgpLmlubmVySFRNTCB8fCAnJztcbiAgfVxuXG4gIC8vIElmIHdlJ3JlIGF0dGVtcHRpbmcgdG8gc2V0IHNvbWUgdGV4dFxuICAvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBub2Rlc1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgLy8gU2V0IHRoZSBpbm5lciBodG1sIHRvIHRoZSBub2RlXG4gICAgbm9kZS5pbm5lckhUTUwgPSB0ZXh0O1xuICB9KTtcbn07XG5cblxuLy8gQ2hlY2sgd2hldGhlciBhbnkgb2YgdGhlIG5vZGVzIG1hdGNoZXMgdGhlIHNlbGVjdG9yXG51LnByb3RvdHlwZS5pcyA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICByZXR1cm4gdGhpcy5maWx0ZXIoc2VsZWN0b3IpLmxlbmd0aCA+IDA7XG59O1xuXG5cbi8qKlxuICogSW50ZXJuYWwgdXNlIG9ubHkuIFRoaXMgZnVuY3Rpb24gY2hlY2tzIHRvIHNlZSBpZiBhbiBlbGVtZW50IGlzIGluIHRoZSBwYWdlJ3MgYm9keS4gQXMgY29udGFpbnMgaXMgaW5jbHVzaXZlIGFuZCBkZXRlcm1pbmluZyBpZiB0aGUgYm9keSBjb250YWlucyBpdHNlbGYgaXNuJ3QgdGhlIGludGVudGlvbiBvZiBpc0luUGFnZSB0aGlzIGNhc2UgZXhwbGljaXRseSByZXR1cm5zIGZhbHNlLlxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vZGUvY29udGFpbnNcbiAqIEBwYXJhbSAge1tPYmplY3RdfSAgbm9kZSBET00gbm9kZVxuICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgIFRoZSBOb2RlLmNvbnRhaW5zKCkgbWV0aG9kIHJldHVybnMgYSBCb29sZWFuIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciBhIG5vZGUgaXMgYSBkZXNjZW5kYW50IG9mIGEgZ2l2ZW4gbm9kZSBvciBub3QuXG4gKi9cbnUucHJvdG90eXBlLmlzSW5QYWdlID0gZnVuY3Rpb24gaXNJblBhZ2UgKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlID09PSBkb2N1bWVudC5ib2R5KSA/IGZhbHNlIDogZG9jdW1lbnQuYm9keS5jb250YWlucyhub2RlKTtcbn07XG5cbiAgLy8gR2V0IHRoZSBsYXN0IG9mIHRoZSBub2Rlc1xudS5wcm90b3R5cGUubGFzdCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMubm9kZXNbdGhpcy5sZW5ndGggLSAxXSB8fCBmYWxzZTtcbn07XG5cblxuLy8gTWVyZ2UgYWxsIG9mIHRoZSBub2RlcyB0aGF0IHRoZSBjYWxsYmFjayByZXR1cm5zXG51LnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGNhbGxiYWNrID8gdSh0aGlzLmFycmF5KGNhbGxiYWNrKSkudW5pcXVlKCkgOiB0aGlzO1xufTtcblxuXG4vLyBEZWxldGUgYWxsIG9mIHRoZSBub2RlcyB0aGF0IGVxdWFscyB0aGUgZmlsdGVyXG51LnByb3RvdHlwZS5ub3QgPSBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gIHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiAhdShub2RlKS5pcyhmaWx0ZXIgfHwgdHJ1ZSk7XG4gIH0pO1xufTtcblxuXG4vLyBSZW1vdmVzIHRoZSBjYWxsYmFjayB0byB0aGUgZXZlbnQgbGlzdGVuZXIgZm9yIGVhY2ggbm9kZVxudS5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKGV2ZW50cykge1xuICByZXR1cm4gdGhpcy5lYWNoYXJnKGV2ZW50cywgZnVuY3Rpb24gKG5vZGUsIGV2ZW50KSB7XG4gICAgdShub2RlLl9lID8gbm9kZS5fZVtldmVudF0gOiBbXSkuZWFjaChmdW5jdGlvbiAoY2IpIHtcbiAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgY2IpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cblxuLy8gQXR0YWNoIGEgY2FsbGJhY2sgdG8gdGhlIHNwZWNpZmllZCBldmVudHNcbnUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2ZW50cywgY2IsIGNiMikge1xuICBpZiAodHlwZW9mIGNiID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWwgPSBjYjtcbiAgICBjYiA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHUoZS5jdXJyZW50VGFyZ2V0KS5maW5kKHNlbCkuZWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGlmICh0YXJnZXQgPT09IGUudGFyZ2V0IHx8IHRhcmdldC5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsICdjdXJyZW50VGFyZ2V0Jywge1xuICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgICAgY2IyLmFwcGx5KHRhcmdldCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICAvLyBBZGQgdGhlIGN1c3RvbSBkYXRhIGFzIGFyZ3VtZW50cyB0byB0aGUgY2FsbGJhY2tcbiAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gY2IuYXBwbHkodGhpcywgW2VdLmNvbmNhdChlLmRldGFpbCB8fCBbXSkpO1xuICB9O1xuXG4gIHJldHVybiB0aGlzLmVhY2hhcmcoZXZlbnRzLCBmdW5jdGlvbiAobm9kZSwgZXZlbnQpIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcblxuICAgIC8vIFN0b3JlIGl0IHNvIHdlIGNhbiBkZXJlZmVyZW5jZSBpdCB3aXRoIGAub2ZmKClgIGxhdGVyIG9uXG4gICAgbm9kZS5fZSA9IG5vZGUuX2UgfHwge307XG4gICAgbm9kZS5fZVtldmVudF0gPSBub2RlLl9lW2V2ZW50XSB8fCBbXTtcbiAgICBub2RlLl9lW2V2ZW50XS5wdXNoKGNhbGxiYWNrKTtcbiAgfSk7XG59O1xuXG5cbi8vIFtJTlRFUk5BTCBVU0UgT05MWV1cblxuLy8gVGFrZSB0aGUgYXJndW1lbnRzIGFuZCBhIGNvdXBsZSBvZiBjYWxsYmFjayB0byBoYW5kbGUgdGhlIGdldHRlci9zZXR0ZXIgcGFpcnNcbi8vIHN1Y2ggYXM6IC5jc3MoJ2EnKSwgLmNzcygnYScsICdiJyksIC5jc3MoeyBhOiAnYicgfSlcbnUucHJvdG90eXBlLnBhaXJzID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCBnZXQsIHNldCkge1xuICAvLyBDb252ZXJ0IGl0IGludG8gYSBwbGFpbiBvYmplY3QgaWYgaXQgaXMgbm90XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5tID0gbmFtZTtcbiAgICBuYW1lID0ge307XG4gICAgbmFtZVtubV0gPSB2YWx1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBTZXQgdGhlIHZhbHVlIG9mIGVhY2ggb25lLCBmb3IgZWFjaCBvZiB0aGUgeyBwcm9wOiB2YWx1ZSB9IHBhaXJzXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgZm9yICh2YXIga2V5IGluIG5hbWUpIHtcbiAgICAgICAgc2V0KG5vZGUsIGtleSwgbmFtZVtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJldHVybiB0aGUgc3R5bGUgb2YgdGhlIGZpcnN0IG9uZVxuICByZXR1cm4gdGhpcy5sZW5ndGggPyBnZXQodGhpcy5maXJzdCgpLCBuYW1lKSA6ICcnO1xufTtcblxuLy8gW0lOVEVSTkFMIFVTRSBPTkxZXVxuXG4vLyBQYXJhbWV0aXplIGFuIG9iamVjdDogeyBhOiAnYicsIGM6ICdkJyB9ID0+ICdhPWImYz1kJ1xudS5wcm90b3R5cGUucGFyYW0gPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMudXJpKGtleSkgKyAnPScgKyB0aGlzLnVyaShvYmpba2V5XSk7XG4gIH0uYmluZCh0aGlzKSkuam9pbignJicpO1xufTtcblxuLy8gVHJhdmVsIHRoZSBtYXRjaGVkIGVsZW1lbnRzIG9uZSBub2RlIHVwXG51LnByb3RvdHlwZS5wYXJlbnQgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZTtcbiAgfSkuZmlsdGVyKHNlbGVjdG9yKTtcbn07XG5cblxuLy8gQWRkIG5vZGVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgZWFjaCBub2RlXG51LnByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24gKGh0bWwsIGRhdGEpIHtcbiAgcmV0dXJuIHRoaXMuYWRqYWNlbnQoaHRtbCwgZGF0YSwgZnVuY3Rpb24gKG5vZGUsIGZyYWdtZW50KSB7XG4gICAgbm9kZS5pbnNlcnRCZWZvcmUoZnJhZ21lbnQsIG5vZGUuZmlyc3RDaGlsZCk7XG4gIH0pO1xufTtcblxuXG4vLyBEZWxldGUgdGhlIG1hdGNoZWQgbm9kZXMgZnJvbSB0aGUgRE9NXG51LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIG5vZGVzXG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAvLyBQZXJmb3JtIHRoZSByZW1vdmFsIG9ubHkgaWYgdGhlIG5vZGUgaGFzIGEgcGFyZW50XG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5cbi8vIFJlbW92ZXMgYSBjbGFzcyBmcm9tIGFsbCBvZiB0aGUgbWF0Y2hlZCBub2Rlc1xudS5wcm90b3R5cGUucmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIExvb3AgdGhlIGNvbWJpbmF0aW9uIG9mIGVhY2ggbm9kZSB3aXRoIGVhY2ggYXJndW1lbnRcbiAgcmV0dXJuIHRoaXMuZWFjaGFyZyhhcmd1bWVudHMsIGZ1bmN0aW9uIChlbCwgbmFtZSkge1xuICAgIC8vIFJlbW92ZSB0aGUgY2xhc3MgdXNpbmcgdGhlIG5hdGl2ZSBtZXRob2RcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKG5hbWUpO1xuICB9KTtcbn07XG5cblxuLy8gUmVwbGFjZSB0aGUgbWF0Y2hlZCBlbGVtZW50cyB3aXRoIHRoZSBwYXNzZWQgYXJndW1lbnQuXG51LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gKGh0bWwsIGRhdGEpIHtcbiAgdmFyIG5vZGVzID0gW107XG4gIHRoaXMuYWRqYWNlbnQoaHRtbCwgZGF0YSwgZnVuY3Rpb24gKG5vZGUsIGZyYWdtZW50KSB7XG4gICAgbm9kZXMgPSBub2Rlcy5jb25jYXQodGhpcy5zbGljZShmcmFnbWVudC5jaGlsZHJlbikpO1xuICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoZnJhZ21lbnQsIG5vZGUpO1xuICB9KTtcbiAgcmV0dXJuIHUobm9kZXMpO1xufTtcblxuXG4vLyBTY3JvbGwgdG8gdGhlIGZpcnN0IG1hdGNoZWQgZWxlbWVudFxudS5wcm90b3R5cGUuc2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmZpcnN0KCkuc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcgfSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vLyBbSU5URVJOQUwgVVNFIE9OTFldXG4vLyBTZWxlY3QgdGhlIGFkZWN1YXRlIHBhcnQgZnJvbSB0aGUgY29udGV4dFxudS5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24gKHBhcmFtZXRlciwgY29udGV4dCkge1xuICAvLyBBbGxvdyBmb3Igc3BhY2VzIGJlZm9yZSBvciBhZnRlclxuICBwYXJhbWV0ZXIgPSBwYXJhbWV0ZXIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG5cbiAgaWYgKC9ePC8udGVzdChwYXJhbWV0ZXIpKSB7XG4gICAgcmV0dXJuIHUoKS5nZW5lcmF0ZShwYXJhbWV0ZXIpO1xuICB9XG5cbiAgcmV0dXJuIChjb250ZXh0IHx8IGRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtZXRlcik7XG59O1xuXG5cbi8vIENvbnZlcnQgZm9ybXMgaW50byBhIHN0cmluZyBhYmxlIHRvIGJlIHN1Ym1pdHRlZFxuLy8gT3JpZ2luYWwgc291cmNlOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8xMTY2MTE4N1xudS5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gU3RvcmUgdGhlIGNsYXNzIGluIGEgdmFyaWFibGUgZm9yIG1hbmlwdWxhdGlvblxuICByZXR1cm4gdGhpcy5zbGljZSh0aGlzLmZpcnN0KCkuZWxlbWVudHMpLnJlZHVjZShmdW5jdGlvbiAocXVlcnksIGVsKSB7XG4gICAgLy8gV2Ugb25seSB3YW50IHRvIG1hdGNoIGVuYWJsZWQgZWxlbWVudHMgd2l0aCBuYW1lcywgYnV0IG5vdCBmaWxlc1xuICAgIGlmICghZWwubmFtZSB8fCBlbC5kaXNhYmxlZCB8fCBlbC50eXBlID09PSAnZmlsZScpIHJldHVybiBxdWVyeTtcblxuICAgIC8vIElnbm9yZSB0aGUgY2hlY2tib3hlcyB0aGF0IGFyZSBub3QgY2hlY2tlZFxuICAgIGlmICgvKGNoZWNrYm94fHJhZGlvKS8udGVzdChlbC50eXBlKSAmJiAhZWwuY2hlY2tlZCkgcmV0dXJuIHF1ZXJ5O1xuXG4gICAgLy8gSGFuZGxlIG11bHRpcGxlIHNlbGVjdHNcbiAgICBpZiAoZWwudHlwZSA9PT0gJ3NlbGVjdC1tdWx0aXBsZScpIHtcbiAgICAgIHUoZWwub3B0aW9ucykuZWFjaChmdW5jdGlvbiAob3B0KSB7XG4gICAgICAgIGlmIChvcHQuc2VsZWN0ZWQpIHtcbiAgICAgICAgICBxdWVyeSArPSAnJicgKyBzZWxmLnVyaShlbC5uYW1lKSArICc9JyArIHNlbGYudXJpKG9wdC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHF1ZXJ5O1xuICAgIH1cblxuICAgIC8vIEFkZCB0aGUgZWxlbWVudCB0byB0aGUgb2JqZWN0XG4gICAgcmV0dXJuIHF1ZXJ5ICsgJyYnICsgc2VsZi51cmkoZWwubmFtZSkgKyAnPScgKyBzZWxmLnVyaShlbC52YWx1ZSk7XG4gIH0sICcnKS5zbGljZSgxKTtcbn07XG5cblxuLy8gVHJhdmVsIHRoZSBtYXRjaGVkIGVsZW1lbnRzIGF0IHRoZSBzYW1lIGxldmVsXG51LnByb3RvdHlwZS5zaWJsaW5ncyA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICByZXR1cm4gdGhpcy5wYXJlbnQoKS5jaGlsZHJlbihzZWxlY3Rvcikubm90KHRoaXMpO1xufTtcblxuXG4vLyBGaW5kIHRoZSBzaXplIG9mIHRoZSBmaXJzdCBtYXRjaGVkIGVsZW1lbnRcbnUucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmZpcnN0KCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59O1xuXG5cbi8vIFtJTlRFUk5BTCBVU0UgT05MWV1cblxuLy8gRm9yY2UgaXQgdG8gYmUgYW4gYXJyYXkgQU5EIGFsc28gaXQgY2xvbmVzIHRoZW1cbi8vIGh0dHA6Ly90b2RkbW90dG8uY29tL2EtY29tcHJlaGVuc2l2ZS1kaXZlLWludG8tbm9kZWxpc3RzLWFycmF5cy1jb252ZXJ0aW5nLW5vZGVsaXN0cy1hbmQtdW5kZXJzdGFuZGluZy10aGUtZG9tL1xudS5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiAocHNldWRvKSB7XG4gIC8vIENoZWNrIHRoYXQgaXQncyBub3QgYSB2YWxpZCBvYmplY3RcbiAgaWYgKCFwc2V1ZG8gfHxcbiAgICAgIHBzZXVkby5sZW5ndGggPT09IDAgfHxcbiAgICAgIHR5cGVvZiBwc2V1ZG8gPT09ICdzdHJpbmcnIHx8XG4gICAgICBwc2V1ZG8udG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJykgcmV0dXJuIFtdO1xuXG4gIC8vIEFjY2VwdCBhbHNvIGEgdSgpIG9iamVjdCAodGhhdCBoYXMgLm5vZGVzKVxuICByZXR1cm4gcHNldWRvLmxlbmd0aCA/IFtdLnNsaWNlLmNhbGwocHNldWRvLm5vZGVzIHx8IHBzZXVkbykgOiBbcHNldWRvXTtcbn07XG5cblxuLy8gW0lOVEVSTkFMIFVTRSBPTkxZXVxuXG4vLyBDcmVhdGUgYSBzdHJpbmcgZnJvbSBkaWZmZXJlbnQgdGhpbmdzXG51LnByb3RvdHlwZS5zdHIgPSBmdW5jdGlvbiAobm9kZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIC8vIENhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgbm9kZXNcbiAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGFyZy5jYWxsKHRoaXMsIG5vZGUsIGkpO1xuICAgIH1cblxuICAgIC8vIEZyb20gYW4gYXJyYXkgb3Igb3RoZXIgJ3dlaXJkJyB0aGluZ3NcbiAgICByZXR1cm4gYXJnLnRvU3RyaW5nKCk7XG4gIH07XG59O1xuXG5cbi8vIFNldCBvciByZXRyaWV2ZSB0aGUgdGV4dCBjb250ZW50IGZyb20gdGhlIG1hdGNoZWQgbm9kZShzKVxudS5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIC8vIE5lZWRzIHRvIGNoZWNrIHVuZGVmaW5lZCBhcyBpdCBtaWdodCBiZSBcIlwiXG4gIGlmICh0ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdGhpcy5maXJzdCgpLnRleHRDb250ZW50IHx8ICcnO1xuICB9XG5cbiAgLy8gSWYgd2UncmUgYXR0ZW1wdGluZyB0byBzZXQgc29tZSB0ZXh0XG4gIC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIG5vZGVzXG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAvLyBTZXQgdGhlIHRleHQgY29udGVudCB0byB0aGUgbm9kZVxuICAgIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICB9KTtcbn07XG5cblxuLy8gQWN0aXZhdGUvZGVhY3RpdmF0ZSBjbGFzc2VzIGluIHRoZSBlbGVtZW50c1xudS5wcm90b3R5cGUudG9nZ2xlQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NlcywgYWRkT3JSZW1vdmUpIHtcbiAgLyoganNoaW50IC1XMDE4ICovXG4gIC8vIENoZWNrIGlmIGFkZE9yUmVtb3ZlIHdhcyBwYXNzZWQgYXMgYSBib29sZWFuXG4gIGlmICghIWFkZE9yUmVtb3ZlID09PSBhZGRPclJlbW92ZSkge1xuICAgIHJldHVybiB0aGlzW2FkZE9yUmVtb3ZlID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKGNsYXNzZXMpO1xuICB9XG4gIC8qIGpzaGludCArVzAxOCAqL1xuXG4gIC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIG5vZGVzIGFuZCBjbGFzc2VzIGNvbWJpbmF0aW9uc1xuICByZXR1cm4gdGhpcy5lYWNoYXJnKGNsYXNzZXMsIGZ1bmN0aW9uIChlbCwgbmFtZSkge1xuICAgIGVsLmNsYXNzTGlzdC50b2dnbGUobmFtZSk7XG4gIH0pO1xufTtcblxuXG4vLyBDYWxsIGFuIGV2ZW50IG1hbnVhbGx5IG9uIGFsbCB0aGUgbm9kZXNcbnUucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbiAoZXZlbnRzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5zbGljZShhcmd1bWVudHMpLnNsaWNlKDEpO1xuXG4gIHJldHVybiB0aGlzLmVhY2hhcmcoZXZlbnRzLCBmdW5jdGlvbiAobm9kZSwgZXZlbnQpIHtcbiAgICB2YXIgZXY7XG5cbiAgICAvLyBBbGxvdyB0aGUgZXZlbnQgdG8gYnViYmxlIHVwIGFuZCB0byBiZSBjYW5jZWxhYmxlIChhcyBkZWZhdWx0KVxuICAgIHZhciBvcHRzID0geyBidWJibGVzOiB0cnVlLCBjYW5jZWxhYmxlOiB0cnVlLCBkZXRhaWw6IGRhdGEgfTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBY2NlcHQgZGlmZmVyZW50IHR5cGVzIG9mIGV2ZW50IG5hbWVzIG9yIGFuIGV2ZW50IGl0c2VsZlxuICAgICAgZXYgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KGV2ZW50LCBvcHRzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBldiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgICAgZXYuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCB0cnVlLCB0cnVlLCBkYXRhKTtcbiAgICB9XG5cbiAgICBub2RlLmRpc3BhdGNoRXZlbnQoZXYpO1xuICB9KTtcbn07XG5cbi8vIFtJTlRFUk5BTCBVU0UgT05MWV1cblxuLy8gUmVtb3ZlZCBkdXBsaWNhdGVkIG5vZGVzLCB1c2VkIGZvciBzb21lIHNwZWNpZmljIG1ldGhvZHNcbnUucHJvdG90eXBlLnVuaXF1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHUodGhpcy5ub2Rlcy5yZWR1Y2UoZnVuY3Rpb24gKGNsZWFuLCBub2RlKSB7XG4gICAgdmFyIGlzdHJ1dGh5ID0gbm9kZSAhPT0gbnVsbCAmJiBub2RlICE9PSB1bmRlZmluZWQgJiYgbm9kZSAhPT0gZmFsc2U7XG4gICAgcmV0dXJuIChpc3RydXRoeSAmJiBjbGVhbi5pbmRleE9mKG5vZGUpID09PSAtMSkgPyBjbGVhbi5jb25jYXQobm9kZSkgOiBjbGVhbjtcbiAgfSwgW10pKTtcbn07XG5cbi8vIFtJTlRFUk5BTCBVU0UgT05MWV1cblxuLy8gRW5jb2RlIHRoZSBkaWZmZXJlbnQgc3RyaW5ncyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9icmV0dHo5LzcxNDc0NThcbnUucHJvdG90eXBlLnVyaSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoLyEvZywgJyUyMScpLnJlcGxhY2UoLycvZywgJyUyNycpLnJlcGxhY2UoL1xcKC9nLCAnJTI4JykucmVwbGFjZSgvXFwpL2csICclMjknKS5yZXBsYWNlKC9cXCovZywgJyUyQScpLnJlcGxhY2UoLyUyMC9nLCAnKycpO1xufTtcblxuXG51LnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gIGZ1bmN0aW9uIGZpbmREZWVwZXN0Tm9kZSAobm9kZSkge1xuICAgIHdoaWxlIChub2RlLmZpcnN0RWxlbWVudENoaWxkKSB7XG4gICAgICBub2RlID0gbm9kZS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdShub2RlKTtcbiAgfVxuICAvLyAxKSBDb25zdHJ1Y3QgZG9tIG5vZGUgZS5nLiB1KCc8YT4nKSxcbiAgLy8gMikgY2xvbmUgdGhlIGN1cnJlbnRseSBtYXRjaGVkIG5vZGVcbiAgLy8gMykgYXBwZW5kIGNsb25lZCBkb20gbm9kZSB0byBjb25zdHJ1Y3RlZCBub2RlIGJhc2VkIG9uIHNlbGVjdG9yXG4gIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiB1KHNlbGVjdG9yKS5lYWNoKGZ1bmN0aW9uIChuKSB7XG4gICAgICBmaW5kRGVlcGVzdE5vZGUobilcbiAgICAgICAgLmFwcGVuZChub2RlLmNsb25lTm9kZSh0cnVlKSk7XG5cbiAgICAgIG5vZGVcbiAgICAgICAgLnBhcmVudE5vZGVcbiAgICAgICAgLnJlcGxhY2VDaGlsZChuLCBub2RlKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG4vLyBFeHBvcnQgaXQgZm9yIHdlYnBhY2tcbmlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAvLyBBdm9pZCBicmVha2luZyBpdCBmb3IgYGltcG9ydCB7IHUgfSBmcm9tIC4uLmAuIEFkZCBgaW1wb3J0IHUgZnJvbSAuLi5gXG4gIG1vZHVsZS5leHBvcnRzID0gdTtcbiAgbW9kdWxlLmV4cG9ydHMudSA9IHU7XG59XG4iLCIvKiogTWFwcyAqKi9cblxudShkb2N1bWVudCkub24oJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcbiAgICBpZiAodSgnI21hcCcpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBtYXBib3hnbC5hY2Nlc3NUb2tlbiA9ICdway5leUoxSWpvaWFtdDFaWE4wWlhKeklpd2lZU0k2SW1OcFp6VXdhREkyYWpOcFpHaDBiR3Q0Y1hFNVpXSXhiVGtpZlEuVXdnSnFwUThRZ18td2tabk9qMHRoQSc7XG5cbiAgICAgICAgLy8gSW5pdCBtYXBcbiAgICAgICAgdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoe1xuICAgICAgICAgICAgY29udGFpbmVyOiAnbWFwJyxcbiAgICAgICAgICAgIHN0eWxlOiAnbWFwYm94Oi8vc3R5bGVzL21hcGJveC9zdHJlZXRzLXYxMCcsXG4gICAgICAgICAgICBzY3JvbGxab29tOiBmYWxzZSxcbiAgICAgICAgICAgIGNlbnRlcjogbWFwQ2VudGVyLFxuICAgICAgICAgICAgem9vbTogbWFwWm9vbVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgbmF2ID0gbmV3IG1hcGJveGdsLk5hdmlnYXRpb25Db250cm9sKCk7XG4gICAgICAgIG1hcC5hZGRDb250cm9sKG5hdiwgJ3RvcC1sZWZ0Jyk7XG4gICAgICAgIG1hcC5hZGRDb250cm9sKG5ldyBtYXBib3hnbC5GdWxsc2NyZWVuQ29udHJvbCgpKTtcblxuICAgICAgICAvLyBBZGQgbWFya2VycyBmcm9tIEdlbyBKU09OXG4gICAgICAgIG1hcEdlb0pzb24uZmVhdHVyZXMuZm9yRWFjaChmdW5jdGlvbiAobWFya2VyKSB7XG4gICAgICAgICAgICB2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgICAgICBpbWcud2lkdGggPSBtYXJrZXIucHJvcGVydGllcy5pY29uU2l6ZVswXTtcbiAgICAgICAgICAgIGltZy5oZWlnaHQgPSBtYXJrZXIucHJvcGVydGllcy5pY29uU2l6ZVsxXTtcbiAgICAgICAgICAgIGltZy5hbHQgPSBtYXJrZXIucHJvcGVydGllcy5tZXNzYWdlO1xuICAgICAgICAgICAgaW1nLnNyYyA9IG1hcE1hcmtlckljb247XG5cbiAgICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZWwuY2xhc3NOYW1lID0gJ21hcmtlcic7XG4gICAgICAgICAgICBlbC5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChpbWcpO1xuXG4gICAgICAgICAgICBuZXcgbWFwYm94Z2wuTWFya2VyKGVsKVxuICAgICAgICAgICAgICAgIC5zZXRMbmdMYXQobWFya2VyLmdlb21ldHJ5LmNvb3JkaW5hdGVzKVxuICAgICAgICAgICAgICAgIC5zZXRQb3B1cChuZXcgbWFwYm94Z2wuUG9wdXAoe29mZnNldDogMjV9KS5zZXRIVE1MKCc8aDU+PGEgaHJlZj1cIicgKyBtYXJrZXIucHJvcGVydGllcy51cmwgKyAnXCI+JyArIG1hcmtlci5wcm9wZXJ0aWVzLnRpdGxlICsgJzwvYT48L2g1PicpKVxuICAgICAgICAgICAgICAgIC5hZGRUbyhtYXApO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vIFJlc2l6ZSBtYXBzIGFmdGVyIFVJa2l0IGhhcyBpbml0aWFsaXplZCBhbGwgY29tcG9uZW50cyAoZS5nLiBlcXVhbCBoZWlnaHRzKVxuICAgICAgICBmdW5jdGlvbiByZXNpemVNYXBXaGVuUmVhZHkoKSB7XG4gICAgICAgICAgICBpZiAoVUlraXQuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgbWFwLnJlc2l6ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHJlc2l6ZU1hcFdoZW5SZWFkeSwgMTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlc2l6ZU1hcFdoZW5SZWFkeSgpO1xuXG4gICAgICAgIC8vIFJlc2l6ZSBtYXAgaW4gc2VhcmNoIHJlc3VsdCB0YWJcbiAgICAgICAgVUlraXQudXRpbC5vbignI3NlYXJjaFJlc3VsdFN3aXRjaGVyID4gbGknLCAnc2hvd24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBtYXAucmVzaXplKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG4vKiogLy8gTWFwcyAqKi9cbiJdfQ==
